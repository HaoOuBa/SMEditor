(function () {
    'use strict';

    // Compressed representation of the Grapheme_Cluster_Break=Extend
    // information from
    // http://www.unicode.org/Public/13.0.0/ucd/auxiliary/GraphemeBreakProperty.txt.
    // Each pair of elements represents a range, as an offet from the
    // previous range and a length. Numbers are in base-36, with the empty
    // string being a shorthand for 1.
    let extend = /*@__PURE__*/"lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map(s => s ? parseInt(s, 36) : 1);
    // Convert offsets into absolute values
    for (let i = 1; i < extend.length; i++)
        extend[i] += extend[i - 1];
    function isExtendingChar(code) {
        for (let i = 1; i < extend.length; i += 2)
            if (extend[i] > code)
                return extend[i - 1] <= code;
        return false;
    }
    function isRegionalIndicator(code) {
        return code >= 0x1F1E6 && code <= 0x1F1FF;
    }
    const ZWJ = 0x200d;
    /**
    Returns a next grapheme cluster break _after_ (not equal to)
    `pos`, if `forward` is true, or before otherwise. Returns `pos`
    itself if no further cluster break is available in the string.
    Moves across surrogate pairs, extending characters, characters
    joined with zero-width joiners, and flag emoji.
    */
    function findClusterBreak(str, pos, forward = true) {
        return (forward ? nextClusterBreak : prevClusterBreak)(str, pos);
    }
    function nextClusterBreak(str, pos) {
        if (pos == str.length)
            return pos;
        // If pos is in the middle of a surrogate pair, move to its start
        if (pos && surrogateLow(str.charCodeAt(pos)) && surrogateHigh(str.charCodeAt(pos - 1)))
            pos--;
        let prev = codePointAt(str, pos);
        pos += codePointSize(prev);
        while (pos < str.length) {
            let next = codePointAt(str, pos);
            if (prev == ZWJ || next == ZWJ || isExtendingChar(next)) {
                pos += codePointSize(next);
                prev = next;
            }
            else if (isRegionalIndicator(next)) {
                let countBefore = 0, i = pos - 2;
                while (i >= 0 && isRegionalIndicator(codePointAt(str, i))) {
                    countBefore++;
                    i -= 2;
                }
                if (countBefore % 2 == 0)
                    break;
                else
                    pos += 2;
            }
            else {
                break;
            }
        }
        return pos;
    }
    function prevClusterBreak(str, pos) {
        while (pos > 0) {
            let found = nextClusterBreak(str, pos - 2);
            if (found < pos)
                return found;
            pos--;
        }
        return 0;
    }
    function surrogateLow(ch) { return ch >= 0xDC00 && ch < 0xE000; }
    function surrogateHigh(ch) { return ch >= 0xD800 && ch < 0xDC00; }
    /**
    Find the code point at the given position in a string (like the
    [`codePointAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt)
    string method).
    */
    function codePointAt(str, pos) {
        let code0 = str.charCodeAt(pos);
        if (!surrogateHigh(code0) || pos + 1 == str.length)
            return code0;
        let code1 = str.charCodeAt(pos + 1);
        if (!surrogateLow(code1))
            return code0;
        return ((code0 - 0xd800) << 10) + (code1 - 0xdc00) + 0x10000;
    }
    /**
    Given a Unicode codepoint, return the JavaScript string that
    respresents it (like
    [`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)).
    */
    function fromCodePoint(code) {
        if (code <= 0xffff)
            return String.fromCharCode(code);
        code -= 0x10000;
        return String.fromCharCode((code >> 10) + 0xd800, (code & 1023) + 0xdc00);
    }
    /**
    The first character that takes up two positions in a JavaScript
    string. It is often useful to compare with this after calling
    `codePointAt`, to figure out whether your character takes up 1 or
    2 index positions.
    */
    function codePointSize(code) { return code < 0x10000 ? 1 : 2; }

    /**
    Count the column position at the given offset into the string,
    taking extending characters and tab size into account.
    */
    function countColumn(string, tabSize, to = string.length) {
        let n = 0;
        for (let i = 0; i < to;) {
            if (string.charCodeAt(i) == 9) {
                n += tabSize - (n % tabSize);
                i++;
            }
            else {
                n++;
                i = findClusterBreak(string, i);
            }
        }
        return n;
    }
    /**
    Find the offset that corresponds to the given column position in a
    string, taking extending characters and tab size into account.
    */
    function findColumn(string, col, tabSize) {
        for (let i = 0, n = 0; i < string.length;) {
            if (n >= col)
                return i;
            n += string.charCodeAt(i) == 9 ? tabSize - (n % tabSize) : 1;
            i = findClusterBreak(string, i);
        }
        return string.length;
    }

    /**
    The data structure for documents.
    */
    class Text {
        /**
        @internal
        */
        constructor() { }
        /**
        Get the line description around the given position.
        */
        lineAt(pos) {
            if (pos < 0 || pos > this.length)
                throw new RangeError(`Invalid position ${pos} in document of length ${this.length}`);
            return this.lineInner(pos, false, 1, 0);
        }
        /**
        Get the description for the given (1-based) line number.
        */
        line(n) {
            if (n < 1 || n > this.lines)
                throw new RangeError(`Invalid line number ${n} in ${this.lines}-line document`);
            return this.lineInner(n, true, 1, 0);
        }
        /**
        Replace a range of the text with the given content.
        */
        replace(from, to, text) {
            let parts = [];
            this.decompose(0, from, parts, 2 /* To */);
            if (text.length)
                text.decompose(0, text.length, parts, 1 /* From */ | 2 /* To */);
            this.decompose(to, this.length, parts, 1 /* From */);
            return TextNode.from(parts, this.length - (to - from) + text.length);
        }
        /**
        Append another document to this one.
        */
        append(other) {
            return this.replace(this.length, this.length, other);
        }
        /**
        Retrieve the text between the given points.
        */
        slice(from, to = this.length) {
            let parts = [];
            this.decompose(from, to, parts, 0);
            return TextNode.from(parts, to - from);
        }
        /**
        Test whether this text is equal to another instance.
        */
        eq(other) {
            if (other == this)
                return true;
            if (other.length != this.length || other.lines != this.lines)
                return false;
            let a = new RawTextCursor(this), b = new RawTextCursor(other);
            for (;;) {
                a.next();
                b.next();
                if (a.lineBreak != b.lineBreak || a.done != b.done || a.value != b.value)
                    return false;
                if (a.done)
                    return true;
            }
        }
        /**
        Iterate over the text. When `dir` is `-1`, iteration happens
        from end to start. This will return lines and the breaks between
        them as separate strings, and for long lines, might split lines
        themselves into multiple chunks as well.
        */
        iter(dir = 1) { return new RawTextCursor(this, dir); }
        /**
        Iterate over a range of the text. When `from` > `to`, the
        iterator will run in reverse.
        */
        iterRange(from, to = this.length) { return new PartialTextCursor(this, from, to); }
        /**
        Return a cursor that iterates over the given range of lines,
        _without_ returning the line breaks between, and yielding empty
        strings for empty lines.
        
        When `from` and `to` are given, they should be 1-based line numbers.
        */
        iterLines(from, to) {
            let inner;
            if (from == null) {
                inner = this.iter();
            }
            else {
                if (to == null)
                    to = this.lines + 1;
                let start = this.line(from).from;
                inner = this.iterRange(start, Math.max(start, to == this.lines + 1 ? this.length : to <= 1 ? 0 : this.line(to - 1).to));
            }
            return new LineCursor(inner);
        }
        /**
        @internal
        */
        toString() { return this.sliceString(0); }
        /**
        Convert the document to an array of lines (which can be
        deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#text.Text^of)).
        */
        toJSON() {
            let lines = [];
            this.flatten(lines);
            return lines;
        }
        /**
        Create a `Text` instance for the given array of lines.
        */
        static of(text) {
            if (text.length == 0)
                throw new RangeError("A document must have at least one line");
            if (text.length == 1 && !text[0])
                return Text.empty;
            return text.length <= 32 /* Branch */ ? new TextLeaf(text) : TextNode.from(TextLeaf.split(text, []));
        }
    }
    if (typeof Symbol != "undefined")
        Text.prototype[Symbol.iterator] = function () { return this.iter(); };
    // Leaves store an array of line strings. There are always line breaks
    // between these strings. Leaves are limited in size and have to be
    // contained in TextNode instances for bigger documents.
    class TextLeaf extends Text {
        constructor(text, length = textLength(text)) {
            super();
            this.text = text;
            this.length = length;
        }
        get lines() { return this.text.length; }
        get children() { return null; }
        lineInner(target, isLine, line, offset) {
            for (let i = 0;; i++) {
                let string = this.text[i], end = offset + string.length;
                if ((isLine ? line : end) >= target)
                    return new Line$1(offset, end, line, string);
                offset = end + 1;
                line++;
            }
        }
        decompose(from, to, target, open) {
            let text = from <= 0 && to >= this.length ? this
                : new TextLeaf(sliceText(this.text, from, to), Math.min(to, this.length) - Math.max(0, from));
            if (open & 1 /* From */) {
                let prev = target.pop();
                let joined = appendText(text.text, prev.text.slice(), 0, text.length);
                if (joined.length <= 32 /* Branch */) {
                    target.push(new TextLeaf(joined, prev.length + text.length));
                }
                else {
                    let mid = joined.length >> 1;
                    target.push(new TextLeaf(joined.slice(0, mid)), new TextLeaf(joined.slice(mid)));
                }
            }
            else {
                target.push(text);
            }
        }
        replace(from, to, text) {
            if (!(text instanceof TextLeaf))
                return super.replace(from, to, text);
            let lines = appendText(this.text, appendText(text.text, sliceText(this.text, 0, from)), to);
            let newLen = this.length + text.length - (to - from);
            if (lines.length <= 32 /* Branch */)
                return new TextLeaf(lines, newLen);
            return TextNode.from(TextLeaf.split(lines, []), newLen);
        }
        sliceString(from, to = this.length, lineSep = "\n") {
            let result = "";
            for (let pos = 0, i = 0; pos <= to && i < this.text.length; i++) {
                let line = this.text[i], end = pos + line.length;
                if (pos > from && i)
                    result += lineSep;
                if (from < end && to > pos)
                    result += line.slice(Math.max(0, from - pos), to - pos);
                pos = end + 1;
            }
            return result;
        }
        flatten(target) {
            for (let line of this.text)
                target.push(line);
        }
        static split(text, target) {
            let part = [], len = -1;
            for (let line of text) {
                part.push(line);
                len += line.length + 1;
                if (part.length == 32 /* Branch */) {
                    target.push(new TextLeaf(part, len));
                    part = [];
                    len = -1;
                }
            }
            if (len > -1)
                target.push(new TextLeaf(part, len));
            return target;
        }
    }
    // Nodes provide the tree structure of the `Text` type. They store a
    // number of other nodes or leaves, taking care to balance themselves
    // on changes. There are implied line breaks _between_ the children of
    // a node (but not before the first or after the last child).
    class TextNode extends Text {
        constructor(children, length) {
            super();
            this.children = children;
            this.length = length;
            this.lines = 0;
            for (let child of children)
                this.lines += child.lines;
        }
        lineInner(target, isLine, line, offset) {
            for (let i = 0;; i++) {
                let child = this.children[i], end = offset + child.length, endLine = line + child.lines - 1;
                if ((isLine ? endLine : end) >= target)
                    return child.lineInner(target, isLine, line, offset);
                offset = end + 1;
                line = endLine + 1;
            }
        }
        decompose(from, to, target, open) {
            for (let i = 0, pos = 0; pos <= to && i < this.children.length; i++) {
                let child = this.children[i], end = pos + child.length;
                if (from <= end && to >= pos) {
                    let childOpen = open & ((pos <= from ? 1 /* From */ : 0) | (end >= to ? 2 /* To */ : 0));
                    if (pos >= from && end <= to && !childOpen)
                        target.push(child);
                    else
                        child.decompose(from - pos, to - pos, target, childOpen);
                }
                pos = end + 1;
            }
        }
        replace(from, to, text) {
            if (text.lines < this.lines)
                for (let i = 0, pos = 0; i < this.children.length; i++) {
                    let child = this.children[i], end = pos + child.length;
                    // Fast path: if the change only affects one child and the
                    // child's size remains in the acceptable range, only update
                    // that child
                    if (from >= pos && to <= end) {
                        let updated = child.replace(from - pos, to - pos, text);
                        let totalLines = this.lines - child.lines + updated.lines;
                        if (updated.lines < (totalLines >> (5 /* BranchShift */ - 1)) &&
                            updated.lines > (totalLines >> (5 /* BranchShift */ + 1))) {
                            let copy = this.children.slice();
                            copy[i] = updated;
                            return new TextNode(copy, this.length - (to - from) + text.length);
                        }
                        return super.replace(pos, end, updated);
                    }
                    pos = end + 1;
                }
            return super.replace(from, to, text);
        }
        sliceString(from, to = this.length, lineSep = "\n") {
            let result = "";
            for (let i = 0, pos = 0; i < this.children.length && pos <= to; i++) {
                let child = this.children[i], end = pos + child.length;
                if (pos > from && i)
                    result += lineSep;
                if (from < end && to > pos)
                    result += child.sliceString(from - pos, to - pos, lineSep);
                pos = end + 1;
            }
            return result;
        }
        flatten(target) {
            for (let child of this.children)
                child.flatten(target);
        }
        static from(children, length = children.reduce((l, ch) => l + ch.length + 1, -1)) {
            let lines = 0;
            for (let ch of children)
                lines += ch.lines;
            if (lines < 32 /* Branch */) {
                let flat = [];
                for (let ch of children)
                    ch.flatten(flat);
                return new TextLeaf(flat, length);
            }
            let chunk = Math.max(32 /* Branch */, lines >> 5 /* BranchShift */), maxChunk = chunk << 1, minChunk = chunk >> 1;
            let chunked = [], currentLines = 0, currentLen = -1, currentChunk = [];
            function add(child) {
                let last;
                if (child.lines > maxChunk && child instanceof TextNode) {
                    for (let node of child.children)
                        add(node);
                }
                else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {
                    flush();
                    chunked.push(child);
                }
                else if (child instanceof TextLeaf && currentLines &&
                    (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf &&
                    child.lines + last.lines <= 32 /* Branch */) {
                    currentLines += child.lines;
                    currentLen += child.length + 1;
                    currentChunk[currentChunk.length - 1] = new TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);
                }
                else {
                    if (currentLines + child.lines > chunk)
                        flush();
                    currentLines += child.lines;
                    currentLen += child.length + 1;
                    currentChunk.push(child);
                }
            }
            function flush() {
                if (currentLines == 0)
                    return;
                chunked.push(currentChunk.length == 1 ? currentChunk[0] : TextNode.from(currentChunk, currentLen));
                currentLen = -1;
                currentLines = currentChunk.length = 0;
            }
            for (let child of children)
                add(child);
            flush();
            return chunked.length == 1 ? chunked[0] : new TextNode(chunked, length);
        }
    }
    Text.empty = /*@__PURE__*/new TextLeaf([""], 0);
    function textLength(text) {
        let length = -1;
        for (let line of text)
            length += line.length + 1;
        return length;
    }
    function appendText(text, target, from = 0, to = 1e9) {
        for (let pos = 0, i = 0, first = true; i < text.length && pos <= to; i++) {
            let line = text[i], end = pos + line.length;
            if (end >= from) {
                if (end > to)
                    line = line.slice(0, to - pos);
                if (pos < from)
                    line = line.slice(from - pos);
                if (first) {
                    target[target.length - 1] += line;
                    first = false;
                }
                else
                    target.push(line);
            }
            pos = end + 1;
        }
        return target;
    }
    function sliceText(text, from, to) {
        return appendText(text, [""], from, to);
    }
    class RawTextCursor {
        constructor(text, dir = 1) {
            this.dir = dir;
            this.done = false;
            this.lineBreak = false;
            this.value = "";
            this.nodes = [text];
            this.offsets = [dir > 0 ? 1 : (text instanceof TextLeaf ? text.text.length : text.children.length) << 1];
        }
        nextInner(skip, dir) {
            this.done = this.lineBreak = false;
            for (;;) {
                let last = this.nodes.length - 1;
                let top = this.nodes[last], offsetValue = this.offsets[last], offset = offsetValue >> 1;
                let size = top instanceof TextLeaf ? top.text.length : top.children.length;
                if (offset == (dir > 0 ? size : 0)) {
                    if (last == 0) {
                        this.done = true;
                        this.value = "";
                        return this;
                    }
                    if (dir > 0)
                        this.offsets[last - 1]++;
                    this.nodes.pop();
                    this.offsets.pop();
                }
                else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {
                    this.offsets[last] += dir;
                    if (skip == 0) {
                        this.lineBreak = true;
                        this.value = "\n";
                        return this;
                    }
                    skip--;
                }
                else if (top instanceof TextLeaf) {
                    // Move to the next string
                    let next = top.text[offset + (dir < 0 ? -1 : 0)];
                    this.offsets[last] += dir;
                    if (next.length > Math.max(0, skip)) {
                        this.value = skip == 0 ? next : dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);
                        return this;
                    }
                    skip -= next.length;
                }
                else {
                    let next = top.children[offset + (dir < 0 ? -1 : 0)];
                    if (skip > next.length) {
                        skip -= next.length;
                        this.offsets[last] += dir;
                    }
                    else {
                        if (dir < 0)
                            this.offsets[last]--;
                        this.nodes.push(next);
                        this.offsets.push(dir > 0 ? 1 : (next instanceof TextLeaf ? next.text.length : next.children.length) << 1);
                    }
                }
            }
        }
        next(skip = 0) {
            if (skip < 0) {
                this.nextInner(-skip, (-this.dir));
                skip = this.value.length;
            }
            return this.nextInner(skip, this.dir);
        }
    }
    class PartialTextCursor {
        constructor(text, start, end) {
            this.value = "";
            this.done = false;
            this.cursor = new RawTextCursor(text, start > end ? -1 : 1);
            this.pos = start > end ? text.length : 0;
            this.from = Math.min(start, end);
            this.to = Math.max(start, end);
        }
        nextInner(skip, dir) {
            if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {
                this.value = "";
                this.done = true;
                return this;
            }
            skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);
            let limit = dir < 0 ? this.pos - this.from : this.to - this.pos;
            if (skip > limit)
                skip = limit;
            limit -= skip;
            let { value } = this.cursor.next(skip);
            this.pos += (value.length + skip) * dir;
            this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);
            this.done = !this.value;
            return this;
        }
        next(skip = 0) {
            if (skip < 0)
                skip = Math.max(skip, this.from - this.pos);
            else if (skip > 0)
                skip = Math.min(skip, this.to - this.pos);
            return this.nextInner(skip, this.cursor.dir);
        }
        get lineBreak() { return this.cursor.lineBreak && this.value != ""; }
    }
    class LineCursor {
        constructor(inner) {
            this.inner = inner;
            this.afterBreak = true;
            this.value = "";
            this.done = false;
        }
        next(skip = 0) {
            let { done, lineBreak, value } = this.inner.next(skip);
            if (done) {
                this.done = true;
                this.value = "";
            }
            else if (lineBreak) {
                if (this.afterBreak) {
                    this.value = "";
                }
                else {
                    this.afterBreak = true;
                    this.next();
                }
            }
            else {
                this.value = value;
                this.afterBreak = false;
            }
            return this;
        }
        get lineBreak() { return false; }
    }
    /**
    This type describes a line in the document. It is created
    on-demand when lines are [queried](https://codemirror.net/6/docs/ref/#text.Text.lineAt).
    */
    class Line$1 {
        /**
        @internal
        */
        constructor(
        /**
        The position of the start of the line.
        */
        from, 
        /**
        The position at the end of the line (_before_ the line break,
        or at the end of document for the last line).
        */
        to, 
        /**
        This line's line number (1-based).
        */
        number, 
        /**
        The line's content.
        */
        text) {
            this.from = from;
            this.to = to;
            this.number = number;
            this.text = text;
        }
        /**
        The length of the line (not including any line break after it).
        */
        get length() { return this.to - this.from; }
    }

    const DefaultSplit = /\r\n?|\n/;
    /**
    Distinguishes different ways in which positions can be mapped.
    */
    var MapMode = /*@__PURE__*/(function (MapMode) {
        /**
        Map a position to a valid new position, even when its context
        was deleted.
        */
        MapMode[MapMode["Simple"] = 0] = "Simple";
        /**
        Return null if deletion happens across the position.
        */
        MapMode[MapMode["TrackDel"] = 1] = "TrackDel";
        /**
        Return null if the character _before_ the position is deleted.
        */
        MapMode[MapMode["TrackBefore"] = 2] = "TrackBefore";
        /**
        Return null if the character _after_ the position is deleted.
        */
        MapMode[MapMode["TrackAfter"] = 3] = "TrackAfter";
    return MapMode})(MapMode || (MapMode = {}));
    /**
    A change description is a variant of [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet)
    that doesn't store the inserted text. As such, it can't be
    applied, but is cheaper to store and manipulate.
    */
    class ChangeDesc {
        // Sections are encoded as pairs of integers. The first is the
        // length in the current document, and the second is -1 for
        // unaffected sections, and the length of the replacement content
        // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
        // 0), and a replacement two positive numbers.
        /**
        @internal
        */
        constructor(
        /**
        @internal
        */
        sections) {
            this.sections = sections;
        }
        /**
        The length of the document before the change.
        */
        get length() {
            let result = 0;
            for (let i = 0; i < this.sections.length; i += 2)
                result += this.sections[i];
            return result;
        }
        /**
        The length of the document after the change.
        */
        get newLength() {
            let result = 0;
            for (let i = 0; i < this.sections.length; i += 2) {
                let ins = this.sections[i + 1];
                result += ins < 0 ? this.sections[i] : ins;
            }
            return result;
        }
        /**
        False when there are actual changes in this set.
        */
        get empty() { return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0; }
        /**
        Iterate over the unchanged parts left by these changes.
        */
        iterGaps(f) {
            for (let i = 0, posA = 0, posB = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++];
                if (ins < 0) {
                    f(posA, posB, len);
                    posB += len;
                }
                else {
                    posB += ins;
                }
                posA += len;
            }
        }
        /**
        Iterate over the ranges changed by these changes. (See
        [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
        variant that also provides you with the inserted text.)
        
        When `individual` is true, adjacent changes (which are kept
        separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
        reported separately.
        */
        iterChangedRanges(f, individual = false) {
            iterChanges(this, f, individual);
        }
        /**
        Get a description of the inverted form of these changes.
        */
        get invertedDesc() {
            let sections = [];
            for (let i = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++];
                if (ins < 0)
                    sections.push(len, ins);
                else
                    sections.push(ins, len);
            }
            return new ChangeDesc(sections);
        }
        /**
        Compute the combined effect of applying another set of changes
        after this one. The length of the document after this set should
        match the length before `other`.
        */
        composeDesc(other) { return this.empty ? other : other.empty ? this : composeSets(this, other); }
        /**
        Map this description, which should start with the same document
        as `other`, over another set of changes, so that it can be
        applied after it. When `before` is true, map as if the changes
        in `other` happened before the ones in `this`.
        */
        mapDesc(other, before = false) { return other.empty ? this : mapSet(this, other, before); }
        mapPos(pos, assoc = -1, mode = MapMode.Simple) {
            let posA = 0, posB = 0;
            for (let i = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++], endA = posA + len;
                if (ins < 0) {
                    if (endA > pos)
                        return posB + (pos - posA);
                    posB += len;
                }
                else {
                    if (mode != MapMode.Simple && endA >= pos &&
                        (mode == MapMode.TrackDel && posA < pos && endA > pos ||
                            mode == MapMode.TrackBefore && posA < pos ||
                            mode == MapMode.TrackAfter && endA > pos))
                        return null;
                    if (endA > pos || endA == pos && assoc < 0 && !len)
                        return pos == posA || assoc < 0 ? posB : posB + ins;
                    posB += ins;
                }
                posA = endA;
            }
            if (pos > posA)
                throw new RangeError(`Position ${pos} is out of range for changeset of length ${posA}`);
            return posB;
        }
        /**
        Check whether these changes touch a given range. When one of the
        changes entirely covers the range, the string `"cover"` is
        returned.
        */
        touchesRange(from, to = from) {
            for (let i = 0, pos = 0; i < this.sections.length && pos <= to;) {
                let len = this.sections[i++], ins = this.sections[i++], end = pos + len;
                if (ins >= 0 && pos <= to && end >= from)
                    return pos < from && end > to ? "cover" : true;
                pos = end;
            }
            return false;
        }
        /**
        @internal
        */
        toString() {
            let result = "";
            for (let i = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++];
                result += (result ? " " : "") + len + (ins >= 0 ? ":" + ins : "");
            }
            return result;
        }
        /**
        Serialize this change desc to a JSON-representable value.
        */
        toJSON() { return this.sections; }
        /**
        Create a change desc from its JSON representation (as produced
        by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
        */
        static fromJSON(json) {
            if (!Array.isArray(json) || json.length % 2 || json.some(a => typeof a != "number"))
                throw new RangeError("Invalid JSON representation of ChangeDesc");
            return new ChangeDesc(json);
        }
    }
    /**
    A change set represents a group of modifications to a document. It
    stores the document length, and can only be applied to documents
    with exactly that length.
    */
    class ChangeSet extends ChangeDesc {
        /**
        @internal
        */
        constructor(sections, 
        /**
        @internal
        */
        inserted) {
            super(sections);
            this.inserted = inserted;
        }
        /**
        Apply the changes to a document, returning the modified
        document.
        */
        apply(doc) {
            if (this.length != doc.length)
                throw new RangeError("Applying change set to a document with the wrong length");
            iterChanges(this, (fromA, toA, fromB, _toB, text) => doc = doc.replace(fromB, fromB + (toA - fromA), text), false);
            return doc;
        }
        mapDesc(other, before = false) { return mapSet(this, other, before, true); }
        /**
        Given the document as it existed _before_ the changes, return a
        change set that represents the inverse of this set, which could
        be used to go from the document created by the changes back to
        the document as it existed before the changes.
        */
        invert(doc) {
            let sections = this.sections.slice(), inserted = [];
            for (let i = 0, pos = 0; i < sections.length; i += 2) {
                let len = sections[i], ins = sections[i + 1];
                if (ins >= 0) {
                    sections[i] = ins;
                    sections[i + 1] = len;
                    let index = i >> 1;
                    while (inserted.length < index)
                        inserted.push(Text.empty);
                    inserted.push(len ? doc.slice(pos, pos + len) : Text.empty);
                }
                pos += len;
            }
            return new ChangeSet(sections, inserted);
        }
        /**
        Combine two subsequent change sets into a single set. `other`
        must start in the document produced by `this`. If `this` goes
        `docA` → `docB` and `other` represents `docB` → `docC`, the
        returned value will represent the change `docA` → `docC`.
        */
        compose(other) { return this.empty ? other : other.empty ? this : composeSets(this, other, true); }
        /**
        Given another change set starting in the same document, maps this
        change set over the other, producing a new change set that can be
        applied to the document produced by applying `other`. When
        `before` is `true`, order changes as if `this` comes before
        `other`, otherwise (the default) treat `other` as coming first.
        
        Given two changes `A` and `B`, `A.compose(B.map(A))` and
        `B.compose(A.map(B, true))` will produce the same document. This
        provides a basic form of [operational
        transformation](https://en.wikipedia.org/wiki/Operational_transformation),
        and can be used for collaborative editing.
        */
        map(other, before = false) { return other.empty ? this : mapSet(this, other, before, true); }
        /**
        Iterate over the changed ranges in the document, calling `f` for
        each.
        
        When `individual` is true, adjacent changes are reported
        separately.
        */
        iterChanges(f, individual = false) {
            iterChanges(this, f, individual);
        }
        /**
        Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
        set.
        */
        get desc() { return new ChangeDesc(this.sections); }
        /**
        @internal
        */
        filter(ranges) {
            let resultSections = [], resultInserted = [], filteredSections = [];
            let iter = new SectionIter(this);
            done: for (let i = 0, pos = 0;;) {
                let next = i == ranges.length ? 1e9 : ranges[i++];
                while (pos < next || pos == next && iter.len == 0) {
                    if (iter.done)
                        break done;
                    let len = Math.min(iter.len, next - pos);
                    addSection(filteredSections, len, -1);
                    let ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;
                    addSection(resultSections, len, ins);
                    if (ins > 0)
                        addInsert(resultInserted, resultSections, iter.text);
                    iter.forward(len);
                    pos += len;
                }
                let end = ranges[i++];
                while (pos < end) {
                    if (iter.done)
                        break done;
                    let len = Math.min(iter.len, end - pos);
                    addSection(resultSections, len, -1);
                    addSection(filteredSections, len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);
                    iter.forward(len);
                    pos += len;
                }
            }
            return { changes: new ChangeSet(resultSections, resultInserted),
                filtered: new ChangeDesc(filteredSections) };
        }
        /**
        Serialize this change set to a JSON-representable value.
        */
        toJSON() {
            let parts = [];
            for (let i = 0; i < this.sections.length; i += 2) {
                let len = this.sections[i], ins = this.sections[i + 1];
                if (ins < 0)
                    parts.push(len);
                else if (ins == 0)
                    parts.push([len]);
                else
                    parts.push([len].concat(this.inserted[i >> 1].toJSON()));
            }
            return parts;
        }
        /**
        Create a change set for the given changes, for a document of the
        given length, using `lineSep` as line separator.
        */
        static of(changes, length, lineSep) {
            let sections = [], inserted = [], pos = 0;
            let total = null;
            function flush(force = false) {
                if (!force && !sections.length)
                    return;
                if (pos < length)
                    addSection(sections, length - pos, -1);
                let set = new ChangeSet(sections, inserted);
                total = total ? total.compose(set.map(total)) : set;
                sections = [];
                inserted = [];
                pos = 0;
            }
            function process(spec) {
                if (Array.isArray(spec)) {
                    for (let sub of spec)
                        process(sub);
                }
                else if (spec instanceof ChangeSet) {
                    if (spec.length != length)
                        throw new RangeError(`Mismatched change set length (got ${spec.length}, expected ${length})`);
                    flush();
                    total = total ? total.compose(spec.map(total)) : spec;
                }
                else {
                    let { from, to = from, insert } = spec;
                    if (from > to || from < 0 || to > length)
                        throw new RangeError(`Invalid change range ${from} to ${to} (in doc of length ${length})`);
                    let insText = !insert ? Text.empty : typeof insert == "string" ? Text.of(insert.split(lineSep || DefaultSplit)) : insert;
                    let insLen = insText.length;
                    if (from == to && insLen == 0)
                        return;
                    if (from < pos)
                        flush();
                    if (from > pos)
                        addSection(sections, from - pos, -1);
                    addSection(sections, to - from, insLen);
                    addInsert(inserted, sections, insText);
                    pos = to;
                }
            }
            process(changes);
            flush(!total);
            return total;
        }
        /**
        Create an empty changeset of the given length.
        */
        static empty(length) {
            return new ChangeSet(length ? [length, -1] : [], []);
        }
        /**
        Create a changeset from its JSON representation (as produced by
        [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
        */
        static fromJSON(json) {
            if (!Array.isArray(json))
                throw new RangeError("Invalid JSON representation of ChangeSet");
            let sections = [], inserted = [];
            for (let i = 0; i < json.length; i++) {
                let part = json[i];
                if (typeof part == "number") {
                    sections.push(part, -1);
                }
                else if (!Array.isArray(part) || typeof part[0] != "number" || part.some((e, i) => i && typeof e != "string")) {
                    throw new RangeError("Invalid JSON representation of ChangeSet");
                }
                else if (part.length == 1) {
                    sections.push(part[0], 0);
                }
                else {
                    while (inserted.length < i)
                        inserted.push(Text.empty);
                    inserted[i] = Text.of(part.slice(1));
                    sections.push(part[0], inserted[i].length);
                }
            }
            return new ChangeSet(sections, inserted);
        }
    }
    function addSection(sections, len, ins, forceJoin = false) {
        if (len == 0 && ins <= 0)
            return;
        let last = sections.length - 2;
        if (last >= 0 && ins <= 0 && ins == sections[last + 1])
            sections[last] += len;
        else if (len == 0 && sections[last] == 0)
            sections[last + 1] += ins;
        else if (forceJoin) {
            sections[last] += len;
            sections[last + 1] += ins;
        }
        else
            sections.push(len, ins);
    }
    function addInsert(values, sections, value) {
        if (value.length == 0)
            return;
        let index = (sections.length - 2) >> 1;
        if (index < values.length) {
            values[values.length - 1] = values[values.length - 1].append(value);
        }
        else {
            while (values.length < index)
                values.push(Text.empty);
            values.push(value);
        }
    }
    function iterChanges(desc, f, individual) {
        let inserted = desc.inserted;
        for (let posA = 0, posB = 0, i = 0; i < desc.sections.length;) {
            let len = desc.sections[i++], ins = desc.sections[i++];
            if (ins < 0) {
                posA += len;
                posB += len;
            }
            else {
                let endA = posA, endB = posB, text = Text.empty;
                for (;;) {
                    endA += len;
                    endB += ins;
                    if (ins && inserted)
                        text = text.append(inserted[(i - 2) >> 1]);
                    if (individual || i == desc.sections.length || desc.sections[i + 1] < 0)
                        break;
                    len = desc.sections[i++];
                    ins = desc.sections[i++];
                }
                f(posA, endA, posB, endB, text);
                posA = endA;
                posB = endB;
            }
        }
    }
    function mapSet(setA, setB, before, mkSet = false) {
        let sections = [], insert = mkSet ? [] : null;
        let a = new SectionIter(setA), b = new SectionIter(setB);
        for (let posA = 0, posB = 0;;) {
            if (a.ins == -1) {
                posA += a.len;
                a.next();
            }
            else if (b.ins == -1 && posB < posA) {
                let skip = Math.min(b.len, posA - posB);
                b.forward(skip);
                addSection(sections, skip, -1);
                posB += skip;
            }
            else if (b.ins >= 0 && (a.done || posB < posA || posB == posA && (b.len < a.len || b.len == a.len && !before))) {
                addSection(sections, b.ins, -1);
                while (posA > posB && !a.done && posA + a.len < posB + b.len) {
                    posA += a.len;
                    a.next();
                }
                posB += b.len;
                b.next();
            }
            else if (a.ins >= 0) {
                let len = 0, end = posA + a.len;
                for (;;) {
                    if (b.ins >= 0 && posB > posA && posB + b.len < end) {
                        len += b.ins;
                        posB += b.len;
                        b.next();
                    }
                    else if (b.ins == -1 && posB < end) {
                        let skip = Math.min(b.len, end - posB);
                        len += skip;
                        b.forward(skip);
                        posB += skip;
                    }
                    else {
                        break;
                    }
                }
                addSection(sections, len, a.ins);
                if (insert)
                    addInsert(insert, sections, a.text);
                posA = end;
                a.next();
            }
            else if (a.done && b.done) {
                return insert ? new ChangeSet(sections, insert) : new ChangeDesc(sections);
            }
            else {
                throw new Error("Mismatched change set lengths");
            }
        }
    }
    function composeSets(setA, setB, mkSet = false) {
        let sections = [];
        let insert = mkSet ? [] : null;
        let a = new SectionIter(setA), b = new SectionIter(setB);
        for (let open = false;;) {
            if (a.done && b.done) {
                return insert ? new ChangeSet(sections, insert) : new ChangeDesc(sections);
            }
            else if (a.ins == 0) { // Deletion in A
                addSection(sections, a.len, 0, open);
                a.next();
            }
            else if (b.len == 0 && !b.done) { // Insertion in B
                addSection(sections, 0, b.ins, open);
                if (insert)
                    addInsert(insert, sections, b.text);
                b.next();
            }
            else if (a.done || b.done) {
                throw new Error("Mismatched change set lengths");
            }
            else {
                let len = Math.min(a.len2, b.len), sectionLen = sections.length;
                if (a.ins == -1) {
                    let insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;
                    addSection(sections, len, insB, open);
                    if (insert && insB)
                        addInsert(insert, sections, b.text);
                }
                else if (b.ins == -1) {
                    addSection(sections, a.off ? 0 : a.len, len, open);
                    if (insert)
                        addInsert(insert, sections, a.textBit(len));
                }
                else {
                    addSection(sections, a.off ? 0 : a.len, b.off ? 0 : b.ins, open);
                    if (insert && !b.off)
                        addInsert(insert, sections, b.text);
                }
                open = (a.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);
                a.forward2(len);
                b.forward(len);
            }
        }
    }
    class SectionIter {
        constructor(set) {
            this.set = set;
            this.i = 0;
            this.next();
        }
        next() {
            let { sections } = this.set;
            if (this.i < sections.length) {
                this.len = sections[this.i++];
                this.ins = sections[this.i++];
            }
            else {
                this.len = 0;
                this.ins = -2;
            }
            this.off = 0;
        }
        get done() { return this.ins == -2; }
        get len2() { return this.ins < 0 ? this.len : this.ins; }
        get text() {
            let { inserted } = this.set, index = (this.i - 2) >> 1;
            return index >= inserted.length ? Text.empty : inserted[index];
        }
        textBit(len) {
            let { inserted } = this.set, index = (this.i - 2) >> 1;
            return index >= inserted.length && !len ? Text.empty
                : inserted[index].slice(this.off, len == null ? undefined : this.off + len);
        }
        forward(len) {
            if (len == this.len)
                this.next();
            else {
                this.len -= len;
                this.off += len;
            }
        }
        forward2(len) {
            if (this.ins == -1)
                this.forward(len);
            else if (len == this.ins)
                this.next();
            else {
                this.ins -= len;
                this.off += len;
            }
        }
    }

    /**
    A single selection range. When
    [`allowMultipleSelections`](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)
    is enabled, a [selection](https://codemirror.net/6/docs/ref/#state.EditorSelection) may hold
    multiple ranges. By default, selections hold exactly one range.
    */
    class SelectionRange {
        /**
        @internal
        */
        constructor(
        /**
        The lower boundary of the range.
        */
        from, 
        /**
        The upper boundary of the range.
        */
        to, flags) {
            this.from = from;
            this.to = to;
            this.flags = flags;
        }
        /**
        The anchor of the range—the side that doesn't move when you
        extend it.
        */
        get anchor() { return this.flags & 16 /* Inverted */ ? this.to : this.from; }
        /**
        The head of the range, which is moved when the range is
        [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
        */
        get head() { return this.flags & 16 /* Inverted */ ? this.from : this.to; }
        /**
        True when `anchor` and `head` are at the same position.
        */
        get empty() { return this.from == this.to; }
        /**
        If this is a cursor that is explicitly associated with the
        character on one of its sides, this returns the side. -1 means
        the character before its position, 1 the character after, and 0
        means no association.
        */
        get assoc() { return this.flags & 4 /* AssocBefore */ ? -1 : this.flags & 8 /* AssocAfter */ ? 1 : 0; }
        /**
        The bidirectional text level associated with this cursor, if
        any.
        */
        get bidiLevel() {
            let level = this.flags & 3 /* BidiLevelMask */;
            return level == 3 ? null : level;
        }
        /**
        The goal column (stored vertical offset) associated with a
        cursor. This is used to preserve the vertical position when
        [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
        lines of different length.
        */
        get goalColumn() {
            let value = this.flags >> 5 /* GoalColumnOffset */;
            return value == 33554431 /* NoGoalColumn */ ? undefined : value;
        }
        /**
        Map this range through a change, producing a valid range in the
        updated document.
        */
        map(change, assoc = -1) {
            let from = change.mapPos(this.from, assoc), to = change.mapPos(this.to, assoc);
            return from == this.from && to == this.to ? this : new SelectionRange(from, to, this.flags);
        }
        /**
        Extend this range to cover at least `from` to `to`.
        */
        extend(from, to = from) {
            if (from <= this.anchor && to >= this.anchor)
                return EditorSelection.range(from, to);
            let head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;
            return EditorSelection.range(this.anchor, head);
        }
        /**
        Compare this range to another range.
        */
        eq(other) {
            return this.anchor == other.anchor && this.head == other.head;
        }
        /**
        Return a JSON-serializable object representing the range.
        */
        toJSON() { return { anchor: this.anchor, head: this.head }; }
        /**
        Convert a JSON representation of a range to a `SelectionRange`
        instance.
        */
        static fromJSON(json) {
            if (!json || typeof json.anchor != "number" || typeof json.head != "number")
                throw new RangeError("Invalid JSON representation for SelectionRange");
            return EditorSelection.range(json.anchor, json.head);
        }
    }
    /**
    An editor selection holds one or more selection ranges.
    */
    class EditorSelection {
        /**
        @internal
        */
        constructor(
        /**
        The ranges in the selection, sorted by position. Ranges cannot
        overlap (but they may touch, if they aren't empty).
        */
        ranges, 
        /**
        The index of the _main_ range in the selection (which is
        usually the range that was added last).
        */
        mainIndex = 0) {
            this.ranges = ranges;
            this.mainIndex = mainIndex;
        }
        /**
        Map a selection through a change. Used to adjust the selection
        position for changes.
        */
        map(change, assoc = -1) {
            if (change.empty)
                return this;
            return EditorSelection.create(this.ranges.map(r => r.map(change, assoc)), this.mainIndex);
        }
        /**
        Compare this selection to another selection.
        */
        eq(other) {
            if (this.ranges.length != other.ranges.length ||
                this.mainIndex != other.mainIndex)
                return false;
            for (let i = 0; i < this.ranges.length; i++)
                if (!this.ranges[i].eq(other.ranges[i]))
                    return false;
            return true;
        }
        /**
        Get the primary selection range. Usually, you should make sure
        your code applies to _all_ ranges, by using methods like
        [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
        */
        get main() { return this.ranges[this.mainIndex]; }
        /**
        Make sure the selection only has one range. Returns a selection
        holding only the main range from this selection.
        */
        asSingle() {
            return this.ranges.length == 1 ? this : new EditorSelection([this.main]);
        }
        /**
        Extend this selection with an extra range.
        */
        addRange(range, main = true) {
            return EditorSelection.create([range].concat(this.ranges), main ? 0 : this.mainIndex + 1);
        }
        /**
        Replace a given range with another range, and then normalize the
        selection to merge and sort ranges if necessary.
        */
        replaceRange(range, which = this.mainIndex) {
            let ranges = this.ranges.slice();
            ranges[which] = range;
            return EditorSelection.create(ranges, this.mainIndex);
        }
        /**
        Convert this selection to an object that can be serialized to
        JSON.
        */
        toJSON() {
            return { ranges: this.ranges.map(r => r.toJSON()), main: this.mainIndex };
        }
        /**
        Create a selection from a JSON representation.
        */
        static fromJSON(json) {
            if (!json || !Array.isArray(json.ranges) || typeof json.main != "number" || json.main >= json.ranges.length)
                throw new RangeError("Invalid JSON representation for EditorSelection");
            return new EditorSelection(json.ranges.map((r) => SelectionRange.fromJSON(r)), json.main);
        }
        /**
        Create a selection holding a single range.
        */
        static single(anchor, head = anchor) {
            return new EditorSelection([EditorSelection.range(anchor, head)], 0);
        }
        /**
        Sort and merge the given set of ranges, creating a valid
        selection.
        */
        static create(ranges, mainIndex = 0) {
            if (ranges.length == 0)
                throw new RangeError("A selection needs at least one range");
            for (let pos = 0, i = 0; i < ranges.length; i++) {
                let range = ranges[i];
                if (range.empty ? range.from <= pos : range.from < pos)
                    return normalized(ranges.slice(), mainIndex);
                pos = range.to;
            }
            return new EditorSelection(ranges, mainIndex);
        }
        /**
        Create a cursor selection range at the given position. You can
        safely ignore the optional arguments in most situations.
        */
        static cursor(pos, assoc = 0, bidiLevel, goalColumn) {
            return new SelectionRange(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 4 /* AssocBefore */ : 8 /* AssocAfter */) |
                (bidiLevel == null ? 3 : Math.min(2, bidiLevel)) |
                ((goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431 /* NoGoalColumn */) << 5 /* GoalColumnOffset */));
        }
        /**
        Create a selection range.
        */
        static range(anchor, head, goalColumn) {
            let goal = (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431 /* NoGoalColumn */) << 5 /* GoalColumnOffset */;
            return head < anchor ? new SelectionRange(head, anchor, 16 /* Inverted */ | goal) : new SelectionRange(anchor, head, goal);
        }
    }
    function normalized(ranges, mainIndex = 0) {
        let main = ranges[mainIndex];
        ranges.sort((a, b) => a.from - b.from);
        mainIndex = ranges.indexOf(main);
        for (let i = 1; i < ranges.length; i++) {
            let range = ranges[i], prev = ranges[i - 1];
            if (range.empty ? range.from <= prev.to : range.from < prev.to) {
                let from = prev.from, to = Math.max(range.to, prev.to);
                if (i <= mainIndex)
                    mainIndex--;
                ranges.splice(--i, 2, range.anchor > range.head ? EditorSelection.range(to, from) : EditorSelection.range(from, to));
            }
        }
        return new EditorSelection(ranges, mainIndex);
    }
    function checkSelection(selection, docLength) {
        for (let range of selection.ranges)
            if (range.to > docLength)
                throw new RangeError("Selection points outside of document");
    }

    let nextID = 0;
    /**
    A facet is a labeled value that is associated with an editor
    state. It takes inputs from any number of extensions, and combines
    those into a single output value.

    Examples of facets are the [theme](https://codemirror.net/6/docs/ref/#view.EditorView^theme) styles
    associated with an editor or the [tab
    size](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) (which is reduced to a single
    value, using the input with the hightest precedence).
    */
    class Facet {
        constructor(
        /**
        @internal
        */
        combine, 
        /**
        @internal
        */
        compareInput, 
        /**
        @internal
        */
        compare, isStatic, 
        /**
        @internal
        */
        extensions) {
            this.combine = combine;
            this.compareInput = compareInput;
            this.compare = compare;
            this.isStatic = isStatic;
            this.extensions = extensions;
            /**
            @internal
            */
            this.id = nextID++;
            this.default = combine([]);
        }
        /**
        Define a new facet.
        */
        static define(config = {}) {
            return new Facet(config.combine || ((a) => a), config.compareInput || ((a, b) => a === b), config.compare || (!config.combine ? sameArray$1 : (a, b) => a === b), !!config.static, config.enables);
        }
        /**
        Returns an extension that adds the given value for this facet.
        */
        of(value) {
            return new FacetProvider([], this, 0 /* Static */, value);
        }
        /**
        Create an extension that computes a value for the facet from a
        state. You must take care to declare the parts of the state that
        this value depends on, since your function is only called again
        for a new state when one of those parts changed.
        
        In most cases, you'll want to use the
        [`provide`](https://codemirror.net/6/docs/ref/#state.StateField^define^config.provide) option when
        defining a field instead.
        */
        compute(deps, get) {
            if (this.isStatic)
                throw new Error("Can't compute a static facet");
            return new FacetProvider(deps, this, 1 /* Single */, get);
        }
        /**
        Create an extension that computes zero or more values for this
        facet from a state.
        */
        computeN(deps, get) {
            if (this.isStatic)
                throw new Error("Can't compute a static facet");
            return new FacetProvider(deps, this, 2 /* Multi */, get);
        }
        from(field, get) {
            if (!get)
                get = x => x;
            return this.compute([field], state => get(state.field(field)));
        }
    }
    function sameArray$1(a, b) {
        return a == b || a.length == b.length && a.every((e, i) => e === b[i]);
    }
    class FacetProvider {
        constructor(dependencies, facet, type, value) {
            this.dependencies = dependencies;
            this.facet = facet;
            this.type = type;
            this.value = value;
            this.id = nextID++;
        }
        dynamicSlot(addresses) {
            var _a;
            let getter = this.value;
            let compare = this.facet.compareInput;
            let idx = addresses[this.id] >> 1, multi = this.type == 2 /* Multi */;
            let depDoc = false, depSel = false, depAddrs = [];
            for (let dep of this.dependencies) {
                if (dep == "doc")
                    depDoc = true;
                else if (dep == "selection")
                    depSel = true;
                else if ((((_a = addresses[dep.id]) !== null && _a !== void 0 ? _a : 1) & 1) == 0)
                    depAddrs.push(addresses[dep.id]);
            }
            return (state, tr) => {
                if (!tr || tr.reconfigured) {
                    state.values[idx] = getter(state);
                    return 1 /* Changed */;
                }
                else {
                    let depChanged = (depDoc && tr.docChanged) || (depSel && (tr.docChanged || tr.selection)) ||
                        depAddrs.some(addr => (ensureAddr(state, addr) & 1 /* Changed */) > 0);
                    if (!depChanged)
                        return 0;
                    let newVal = getter(state), oldVal = tr.startState.values[idx];
                    if (multi ? compareArray(newVal, oldVal, compare) : compare(newVal, oldVal))
                        return 0;
                    state.values[idx] = newVal;
                    return 1 /* Changed */;
                }
            };
        }
    }
    function compareArray(a, b, compare) {
        if (a.length != b.length)
            return false;
        for (let i = 0; i < a.length; i++)
            if (!compare(a[i], b[i]))
                return false;
        return true;
    }
    function dynamicFacetSlot(addresses, facet, providers) {
        let providerAddrs = providers.map(p => addresses[p.id]);
        let providerTypes = providers.map(p => p.type);
        let dynamic = providerAddrs.filter(p => !(p & 1));
        let idx = addresses[facet.id] >> 1;
        return (state, tr) => {
            let oldAddr = !tr ? null : tr.reconfigured ? tr.startState.config.address[facet.id] : idx << 1;
            let changed = oldAddr == null;
            for (let dynAddr of dynamic) {
                if (ensureAddr(state, dynAddr) & 1 /* Changed */)
                    changed = true;
            }
            if (!changed)
                return 0;
            let values = [];
            for (let i = 0; i < providerAddrs.length; i++) {
                let value = getAddr(state, providerAddrs[i]);
                if (providerTypes[i] == 2 /* Multi */)
                    for (let val of value)
                        values.push(val);
                else
                    values.push(value);
            }
            let newVal = facet.combine(values);
            if (oldAddr != null && facet.compare(newVal, getAddr(tr.startState, oldAddr)))
                return 0;
            state.values[idx] = newVal;
            return 1 /* Changed */;
        };
    }
    function maybeIndex(state, id) {
        let found = state.config.address[id];
        return found == null ? null : found >> 1;
    }
    const initField = /*@__PURE__*/Facet.define({ static: true });
    /**
    Fields can store additional information in an editor state, and
    keep it in sync with the rest of the state.
    */
    class StateField {
        constructor(
        /**
        @internal
        */
        id, createF, updateF, compareF, 
        /**
        @internal
        */
        spec) {
            this.id = id;
            this.createF = createF;
            this.updateF = updateF;
            this.compareF = compareF;
            this.spec = spec;
            /**
            @internal
            */
            this.provides = undefined;
        }
        /**
        Define a state field.
        */
        static define(config) {
            let field = new StateField(nextID++, config.create, config.update, config.compare || ((a, b) => a === b), config);
            if (config.provide)
                field.provides = config.provide(field);
            return field;
        }
        create(state) {
            let init = state.facet(initField).find(i => i.field == this);
            return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);
        }
        /**
        @internal
        */
        slot(addresses) {
            let idx = addresses[this.id] >> 1;
            return (state, tr) => {
                if (!tr || (tr.reconfigured && maybeIndex(tr.startState, this.id) == null)) {
                    state.values[idx] = this.create(state);
                    return 1 /* Changed */;
                }
                let oldVal, changed = 0;
                if (tr.reconfigured) {
                    oldVal = tr.startState.values[maybeIndex(tr.startState, this.id)];
                    changed = 1 /* Changed */;
                }
                else {
                    oldVal = tr.startState.values[idx];
                }
                let value = this.updateF(oldVal, tr);
                if (!changed && !this.compareF(oldVal, value))
                    changed = 1 /* Changed */;
                if (changed)
                    state.values[idx] = value;
                return changed;
            };
        }
        /**
        Returns an extension that enables this field and overrides the
        way it is initialized. Can be useful when you need to provide a
        non-default starting value for the field.
        */
        init(create) {
            return [this, initField.of({ field: this, create })];
        }
        /**
        State field instances can be used as
        [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
        given state.
        */
        get extension() { return this; }
    }
    const Prec_ = { fallback: 3, default: 2, extend: 1, override: 0 };
    function prec(value) {
        return (ext) => new PrecExtension(ext, value);
    }
    /**
    By default extensions are registered in the order they are found
    in the flattened form of nested array that was provided.
    Individual extension values can be assigned a precedence to
    override this. Extensions that do not have a precedence set get
    the precedence of the nearest parent with a precedence, or
    [`default`](https://codemirror.net/6/docs/ref/#state.Prec.default) if there is no such parent. The
    final ordering of extensions is determined by first sorting by
    precedence and then by order within each precedence.
    */
    const Prec = {
        /**
        A precedence below the default precedence, which will cause
        default-precedence extensions to override it even if they are
        specified later in the extension ordering.
        */
        fallback: /*@__PURE__*/prec(Prec_.fallback),
        /**
        The regular default precedence.
        */
        default: /*@__PURE__*/prec(Prec_.default),
        /**
        A higher-than-default precedence.
        */
        extend: /*@__PURE__*/prec(Prec_.extend),
        /**
        Precedence above the `default` and `extend` precedences.
        */
        override: /*@__PURE__*/prec(Prec_.override)
    };
    class PrecExtension {
        constructor(inner, prec) {
            this.inner = inner;
            this.prec = prec;
        }
    }
    /**
    Extension compartments can be used to make a configuration
    dynamic. By [wrapping](https://codemirror.net/6/docs/ref/#state.Compartment.of) part of your
    configuration in a compartment, you can later
    [replace](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure) that part through a
    transaction.
    */
    class Compartment {
        /**
        Create an instance of this compartment to add to your [state
        configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
        */
        of(ext) { return new CompartmentInstance(this, ext); }
        /**
        Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
        reconfigures this compartment.
        */
        reconfigure(content) {
            return Compartment.reconfigure.of({ compartment: this, extension: content });
        }
        /**
        Get the current content of the compartment in the state, or
        `undefined` if it isn't present.
        */
        get(state) {
            return state.config.compartments.get(this);
        }
    }
    class CompartmentInstance {
        constructor(compartment, inner) {
            this.compartment = compartment;
            this.inner = inner;
        }
    }
    class Configuration {
        constructor(base, compartments, dynamicSlots, address, staticValues) {
            this.base = base;
            this.compartments = compartments;
            this.dynamicSlots = dynamicSlots;
            this.address = address;
            this.staticValues = staticValues;
            this.statusTemplate = [];
            while (this.statusTemplate.length < dynamicSlots.length)
                this.statusTemplate.push(0 /* Uninitialized */);
        }
        staticFacet(facet) {
            let addr = this.address[facet.id];
            return addr == null ? facet.default : this.staticValues[addr >> 1];
        }
        static resolve(base, compartments, oldState) {
            let fields = [];
            let facets = Object.create(null);
            let newCompartments = new Map();
            for (let ext of flatten(base, compartments, newCompartments)) {
                if (ext instanceof StateField)
                    fields.push(ext);
                else
                    (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);
            }
            let address = Object.create(null);
            let staticValues = [];
            let dynamicSlots = [];
            for (let field of fields) {
                address[field.id] = dynamicSlots.length << 1;
                dynamicSlots.push(a => field.slot(a));
            }
            for (let id in facets) {
                let providers = facets[id], facet = providers[0].facet;
                if (providers.every(p => p.type == 0 /* Static */)) {
                    address[facet.id] = (staticValues.length << 1) | 1;
                    let value = facet.combine(providers.map(p => p.value));
                    let oldAddr = oldState ? oldState.config.address[facet.id] : null;
                    if (oldAddr != null) {
                        let oldVal = getAddr(oldState, oldAddr);
                        if (facet.compare(value, oldVal))
                            value = oldVal;
                    }
                    staticValues.push(value);
                }
                else {
                    for (let p of providers) {
                        if (p.type == 0 /* Static */) {
                            address[p.id] = (staticValues.length << 1) | 1;
                            staticValues.push(p.value);
                        }
                        else {
                            address[p.id] = dynamicSlots.length << 1;
                            dynamicSlots.push(a => p.dynamicSlot(a));
                        }
                    }
                    address[facet.id] = dynamicSlots.length << 1;
                    dynamicSlots.push(a => dynamicFacetSlot(a, facet, providers));
                }
            }
            return new Configuration(base, newCompartments, dynamicSlots.map(f => f(address)), address, staticValues);
        }
    }
    function flatten(extension, compartments, newCompartments) {
        let result = [[], [], [], []];
        let seen = new Map();
        function inner(ext, prec) {
            let known = seen.get(ext);
            if (known != null) {
                if (known >= prec)
                    return;
                let found = result[known].indexOf(ext);
                if (found > -1)
                    result[known].splice(found, 1);
                if (ext instanceof CompartmentInstance)
                    newCompartments.delete(ext.compartment);
            }
            seen.set(ext, prec);
            if (Array.isArray(ext)) {
                for (let e of ext)
                    inner(e, prec);
            }
            else if (ext instanceof CompartmentInstance) {
                if (newCompartments.has(ext.compartment))
                    throw new RangeError(`Duplicate use of compartment in extensions`);
                let content = compartments.get(ext.compartment) || ext.inner;
                newCompartments.set(ext.compartment, content);
                inner(content, prec);
            }
            else if (ext instanceof PrecExtension) {
                inner(ext.inner, ext.prec);
            }
            else if (ext instanceof StateField) {
                result[prec].push(ext);
                if (ext.provides)
                    inner(ext.provides, prec);
            }
            else if (ext instanceof FacetProvider) {
                result[prec].push(ext);
                if (ext.facet.extensions)
                    inner(ext.facet.extensions, prec);
            }
            else {
                let content = ext.extension;
                if (!content)
                    throw new Error(`Unrecognized extension value in extension set (${ext}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
                inner(content, prec);
            }
        }
        inner(extension, Prec_.default);
        return result.reduce((a, b) => a.concat(b));
    }
    function ensureAddr(state, addr) {
        if (addr & 1)
            return 2 /* Computed */;
        let idx = addr >> 1;
        let status = state.status[idx];
        if (status == 4 /* Computing */)
            throw new Error("Cyclic dependency between fields and/or facets");
        if (status & 2 /* Computed */)
            return status;
        state.status[idx] = 4 /* Computing */;
        let changed = state.config.dynamicSlots[idx](state, state.applying);
        return state.status[idx] = 2 /* Computed */ | changed;
    }
    function getAddr(state, addr) {
        return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];
    }

    const languageData = /*@__PURE__*/Facet.define();
    const allowMultipleSelections = /*@__PURE__*/Facet.define({
        combine: values => values.some(v => v),
        static: true
    });
    const lineSeparator = /*@__PURE__*/Facet.define({
        combine: values => values.length ? values[0] : undefined,
        static: true
    });
    const changeFilter = /*@__PURE__*/Facet.define();
    const transactionFilter = /*@__PURE__*/Facet.define();
    const transactionExtender = /*@__PURE__*/Facet.define();
    const readOnly = /*@__PURE__*/Facet.define({
        combine: values => values.length ? values[0] : false
    });

    /**
    Annotations are tagged values that are used to add metadata to
    transactions in an extensible way. They should be used to model
    things that effect the entire transaction (such as its [time
    stamp](https://codemirror.net/6/docs/ref/#state.Transaction^time) or information about its
    [origin](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent)). For effects that happen
    _alongside_ the other changes made by the transaction, [state
    effects](https://codemirror.net/6/docs/ref/#state.StateEffect) are more appropriate.
    */
    class Annotation {
        /**
        @internal
        */
        constructor(
        /**
        The annotation type.
        */
        type, 
        /**
        The value of this annotation.
        */
        value) {
            this.type = type;
            this.value = value;
        }
        /**
        Define a new type of annotation.
        */
        static define() { return new AnnotationType(); }
    }
    /**
    Marker that identifies a type of [annotation](https://codemirror.net/6/docs/ref/#state.Annotation).
    */
    class AnnotationType {
        /**
        Create an instance of this annotation.
        */
        of(value) { return new Annotation(this, value); }
    }
    /**
    Representation of a type of state effect. Defined with
    [`StateEffect.define`](https://codemirror.net/6/docs/ref/#state.StateEffect^define).
    */
    class StateEffectType {
        /**
        @internal
        */
        constructor(
        // The `any` types in these function types are there to work
        // around TypeScript issue #37631, where the type guard on
        // `StateEffect.is` mysteriously stops working when these properly
        // have type `Value`.
        /**
        @internal
        */
        map) {
            this.map = map;
        }
        /**
        Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
        type.
        */
        of(value) { return new StateEffect(this, value); }
    }
    /**
    State effects can be used to represent additional effects
    associated with a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction.effects). They
    are often useful to model changes to custom [state
    fields](https://codemirror.net/6/docs/ref/#state.StateField), when those changes aren't implicit in
    document or selection changes.
    */
    class StateEffect {
        /**
        @internal
        */
        constructor(
        /**
        @internal
        */
        type, 
        /**
        The value of this effect.
        */
        value) {
            this.type = type;
            this.value = value;
        }
        /**
        Map this effect through a position mapping. Will return
        `undefined` when that ends up deleting the effect.
        */
        map(mapping) {
            let mapped = this.type.map(this.value, mapping);
            return mapped === undefined ? undefined : mapped == this.value ? this : new StateEffect(this.type, mapped);
        }
        /**
        Tells you whether this effect object is of a given
        [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
        */
        is(type) { return this.type == type; }
        /**
        Define a new effect type. The type parameter indicates the type
        of values that his effect holds.
        */
        static define(spec = {}) {
            return new StateEffectType(spec.map || (v => v));
        }
        /**
        Map an array of effects through a change set.
        */
        static mapEffects(effects, mapping) {
            if (!effects.length)
                return effects;
            let result = [];
            for (let effect of effects) {
                let mapped = effect.map(mapping);
                if (mapped)
                    result.push(mapped);
            }
            return result;
        }
    }
    /**
    This effect can be used to reconfigure the root extensions of
    the editor. Doing this will discard any extensions
    [appended](https://codemirror.net/6/docs/ref/#state.StateEffect^appendConfig), but does not reset
    the content of [reconfigured](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure)
    compartments.
    */
    StateEffect.reconfigure = /*@__PURE__*/StateEffect.define();
    /**
    Append extensions to the top-level configuration of the editor.
    */
    StateEffect.appendConfig = /*@__PURE__*/StateEffect.define();
    /**
    Changes to the editor state are grouped into transactions.
    Typically, a user action creates a single transaction, which may
    contain any number of document changes, may change the selection,
    or have other effects. Create a transaction by calling
    [`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
    */
    class Transaction {
        /**
        @internal
        */
        constructor(
        /**
        The state from which the transaction starts.
        */
        startState, 
        /**
        The document changes made by this transaction.
        */
        changes, 
        /**
        The selection set by this transaction, or undefined if it
        doesn't explicitly set a selection.
        */
        selection, 
        /**
        The effects added to the transaction.
        */
        effects, 
        /**
        @internal
        */
        annotations, 
        /**
        Whether the selection should be scrolled into view after this
        transaction is dispatched.
        */
        scrollIntoView) {
            this.startState = startState;
            this.changes = changes;
            this.selection = selection;
            this.effects = effects;
            this.annotations = annotations;
            this.scrollIntoView = scrollIntoView;
            /**
            @internal
            */
            this._doc = null;
            /**
            @internal
            */
            this._state = null;
            if (selection)
                checkSelection(selection, changes.newLength);
            if (!annotations.some((a) => a.type == Transaction.time))
                this.annotations = annotations.concat(Transaction.time.of(Date.now()));
        }
        /**
        The new document produced by the transaction. Contrary to
        [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
        force the entire new state to be computed right away, so it is
        recommended that [transaction
        filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
        when they need to look at the new document.
        */
        get newDoc() {
            return this._doc || (this._doc = this.changes.apply(this.startState.doc));
        }
        /**
        The new selection produced by the transaction. If
        [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
        this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
        current selection through the changes made by the transaction.
        */
        get newSelection() {
            return this.selection || this.startState.selection.map(this.changes);
        }
        /**
        The new state created by the transaction. Computed on demand
        (but retained for subsequent access), so itis recommended not to
        access it in [transaction
        filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
        */
        get state() {
            if (!this._state)
                this.startState.applyTransaction(this);
            return this._state;
        }
        /**
        Get the value of the given annotation type, if any.
        */
        annotation(type) {
            for (let ann of this.annotations)
                if (ann.type == type)
                    return ann.value;
            return undefined;
        }
        /**
        Indicates whether the transaction changed the document.
        */
        get docChanged() { return !this.changes.empty; }
        /**
        Indicates whether this transaction reconfigures the state
        (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
        with a top-level configuration
        [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
        */
        get reconfigured() { return this.startState.config != this.state.config; }
        /**
        Returns true if the transaction has a [user
        event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
        or more specific than `event`. For example, if the transaction
        has `"select.pointer"` as user event, `"select"` and
        `"select.pointer"` will match it.
        */
        isUserEvent(event) {
            let e = this.annotation(Transaction.userEvent);
            return e && (e == event || e.length > event.length && e.slice(0, event.length) == event && e[event.length] == ".");
        }
    }
    /**
    Annotation used to store transaction timestamps.
    */
    Transaction.time = /*@__PURE__*/Annotation.define();
    /**
    Annotation used to associate a transaction with a user interface
    event. Holds a string identifying the event, using a
    dot-separated format to support attaching more specific
    information. The events used by the core libraries are:

     - `"input"` when content is entered
       - `"input.type"` for typed input
         - `"input.type.compose"` for composition
       - `"input.paste"` for pasted input
       - `"input.drop"` when adding content with drag-and-drop
       - `"input.complete"` when autocompleting
     - `"delete"` when the user deletes content
       - `"delete.selection"` when deleting the selection
       - `"delete.forward"` when deleting forward from the selection
       - `"delete.backward"` when deleting backward from the selection
       - `"delete.cut"` when cutting to the clipboard
     - `"move"` when content is moved
       - `"move.drop"` when content is moved within the editor through drag-and-drop
     - `"select"` when explicitly changing the selection
       - `"select.pointer"` when selecting with a mouse or other pointing device
     - `"undo"` and `"redo"` for history actions

    Use [`isUserEvent`](https://codemirror.net/6/docs/ref/#state.Transaction.isUserEvent) to check
    whether the annotation matches a given event.
    */
    Transaction.userEvent = /*@__PURE__*/Annotation.define();
    /**
    Annotation indicating whether a transaction should be added to
    the undo history or not.
    */
    Transaction.addToHistory = /*@__PURE__*/Annotation.define();
    /**
    Annotation indicating (when present and true) that a transaction
    represents a change made by some other actor, not the user. This
    is used, for example, to tag other people's changes in
    collaborative editing.
    */
    Transaction.remote = /*@__PURE__*/Annotation.define();
    function joinRanges(a, b) {
        let result = [];
        for (let iA = 0, iB = 0;;) {
            let from, to;
            if (iA < a.length && (iB == b.length || b[iB] >= a[iA])) {
                from = a[iA++];
                to = a[iA++];
            }
            else if (iB < b.length) {
                from = b[iB++];
                to = b[iB++];
            }
            else
                return result;
            if (!result.length || result[result.length - 1] < from)
                result.push(from, to);
            else if (result[result.length - 1] < to)
                result[result.length - 1] = to;
        }
    }
    function mergeTransaction(a, b, sequential) {
        var _a;
        let mapForA, mapForB, changes;
        if (sequential) {
            mapForA = b.changes;
            mapForB = ChangeSet.empty(b.changes.length);
            changes = a.changes.compose(b.changes);
        }
        else {
            mapForA = b.changes.map(a.changes);
            mapForB = a.changes.mapDesc(b.changes, true);
            changes = a.changes.compose(mapForA);
        }
        return {
            changes,
            selection: b.selection ? b.selection.map(mapForB) : (_a = a.selection) === null || _a === void 0 ? void 0 : _a.map(mapForA),
            effects: StateEffect.mapEffects(a.effects, mapForA).concat(StateEffect.mapEffects(b.effects, mapForB)),
            annotations: a.annotations.length ? a.annotations.concat(b.annotations) : b.annotations,
            scrollIntoView: a.scrollIntoView || b.scrollIntoView
        };
    }
    function resolveTransactionInner(state, spec, docSize) {
        let sel = spec.selection, annotations = asArray$1(spec.annotations);
        if (spec.userEvent)
            annotations = annotations.concat(Transaction.userEvent.of(spec.userEvent));
        return {
            changes: spec.changes instanceof ChangeSet ? spec.changes
                : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),
            selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),
            effects: asArray$1(spec.effects),
            annotations,
            scrollIntoView: !!spec.scrollIntoView
        };
    }
    function resolveTransaction(state, specs, filter) {
        let s = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);
        if (specs.length && specs[0].filter === false)
            filter = false;
        for (let i = 1; i < specs.length; i++) {
            if (specs[i].filter === false)
                filter = false;
            let seq = !!specs[i].sequential;
            s = mergeTransaction(s, resolveTransactionInner(state, specs[i], seq ? s.changes.newLength : state.doc.length), seq);
        }
        let tr = new Transaction(state, s.changes, s.selection, s.effects, s.annotations, s.scrollIntoView);
        return extendTransaction(filter ? filterTransaction(tr) : tr);
    }
    // Finish a transaction by applying filters if necessary.
    function filterTransaction(tr) {
        let state = tr.startState;
        // Change filters
        let result = true;
        for (let filter of state.facet(changeFilter)) {
            let value = filter(tr);
            if (value === false) {
                result = false;
                break;
            }
            if (Array.isArray(value))
                result = result === true ? value : joinRanges(result, value);
        }
        if (result !== true) {
            let changes, back;
            if (result === false) {
                back = tr.changes.invertedDesc;
                changes = ChangeSet.empty(state.doc.length);
            }
            else {
                let filtered = tr.changes.filter(result);
                changes = filtered.changes;
                back = filtered.filtered.invertedDesc;
            }
            tr = new Transaction(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);
        }
        // Transaction filters
        let filters = state.facet(transactionFilter);
        for (let i = filters.length - 1; i >= 0; i--) {
            let filtered = filters[i](tr);
            if (filtered instanceof Transaction)
                tr = filtered;
            else if (Array.isArray(filtered) && filtered.length == 1 && filtered[0] instanceof Transaction)
                tr = filtered[0];
            else
                tr = resolveTransaction(state, asArray$1(filtered), false);
        }
        return tr;
    }
    function extendTransaction(tr) {
        let state = tr.startState, extenders = state.facet(transactionExtender), spec = tr;
        for (let i = extenders.length - 1; i >= 0; i--) {
            let extension = extenders[i](tr);
            if (extension && Object.keys(extension).length)
                spec = mergeTransaction(tr, resolveTransactionInner(state, extension, tr.changes.newLength), true);
        }
        return spec == tr ? tr : new Transaction(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);
    }
    const none$5 = [];
    function asArray$1(value) {
        return value == null ? none$5 : Array.isArray(value) ? value : [value];
    }

    /**
    The categories produced by a [character
    categorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer). These are used
    do things like selecting by word.
    */
    var CharCategory = /*@__PURE__*/(function (CharCategory) {
        /**
        Word characters.
        */
        CharCategory[CharCategory["Word"] = 0] = "Word";
        /**
        Whitespace.
        */
        CharCategory[CharCategory["Space"] = 1] = "Space";
        /**
        Anything else.
        */
        CharCategory[CharCategory["Other"] = 2] = "Other";
    return CharCategory})(CharCategory || (CharCategory = {}));
    const nonASCIISingleCaseWordChar = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
    let wordChar;
    try {
        wordChar = /*@__PURE__*/new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
    }
    catch (_) { }
    function hasWordChar(str) {
        if (wordChar)
            return wordChar.test(str);
        for (let i = 0; i < str.length; i++) {
            let ch = str[i];
            if (/\w/.test(ch) || ch > "\x80" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch)))
                return true;
        }
        return false;
    }
    function makeCategorizer(wordChars) {
        return (char) => {
            if (!/\S/.test(char))
                return CharCategory.Space;
            if (hasWordChar(char))
                return CharCategory.Word;
            for (let i = 0; i < wordChars.length; i++)
                if (char.indexOf(wordChars[i]) > -1)
                    return CharCategory.Word;
            return CharCategory.Other;
        };
    }

    /**
    The editor state class is a persistent (immutable) data structure.
    To update a state, you [create](https://codemirror.net/6/docs/ref/#state.EditorState.update) a
    [transaction](https://codemirror.net/6/docs/ref/#state.Transaction), which produces a _new_ state
    instance, without modifying the original object.

    As such, _never_ mutate properties of a state directly. That'll
    just break things.
    */
    class EditorState {
        /**
        @internal
        */
        constructor(
        /**
        @internal
        */
        config, 
        /**
        The current document.
        */
        doc, 
        /**
        The current selection.
        */
        selection, tr = null) {
            this.config = config;
            this.doc = doc;
            this.selection = selection;
            /**
            @internal
            */
            this.applying = null;
            this.status = config.statusTemplate.slice();
            if (tr && tr.startState.config == config) {
                this.values = tr.startState.values.slice();
            }
            else {
                this.values = config.dynamicSlots.map(_ => null);
                // Copy over old values for shared facets/fields if this is a reconfigure
                if (tr)
                    for (let id in config.address) {
                        let cur = config.address[id], prev = tr.startState.config.address[id];
                        if (prev != null && (cur & 1) == 0)
                            this.values[cur >> 1] = getAddr(tr.startState, prev);
                    }
            }
            this.applying = tr;
            // Fill in the computed state immediately, so that further queries
            // for it made during the update return this state
            if (tr)
                tr._state = this;
            for (let i = 0; i < this.config.dynamicSlots.length; i++)
                ensureAddr(this, i << 1);
            this.applying = null;
        }
        field(field, require = true) {
            let addr = this.config.address[field.id];
            if (addr == null) {
                if (require)
                    throw new RangeError("Field is not present in this state");
                return undefined;
            }
            ensureAddr(this, addr);
            return getAddr(this, addr);
        }
        /**
        Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
        state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
        can be passed. Unless
        [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
        [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
        are assumed to start in the _current_ document (not the document
        produced by previous specs), and its
        [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
        [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
        to the document created by its _own_ changes. The resulting
        transaction contains the combined effect of all the different
        specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
        specs take precedence over earlier ones.
        */
        update(...specs) {
            return resolveTransaction(this, specs, true);
        }
        /**
        @internal
        */
        applyTransaction(tr) {
            let conf = this.config, { base, compartments } = conf;
            for (let effect of tr.effects) {
                if (effect.is(Compartment.reconfigure)) {
                    if (conf) {
                        compartments = new Map;
                        conf.compartments.forEach((val, key) => compartments.set(key, val));
                        conf = null;
                    }
                    compartments.set(effect.value.compartment, effect.value.extension);
                }
                else if (effect.is(StateEffect.reconfigure)) {
                    conf = null;
                    base = effect.value;
                }
                else if (effect.is(StateEffect.appendConfig)) {
                    conf = null;
                    base = asArray$1(base).concat(effect.value);
                }
            }
            new EditorState(conf || Configuration.resolve(base, compartments, this), tr.newDoc, tr.newSelection, tr);
        }
        /**
        Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
        replaces every selection range with the given content.
        */
        replaceSelection(text) {
            if (typeof text == "string")
                text = this.toText(text);
            return this.changeByRange(range => ({ changes: { from: range.from, to: range.to, insert: text },
                range: EditorSelection.cursor(range.from + text.length) }));
        }
        /**
        Create a set of changes and a new selection by running the given
        function for each range in the active selection. The function
        can return an optional set of changes (in the coordinate space
        of the start document), plus an updated range (in the coordinate
        space of the document produced by the call's own changes). This
        method will merge all the changes and ranges into a single
        changeset and selection, and return it as a [transaction
        spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
        [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
        */
        changeByRange(f) {
            let sel = this.selection;
            let result1 = f(sel.ranges[0]);
            let changes = this.changes(result1.changes), ranges = [result1.range];
            let effects = asArray$1(result1.effects);
            for (let i = 1; i < sel.ranges.length; i++) {
                let result = f(sel.ranges[i]);
                let newChanges = this.changes(result.changes), newMapped = newChanges.map(changes);
                for (let j = 0; j < i; j++)
                    ranges[j] = ranges[j].map(newMapped);
                let mapBy = changes.mapDesc(newChanges, true);
                ranges.push(result.range.map(mapBy));
                changes = changes.compose(newMapped);
                effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray$1(result.effects), mapBy));
            }
            return {
                changes,
                selection: EditorSelection.create(ranges, sel.mainIndex),
                effects
            };
        }
        /**
        Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
        description, taking the state's document length and line
        separator into account.
        */
        changes(spec = []) {
            if (spec instanceof ChangeSet)
                return spec;
            return ChangeSet.of(spec, this.doc.length, this.facet(EditorState.lineSeparator));
        }
        /**
        Using the state's [line
        separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
        [`Text`](https://codemirror.net/6/docs/ref/#text.Text) instance from the given string.
        */
        toText(string) {
            return Text.of(string.split(this.facet(EditorState.lineSeparator) || DefaultSplit));
        }
        /**
        Return the given range of the document as a string.
        */
        sliceDoc(from = 0, to = this.doc.length) {
            return this.doc.sliceString(from, to, this.lineBreak);
        }
        /**
        Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
        */
        facet(facet) {
            let addr = this.config.address[facet.id];
            if (addr == null)
                return facet.default;
            ensureAddr(this, addr);
            return getAddr(this, addr);
        }
        /**
        Convert this state to a JSON-serializable object. When custom
        fields should be serialized, you can pass them in as an object
        mapping property names (in the resulting object, which should
        not use `doc` or `selection`) to fields.
        */
        toJSON(fields) {
            let result = {
                doc: this.sliceDoc(),
                selection: this.selection.toJSON()
            };
            if (fields)
                for (let prop in fields) {
                    let value = fields[prop];
                    if (value instanceof StateField)
                        result[prop] = value.spec.toJSON(this.field(fields[prop]), this);
                }
            return result;
        }
        /**
        Deserialize a state from its JSON representation. When custom
        fields should be deserialized, pass the same object you passed
        to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
        third argument.
        */
        static fromJSON(json, config = {}, fields) {
            if (!json || typeof json.doc != "string")
                throw new RangeError("Invalid JSON representation for EditorState");
            let fieldInit = [];
            if (fields)
                for (let prop in fields) {
                    let field = fields[prop], value = json[prop];
                    fieldInit.push(field.init(state => field.spec.fromJSON(value, state)));
                }
            return EditorState.create({
                doc: json.doc,
                selection: EditorSelection.fromJSON(json.selection),
                extensions: config.extensions ? fieldInit.concat([config.extensions]) : fieldInit
            });
        }
        /**
        Create a new state. You'll usually only need this when
        initializing an editor—updated states are created by applying
        transactions.
        */
        static create(config = {}) {
            let configuration = Configuration.resolve(config.extensions || [], new Map);
            let doc = config.doc instanceof Text ? config.doc
                : Text.of((config.doc || "").split(configuration.staticFacet(EditorState.lineSeparator) || DefaultSplit));
            let selection = !config.selection ? EditorSelection.single(0)
                : config.selection instanceof EditorSelection ? config.selection
                    : EditorSelection.single(config.selection.anchor, config.selection.head);
            checkSelection(selection, doc.length);
            if (!configuration.staticFacet(allowMultipleSelections))
                selection = selection.asSingle();
            return new EditorState(configuration, doc, selection);
        }
        /**
        The size (in columns) of a tab in the document, determined by
        the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
        */
        get tabSize() { return this.facet(EditorState.tabSize); }
        /**
        Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
        string for this state.
        */
        get lineBreak() { return this.facet(EditorState.lineSeparator) || "\n"; }
        /**
        Returns true when the editor is
        [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
        */
        get readOnly() { return this.facet(readOnly); }
        /**
        Look up a translation for the given phrase (via the
        [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
        original string if no translation is found.
        */
        phrase(phrase) {
            for (let map of this.facet(EditorState.phrases))
                if (Object.prototype.hasOwnProperty.call(map, phrase))
                    return map[phrase];
            return phrase;
        }
        /**
        Find the values for a given language data field, provided by the
        the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
        */
        languageDataAt(name, pos, side = -1) {
            let values = [];
            for (let provider of this.facet(languageData)) {
                for (let result of provider(this, pos, side)) {
                    if (Object.prototype.hasOwnProperty.call(result, name))
                        values.push(result[name]);
                }
            }
            return values;
        }
        /**
        Return a function that can categorize strings (expected to
        represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#text.findClusterBreak))
        into one of:
        
         - Word (contains an alphanumeric character or a character
           explicitly listed in the local language's `"wordChars"`
           language data, which should be a string)
         - Space (contains only whitespace)
         - Other (anything else)
        */
        charCategorizer(at) {
            return makeCategorizer(this.languageDataAt("wordChars", at).join(""));
        }
        /**
        Find the word at the given position, meaning the range
        containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
        around it. If no word characters are adjacent to the position,
        this returns null.
        */
        wordAt(pos) {
            let { text, from, length } = this.doc.lineAt(pos);
            let cat = this.charCategorizer(pos);
            let start = pos - from, end = pos - from;
            while (start > 0) {
                let prev = findClusterBreak(text, start, false);
                if (cat(text.slice(prev, start)) != CharCategory.Word)
                    break;
                start = prev;
            }
            while (end < length) {
                let next = findClusterBreak(text, end);
                if (cat(text.slice(end, next)) != CharCategory.Word)
                    break;
                end = next;
            }
            return start == end ? null : EditorSelection.range(start + from, end + from);
        }
    }
    /**
    A facet that, when enabled, causes the editor to allow multiple
    ranges to be selected. Be careful though, because by default the
    editor relies on the native DOM selection, which cannot handle
    multiple selections. An extension like
    [`drawSelection`](https://codemirror.net/6/docs/ref/#view.drawSelection) can be used to make
    secondary selections visible to the user.
    */
    EditorState.allowMultipleSelections = allowMultipleSelections;
    /**
    Configures the tab size to use in this state. The first
    (highest-precedence) value of the facet is used. If no value is
    given, this defaults to 4.
    */
    EditorState.tabSize = /*@__PURE__*/Facet.define({
        combine: values => values.length ? values[0] : 4
    });
    /**
    The line separator to use. By default, any of `"\n"`, `"\r\n"`
    and `"\r"` is treated as a separator when splitting lines, and
    lines are joined with `"\n"`.

    When you configure a value here, only that precise separator
    will be used, allowing you to round-trip documents through the
    editor without normalizing line separators.
    */
    EditorState.lineSeparator = lineSeparator;
    /**
    This facet controls the value of the
    [`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) getter, which is
    consulted by commands and extensions that implement editing
    functionality to determine whether they should apply. It
    defaults to false, but when its highest-precedence value is
    `true`, such functionality disables itself.

    Not to be confused with
    [`EditorView.editable`](https://codemirror.net/6/docs/ref/#view.EditorView^editable), which
    controls whether the editor's DOM is set to be editable (and
    thus focusable).
    */
    EditorState.readOnly = readOnly;
    /**
    Registers translation phrases. The
    [`phrase`](https://codemirror.net/6/docs/ref/#state.EditorState.phrase) method will look through
    all objects registered with this facet to find translations for
    its argument.
    */
    EditorState.phrases = /*@__PURE__*/Facet.define();
    /**
    A facet used to register [language
    data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) providers.
    */
    EditorState.languageData = languageData;
    /**
    Facet used to register change filters, which are called for each
    transaction (unless explicitly
    [disabled](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter)), and can suppress
    part of the transaction's changes.

    Such a function can return `true` to indicate that it doesn't
    want to do anything, `false` to completely stop the changes in
    the transaction, or a set of ranges in which changes should be
    suppressed. Such ranges are represented as an array of numbers,
    with each pair of two number indicating the start and end of a
    range. So for example `[10, 20, 100, 110]` suppresses changes
    between 10 and 20, and between 100 and 110.
    */
    EditorState.changeFilter = changeFilter;
    /**
    Facet used to register a hook that gets a chance to update or
    replace transaction specs before they are applied. This will
    only be applied for transactions that don't have
    [`filter`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter) set to `false`. You
    can either return a single transaction spec (possibly the input
    transaction), or an array of specs (which will be combined in
    the same way as the arguments to
    [`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update)).

    When possible, it is recommended to avoid accessing
    [`Transaction.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state) in a filter,
    since it will force creation of a state that will then be
    discarded again, if the transaction is actually filtered.

    (This functionality should be used with care. Indiscriminately
    modifying transaction is likely to break something or degrade
    the user experience.)
    */
    EditorState.transactionFilter = transactionFilter;
    /**
    This is a more limited form of
    [`transactionFilter`](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter),
    which can only add
    [annotations](https://codemirror.net/6/docs/ref/#state.TransactionSpec.annotations) and
    [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects). _But_, this type
    of filter runs even the transaction has disabled regular
    [filtering](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter), making it suitable
    for effects that don't need to touch the changes or selection,
    but do want to process every transaction.

    Extenders run _after_ filters, when both are applied.
    */
    EditorState.transactionExtender = transactionExtender;
    Compartment.reconfigure = /*@__PURE__*/StateEffect.define();

    /**
    Utility function for combining behaviors to fill in a config
    object from an array of provided configs. Will, by default, error
    when a field gets two values that aren't `===`-equal, but you can
    provide combine functions per field to do something else.
    */
    function combineConfig(configs, defaults, // Should hold only the optional properties of Config, but I haven't managed to express that
    combine = {}) {
        let result = {};
        for (let config of configs)
            for (let key of Object.keys(config)) {
                let value = config[key], current = result[key];
                if (current === undefined)
                    result[key] = value;
                else if (current === value || value === undefined) ; // No conflict
                else if (Object.hasOwnProperty.call(combine, key))
                    result[key] = combine[key](current, value);
                else
                    throw new Error("Config merge conflict for field " + key);
            }
        for (let key in defaults)
            if (result[key] === undefined)
                result[key] = defaults[key];
        return result;
    }

    const C$1 = "\u037c";
    const COUNT = typeof Symbol == "undefined" ? "__" + C$1 : Symbol.for(C$1);
    const SET = typeof Symbol == "undefined" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet");
    const top$1 = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : {};

    // :: - Style modules encapsulate a set of CSS rules defined from
    // JavaScript. Their definitions are only available in a given DOM
    // root after it has been _mounted_ there with `StyleModule.mount`.
    //
    // Style modules should be created once and stored somewhere, as
    // opposed to re-creating them every time you need them. The amount of
    // CSS rules generated for a given DOM root is bounded by the amount
    // of style modules that were used. So to avoid leaking rules, don't
    // create these dynamically, but treat them as one-time allocations.
    class StyleModule {
      // :: (Object<Style>, ?{finish: ?(string) → string})
      // Create a style module from the given spec.
      //
      // When `finish` is given, it is called on regular (non-`@`)
      // selectors (after `&` expansion) to compute the final selector.
      constructor(spec, options) {
        this.rules = [];
        let {finish} = options || {};

        function splitSelector(selector) {
          return /^@/.test(selector) ? [selector] : selector.split(/,\s*/)
        }

        function render(selectors, spec, target, isKeyframes) {
          let local = [], isAt = /^@(\w+)\b/.exec(selectors[0]), keyframes = isAt && isAt[1] == "keyframes";
          if (isAt && spec == null) return target.push(selectors[0] + ";")
          for (let prop in spec) {
            let value = spec[prop];
            if (/&/.test(prop)) {
              render(prop.split(/,\s*/).map(part => selectors.map(sel => part.replace(/&/, sel))).reduce((a, b) => a.concat(b)),
                     value, target);
            } else if (value && typeof value == "object") {
              if (!isAt) throw new RangeError("The value of a property (" + prop + ") should be a primitive value.")
              render(splitSelector(prop), value, local, keyframes);
            } else if (value != null) {
              local.push(prop.replace(/_.*/, "").replace(/[A-Z]/g, l => "-" + l.toLowerCase()) + ": " + value + ";");
            }
          }
          if (local.length || keyframes) {
            target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(", ") +
                        " {" + local.join(" ") + "}");
          }
        }

        for (let prop in spec) render(splitSelector(prop), spec[prop], this.rules);
      }

      // :: () → string
      // Returns a string containing the module's CSS rules.
      getRules() { return this.rules.join("\n") }

      // :: () → string
      // Generate a new unique CSS class name.
      static newName() {
        let id = top$1[COUNT] || 1;
        top$1[COUNT] = id + 1;
        return C$1 + id.toString(36)
      }

      // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>)
      //
      // Mount the given set of modules in the given DOM root, which ensures
      // that the CSS rules defined by the module are available in that
      // context.
      //
      // Rules are only added to the document once per root.
      //
      // Rule order will follow the order of the modules, so that rules from
      // modules later in the array take precedence of those from earlier
      // modules. If you call this function multiple times for the same root
      // in a way that changes the order of already mounted modules, the old
      // order will be changed.
      static mount(root, modules) {
        (root[SET] || new StyleSet(root)).mount(Array.isArray(modules) ? modules : [modules]);
      }
    }

    let adoptedSet = null;

    class StyleSet {
      constructor(root) {
        if (!root.head && root.adoptedStyleSheets && typeof CSSStyleSheet != "undefined") {
          if (adoptedSet) {
            root.adoptedStyleSheets = [adoptedSet.sheet].concat(root.adoptedStyleSheets);
            return root[SET] = adoptedSet
          }
          this.sheet = new CSSStyleSheet;
          root.adoptedStyleSheets = [this.sheet].concat(root.adoptedStyleSheets);
          adoptedSet = this;
        } else {
          this.styleTag = (root.ownerDocument || root).createElement("style");
          let target = root.head || root;
          target.insertBefore(this.styleTag, target.firstChild);
        }
        this.modules = [];
        root[SET] = this;
      }

      mount(modules) {
        let sheet = this.sheet;
        let pos = 0 /* Current rule offset */, j = 0; /* Index into this.modules */
        for (let i = 0; i < modules.length; i++) {
          let mod = modules[i], index = this.modules.indexOf(mod);
          if (index < j && index > -1) { // Ordering conflict
            this.modules.splice(index, 1);
            j--;
            index = -1;
          }
          if (index == -1) {
            this.modules.splice(j++, 0, mod);
            if (sheet) for (let k = 0; k < mod.rules.length; k++)
              sheet.insertRule(mod.rules[k], pos++);
          } else {
            while (j < index) pos += this.modules[j++].rules.length;
            pos += mod.rules.length;
            j++;
          }
        }

        if (!sheet) {
          let text = "";
          for (let i = 0; i < this.modules.length; i++)
            text += this.modules[i].getRules() + "\n";
          this.styleTag.textContent = text;
        }
      }
    }

    // Style::Object<union<Style,string>>
    //
    // A style is an object that, in the simple case, maps CSS property
    // names to strings holding their values, as in `{color: "red",
    // fontWeight: "bold"}`. The property names can be given in
    // camel-case—the library will insert a dash before capital letters
    // when converting them to CSS.
    //
    // If you include an underscore in a property name, it and everything
    // after it will be removed from the output, which can be useful when
    // providing a property multiple times, for browser compatibility
    // reasons.
    //
    // A property in a style object can also be a sub-selector, which
    // extends the current context to add a pseudo-selector or a child
    // selector. Such a property should contain a `&` character, which
    // will be replaced by the current selector. For example `{"&:before":
    // {content: '"hi"'}}`. Sub-selectors and regular properties can
    // freely be mixed in a given object. Any property containing a `&` is
    // assumed to be a sub-selector.
    //
    // Finally, a property can specify an @-block to be wrapped around the
    // styles defined inside the object that's the property's value. For
    // example to create a media query you can do `{"@media screen and
    // (min-width: 400px)": {...}}`.

    /**
    Each range is associated with a value, which must inherit from
    this class.
    */
    class RangeValue {
        /**
        Compare this value with another value. The default
        implementation compares by identity.
        */
        eq(other) { return this == other; }
        /**
        Create a [range](https://codemirror.net/6/docs/ref/#rangeset.Range) with this value.
        */
        range(from, to = from) { return new Range$1(from, to, this); }
    }
    RangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;
    RangeValue.prototype.point = false;
    RangeValue.prototype.mapMode = MapMode.TrackDel;
    /**
    A range associates a value with a range of positions.
    */
    class Range$1 {
        /**
        @internal
        */
        constructor(
        /**
        The range's start position.
        */
        from, 
        /**
        Its end position.
        */
        to, 
        /**
        The value associated with this range.
        */
        value) {
            this.from = from;
            this.to = to;
            this.value = value;
        }
    }
    function cmpRange(a, b) {
        return a.from - b.from || a.value.startSide - b.value.startSide;
    }
    class Chunk {
        constructor(from, to, value, 
        // Chunks are marked with the largest point that occurs
        // in them (or -1 for no points), so that scans that are
        // only interested in points (such as the
        // heightmap-related logic) can skip range-only chunks.
        maxPoint) {
            this.from = from;
            this.to = to;
            this.value = value;
            this.maxPoint = maxPoint;
        }
        get length() { return this.to[this.to.length - 1]; }
        // Find the index of the given position and side. Use the ranges'
        // `from` pos when `end == false`, `to` when `end == true`.
        findIndex(pos, side, end, startAt = 0) {
            let arr = end ? this.to : this.from;
            for (let lo = startAt, hi = arr.length;;) {
                if (lo == hi)
                    return lo;
                let mid = (lo + hi) >> 1;
                let diff = arr[mid] - pos || (end ? this.value[mid].endSide : this.value[mid].startSide) - side;
                if (mid == lo)
                    return diff >= 0 ? lo : hi;
                if (diff >= 0)
                    hi = mid;
                else
                    lo = mid + 1;
            }
        }
        between(offset, from, to, f) {
            for (let i = this.findIndex(from, -1000000000 /* Far */, true), e = this.findIndex(to, 1000000000 /* Far */, false, i); i < e; i++)
                if (f(this.from[i] + offset, this.to[i] + offset, this.value[i]) === false)
                    return false;
        }
        map(offset, changes) {
            let value = [], from = [], to = [], newPos = -1, maxPoint = -1;
            for (let i = 0; i < this.value.length; i++) {
                let val = this.value[i], curFrom = this.from[i] + offset, curTo = this.to[i] + offset, newFrom, newTo;
                if (curFrom == curTo) {
                    let mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);
                    if (mapped == null)
                        continue;
                    newFrom = newTo = mapped;
                }
                else {
                    newFrom = changes.mapPos(curFrom, val.startSide);
                    newTo = changes.mapPos(curTo, val.endSide);
                    if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0)
                        continue;
                }
                if ((newTo - newFrom || val.endSide - val.startSide) < 0)
                    continue;
                if (newPos < 0)
                    newPos = newFrom;
                if (val.point)
                    maxPoint = Math.max(maxPoint, newTo - newFrom);
                value.push(val);
                from.push(newFrom - newPos);
                to.push(newTo - newPos);
            }
            return { mapped: value.length ? new Chunk(from, to, value, maxPoint) : null, pos: newPos };
        }
    }
    /**
    A range set stores a collection of [ranges](https://codemirror.net/6/docs/ref/#rangeset.Range) in a
    way that makes them efficient to [map](https://codemirror.net/6/docs/ref/#rangeset.RangeSet.map) and
    [update](https://codemirror.net/6/docs/ref/#rangeset.RangeSet.update). This is an immutable data
    structure.
    */
    class RangeSet {
        /**
        @internal
        */
        constructor(
        /**
        @internal
        */
        chunkPos, 
        /**
        @internal
        */
        chunk, 
        /**
        @internal
        */
        nextLayer = RangeSet.empty, 
        /**
        @internal
        */
        maxPoint) {
            this.chunkPos = chunkPos;
            this.chunk = chunk;
            this.nextLayer = nextLayer;
            this.maxPoint = maxPoint;
        }
        /**
        @internal
        */
        get length() {
            let last = this.chunk.length - 1;
            return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);
        }
        /**
        The number of ranges in the set.
        */
        get size() {
            if (this.isEmpty)
                return 0;
            let size = this.nextLayer.size;
            for (let chunk of this.chunk)
                size += chunk.value.length;
            return size;
        }
        /**
        @internal
        */
        chunkEnd(index) {
            return this.chunkPos[index] + this.chunk[index].length;
        }
        /**
        Update the range set, optionally adding new ranges or filtering
        out existing ones.
        
        (The extra type parameter is just there as a kludge to work
        around TypeScript variance issues that prevented `RangeSet<X>`
        from being a subtype of `RangeSet<Y>` when `X` is a subtype of
        `Y`.)
        */
        update(updateSpec) {
            let { add = [], sort = false, filterFrom = 0, filterTo = this.length } = updateSpec;
            let filter = updateSpec.filter;
            if (add.length == 0 && !filter)
                return this;
            if (sort)
                add.slice().sort(cmpRange);
            if (this.isEmpty)
                return add.length ? RangeSet.of(add) : this;
            let cur = new LayerCursor(this, null, -1).goto(0), i = 0, spill = [];
            let builder = new RangeSetBuilder();
            while (cur.value || i < add.length) {
                if (i < add.length && (cur.from - add[i].from || cur.startSide - add[i].value.startSide) >= 0) {
                    let range = add[i++];
                    if (!builder.addInner(range.from, range.to, range.value))
                        spill.push(range);
                }
                else if (cur.rangeIndex == 1 && cur.chunkIndex < this.chunk.length &&
                    (i == add.length || this.chunkEnd(cur.chunkIndex) < add[i].from) &&
                    (!filter || filterFrom > this.chunkEnd(cur.chunkIndex) || filterTo < this.chunkPos[cur.chunkIndex]) &&
                    builder.addChunk(this.chunkPos[cur.chunkIndex], this.chunk[cur.chunkIndex])) {
                    cur.nextChunk();
                }
                else {
                    if (!filter || filterFrom > cur.to || filterTo < cur.from || filter(cur.from, cur.to, cur.value)) {
                        if (!builder.addInner(cur.from, cur.to, cur.value))
                            spill.push(new Range$1(cur.from, cur.to, cur.value));
                    }
                    cur.next();
                }
            }
            return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? RangeSet.empty
                : this.nextLayer.update({ add: spill, filter, filterFrom, filterTo }));
        }
        /**
        Map this range set through a set of changes, return the new set.
        */
        map(changes) {
            if (changes.length == 0 || this.isEmpty)
                return this;
            let chunks = [], chunkPos = [], maxPoint = -1;
            for (let i = 0; i < this.chunk.length; i++) {
                let start = this.chunkPos[i], chunk = this.chunk[i];
                let touch = changes.touchesRange(start, start + chunk.length);
                if (touch === false) {
                    maxPoint = Math.max(maxPoint, chunk.maxPoint);
                    chunks.push(chunk);
                    chunkPos.push(changes.mapPos(start));
                }
                else if (touch === true) {
                    let { mapped, pos } = chunk.map(start, changes);
                    if (mapped) {
                        maxPoint = Math.max(maxPoint, mapped.maxPoint);
                        chunks.push(mapped);
                        chunkPos.push(pos);
                    }
                }
            }
            let next = this.nextLayer.map(changes);
            return chunks.length == 0 ? next : new RangeSet(chunkPos, chunks, next, maxPoint);
        }
        /**
        Iterate over the ranges that touch the region `from` to `to`,
        calling `f` for each. There is no guarantee that the ranges will
        be reported in any specific order. When the callback returns
        `false`, iteration stops.
        */
        between(from, to, f) {
            if (this.isEmpty)
                return;
            for (let i = 0; i < this.chunk.length; i++) {
                let start = this.chunkPos[i], chunk = this.chunk[i];
                if (to >= start && from <= start + chunk.length &&
                    chunk.between(start, from - start, to - start, f) === false)
                    return;
            }
            this.nextLayer.between(from, to, f);
        }
        /**
        Iterate over the ranges in this set, in order, including all
        ranges that end at or after `from`.
        */
        iter(from = 0) {
            return HeapCursor.from([this]).goto(from);
        }
        /**
        @internal
        */
        get isEmpty() { return this.nextLayer == this; }
        /**
        Iterate over the ranges in a collection of sets, in order,
        starting from `from`.
        */
        static iter(sets, from = 0) {
            return HeapCursor.from(sets).goto(from);
        }
        /**
        Iterate over two groups of sets, calling methods on `comparator`
        to notify it of possible differences.
        */
        static compare(oldSets, newSets, 
        /**
        This indicates how the underlying data changed between these
        ranges, and is needed to synchronize the iteration. `from` and
        `to` are coordinates in the _new_ space, after these changes.
        */
        textDiff, comparator, 
        /**
        Can be used to ignore all non-point ranges, and points below
        the given size. When -1, all ranges are compared.
        */
        minPointSize = -1) {
            let a = oldSets.filter(set => set.maxPoint >= 500 /* BigPointSize */ ||
                !set.isEmpty && newSets.indexOf(set) < 0 && set.maxPoint >= minPointSize);
            let b = newSets.filter(set => set.maxPoint >= 500 /* BigPointSize */ ||
                !set.isEmpty && oldSets.indexOf(set) < 0 && set.maxPoint >= minPointSize);
            let sharedChunks = findSharedChunks(a, b);
            let sideA = new SpanCursor(a, sharedChunks, minPointSize);
            let sideB = new SpanCursor(b, sharedChunks, minPointSize);
            textDiff.iterGaps((fromA, fromB, length) => compare(sideA, fromA, sideB, fromB, length, comparator));
            if (textDiff.empty && textDiff.length == 0)
                compare(sideA, 0, sideB, 0, 0, comparator);
        }
        /**
        Compare the contents of two groups of range sets, returning true
        if they are equivalent in the given range.
        */
        static eq(oldSets, newSets, from = 0, to) {
            if (to == null)
                to = 1000000000 /* Far */;
            let a = oldSets.filter(set => !set.isEmpty && newSets.indexOf(set) < 0);
            let b = newSets.filter(set => !set.isEmpty && oldSets.indexOf(set) < 0);
            if (a.length != b.length)
                return false;
            if (!a.length)
                return true;
            let sharedChunks = findSharedChunks(a, b);
            let sideA = new SpanCursor(a, sharedChunks, 0).goto(from), sideB = new SpanCursor(b, sharedChunks, 0).goto(from);
            for (;;) {
                if (sideA.to != sideB.to ||
                    !sameValues(sideA.active, sideB.active) ||
                    sideA.point && (!sideB.point || !sideA.point.eq(sideB.point)))
                    return false;
                if (sideA.to >= to)
                    return true;
                sideA.next();
                sideB.next();
            }
        }
        /**
        Iterate over a group of range sets at the same time, notifying
        the iterator about the ranges covering every given piece of
        content. Returns the open count (see
        [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#rangeset.SpanIterator.span)) at the end
        of the iteration.
        */
        static spans(sets, from, to, iterator, 
        /**
        When given and greater than -1, only points of at least this
        size are taken into account.
        */
        minPointSize = -1) {
            let cursor = new SpanCursor(sets, null, minPointSize).goto(from), pos = from;
            let open = cursor.openStart;
            for (;;) {
                let curTo = Math.min(cursor.to, to);
                if (cursor.point) {
                    iterator.point(pos, curTo, cursor.point, cursor.activeForPoint(cursor.to), open);
                    open = cursor.openEnd(curTo) + (cursor.to > curTo ? 1 : 0);
                }
                else if (curTo > pos) {
                    iterator.span(pos, curTo, cursor.active, open);
                    open = cursor.openEnd(curTo);
                }
                if (cursor.to > to)
                    break;
                pos = cursor.to;
                cursor.next();
            }
            return open;
        }
        /**
        Create a range set for the given range or array of ranges. By
        default, this expects the ranges to be _sorted_ (by start
        position and, if two start at the same position,
        `value.startSide`). You can pass `true` as second argument to
        cause the method to sort them.
        */
        static of(ranges, sort = false) {
            let build = new RangeSetBuilder();
            for (let range of ranges instanceof Range$1 ? [ranges] : sort ? lazySort(ranges) : ranges)
                build.add(range.from, range.to, range.value);
            return build.finish();
        }
    }
    /**
    The empty set of ranges.
    */
    RangeSet.empty = /*@__PURE__*/new RangeSet([], [], null, -1);
    function lazySort(ranges) {
        if (ranges.length > 1)
            for (let prev = ranges[0], i = 1; i < ranges.length; i++) {
                let cur = ranges[i];
                if (cmpRange(prev, cur) > 0)
                    return ranges.slice().sort(cmpRange);
                prev = cur;
            }
        return ranges;
    }
    RangeSet.empty.nextLayer = RangeSet.empty;
    /**
    A range set builder is a data structure that helps build up a
    [range set](https://codemirror.net/6/docs/ref/#rangeset.RangeSet) directly, without first allocating
    an array of [`Range`](https://codemirror.net/6/docs/ref/#rangeset.Range) objects.
    */
    class RangeSetBuilder {
        /**
        Create an empty builder.
        */
        constructor() {
            this.chunks = [];
            this.chunkPos = [];
            this.chunkStart = -1;
            this.last = null;
            this.lastFrom = -1000000000 /* Far */;
            this.lastTo = -1000000000 /* Far */;
            this.from = [];
            this.to = [];
            this.value = [];
            this.maxPoint = -1;
            this.setMaxPoint = -1;
            this.nextLayer = null;
        }
        finishChunk(newArrays) {
            this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));
            this.chunkPos.push(this.chunkStart);
            this.chunkStart = -1;
            this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);
            this.maxPoint = -1;
            if (newArrays) {
                this.from = [];
                this.to = [];
                this.value = [];
            }
        }
        /**
        Add a range. Ranges should be added in sorted (by `from` and
        `value.startSide`) order.
        */
        add(from, to, value) {
            if (!this.addInner(from, to, value))
                (this.nextLayer || (this.nextLayer = new RangeSetBuilder)).add(from, to, value);
        }
        /**
        @internal
        */
        addInner(from, to, value) {
            let diff = from - this.lastTo || value.startSide - this.last.endSide;
            if (diff <= 0 && (from - this.lastFrom || value.startSide - this.last.startSide) < 0)
                throw new Error("Ranges must be added sorted by `from` position and `startSide`");
            if (diff < 0)
                return false;
            if (this.from.length == 250 /* ChunkSize */)
                this.finishChunk(true);
            if (this.chunkStart < 0)
                this.chunkStart = from;
            this.from.push(from - this.chunkStart);
            this.to.push(to - this.chunkStart);
            this.last = value;
            this.lastFrom = from;
            this.lastTo = to;
            this.value.push(value);
            if (value.point)
                this.maxPoint = Math.max(this.maxPoint, to - from);
            return true;
        }
        /**
        @internal
        */
        addChunk(from, chunk) {
            if ((from - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0)
                return false;
            if (this.from.length)
                this.finishChunk(true);
            this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);
            this.chunks.push(chunk);
            this.chunkPos.push(from);
            let last = chunk.value.length - 1;
            this.last = chunk.value[last];
            this.lastFrom = chunk.from[last] + from;
            this.lastTo = chunk.to[last] + from;
            return true;
        }
        /**
        Finish the range set. Returns the new set. The builder can't be
        used anymore after this has been called.
        */
        finish() { return this.finishInner(RangeSet.empty); }
        /**
        @internal
        */
        finishInner(next) {
            if (this.from.length)
                this.finishChunk(false);
            if (this.chunks.length == 0)
                return next;
            let result = new RangeSet(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);
            this.from = null; // Make sure further `add` calls produce errors
            return result;
        }
    }
    function findSharedChunks(a, b) {
        let inA = new Map();
        for (let set of a)
            for (let i = 0; i < set.chunk.length; i++)
                if (set.chunk[i].maxPoint < 500 /* BigPointSize */)
                    inA.set(set.chunk[i], set.chunkPos[i]);
        let shared = new Set();
        for (let set of b)
            for (let i = 0; i < set.chunk.length; i++)
                if (inA.get(set.chunk[i]) == set.chunkPos[i])
                    shared.add(set.chunk[i]);
        return shared;
    }
    class LayerCursor {
        constructor(layer, skip, minPoint, rank = 0) {
            this.layer = layer;
            this.skip = skip;
            this.minPoint = minPoint;
            this.rank = rank;
        }
        get startSide() { return this.value ? this.value.startSide : 0; }
        get endSide() { return this.value ? this.value.endSide : 0; }
        goto(pos, side = -1000000000 /* Far */) {
            this.chunkIndex = this.rangeIndex = 0;
            this.gotoInner(pos, side, false);
            return this;
        }
        gotoInner(pos, side, forward) {
            while (this.chunkIndex < this.layer.chunk.length) {
                let next = this.layer.chunk[this.chunkIndex];
                if (!(this.skip && this.skip.has(next) ||
                    this.layer.chunkEnd(this.chunkIndex) < pos ||
                    next.maxPoint < this.minPoint))
                    break;
                this.chunkIndex++;
                forward = false;
            }
            if (this.chunkIndex < this.layer.chunk.length) {
                let rangeIndex = this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], side, true);
                if (!forward || this.rangeIndex < rangeIndex)
                    this.setRangeIndex(rangeIndex);
            }
            this.next();
        }
        forward(pos, side) {
            if ((this.to - pos || this.endSide - side) < 0)
                this.gotoInner(pos, side, true);
        }
        next() {
            for (;;) {
                if (this.chunkIndex == this.layer.chunk.length) {
                    this.from = this.to = 1000000000 /* Far */;
                    this.value = null;
                    break;
                }
                else {
                    let chunkPos = this.layer.chunkPos[this.chunkIndex], chunk = this.layer.chunk[this.chunkIndex];
                    let from = chunkPos + chunk.from[this.rangeIndex];
                    this.from = from;
                    this.to = chunkPos + chunk.to[this.rangeIndex];
                    this.value = chunk.value[this.rangeIndex];
                    this.setRangeIndex(this.rangeIndex + 1);
                    if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
                        break;
                }
            }
        }
        setRangeIndex(index) {
            if (index == this.layer.chunk[this.chunkIndex].value.length) {
                this.chunkIndex++;
                if (this.skip) {
                    while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]))
                        this.chunkIndex++;
                }
                this.rangeIndex = 0;
            }
            else {
                this.rangeIndex = index;
            }
        }
        nextChunk() {
            this.chunkIndex++;
            this.rangeIndex = 0;
            this.next();
        }
        compare(other) {
            return this.from - other.from || this.startSide - other.startSide || this.to - other.to || this.endSide - other.endSide;
        }
    }
    class HeapCursor {
        constructor(heap) {
            this.heap = heap;
        }
        static from(sets, skip = null, minPoint = -1) {
            let heap = [];
            for (let i = 0; i < sets.length; i++) {
                for (let cur = sets[i]; !cur.isEmpty; cur = cur.nextLayer) {
                    if (cur.maxPoint >= minPoint)
                        heap.push(new LayerCursor(cur, skip, minPoint, i));
                }
            }
            return heap.length == 1 ? heap[0] : new HeapCursor(heap);
        }
        get startSide() { return this.value ? this.value.startSide : 0; }
        goto(pos, side = -1000000000 /* Far */) {
            for (let cur of this.heap)
                cur.goto(pos, side);
            for (let i = this.heap.length >> 1; i >= 0; i--)
                heapBubble(this.heap, i);
            this.next();
            return this;
        }
        forward(pos, side) {
            for (let cur of this.heap)
                cur.forward(pos, side);
            for (let i = this.heap.length >> 1; i >= 0; i--)
                heapBubble(this.heap, i);
            if ((this.to - pos || this.value.endSide - side) < 0)
                this.next();
        }
        next() {
            if (this.heap.length == 0) {
                this.from = this.to = 1000000000 /* Far */;
                this.value = null;
                this.rank = -1;
            }
            else {
                let top = this.heap[0];
                this.from = top.from;
                this.to = top.to;
                this.value = top.value;
                this.rank = top.rank;
                if (top.value)
                    top.next();
                heapBubble(this.heap, 0);
            }
        }
    }
    function heapBubble(heap, index) {
        for (let cur = heap[index];;) {
            let childIndex = (index << 1) + 1;
            if (childIndex >= heap.length)
                break;
            let child = heap[childIndex];
            if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {
                child = heap[childIndex + 1];
                childIndex++;
            }
            if (cur.compare(child) < 0)
                break;
            heap[childIndex] = cur;
            heap[index] = child;
            index = childIndex;
        }
    }
    class SpanCursor {
        constructor(sets, skip, minPoint) {
            this.minPoint = minPoint;
            this.active = [];
            this.activeTo = [];
            this.activeRank = [];
            this.minActive = -1;
            // A currently active point range, if any
            this.point = null;
            this.pointFrom = 0;
            this.pointRank = 0;
            this.to = -1000000000 /* Far */;
            this.endSide = 0;
            this.openStart = -1;
            this.cursor = HeapCursor.from(sets, skip, minPoint);
        }
        goto(pos, side = -1000000000 /* Far */) {
            this.cursor.goto(pos, side);
            this.active.length = this.activeTo.length = this.activeRank.length = 0;
            this.minActive = -1;
            this.to = pos;
            this.endSide = side;
            this.openStart = -1;
            this.next();
            return this;
        }
        forward(pos, side) {
            while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0)
                this.removeActive(this.minActive);
            this.cursor.forward(pos, side);
        }
        removeActive(index) {
            remove(this.active, index);
            remove(this.activeTo, index);
            remove(this.activeRank, index);
            this.minActive = findMinIndex(this.active, this.activeTo);
        }
        addActive(trackOpen) {
            let i = 0, { value, to, rank } = this.cursor;
            while (i < this.activeRank.length && this.activeRank[i] <= rank)
                i++;
            insert(this.active, i, value);
            insert(this.activeTo, i, to);
            insert(this.activeRank, i, rank);
            if (trackOpen)
                insert(trackOpen, i, this.cursor.from);
            this.minActive = findMinIndex(this.active, this.activeTo);
        }
        // After calling this, if `this.point` != null, the next range is a
        // point. Otherwise, it's a regular range, covered by `this.active`.
        next() {
            let from = this.to, wasPoint = this.point;
            this.point = null;
            let trackOpen = this.openStart < 0 ? [] : null, trackExtra = 0;
            for (;;) {
                let a = this.minActive;
                if (a > -1 && (this.activeTo[a] - this.cursor.from || this.active[a].endSide - this.cursor.startSide) < 0) {
                    if (this.activeTo[a] > from) {
                        this.to = this.activeTo[a];
                        this.endSide = this.active[a].endSide;
                        break;
                    }
                    this.removeActive(a);
                    if (trackOpen)
                        remove(trackOpen, a);
                }
                else if (!this.cursor.value) {
                    this.to = this.endSide = 1000000000 /* Far */;
                    break;
                }
                else if (this.cursor.from > from) {
                    this.to = this.cursor.from;
                    this.endSide = this.cursor.startSide;
                    break;
                }
                else {
                    let nextVal = this.cursor.value;
                    if (!nextVal.point) { // Opening a range
                        this.addActive(trackOpen);
                        this.cursor.next();
                    }
                    else if (wasPoint && this.cursor.to == this.to && this.cursor.from < this.cursor.to && nextVal.endSide == this.endSide) {
                        // Ignore any non-empty points that end precisely at the end of the prev point
                        this.cursor.next();
                    }
                    else { // New point
                        this.point = nextVal;
                        this.pointFrom = this.cursor.from;
                        this.pointRank = this.cursor.rank;
                        this.to = this.cursor.to;
                        this.endSide = nextVal.endSide;
                        if (this.cursor.from < from)
                            trackExtra = 1;
                        this.cursor.next();
                        if (this.to > from)
                            this.forward(this.to, this.endSide);
                        break;
                    }
                }
            }
            if (trackOpen) {
                let openStart = 0;
                while (openStart < trackOpen.length && trackOpen[openStart] < from)
                    openStart++;
                this.openStart = openStart + trackExtra;
            }
        }
        activeForPoint(to) {
            if (!this.active.length)
                return this.active;
            let active = [];
            for (let i = this.active.length - 1; i >= 0; i--) {
                if (this.activeRank[i] < this.pointRank)
                    break;
                if (this.activeTo[i] > to || this.activeTo[i] == to && this.active[i].endSide >= this.point.endSide)
                    active.push(this.active[i]);
            }
            return active.reverse();
        }
        openEnd(to) {
            let open = 0;
            for (let i = this.activeTo.length - 1; i >= 0 && this.activeTo[i] > to; i--)
                open++;
            return open;
        }
    }
    function compare(a, startA, b, startB, length, comparator) {
        a.goto(startA);
        b.goto(startB);
        let endB = startB + length;
        let pos = startB, dPos = startB - startA;
        for (;;) {
            let diff = (a.to + dPos) - b.to || a.endSide - b.endSide;
            let end = diff < 0 ? a.to + dPos : b.to, clipEnd = Math.min(end, endB);
            if (a.point || b.point) {
                if (!(a.point && b.point && (a.point == b.point || a.point.eq(b.point)) &&
                    sameValues(a.activeForPoint(a.to + dPos), b.activeForPoint(b.to))))
                    comparator.comparePoint(pos, clipEnd, a.point, b.point);
            }
            else {
                if (clipEnd > pos && !sameValues(a.active, b.active))
                    comparator.compareRange(pos, clipEnd, a.active, b.active);
            }
            if (end > endB)
                break;
            pos = end;
            if (diff <= 0)
                a.next();
            if (diff >= 0)
                b.next();
        }
    }
    function sameValues(a, b) {
        if (a.length != b.length)
            return false;
        for (let i = 0; i < a.length; i++)
            if (a[i] != b[i] && !a[i].eq(b[i]))
                return false;
        return true;
    }
    function remove(array, index) {
        for (let i = index, e = array.length - 1; i < e; i++)
            array[i] = array[i + 1];
        array.pop();
    }
    function insert(array, index, value) {
        for (let i = array.length - 1; i >= index; i--)
            array[i + 1] = array[i];
        array[index] = value;
    }
    function findMinIndex(value, array) {
        let found = -1, foundPos = 1000000000 /* Far */;
        for (let i = 0; i < array.length; i++)
            if ((array[i] - foundPos || value[i].endSide - value[found].endSide) < 0) {
                found = i;
                foundPos = array[i];
            }
        return found;
    }

    var base$2 = {
      8: "Backspace",
      9: "Tab",
      10: "Enter",
      12: "NumLock",
      13: "Enter",
      16: "Shift",
      17: "Control",
      18: "Alt",
      20: "CapsLock",
      27: "Escape",
      32: " ",
      33: "PageUp",
      34: "PageDown",
      35: "End",
      36: "Home",
      37: "ArrowLeft",
      38: "ArrowUp",
      39: "ArrowRight",
      40: "ArrowDown",
      44: "PrintScreen",
      45: "Insert",
      46: "Delete",
      59: ";",
      61: "=",
      91: "Meta",
      92: "Meta",
      106: "*",
      107: "+",
      108: ",",
      109: "-",
      110: ".",
      111: "/",
      144: "NumLock",
      145: "ScrollLock",
      160: "Shift",
      161: "Shift",
      162: "Control",
      163: "Control",
      164: "Alt",
      165: "Alt",
      173: "-",
      186: ";",
      187: "=",
      188: ",",
      189: "-",
      190: ".",
      191: "/",
      192: "`",
      219: "[",
      220: "\\",
      221: "]",
      222: "'",
      229: "q"
    };

    var shift = {
      48: ")",
      49: "!",
      50: "@",
      51: "#",
      52: "$",
      53: "%",
      54: "^",
      55: "&",
      56: "*",
      57: "(",
      59: ":",
      61: "+",
      173: "_",
      186: ":",
      187: "+",
      188: "<",
      189: "_",
      190: ">",
      191: "?",
      192: "~",
      219: "{",
      220: "|",
      221: "}",
      222: "\"",
      229: "Q"
    };

    var chrome$1 = typeof navigator != "undefined" && /Chrome\/(\d+)/.exec(navigator.userAgent);
    var safari$1 = typeof navigator != "undefined" && /Apple Computer/.test(navigator.vendor);
    var gecko$1 = typeof navigator != "undefined" && /Gecko\/\d+/.test(navigator.userAgent);
    var mac = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
    var ie$1 = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
    var brokenModifierNames = chrome$1 && (mac || +chrome$1[1] < 57) || gecko$1 && mac;

    // Fill in the digit keys
    for (var i$1 = 0; i$1 < 10; i$1++) base$2[48 + i$1] = base$2[96 + i$1] = String(i$1);

    // The function keys
    for (var i$1 = 1; i$1 <= 24; i$1++) base$2[i$1 + 111] = "F" + i$1;

    // And the alphabetic keys
    for (var i$1 = 65; i$1 <= 90; i$1++) {
      base$2[i$1] = String.fromCharCode(i$1 + 32);
      shift[i$1] = String.fromCharCode(i$1);
    }

    // For each code that doesn't have a shift-equivalent, copy the base name
    for (var code in base$2) if (!shift.hasOwnProperty(code)) shift[code] = base$2[code];

    function keyName(event) {
      // Don't trust event.key in Chrome when there are modifiers until
      // they fix https://bugs.chromium.org/p/chromium/issues/detail?id=633838
      var ignoreKey = brokenModifierNames && (event.ctrlKey || event.altKey || event.metaKey) ||
        (safari$1 || ie$1) && event.shiftKey && event.key && event.key.length == 1;
      var name = (!ignoreKey && event.key) ||
        (event.shiftKey ? shift : base$2)[event.keyCode] ||
        event.key || "Unidentified";
      // Edge sometimes produces wrong names (Issue #3)
      if (name == "Esc") name = "Escape";
      if (name == "Del") name = "Delete";
      // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/
      if (name == "Left") name = "ArrowLeft";
      if (name == "Up") name = "ArrowUp";
      if (name == "Right") name = "ArrowRight";
      if (name == "Down") name = "ArrowDown";
      return name
    }

    function getSelection(root) {
        return (root.getSelection ? root.getSelection() : document.getSelection());
    }
    function contains$1(dom, node) {
        return node ? dom.contains(node.nodeType != 1 ? node.parentNode : node) : false;
    }
    function deepActiveElement() {
        let elt = document.activeElement;
        while (elt && elt.shadowRoot)
            elt = elt.shadowRoot.activeElement;
        return elt;
    }
    function hasSelection(dom, selection) {
        if (!selection.anchorNode)
            return false;
        try {
            // Firefox will raise 'permission denied' errors when accessing
            // properties of `sel.anchorNode` when it's in a generated CSS
            // element.
            return contains$1(dom, selection.anchorNode);
        }
        catch (_) {
            return false;
        }
    }
    function clientRectsFor(dom) {
        if (dom.nodeType == 3)
            return textRange(dom, 0, dom.nodeValue.length).getClientRects();
        else if (dom.nodeType == 1)
            return dom.getClientRects();
        else
            return [];
    }
    // Scans forward and backward through DOM positions equivalent to the
    // given one to see if the two are in the same place (i.e. after a
    // text node vs at the end of that text node)
    function isEquivalentPosition(node, off, targetNode, targetOff) {
        return targetNode ? (scanFor(node, off, targetNode, targetOff, -1) ||
            scanFor(node, off, targetNode, targetOff, 1)) : false;
    }
    function domIndex(node) {
        for (var index = 0;; index++) {
            node = node.previousSibling;
            if (!node)
                return index;
        }
    }
    function scanFor(node, off, targetNode, targetOff, dir) {
        for (;;) {
            if (node == targetNode && off == targetOff)
                return true;
            if (off == (dir < 0 ? 0 : maxOffset(node))) {
                if (node.nodeName == "DIV")
                    return false;
                let parent = node.parentNode;
                if (!parent || parent.nodeType != 1)
                    return false;
                off = domIndex(node) + (dir < 0 ? 0 : 1);
                node = parent;
            }
            else if (node.nodeType == 1) {
                node = node.childNodes[off + (dir < 0 ? -1 : 0)];
                if (node.nodeType == 1 && node.contentEditable == "false")
                    return false;
                off = dir < 0 ? maxOffset(node) : 0;
            }
            else {
                return false;
            }
        }
    }
    function maxOffset(node) {
        return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
    }
    const Rect0 = { left: 0, right: 0, top: 0, bottom: 0 };
    function flattenRect(rect, left) {
        let x = left ? rect.left : rect.right;
        return { left: x, right: x, top: rect.top, bottom: rect.bottom };
    }
    function windowRect(win) {
        return { left: 0, right: win.innerWidth,
            top: 0, bottom: win.innerHeight };
    }
    const ScrollSpace = 5;
    function scrollRectIntoView(dom, rect, side) {
        let doc = dom.ownerDocument, win = doc.defaultView;
        for (let cur = dom.parentNode; cur;) {
            if (cur.nodeType == 1) { // Element
                let bounding, top = cur == doc.body;
                if (top) {
                    bounding = windowRect(win);
                }
                else {
                    if (cur.scrollHeight <= cur.clientHeight && cur.scrollWidth <= cur.clientWidth) {
                        cur = cur.parentNode;
                        continue;
                    }
                    let rect = cur.getBoundingClientRect();
                    // Make sure scrollbar width isn't included in the rectangle
                    bounding = { left: rect.left, right: rect.left + cur.clientWidth,
                        top: rect.top, bottom: rect.top + cur.clientHeight };
                }
                let moveX = 0, moveY = 0;
                if (rect.top < bounding.top) {
                    moveY = -(bounding.top - rect.top + ScrollSpace);
                    if (side > 0 && rect.bottom > bounding.bottom + moveY)
                        moveY = rect.bottom - bounding.bottom + moveY + ScrollSpace;
                }
                else if (rect.bottom > bounding.bottom) {
                    moveY = rect.bottom - bounding.bottom + ScrollSpace;
                    if (side < 0 && (rect.top - moveY) < bounding.top)
                        moveY = -(bounding.top + moveY - rect.top + ScrollSpace);
                }
                if (rect.left < bounding.left) {
                    moveX = -(bounding.left - rect.left + ScrollSpace);
                    if (side > 0 && rect.right > bounding.right + moveX)
                        moveX = rect.right - bounding.right + moveX + ScrollSpace;
                }
                else if (rect.right > bounding.right) {
                    moveX = rect.right - bounding.right + ScrollSpace;
                    if (side < 0 && rect.left < bounding.left + moveX)
                        moveX = -(bounding.left + moveX - rect.left + ScrollSpace);
                }
                if (moveX || moveY) {
                    if (top) {
                        win.scrollBy(moveX, moveY);
                    }
                    else {
                        if (moveY) {
                            let start = cur.scrollTop;
                            cur.scrollTop += moveY;
                            moveY = cur.scrollTop - start;
                        }
                        if (moveX) {
                            let start = cur.scrollLeft;
                            cur.scrollLeft += moveX;
                            moveX = cur.scrollLeft - start;
                        }
                        rect = { left: rect.left - moveX, top: rect.top - moveY,
                            right: rect.right - moveX, bottom: rect.bottom - moveY };
                    }
                }
                if (top)
                    break;
                cur = cur.assignedSlot || cur.parentNode;
            }
            else if (cur.nodeType == 11) { // A shadow root
                cur = cur.host;
            }
            else {
                break;
            }
        }
    }
    class DOMSelection {
        constructor() {
            this.anchorNode = null;
            this.anchorOffset = 0;
            this.focusNode = null;
            this.focusOffset = 0;
        }
        eq(domSel) {
            return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset &&
                this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;
        }
        set(domSel) {
            this.anchorNode = domSel.anchorNode;
            this.anchorOffset = domSel.anchorOffset;
            this.focusNode = domSel.focusNode;
            this.focusOffset = domSel.focusOffset;
        }
    }
    let preventScrollSupported = null;
    // Feature-detects support for .focus({preventScroll: true}), and uses
    // a fallback kludge when not supported.
    function focusPreventScroll(dom) {
        if (dom.setActive)
            return dom.setActive(); // in IE
        if (preventScrollSupported)
            return dom.focus(preventScrollSupported);
        let stack = [];
        for (let cur = dom; cur; cur = cur.parentNode) {
            stack.push(cur, cur.scrollTop, cur.scrollLeft);
            if (cur == cur.ownerDocument)
                break;
        }
        dom.focus(preventScrollSupported == null ? {
            get preventScroll() {
                preventScrollSupported = { preventScroll: true };
                return true;
            }
        } : undefined);
        if (!preventScrollSupported) {
            preventScrollSupported = false;
            for (let i = 0; i < stack.length;) {
                let elt = stack[i++], top = stack[i++], left = stack[i++];
                if (elt.scrollTop != top)
                    elt.scrollTop = top;
                if (elt.scrollLeft != left)
                    elt.scrollLeft = left;
            }
        }
    }
    let scratchRange;
    function textRange(node, from, to = from) {
        let range = scratchRange || (scratchRange = document.createRange());
        range.setEnd(node, to);
        range.setStart(node, from);
        return range;
    }
    function dispatchKey(elt, name, code) {
        let options = { key: name, code: name, keyCode: code, which: code, cancelable: true };
        let down = new KeyboardEvent("keydown", options);
        down.synthetic = true;
        elt.dispatchEvent(down);
        let up = new KeyboardEvent("keyup", options);
        up.synthetic = true;
        elt.dispatchEvent(up);
        return down.defaultPrevented || up.defaultPrevented;
    }
    let _plainTextSupported = null;
    function contentEditablePlainTextSupported() {
        if (_plainTextSupported == null) {
            _plainTextSupported = false;
            let dummy = document.createElement("div");
            try {
                dummy.contentEditable = "plaintext-only";
                _plainTextSupported = dummy.contentEditable == "plaintext-only";
            }
            catch (_) { }
        }
        return _plainTextSupported;
    }

    class DOMPos {
        constructor(node, offset, precise = true) {
            this.node = node;
            this.offset = offset;
            this.precise = precise;
        }
        static before(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom), precise); }
        static after(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom) + 1, precise); }
    }
    const none$3 = [];
    class ContentView {
        constructor() {
            this.parent = null;
            this.dom = null;
            this.dirty = 2 /* Node */;
        }
        get editorView() {
            if (!this.parent)
                throw new Error("Accessing view in orphan content view");
            return this.parent.editorView;
        }
        get overrideDOMText() { return null; }
        get posAtStart() {
            return this.parent ? this.parent.posBefore(this) : 0;
        }
        get posAtEnd() {
            return this.posAtStart + this.length;
        }
        posBefore(view) {
            let pos = this.posAtStart;
            for (let child of this.children) {
                if (child == view)
                    return pos;
                pos += child.length + child.breakAfter;
            }
            throw new RangeError("Invalid child in posBefore");
        }
        posAfter(view) {
            return this.posBefore(view) + view.length;
        }
        // Will return a rectangle directly before (when side < 0), after
        // (side > 0) or directly on (when the browser supports it) the
        // given position.
        coordsAt(_pos, _side) { return null; }
        sync(track) {
            var _a;
            if (this.dirty & 2 /* Node */) {
                let parent = this.dom, pos = null;
                for (let child of this.children) {
                    if (child.dirty) {
                        let next = pos ? pos.nextSibling : parent.firstChild;
                        if (!child.dom && next && !((_a = ContentView.get(next)) === null || _a === void 0 ? void 0 : _a.parent))
                            child.reuseDOM(next);
                        child.sync(track);
                        child.dirty = 0 /* Not */;
                    }
                    if (track && track.node == parent && pos != child.dom)
                        track.written = true;
                    syncNodeInto(parent, pos, child.dom);
                    pos = child.dom;
                }
                let next = pos ? pos.nextSibling : parent.firstChild;
                if (next && track && track.node == parent)
                    track.written = true;
                while (next)
                    next = rm(next);
            }
            else if (this.dirty & 1 /* Child */) {
                for (let child of this.children)
                    if (child.dirty) {
                        child.sync(track);
                        child.dirty = 0 /* Not */;
                    }
            }
        }
        reuseDOM(_dom) { return false; }
        localPosFromDOM(node, offset) {
            let after;
            if (node == this.dom) {
                after = this.dom.childNodes[offset];
            }
            else {
                let bias = maxOffset(node) == 0 ? 0 : offset == 0 ? -1 : 1;
                for (;;) {
                    let parent = node.parentNode;
                    if (parent == this.dom)
                        break;
                    if (bias == 0 && parent.firstChild != parent.lastChild) {
                        if (node == parent.firstChild)
                            bias = -1;
                        else
                            bias = 1;
                    }
                    node = parent;
                }
                if (bias < 0)
                    after = node;
                else
                    after = node.nextSibling;
            }
            if (after == this.dom.firstChild)
                return 0;
            while (after && !ContentView.get(after))
                after = after.nextSibling;
            if (!after)
                return this.length;
            for (let i = 0, pos = 0;; i++) {
                let child = this.children[i];
                if (child.dom == after)
                    return pos;
                pos += child.length + child.breakAfter;
            }
        }
        domBoundsAround(from, to, offset = 0) {
            let fromI = -1, fromStart = -1, toI = -1, toEnd = -1;
            for (let i = 0, pos = offset, prevEnd = offset; i < this.children.length; i++) {
                let child = this.children[i], end = pos + child.length;
                if (pos < from && end > to)
                    return child.domBoundsAround(from, to, pos);
                if (end >= from && fromI == -1) {
                    fromI = i;
                    fromStart = pos;
                }
                if (pos > to && child.dom.parentNode == this.dom) {
                    toI = i;
                    toEnd = prevEnd;
                    break;
                }
                prevEnd = end;
                pos = end + child.breakAfter;
            }
            return { from: fromStart, to: toEnd < 0 ? offset + this.length : toEnd,
                startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,
                endDOM: toI < this.children.length && toI >= 0 ? this.children[toI].dom : null };
        }
        markDirty(andParent = false) {
            this.dirty |= 2 /* Node */;
            this.markParentsDirty(andParent);
        }
        markParentsDirty(childList) {
            for (let parent = this.parent; parent; parent = parent.parent) {
                if (childList)
                    parent.dirty |= 2 /* Node */;
                if (parent.dirty & 1 /* Child */)
                    return;
                parent.dirty |= 1 /* Child */;
                childList = false;
            }
        }
        setParent(parent) {
            if (this.parent != parent) {
                this.parent = parent;
                if (this.dirty)
                    this.markParentsDirty(true);
            }
        }
        setDOM(dom) {
            if (this.dom)
                this.dom.cmView = null;
            this.dom = dom;
            dom.cmView = this;
        }
        get rootView() {
            for (let v = this;;) {
                let parent = v.parent;
                if (!parent)
                    return v;
                v = parent;
            }
        }
        replaceChildren(from, to, children = none$3) {
            this.markDirty();
            for (let i = from; i < to; i++) {
                let child = this.children[i];
                if (child.parent == this)
                    child.parent = null;
            }
            this.children.splice(from, to - from, ...children);
            for (let i = 0; i < children.length; i++)
                children[i].setParent(this);
        }
        ignoreMutation(_rec) { return false; }
        ignoreEvent(_event) { return false; }
        childCursor(pos = this.length) {
            return new ChildCursor(this.children, pos, this.children.length);
        }
        childPos(pos, bias = 1) {
            return this.childCursor().findPos(pos, bias);
        }
        toString() {
            let name = this.constructor.name.replace("View", "");
            return name + (this.children.length ? "(" + this.children.join() + ")" :
                this.length ? "[" + (name == "Text" ? this.text : this.length) + "]" : "") +
                (this.breakAfter ? "#" : "");
        }
        static get(node) { return node.cmView; }
    }
    ContentView.prototype.breakAfter = 0;
    // Remove a DOM node and return its next sibling.
    function rm(dom) {
        let next = dom.nextSibling;
        dom.parentNode.removeChild(dom);
        return next;
    }
    function syncNodeInto(parent, after, dom) {
        let next = after ? after.nextSibling : parent.firstChild;
        if (dom.parentNode == parent)
            while (next != dom)
                next = rm(next);
        else
            parent.insertBefore(dom, next);
    }
    class ChildCursor {
        constructor(children, pos, i) {
            this.children = children;
            this.pos = pos;
            this.i = i;
            this.off = 0;
        }
        findPos(pos, bias = 1) {
            for (;;) {
                if (pos > this.pos || pos == this.pos &&
                    (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {
                    this.off = pos - this.pos;
                    return this;
                }
                let next = this.children[--this.i];
                this.pos -= next.length + next.breakAfter;
            }
        }
    }

    let [nav, doc] = typeof navigator != "undefined"
        ? [navigator, document]
        : [{ userAgent: "", vendor: "", platform: "" }, { documentElement: { style: {} } }];
    const ie_edge = /*@__PURE__*//Edge\/(\d+)/.exec(nav.userAgent);
    const ie_upto10 = /*@__PURE__*//MSIE \d/.test(nav.userAgent);
    const ie_11up = /*@__PURE__*//Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(nav.userAgent);
    const ie = !!(ie_upto10 || ie_11up || ie_edge);
    const gecko = !ie && /*@__PURE__*//gecko\/(\d+)/i.test(nav.userAgent);
    const chrome = !ie && /*@__PURE__*//Chrome\/(\d+)/.exec(nav.userAgent);
    const webkit = "webkitFontSmoothing" in doc.documentElement.style;
    const safari = !ie && /*@__PURE__*//Apple Computer/.test(nav.vendor);
    var browser = {
        mac: /*@__PURE__*//Mac/.test(nav.platform),
        ie,
        ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,
        gecko,
        gecko_version: gecko ? +(/*@__PURE__*//Firefox\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
        chrome: !!chrome,
        chrome_version: chrome ? +chrome[1] : 0,
        ios: safari && (/*@__PURE__*//Mobile\/\w+/.test(nav.userAgent) || nav.maxTouchPoints > 2),
        android: /*@__PURE__*//Android\b/.test(nav.userAgent),
        webkit,
        safari,
        webkit_version: webkit ? +(/*@__PURE__*//\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0,
        tabSize: doc.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
    };

    const none$2 = [];
    class InlineView extends ContentView {
        /**
        Return true when this view is equivalent to `other` and can take
        on its role.
        */
        become(_other) { return false; }
        // When this is a zero-length view with a side, this should return a
        // negative number to indicate it is before its position, or a
        // positive number when after its position.
        getSide() { return 0; }
    }
    InlineView.prototype.children = none$2;
    const MaxJoinLen = 256;
    class TextView extends InlineView {
        constructor(text) {
            super();
            this.text = text;
        }
        get length() { return this.text.length; }
        createDOM(textDOM) {
            this.setDOM(textDOM || document.createTextNode(this.text));
        }
        sync(track) {
            if (!this.dom)
                this.createDOM();
            if (this.dom.nodeValue != this.text) {
                if (track && track.node == this.dom)
                    track.written = true;
                this.dom.nodeValue = this.text;
            }
        }
        reuseDOM(dom) {
            if (dom.nodeType != 3)
                return false;
            this.createDOM(dom);
            return true;
        }
        merge(from, to, source) {
            if (source && (!(source instanceof TextView) || this.length - (to - from) + source.length > MaxJoinLen))
                return false;
            this.text = this.text.slice(0, from) + (source ? source.text : "") + this.text.slice(to);
            this.markDirty();
            return true;
        }
        slice(from) {
            let result = new TextView(this.text.slice(from));
            this.text = this.text.slice(0, from);
            return result;
        }
        localPosFromDOM(node, offset) {
            return node == this.dom ? offset : offset ? this.text.length : 0;
        }
        domAtPos(pos) { return new DOMPos(this.dom, pos); }
        domBoundsAround(_from, _to, offset) {
            return { from: offset, to: offset + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
        }
        coordsAt(pos, side) {
            return textCoords(this.dom, pos, side);
        }
    }
    class MarkView extends InlineView {
        constructor(mark, children = [], length = 0) {
            super();
            this.mark = mark;
            this.children = children;
            this.length = length;
            for (let ch of children)
                ch.setParent(this);
        }
        createDOM() {
            let dom = document.createElement(this.mark.tagName);
            if (this.mark.class)
                dom.className = this.mark.class;
            if (this.mark.attrs)
                for (let name in this.mark.attrs)
                    dom.setAttribute(name, this.mark.attrs[name]);
            this.setDOM(dom);
        }
        sync(track) {
            if (!this.dom || (this.dirty & 4 /* Attrs */))
                this.createDOM();
            super.sync(track);
        }
        merge(from, to, source, openStart, openEnd) {
            if (source && (!(source instanceof MarkView && source.mark.eq(this.mark)) ||
                (from && openStart <= 0) || (to < this.length && openEnd <= 0)))
                return false;
            mergeInlineChildren(this, from, to, source ? source.children : none$2, openStart - 1, openEnd - 1);
            this.markDirty();
            return true;
        }
        slice(from) {
            let result = [], off = 0, detachFrom = -1, i = 0;
            for (let elt of this.children) {
                let end = off + elt.length;
                if (end > from)
                    result.push(off < from ? elt.slice(from - off) : elt);
                if (detachFrom < 0 && off >= from)
                    detachFrom = i;
                off = end;
                i++;
            }
            let length = this.length - from;
            this.length = from;
            if (detachFrom > -1)
                this.replaceChildren(detachFrom, this.children.length);
            return new MarkView(this.mark, result, length);
        }
        domAtPos(pos) {
            return inlineDOMAtPos(this.dom, this.children, pos);
        }
        coordsAt(pos, side) {
            return coordsInChildren(this, pos, side);
        }
    }
    function textCoords(text, pos, side) {
        let length = text.nodeValue.length;
        if (pos > length)
            pos = length;
        let from = pos, to = pos, flatten = 0;
        if (pos == 0 && side < 0 || pos == length && side >= 0) {
            if (!(browser.chrome || browser.gecko)) { // These browsers reliably return valid rectangles for empty ranges
                if (pos) {
                    from--;
                    flatten = 1;
                } // FIXME this is wrong in RTL text
                else {
                    to++;
                    flatten = -1;
                }
            }
        }
        else {
            if (side < 0)
                from--;
            else
                to++;
        }
        let rects = textRange(text, from, to).getClientRects();
        if (!rects.length)
            return Rect0;
        let rect = rects[(flatten ? flatten < 0 : side >= 0) ? 0 : rects.length - 1];
        if (browser.safari && !flatten && rect.width == 0)
            rect = Array.prototype.find.call(rects, r => r.width) || rect;
        return flatten ? flattenRect(rect, flatten < 0) : rect;
    }
    // Also used for collapsed ranges that don't have a placeholder widget!
    class WidgetView extends InlineView {
        constructor(widget, length, side) {
            super();
            this.widget = widget;
            this.length = length;
            this.side = side;
        }
        static create(widget, length, side) {
            return new (widget.customView || WidgetView)(widget, length, side);
        }
        slice(from) {
            let result = WidgetView.create(this.widget, this.length - from, this.side);
            this.length -= from;
            return result;
        }
        sync() {
            if (!this.dom || !this.widget.updateDOM(this.dom)) {
                this.setDOM(this.widget.toDOM(this.editorView));
                this.dom.contentEditable = "false";
            }
        }
        getSide() { return this.side; }
        merge(from, to, source, openStart, openEnd) {
            if (source && (!(source instanceof WidgetView) || !this.widget.compare(source.widget) ||
                from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
                return false;
            this.length = from + (source ? source.length : 0) + (this.length - to);
            return true;
        }
        become(other) {
            if (other.length == this.length && other instanceof WidgetView && other.side == this.side) {
                if (this.widget.constructor == other.widget.constructor) {
                    if (!this.widget.eq(other.widget))
                        this.markDirty(true);
                    this.widget = other.widget;
                    return true;
                }
            }
            return false;
        }
        ignoreMutation() { return true; }
        ignoreEvent(event) { return this.widget.ignoreEvent(event); }
        get overrideDOMText() {
            if (this.length == 0)
                return Text.empty;
            let top = this;
            while (top.parent)
                top = top.parent;
            let view = top.editorView, text = view && view.state.doc, start = this.posAtStart;
            return text ? text.slice(start, start + this.length) : Text.empty;
        }
        domAtPos(pos) {
            return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
        }
        domBoundsAround() { return null; }
        coordsAt(pos, side) {
            let rects = this.dom.getClientRects(), rect = null;
            if (!rects.length)
                return Rect0;
            for (let i = pos > 0 ? rects.length - 1 : 0;; i += (pos > 0 ? -1 : 1)) {
                rect = rects[i];
                if (pos > 0 ? i == 0 : i == rects.length - 1 || rect.top < rect.bottom)
                    break;
            }
            return (pos == 0 && side > 0 || pos == this.length && side <= 0) ? rect : flattenRect(rect, pos == 0);
        }
    }
    class CompositionView extends WidgetView {
        domAtPos(pos) { return new DOMPos(this.widget.text, pos); }
        sync() { if (!this.dom)
            this.setDOM(this.widget.toDOM()); }
        localPosFromDOM(node, offset) {
            return !offset ? 0 : node.nodeType == 3 ? Math.min(offset, this.length) : this.length;
        }
        ignoreMutation() { return false; }
        get overrideDOMText() { return null; }
        coordsAt(pos, side) { return textCoords(this.widget.text, pos, side); }
    }
    function mergeInlineChildren(parent, from, to, elts, openStart, openEnd) {
        let cur = parent.childCursor();
        let { i: toI, off: toOff } = cur.findPos(to, 1);
        let { i: fromI, off: fromOff } = cur.findPos(from, -1);
        let dLen = from - to;
        for (let view of elts)
            dLen += view.length;
        parent.length += dLen;
        let { children } = parent;
        // Both from and to point into the same child view
        if (fromI == toI && fromOff) {
            let start = children[fromI];
            // Maybe just update that view and be done
            if (elts.length == 1 && start.merge(fromOff, toOff, elts[0], openStart, openEnd))
                return;
            if (elts.length == 0) {
                start.merge(fromOff, toOff, null, openStart, openEnd);
                return;
            }
            // Otherwise split it, so that we don't have to worry about aliasing front/end afterwards
            let after = start.slice(toOff);
            if (after.merge(0, 0, elts[elts.length - 1], 0, openEnd))
                elts[elts.length - 1] = after;
            else
                elts.push(after);
            toI++;
            openEnd = toOff = 0;
        }
        // Make sure start and end positions fall on node boundaries
        // (fromOff/toOff are no longer used after this), and that if the
        // start or end of the elts can be merged with adjacent nodes,
        // this is done
        if (toOff) {
            let end = children[toI];
            if (elts.length && end.merge(0, toOff, elts[elts.length - 1], 0, openEnd)) {
                elts.pop();
                openEnd = elts.length ? 0 : openStart;
            }
            else {
                end.merge(0, toOff, null, 0, 0);
            }
        }
        else if (toI < children.length && elts.length &&
            children[toI].merge(0, 0, elts[elts.length - 1], 0, openEnd)) {
            elts.pop();
            openEnd = elts.length ? 0 : openStart;
        }
        if (fromOff) {
            let start = children[fromI];
            if (elts.length && start.merge(fromOff, start.length, elts[0], openStart, 0)) {
                elts.shift();
                openStart = elts.length ? 0 : openEnd;
            }
            else {
                start.merge(fromOff, start.length, null, 0, 0);
            }
            fromI++;
        }
        else if (fromI && elts.length) {
            let end = children[fromI - 1];
            if (end.merge(end.length, end.length, elts[0], openStart, 0)) {
                elts.shift();
                openStart = elts.length ? 0 : openEnd;
            }
        }
        // Then try to merge any mergeable nodes at the start and end of
        // the changed range
        while (fromI < toI && elts.length && children[toI - 1].become(elts[elts.length - 1])) {
            elts.pop();
            toI--;
            openEnd = elts.length ? 0 : openStart;
        }
        while (fromI < toI && elts.length && children[fromI].become(elts[0])) {
            elts.shift();
            fromI++;
            openStart = elts.length ? 0 : openEnd;
        }
        if (!elts.length && fromI && toI < children.length &&
            children[toI].merge(0, 0, children[fromI - 1], openStart, openEnd))
            fromI--;
        // And if anything remains, splice the child array to insert the new elts
        if (elts.length || fromI != toI)
            parent.replaceChildren(fromI, toI, elts);
    }
    function inlineDOMAtPos(dom, children, pos) {
        let i = 0;
        for (let off = 0; i < children.length; i++) {
            let child = children[i], end = off + child.length;
            if (end == off && child.getSide() <= 0)
                continue;
            if (pos > off && pos < end && child.dom.parentNode == dom)
                return child.domAtPos(pos - off);
            if (pos <= off)
                break;
            off = end;
        }
        for (; i > 0; i--) {
            let before = children[i - 1].dom;
            if (before.parentNode == dom)
                return DOMPos.after(before);
        }
        return new DOMPos(dom, 0);
    }
    // Assumes `view`, if a mark view, has precisely 1 child.
    function joinInlineInto(parent, view, open) {
        let last, { children } = parent;
        if (open > 0 && view instanceof MarkView && children.length &&
            (last = children[children.length - 1]) instanceof MarkView && last.mark.eq(view.mark)) {
            joinInlineInto(last, view.children[0], open - 1);
        }
        else {
            children.push(view);
            view.setParent(parent);
        }
        parent.length += view.length;
    }
    function coordsInChildren(view, pos, side) {
        for (let off = 0, i = 0; i < view.children.length; i++) {
            let child = view.children[i], end = off + child.length, next;
            if ((side <= 0 || end == view.length || child.getSide() > 0 ? end >= pos : end > pos) &&
                (pos < end || i + 1 == view.children.length || (next = view.children[i + 1]).length || next.getSide() > 0)) {
                let flatten = 0;
                if (end == off) {
                    if (child.getSide() <= 0)
                        continue;
                    flatten = side = -child.getSide();
                }
                let rect = child.coordsAt(pos - off, side);
                return flatten && rect ? flattenRect(rect, side < 0) : rect;
            }
            off = end;
        }
        let last = view.dom.lastChild;
        if (!last)
            return view.dom.getBoundingClientRect();
        let rects = clientRectsFor(last);
        return rects[rects.length - 1];
    }

    function combineAttrs(source, target) {
        for (let name in source) {
            if (name == "class" && target.class)
                target.class += " " + source.class;
            else if (name == "style" && target.style)
                target.style += ";" + source.style;
            else
                target[name] = source[name];
        }
        return target;
    }
    function attrsEq(a, b) {
        if (a == b)
            return true;
        if (!a || !b)
            return false;
        let keysA = Object.keys(a), keysB = Object.keys(b);
        if (keysA.length != keysB.length)
            return false;
        for (let key of keysA) {
            if (keysB.indexOf(key) == -1 || a[key] !== b[key])
                return false;
        }
        return true;
    }
    function updateAttrs(dom, prev, attrs) {
        if (prev)
            for (let name in prev)
                if (!(attrs && name in attrs))
                    dom.removeAttribute(name);
        if (attrs)
            for (let name in attrs)
                if (!(prev && prev[name] == attrs[name]))
                    dom.setAttribute(name, attrs[name]);
    }

    /**
    Widgets added to the content are described by subclasses of this
    class. Using a description object like that makes it possible to
    delay creating of the DOM structure for a widget until it is
    needed, and to avoid redrawing widgets even when the decorations
    that define them are recreated.
    */
    class WidgetType {
        /**
        Compare this instance to another instance of the same type.
        (TypeScript can't express this, but only instances of the same
        specific class will be passed to this method.) This is used to
        avoid redrawing widgets when they are replaced by a new
        decoration of the same type. The default implementation just
        returns `false`, which will cause new instances of the widget to
        always be redrawn.
        */
        eq(_widget) { return false; }
        /**
        Update a DOM element created by a widget of the same type (but
        different, non-`eq` content) to reflect this widget. May return
        true to indicate that it could update, false to indicate it
        couldn't (in which case the widget will be redrawn). The default
        implementation just returns false.
        */
        updateDOM(_dom) { return false; }
        /**
        @internal
        */
        compare(other) {
            return this == other || this.constructor == other.constructor && this.eq(other);
        }
        /**
        The estimated height this widget will have, to be used when
        estimating the height of content that hasn't been drawn. May
        return -1 to indicate you don't know. The default implementation
        returns -1.
        */
        get estimatedHeight() { return -1; }
        /**
        Can be used to configure which kinds of events inside the widget
        should be ignored by the editor. The default is to ignore all
        events.
        */
        ignoreEvent(_event) { return true; }
        /**
        @internal
        */
        get customView() { return null; }
    }
    /**
    The different types of blocks that can occur in an editor view.
    */
    var BlockType = /*@__PURE__*/(function (BlockType) {
        /**
        A line of text.
        */
        BlockType[BlockType["Text"] = 0] = "Text";
        /**
        A block widget associated with the position after it.
        */
        BlockType[BlockType["WidgetBefore"] = 1] = "WidgetBefore";
        /**
        A block widget associated with the position before it.
        */
        BlockType[BlockType["WidgetAfter"] = 2] = "WidgetAfter";
        /**
        A block widget [replacing](https://codemirror.net/6/docs/ref/#view.Decoration^replace) a range of content.
        */
        BlockType[BlockType["WidgetRange"] = 3] = "WidgetRange";
    return BlockType})(BlockType || (BlockType = {}));
    /**
    A decoration provides information on how to draw or style a piece
    of content. You'll usually use it wrapped in a
    [`Range`](https://codemirror.net/6/docs/ref/#rangeset.Range), which adds a start and end position.
    */
    class Decoration extends RangeValue {
        /**
        @internal
        */
        constructor(
        /**
        @internal
        */
        startSide, 
        /**
        @internal
        */
        endSide, 
        /**
        @internal
        */
        widget, 
        /**
        The config object used to create this decoration. You can
        include additional properties in there to store metadata about
        your decoration.
        */
        spec) {
            super();
            this.startSide = startSide;
            this.endSide = endSide;
            this.widget = widget;
            this.spec = spec;
        }
        /**
        @internal
        */
        get heightRelevant() { return false; }
        /**
        Create a mark decoration, which influences the styling of the
        content in its range. Nested mark decorations will cause nested
        DOM elements to be created. Nesting order is determined by
        precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations) or
        (below the facet-provided decorations) [view
        plugin](https://codemirror.net/6/docs/ref/#view.PluginSpec.decorations). Such elements are split
        on line boundaries and on the boundaries of higher-precedence
        decorations.
        */
        static mark(spec) {
            return new MarkDecoration(spec);
        }
        /**
        Create a widget decoration, which adds an element at the given
        position.
        */
        static widget(spec) {
            let side = spec.side || 0;
            if (spec.block)
                side += (200000000 /* BigBlock */ + 1) * (side > 0 ? 1 : -1);
            return new PointDecoration(spec, side, side, !!spec.block, spec.widget || null, false);
        }
        /**
        Create a replace decoration which replaces the given range with
        a widget, or simply hides it.
        */
        static replace(spec) {
            let block = !!spec.block;
            let { start, end } = getInclusive(spec);
            let startSide = block ? -200000000 /* BigBlock */ * (start ? 2 : 1) : 100000000 /* BigInline */ * (start ? -1 : 1);
            let endSide = block ? 200000000 /* BigBlock */ * (end ? 2 : 1) : 100000000 /* BigInline */ * (end ? 1 : -1);
            return new PointDecoration(spec, startSide, endSide, block, spec.widget || null, true);
        }
        /**
        Create a line decoration, which can add DOM attributes to the
        line starting at the given position.
        */
        static line(spec) {
            return new LineDecoration(spec);
        }
        /**
        Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
        decorated range or ranges. If the ranges aren't already sorted,
        pass `true` for `sort` to make the library sort them for you.
        */
        static set(of, sort = false) {
            return RangeSet.of(of, sort);
        }
        /**
        @internal
        */
        hasHeight() { return this.widget ? this.widget.estimatedHeight > -1 : false; }
    }
    /**
    The empty set of decorations.
    */
    Decoration.none = RangeSet.empty;
    class MarkDecoration extends Decoration {
        constructor(spec) {
            let { start, end } = getInclusive(spec);
            super(100000000 /* BigInline */ * (start ? -1 : 1), 100000000 /* BigInline */ * (end ? 1 : -1), null, spec);
            this.tagName = spec.tagName || "span";
            this.class = spec.class || "";
            this.attrs = spec.attributes || null;
        }
        eq(other) {
            return this == other ||
                other instanceof MarkDecoration &&
                    this.tagName == other.tagName &&
                    this.class == other.class &&
                    attrsEq(this.attrs, other.attrs);
        }
        range(from, to = from) {
            if (from >= to)
                throw new RangeError("Mark decorations may not be empty");
            return super.range(from, to);
        }
    }
    MarkDecoration.prototype.point = false;
    class LineDecoration extends Decoration {
        constructor(spec) {
            super(-100000000 /* BigInline */, -100000000 /* BigInline */, null, spec);
        }
        eq(other) {
            return other instanceof LineDecoration && attrsEq(this.spec.attributes, other.spec.attributes);
        }
        range(from, to = from) {
            if (to != from)
                throw new RangeError("Line decoration ranges must be zero-length");
            return super.range(from, to);
        }
    }
    LineDecoration.prototype.mapMode = MapMode.TrackBefore;
    LineDecoration.prototype.point = true;
    class PointDecoration extends Decoration {
        constructor(spec, startSide, endSide, block, widget, isReplace) {
            super(startSide, endSide, widget, spec);
            this.block = block;
            this.isReplace = isReplace;
            this.mapMode = !block ? MapMode.TrackDel : startSide < 0 ? MapMode.TrackBefore : MapMode.TrackAfter;
        }
        // Only relevant when this.block == true
        get type() {
            return this.startSide < this.endSide ? BlockType.WidgetRange
                : this.startSide < 0 ? BlockType.WidgetBefore : BlockType.WidgetAfter;
        }
        get heightRelevant() { return this.block || !!this.widget && this.widget.estimatedHeight >= 5; }
        eq(other) {
            return other instanceof PointDecoration &&
                widgetsEq(this.widget, other.widget) &&
                this.block == other.block &&
                this.startSide == other.startSide && this.endSide == other.endSide;
        }
        range(from, to = from) {
            if (this.isReplace && (from > to || (from == to && this.startSide > 0 && this.endSide < 0)))
                throw new RangeError("Invalid range for replacement decoration");
            if (!this.isReplace && to != from)
                throw new RangeError("Widget decorations can only have zero-length ranges");
            return super.range(from, to);
        }
    }
    PointDecoration.prototype.point = true;
    function getInclusive(spec) {
        let { inclusiveStart: start, inclusiveEnd: end } = spec;
        if (start == null)
            start = spec.inclusive;
        if (end == null)
            end = spec.inclusive;
        return { start: start || false, end: end || false };
    }
    function widgetsEq(a, b) {
        return a == b || !!(a && b && a.compare(b));
    }
    function addRange(from, to, ranges, margin = 0) {
        let last = ranges.length - 1;
        if (last >= 0 && ranges[last] + margin > from)
            ranges[last] = Math.max(ranges[last], to);
        else
            ranges.push(from, to);
    }

    class LineView extends ContentView {
        constructor() {
            super(...arguments);
            this.children = [];
            this.length = 0;
            this.prevAttrs = undefined;
            this.attrs = null;
            this.breakAfter = 0;
        }
        // Consumes source
        merge(from, to, source, takeDeco, openStart, openEnd) {
            if (source) {
                if (!(source instanceof LineView))
                    return false;
                if (!this.dom)
                    source.transferDOM(this); // Reuse source.dom when appropriate
            }
            if (takeDeco)
                this.setDeco(source ? source.attrs : null);
            mergeInlineChildren(this, from, to, source ? source.children : none$1$1, openStart, openEnd);
            return true;
        }
        split(at) {
            let end = new LineView;
            end.breakAfter = this.breakAfter;
            if (this.length == 0)
                return end;
            let { i, off } = this.childPos(at);
            if (off) {
                end.append(this.children[i].slice(off), 0);
                this.children[i].merge(off, this.children[i].length, null, 0, 0);
                i++;
            }
            for (let j = i; j < this.children.length; j++)
                end.append(this.children[j], 0);
            while (i > 0 && this.children[i - 1].length == 0) {
                this.children[i - 1].parent = null;
                i--;
            }
            this.children.length = i;
            this.markDirty();
            this.length = at;
            return end;
        }
        transferDOM(other) {
            if (!this.dom)
                return;
            other.setDOM(this.dom);
            other.prevAttrs = this.prevAttrs === undefined ? this.attrs : this.prevAttrs;
            this.prevAttrs = undefined;
            this.dom = null;
        }
        setDeco(attrs) {
            if (!attrsEq(this.attrs, attrs)) {
                if (this.dom) {
                    this.prevAttrs = this.attrs;
                    this.markDirty();
                }
                this.attrs = attrs;
            }
        }
        // Only called when building a line view in ContentBuilder
        append(child, openStart) {
            joinInlineInto(this, child, openStart);
        }
        // Only called when building a line view in ContentBuilder
        addLineDeco(deco) {
            let attrs = deco.spec.attributes;
            if (attrs)
                this.attrs = combineAttrs(attrs, this.attrs || {});
        }
        domAtPos(pos) {
            return inlineDOMAtPos(this.dom, this.children, pos);
        }
        sync(track) {
            if (!this.dom || (this.dirty & 4 /* Attrs */)) {
                this.setDOM(document.createElement("div"));
                this.dom.className = "cm-line";
                this.prevAttrs = this.attrs ? null : undefined;
            }
            if (this.prevAttrs !== undefined) {
                updateAttrs(this.dom, this.prevAttrs, this.attrs);
                this.dom.classList.add("cm-line");
                this.prevAttrs = undefined;
            }
            super.sync(track);
            let last = this.dom.lastChild;
            while (last && ContentView.get(last) instanceof MarkView)
                last = last.lastChild;
            if (!last ||
                last.nodeName != "BR" && ContentView.get(last) instanceof WidgetView &&
                    (!browser.ios || !this.children.some(ch => ch instanceof TextView))) {
                let hack = document.createElement("BR");
                hack.cmIgnore = true;
                this.dom.appendChild(hack);
            }
        }
        measureTextSize() {
            if (this.children.length == 0 || this.length > 20)
                return null;
            let totalWidth = 0;
            for (let child of this.children) {
                if (!(child instanceof TextView))
                    return null;
                let rects = clientRectsFor(child.dom);
                if (rects.length != 1)
                    return null;
                totalWidth += rects[0].width;
            }
            return { lineHeight: this.dom.getBoundingClientRect().height,
                charWidth: totalWidth / this.length };
        }
        coordsAt(pos, side) {
            return coordsInChildren(this, pos, side);
        }
        match(_other) { return false; }
        get type() { return BlockType.Text; }
        static find(docView, pos) {
            for (let i = 0, off = 0;; i++) {
                let block = docView.children[i], end = off + block.length;
                if (end >= pos) {
                    if (block instanceof LineView)
                        return block;
                    if (block.length)
                        return null;
                }
                off = end + block.breakAfter;
            }
        }
    }
    const none$1$1 = [];
    class BlockWidgetView extends ContentView {
        constructor(widget, length, type) {
            super();
            this.widget = widget;
            this.length = length;
            this.type = type;
            this.breakAfter = 0;
        }
        merge(from, to, source, _takeDeco, openStart, openEnd) {
            if (source && (!(source instanceof BlockWidgetView) || !this.widget.compare(source.widget) ||
                from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
                return false;
            this.length = from + (source ? source.length : 0) + (this.length - to);
            return true;
        }
        domAtPos(pos) {
            return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
        }
        split(at) {
            let len = this.length - at;
            this.length = at;
            return new BlockWidgetView(this.widget, len, this.type);
        }
        get children() { return none$1$1; }
        sync() {
            if (!this.dom || !this.widget.updateDOM(this.dom)) {
                this.setDOM(this.widget.toDOM(this.editorView));
                this.dom.contentEditable = "false";
            }
        }
        get overrideDOMText() {
            return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : Text.empty;
        }
        domBoundsAround() { return null; }
        match(other) {
            if (other instanceof BlockWidgetView && other.type == this.type &&
                other.widget.constructor == this.widget.constructor) {
                if (!other.widget.eq(this.widget))
                    this.markDirty(true);
                this.widget = other.widget;
                this.length = other.length;
                this.breakAfter = other.breakAfter;
                return true;
            }
            return false;
        }
        ignoreMutation() { return true; }
        ignoreEvent(event) { return this.widget.ignoreEvent(event); }
    }

    class ContentBuilder {
        constructor(doc, pos, end) {
            this.doc = doc;
            this.pos = pos;
            this.end = end;
            this.content = [];
            this.curLine = null;
            this.breakAtStart = 0;
            this.openStart = -1;
            this.openEnd = -1;
            this.text = "";
            this.textOff = 0;
            this.cursor = doc.iter();
            this.skip = pos;
        }
        posCovered() {
            if (this.content.length == 0)
                return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
            let last = this.content[this.content.length - 1];
            return !last.breakAfter && !(last instanceof BlockWidgetView && last.type == BlockType.WidgetBefore);
        }
        getLine() {
            if (!this.curLine)
                this.content.push(this.curLine = new LineView);
            return this.curLine;
        }
        addWidget(view) {
            this.curLine = null;
            this.content.push(view);
        }
        finish() {
            if (!this.posCovered())
                this.getLine();
        }
        wrapMarks(view, active) {
            for (let mark of active)
                view = new MarkView(mark, [view], view.length);
            return view;
        }
        buildText(length, active, openStart) {
            while (length > 0) {
                if (this.textOff == this.text.length) {
                    let { value, lineBreak, done } = this.cursor.next(this.skip);
                    this.skip = 0;
                    if (done)
                        throw new Error("Ran out of text content when drawing inline views");
                    if (lineBreak) {
                        if (!this.posCovered())
                            this.getLine();
                        if (this.content.length)
                            this.content[this.content.length - 1].breakAfter = 1;
                        else
                            this.breakAtStart = 1;
                        this.curLine = null;
                        length--;
                        continue;
                    }
                    else {
                        this.text = value;
                        this.textOff = 0;
                    }
                }
                let take = Math.min(this.text.length - this.textOff, length, 512 /* Chunk */);
                this.getLine().append(this.wrapMarks(new TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);
                this.textOff += take;
                length -= take;
                openStart = 0;
            }
        }
        span(from, to, active, openStart) {
            this.buildText(to - from, active, openStart);
            this.pos = to;
            if (this.openStart < 0)
                this.openStart = openStart;
        }
        point(from, to, deco, active, openStart) {
            let len = to - from;
            if (deco instanceof PointDecoration) {
                if (deco.block) {
                    let { type } = deco;
                    if (type == BlockType.WidgetAfter && !this.posCovered())
                        this.getLine();
                    this.addWidget(new BlockWidgetView(deco.widget || new NullWidget("div"), len, type));
                }
                else {
                    let widget = this.wrapMarks(WidgetView.create(deco.widget || new NullWidget("span"), len, deco.startSide), active);
                    this.getLine().append(widget, openStart);
                }
            }
            else if (this.doc.lineAt(this.pos).from == this.pos) { // Line decoration
                this.getLine().addLineDeco(deco);
            }
            if (len) {
                // Advance the iterator past the replaced content
                if (this.textOff + len <= this.text.length) {
                    this.textOff += len;
                }
                else {
                    this.skip += len - (this.text.length - this.textOff);
                    this.text = "";
                    this.textOff = 0;
                }
                this.pos = to;
            }
            if (this.openStart < 0)
                this.openStart = openStart;
        }
        static build(text, from, to, decorations) {
            let builder = new ContentBuilder(text, from, to);
            builder.openEnd = RangeSet.spans(decorations, from, to, builder);
            if (builder.openStart < 0)
                builder.openStart = builder.openEnd;
            builder.finish();
            return builder;
        }
    }
    class NullWidget extends WidgetType {
        constructor(tag) {
            super();
            this.tag = tag;
        }
        eq(other) { return other.tag == this.tag; }
        toDOM() { return document.createElement(this.tag); }
        updateDOM(elt) { return elt.nodeName.toLowerCase() == this.tag; }
    }

    const none$4 = [];
    const clickAddsSelectionRange = /*@__PURE__*/Facet.define();
    const dragMovesSelection$1 = /*@__PURE__*/Facet.define();
    const mouseSelectionStyle = /*@__PURE__*/Facet.define();
    const exceptionSink = /*@__PURE__*/Facet.define();
    const updateListener = /*@__PURE__*/Facet.define();
    const inputHandler = /*@__PURE__*/Facet.define();
    const scrollTo = /*@__PURE__*/StateEffect.define({
        map: (range, changes) => range.map(changes)
    });
    /**
    Log or report an unhandled exception in client code. Should
    probably only be used by extension code that allows client code to
    provide functions, and calls those functions in a context where an
    exception can't be propagated to calling code in a reasonable way
    (for example when in an event handler).

    Either calls a handler registered with
    [`EditorView.exceptionSink`](https://codemirror.net/6/docs/ref/#view.EditorView^exceptionSink),
    `window.onerror`, if defined, or `console.error` (in which case
    it'll pass `context`, when given, as first argument).
    */
    function logException(state, exception, context) {
        let handler = state.facet(exceptionSink);
        if (handler.length)
            handler[0](exception);
        else if (window.onerror)
            window.onerror(String(exception), context, undefined, undefined, exception);
        else if (context)
            console.error(context + ":", exception);
        else
            console.error(exception);
    }
    const editable = /*@__PURE__*/Facet.define({ combine: values => values.length ? values[0] : true });
    /**
    Used to [declare](https://codemirror.net/6/docs/ref/#view.PluginSpec.provide) which
    [fields](https://codemirror.net/6/docs/ref/#view.PluginValue) a [view plugin](https://codemirror.net/6/docs/ref/#view.ViewPlugin)
    provides.
    */
    class PluginFieldProvider {
        /**
        @internal
        */
        constructor(
        /**
        @internal
        */
        field, 
        /**
        @internal
        */
        get) {
            this.field = field;
            this.get = get;
        }
    }
    /**
    Plugin fields are a mechanism for allowing plugins to provide
    values that can be retrieved through the
    [`pluginField`](https://codemirror.net/6/docs/ref/#view.EditorView.pluginField) view method.
    */
    class PluginField {
        /**
        Create a [provider](https://codemirror.net/6/docs/ref/#view.PluginFieldProvider) for this field,
        to use with a plugin's [provide](https://codemirror.net/6/docs/ref/#view.PluginSpec.provide)
        option.
        */
        from(get) {
            return new PluginFieldProvider(this, get);
        }
        /**
        Define a new plugin field.
        */
        static define() { return new PluginField(); }
    }
    /**
    This field can be used by plugins to provide
    [decorations](https://codemirror.net/6/docs/ref/#view.Decoration).

    **Note**: For reasons of data flow (plugins are only updated
    after the viewport is computed), decorations produced by plugins
    are _not_ taken into account when predicting the vertical layout
    structure of the editor. Thus, things like large widgets or big
    replacements (i.e. code folding) should be provided through the
    state-level [`decorations` facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations),
    not this plugin field. Specifically, replacing decorations that
    cross line boundaries will break if provided through a plugin.
    */
    PluginField.decorations = /*@__PURE__*/PluginField.define();
    /**
    Used to provide ranges that should be treated as atoms as far as
    cursor motion is concerned. This causes methods like
    [`moveByChar`](https://codemirror.net/6/docs/ref/#view.EditorView.moveByChar) and
    [`moveVertically`](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) (and the
    commands built on top of them) to skip across such regions when
    a selection endpoint would enter them. This does _not_ prevent
    direct programmatic [selection
    updates](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) from moving into such
    regions.
    */
    PluginField.atomicRanges = /*@__PURE__*/PluginField.define();
    /**
    Plugins can provide additional scroll margins (space around the
    sides of the scrolling element that should be considered
    invisible) through this field. This can be useful when the
    plugin introduces elements that cover part of that element (for
    example a horizontally fixed gutter).
    */
    PluginField.scrollMargins = /*@__PURE__*/PluginField.define();
    let nextPluginID = 0;
    const viewPlugin = /*@__PURE__*/Facet.define();
    /**
    View plugins associate stateful values with a view. They can
    influence the way the content is drawn, and are notified of things
    that happen in the view.
    */
    class ViewPlugin {
        constructor(
        /**
        @internal
        */
        id, 
        /**
        @internal
        */
        create, 
        /**
        @internal
        */
        fields) {
            this.id = id;
            this.create = create;
            this.fields = fields;
            this.extension = viewPlugin.of(this);
        }
        /**
        Define a plugin from a constructor function that creates the
        plugin's value, given an editor view.
        */
        static define(create, spec) {
            let { eventHandlers, provide, decorations } = spec || {};
            let fields = [];
            if (provide)
                for (let provider of Array.isArray(provide) ? provide : [provide])
                    fields.push(provider);
            if (eventHandlers)
                fields.push(domEventHandlers.from((value) => ({ plugin: value, handlers: eventHandlers })));
            if (decorations)
                fields.push(PluginField.decorations.from(decorations));
            return new ViewPlugin(nextPluginID++, create, fields);
        }
        /**
        Create a plugin for a class whose constructor takes a single
        editor view as argument.
        */
        static fromClass(cls, spec) {
            return ViewPlugin.define(view => new cls(view), spec);
        }
    }
    const domEventHandlers = /*@__PURE__*/PluginField.define();
    class PluginInstance {
        constructor(spec) {
            this.spec = spec;
            // When starting an update, all plugins have this field set to the
            // update object, indicating they need to be updated. When finished
            // updating, it is set to `false`. Retrieving a plugin that needs to
            // be updated with `view.plugin` forces an eager update.
            this.mustUpdate = null;
            // This is null when the plugin is initially created, but
            // initialized on the first update.
            this.value = null;
        }
        takeField(type, target) {
            for (let { field, get } of this.spec.fields)
                if (field == type)
                    target.push(get(this.value));
        }
        update(view) {
            if (!this.value) {
                try {
                    this.value = this.spec.create(view);
                }
                catch (e) {
                    logException(view.state, e, "CodeMirror plugin crashed");
                    return PluginInstance.dummy;
                }
            }
            else if (this.mustUpdate) {
                let update = this.mustUpdate;
                this.mustUpdate = null;
                if (!this.value.update)
                    return this;
                try {
                    this.value.update(update);
                }
                catch (e) {
                    logException(update.state, e, "CodeMirror plugin crashed");
                    if (this.value.destroy)
                        try {
                            this.value.destroy();
                        }
                        catch (_) { }
                    return PluginInstance.dummy;
                }
            }
            return this;
        }
        destroy(view) {
            var _a;
            if ((_a = this.value) === null || _a === void 0 ? void 0 : _a.destroy) {
                try {
                    this.value.destroy();
                }
                catch (e) {
                    logException(view.state, e, "CodeMirror plugin crashed");
                }
            }
        }
    }
    PluginInstance.dummy = /*@__PURE__*/new PluginInstance(/*@__PURE__*/ViewPlugin.define(() => ({})));
    const editorAttributes = /*@__PURE__*/Facet.define({
        combine: values => values.reduce((a, b) => combineAttrs(b, a), {})
    });
    const contentAttributes = /*@__PURE__*/Facet.define({
        combine: values => values.reduce((a, b) => combineAttrs(b, a), {})
    });
    // Provide decorations
    const decorations = /*@__PURE__*/Facet.define();
    const styleModule = /*@__PURE__*/Facet.define();
    class ChangedRange {
        constructor(fromA, toA, fromB, toB) {
            this.fromA = fromA;
            this.toA = toA;
            this.fromB = fromB;
            this.toB = toB;
        }
        join(other) {
            return new ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));
        }
        addToSet(set) {
            let i = set.length, me = this;
            for (; i > 0; i--) {
                let range = set[i - 1];
                if (range.fromA > me.toA)
                    continue;
                if (range.toA < me.fromA)
                    break;
                me = me.join(range);
                set.splice(i - 1, 1);
            }
            set.splice(i, 0, me);
            return set;
        }
        static extendWithRanges(diff, ranges) {
            if (ranges.length == 0)
                return diff;
            let result = [];
            for (let dI = 0, rI = 0, posA = 0, posB = 0;; dI++) {
                let next = dI == diff.length ? null : diff[dI], off = posA - posB;
                let end = next ? next.fromB : 1e9;
                while (rI < ranges.length && ranges[rI] < end) {
                    let from = ranges[rI], to = ranges[rI + 1];
                    let fromB = Math.max(posB, from), toB = Math.min(end, to);
                    if (fromB <= toB)
                        new ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);
                    if (to > end)
                        break;
                    else
                        rI += 2;
                }
                if (!next)
                    return result;
                new ChangedRange(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);
                posA = next.toA;
                posB = next.toB;
            }
        }
    }
    /**
    View [plugins](https://codemirror.net/6/docs/ref/#view.ViewPlugin) are given instances of this
    class, which describe what happened, whenever the view is updated.
    */
    class ViewUpdate {
        /**
        @internal
        */
        constructor(
        /**
        The editor view that the update is associated with.
        */
        view, 
        /**
        The new editor state.
        */
        state, 
        /**
        The transactions involved in the update. May be empty.
        */
        transactions = none$4) {
            this.view = view;
            this.state = state;
            this.transactions = transactions;
            /**
            @internal
            */
            this.flags = 0;
            this.startState = view.state;
            this.changes = ChangeSet.empty(this.startState.doc.length);
            for (let tr of transactions)
                this.changes = this.changes.compose(tr.changes);
            let changedRanges = [];
            this.changes.iterChangedRanges((fromA, toA, fromB, toB) => changedRanges.push(new ChangedRange(fromA, toA, fromB, toB)));
            this.changedRanges = changedRanges;
            let focus = view.hasFocus;
            if (focus != view.inputState.notifiedFocused) {
                view.inputState.notifiedFocused = focus;
                this.flags |= 1 /* Focus */;
            }
            if (this.docChanged)
                this.flags |= 2 /* Height */;
        }
        /**
        Tells you whether the viewport changed in this update.
        */
        get viewportChanged() {
            return (this.flags & 4 /* Viewport */) > 0;
        }
        /**
        Indicates whether the line height in the editor changed in this update.
        */
        get heightChanged() {
            return (this.flags & 2 /* Height */) > 0;
        }
        /**
        Returns true when the document changed or the size of the editor
        or the lines or characters within it has changed.
        */
        get geometryChanged() {
            return this.docChanged || (this.flags & (16 /* Geometry */ | 2 /* Height */)) > 0;
        }
        /**
        True when this update indicates a focus change.
        */
        get focusChanged() {
            return (this.flags & 1 /* Focus */) > 0;
        }
        /**
        Whether the document changed in this update.
        */
        get docChanged() {
            return this.transactions.some(tr => tr.docChanged);
        }
        /**
        Whether the selection was explicitly set in this update.
        */
        get selectionSet() {
            return this.transactions.some(tr => tr.selection);
        }
        /**
        @internal
        */
        get empty() { return this.flags == 0 && this.transactions.length == 0; }
    }

    class DocView extends ContentView {
        constructor(view) {
            super();
            this.view = view;
            this.compositionDeco = Decoration.none;
            this.decorations = [];
            // Track a minimum width for the editor. When measuring sizes in
            // checkLayout, this is updated to point at the width of a given
            // element and its extent in the document. When a change happens in
            // that range, these are reset. That way, once we've seen a
            // line/element of a given length, we keep the editor wide enough to
            // fit at least that element, until it is changed, at which point we
            // forget it again.
            this.minWidth = 0;
            this.minWidthFrom = 0;
            this.minWidthTo = 0;
            // Track whether the DOM selection was set in a lossy way, so that
            // we don't mess it up when reading it back it
            this.impreciseAnchor = null;
            this.impreciseHead = null;
            this.setDOM(view.contentDOM);
            this.children = [new LineView];
            this.children[0].setParent(this);
            this.updateInner([new ChangedRange(0, 0, 0, view.state.doc.length)], this.updateDeco(), 0);
        }
        get root() { return this.view.root; }
        get editorView() { return this.view; }
        get length() { return this.view.state.doc.length; }
        // Update the document view to a given state. scrollIntoView can be
        // used as a hint to compute a new viewport that includes that
        // position, if we know the editor is going to scroll that position
        // into view.
        update(update) {
            let changedRanges = update.changedRanges;
            if (this.minWidth > 0 && changedRanges.length) {
                if (!changedRanges.every(({ fromA, toA }) => toA < this.minWidthFrom || fromA > this.minWidthTo)) {
                    this.minWidth = 0;
                }
                else {
                    this.minWidthFrom = update.changes.mapPos(this.minWidthFrom, 1);
                    this.minWidthTo = update.changes.mapPos(this.minWidthTo, 1);
                }
            }
            if (this.view.inputState.composing < 0)
                this.compositionDeco = Decoration.none;
            else if (update.transactions.length)
                this.compositionDeco = computeCompositionDeco(this.view, update.changes);
            // When the DOM nodes around the selection are moved to another
            // parent, Chrome sometimes reports a different selection through
            // getSelection than the one that it actually shows to the user.
            // This forces a selection update when lines are joined to work
            // around that. Issue #54
            let forceSelection = (browser.ie || browser.chrome) && !this.compositionDeco.size && update &&
                update.state.doc.lines != update.startState.doc.lines;
            let prevDeco = this.decorations, deco = this.updateDeco();
            let decoDiff = findChangedDeco(prevDeco, deco, update.changes);
            changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);
            let pointerSel = update.transactions.some(tr => tr.isUserEvent("select.pointer"));
            if (this.dirty == 0 /* Not */ && changedRanges.length == 0 &&
                !(update.flags & (4 /* Viewport */ | 8 /* LineGaps */)) &&
                update.state.selection.main.from >= this.view.viewport.from &&
                update.state.selection.main.to <= this.view.viewport.to) {
                this.updateSelection(forceSelection, pointerSel);
                return false;
            }
            else {
                this.updateInner(changedRanges, deco, update.startState.doc.length, forceSelection, pointerSel);
                return true;
            }
        }
        // Used both by update and checkLayout do perform the actual DOM
        // update
        updateInner(changes, deco, oldLength, forceSelection = false, pointerSel = false) {
            this.updateChildren(changes, deco, oldLength);
            let { observer } = this.view;
            observer.ignore(() => {
                // Lock the height during redrawing, since Chrome sometimes
                // messes with the scroll position during DOM mutation (though
                // no relayout is triggered and I cannot imagine how it can
                // recompute the scroll position without a layout)
                this.dom.style.height = this.view.viewState.domHeight + "px";
                this.dom.style.minWidth = this.minWidth ? this.minWidth + "px" : "";
                // Chrome will sometimes, when DOM mutations occur directly
                // around the selection, get confused and report a different
                // selection from the one it displays (issue #218). This tries
                // to detect that situation.
                let track = browser.chrome || browser.ios ? { node: observer.selectionRange.focusNode, written: false } : undefined;
                this.sync(track);
                this.dirty = 0 /* Not */;
                if (track && (track.written || observer.selectionRange.focusNode != track.node))
                    forceSelection = true;
                this.updateSelection(forceSelection, pointerSel);
                this.dom.style.height = "";
            });
        }
        updateChildren(changes, deco, oldLength) {
            let cursor = this.childCursor(oldLength);
            for (let i = changes.length - 1;; i--) {
                let next = i >= 0 ? changes[i] : null;
                if (!next)
                    break;
                let { fromA, toA, fromB, toB } = next;
                let { content, breakAtStart, openStart, openEnd } = ContentBuilder.build(this.view.state.doc, fromB, toB, deco);
                let { i: toI, off: toOff } = cursor.findPos(toA, 1);
                let { i: fromI, off: fromOff } = cursor.findPos(fromA, -1);
                this.replaceRange(fromI, fromOff, toI, toOff, content, breakAtStart, openStart, openEnd);
            }
        }
        replaceRange(fromI, fromOff, toI, toOff, content, breakAtStart, openStart, openEnd) {
            let before = this.children[fromI], last = content.length ? content[content.length - 1] : null;
            let breakAtEnd = last ? last.breakAfter : breakAtStart;
            // Change within a single line
            if (fromI == toI && !breakAtStart && !breakAtEnd && content.length < 2 &&
                before.merge(fromOff, toOff, content.length ? last : null, fromOff == 0, openStart, openEnd))
                return;
            let after = this.children[toI];
            // Make sure the end of the line after the update is preserved in `after`
            if (toOff < after.length) {
                // If we're splitting a line, separate part of the start line to
                // avoid that being mangled when updating the start line.
                if (fromI == toI) {
                    after = after.split(toOff);
                    toOff = 0;
                }
                // If the element after the replacement should be merged with
                // the last replacing element, update `content`
                if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) {
                    content[content.length - 1] = after;
                }
                else {
                    // Remove the start of the after element, if necessary, and
                    // add it to `content`.
                    if (toOff)
                        after.merge(0, toOff, null, false, 0, openEnd);
                    content.push(after);
                }
            }
            else if (after.breakAfter) {
                // The element at `toI` is entirely covered by this range.
                // Preserve its line break, if any.
                if (last)
                    last.breakAfter = 1;
                else
                    breakAtStart = 1;
            }
            // Since we've handled the next element from the current elements
            // now, make sure `toI` points after that.
            toI++;
            before.breakAfter = breakAtStart;
            if (fromOff > 0) {
                if (!breakAtStart && content.length && before.merge(fromOff, before.length, content[0], false, openStart, 0)) {
                    before.breakAfter = content.shift().breakAfter;
                }
                else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {
                    before.merge(fromOff, before.length, null, false, openStart, 0);
                }
                fromI++;
            }
            // Try to merge widgets on the boundaries of the replacement
            while (fromI < toI && content.length) {
                if (this.children[toI - 1].match(content[content.length - 1]))
                    toI--, content.pop();
                else if (this.children[fromI].match(content[0]))
                    fromI++, content.shift();
                else
                    break;
            }
            if (fromI < toI || content.length)
                this.replaceChildren(fromI, toI, content);
        }
        // Sync the DOM selection to this.state.selection
        updateSelection(force = false, fromPointer = false) {
            if (!(fromPointer || this.mayControlSelection()) ||
                browser.ios && this.view.inputState.rapidCompositionStart)
                return;
            let main = this.view.state.selection.main;
            // FIXME need to handle the case where the selection falls inside a block range
            let anchor = this.domAtPos(main.anchor);
            let head = main.empty ? anchor : this.domAtPos(main.head);
            // Always reset on Firefox when next to an uneditable node to
            // avoid invisible cursor bugs (#111)
            if (browser.gecko && main.empty && betweenUneditable(anchor)) {
                let dummy = document.createTextNode("");
                this.view.observer.ignore(() => anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null));
                anchor = head = new DOMPos(dummy, 0);
                force = true;
            }
            let domSel = this.view.observer.selectionRange;
            // If the selection is already here, or in an equivalent position, don't touch it
            if (force || !domSel.focusNode ||
                !isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) ||
                !isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) {
                this.view.observer.ignore(() => {
                    let rawSel = getSelection(this.root);
                    if (main.empty) {
                        // Work around https://bugzilla.mozilla.org/show_bug.cgi?id=1612076
                        if (browser.gecko) {
                            let nextTo = nextToUneditable(anchor.node, anchor.offset);
                            if (nextTo && nextTo != (1 /* Before */ | 2 /* After */)) {
                                let text = nearbyTextNode(anchor.node, anchor.offset, nextTo == 1 /* Before */ ? 1 : -1);
                                if (text)
                                    anchor = new DOMPos(text, nextTo == 1 /* Before */ ? 0 : text.nodeValue.length);
                            }
                        }
                        rawSel.collapse(anchor.node, anchor.offset);
                        if (main.bidiLevel != null && domSel.cursorBidiLevel != null)
                            domSel.cursorBidiLevel = main.bidiLevel;
                    }
                    else if (rawSel.extend) {
                        // Selection.extend can be used to create an 'inverted' selection
                        // (one where the focus is before the anchor), but not all
                        // browsers support it yet.
                        rawSel.collapse(anchor.node, anchor.offset);
                        rawSel.extend(head.node, head.offset);
                    }
                    else {
                        // Primitive (IE) way
                        let range = document.createRange();
                        if (main.anchor > main.head)
                            [anchor, head] = [head, anchor];
                        range.setEnd(head.node, head.offset);
                        range.setStart(anchor.node, anchor.offset);
                        rawSel.removeAllRanges();
                        rawSel.addRange(range);
                    }
                });
                this.view.observer.setSelectionRange(anchor, head);
            }
            this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);
            this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);
        }
        enforceCursorAssoc() {
            if (this.view.composing)
                return;
            let cursor = this.view.state.selection.main;
            let sel = getSelection(this.root);
            if (!cursor.empty || !cursor.assoc || !sel.modify)
                return;
            let line = LineView.find(this, cursor.head);
            if (!line)
                return;
            let lineStart = line.posAtStart;
            if (cursor.head == lineStart || cursor.head == lineStart + line.length)
                return;
            let before = this.coordsAt(cursor.head, -1), after = this.coordsAt(cursor.head, 1);
            if (!before || !after || before.bottom > after.top)
                return;
            let dom = this.domAtPos(cursor.head + cursor.assoc);
            sel.collapse(dom.node, dom.offset);
            sel.modify("move", cursor.assoc < 0 ? "forward" : "backward", "lineboundary");
        }
        mayControlSelection() {
            return this.view.state.facet(editable) ? this.root.activeElement == this.dom
                : hasSelection(this.dom, this.view.observer.selectionRange);
        }
        nearest(dom) {
            for (let cur = dom; cur;) {
                let domView = ContentView.get(cur);
                if (domView && domView.rootView == this)
                    return domView;
                cur = cur.parentNode;
            }
            return null;
        }
        posFromDOM(node, offset) {
            let view = this.nearest(node);
            if (!view)
                throw new RangeError("Trying to find position for a DOM position outside of the document");
            return view.localPosFromDOM(node, offset) + view.posAtStart;
        }
        domAtPos(pos) {
            let { i, off } = this.childCursor().findPos(pos, -1);
            for (; i < this.children.length - 1;) {
                let child = this.children[i];
                if (off < child.length || child instanceof LineView)
                    break;
                i++;
                off = 0;
            }
            return this.children[i].domAtPos(off);
        }
        coordsAt(pos, side) {
            for (let off = this.length, i = this.children.length - 1;; i--) {
                let child = this.children[i], start = off - child.breakAfter - child.length;
                if (pos > start ||
                    (pos == start && child.type != BlockType.WidgetBefore && child.type != BlockType.WidgetAfter &&
                        (!i || side == 2 || this.children[i - 1].breakAfter ||
                            (this.children[i - 1].type == BlockType.WidgetBefore && side > -2))))
                    return child.coordsAt(pos - start, side);
                off = start;
            }
        }
        measureVisibleLineHeights() {
            let result = [], { from, to } = this.view.viewState.viewport;
            let minWidth = Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;
            for (let pos = 0, i = 0; i < this.children.length; i++) {
                let child = this.children[i], end = pos + child.length;
                if (end > to)
                    break;
                if (pos >= from) {
                    result.push(child.dom.getBoundingClientRect().height);
                    let width = child.dom.scrollWidth;
                    if (width > minWidth) {
                        this.minWidth = minWidth = width;
                        this.minWidthFrom = pos;
                        this.minWidthTo = end;
                    }
                }
                pos = end + child.breakAfter;
            }
            return result;
        }
        measureTextSize() {
            for (let child of this.children) {
                if (child instanceof LineView) {
                    let measure = child.measureTextSize();
                    if (measure)
                        return measure;
                }
            }
            // If no workable line exists, force a layout of a measurable element
            let dummy = document.createElement("div"), lineHeight, charWidth;
            dummy.className = "cm-line";
            dummy.textContent = "abc def ghi jkl mno pqr stu";
            this.view.observer.ignore(() => {
                this.dom.appendChild(dummy);
                let rect = clientRectsFor(dummy.firstChild)[0];
                lineHeight = dummy.getBoundingClientRect().height;
                charWidth = rect ? rect.width / 27 : 7;
                dummy.remove();
            });
            return { lineHeight, charWidth };
        }
        childCursor(pos = this.length) {
            // Move back to start of last element when possible, so that
            // `ChildCursor.findPos` doesn't have to deal with the edge case
            // of being after the last element.
            let i = this.children.length;
            if (i)
                pos -= this.children[--i].length;
            return new ChildCursor(this.children, pos, i);
        }
        computeBlockGapDeco() {
            let deco = [], vs = this.view.viewState;
            for (let pos = 0, i = 0;; i++) {
                let next = i == vs.viewports.length ? null : vs.viewports[i];
                let end = next ? next.from - 1 : this.length;
                if (end > pos) {
                    let height = vs.lineAt(end, 0).bottom - vs.lineAt(pos, 0).top;
                    deco.push(Decoration.replace({ widget: new BlockGapWidget(height), block: true, inclusive: true }).range(pos, end));
                }
                if (!next)
                    break;
                pos = next.to + 1;
            }
            return Decoration.set(deco);
        }
        updateDeco() {
            return this.decorations = [
                ...this.view.pluginField(PluginField.decorations),
                ...this.view.state.facet(decorations),
                this.compositionDeco,
                this.computeBlockGapDeco(),
                this.view.viewState.lineGapDeco
            ];
        }
        scrollRangeIntoView(range) {
            let rect = this.coordsAt(range.head, range.empty ? range.assoc : range.head > range.anchor ? -1 : 1), other;
            if (!rect)
                return;
            if (!range.empty && (other = this.coordsAt(range.anchor, range.anchor > range.head ? -1 : 1)))
                rect = { left: Math.min(rect.left, other.left), top: Math.min(rect.top, other.top),
                    right: Math.max(rect.right, other.right), bottom: Math.max(rect.bottom, other.bottom) };
            let mLeft = 0, mRight = 0, mTop = 0, mBottom = 0;
            for (let margins of this.view.pluginField(PluginField.scrollMargins))
                if (margins) {
                    let { left, right, top, bottom } = margins;
                    if (left != null)
                        mLeft = Math.max(mLeft, left);
                    if (right != null)
                        mRight = Math.max(mRight, right);
                    if (top != null)
                        mTop = Math.max(mTop, top);
                    if (bottom != null)
                        mBottom = Math.max(mBottom, bottom);
                }
            scrollRectIntoView(this.dom, {
                left: rect.left - mLeft, top: rect.top - mTop,
                right: rect.right + mRight, bottom: rect.bottom + mBottom
            }, range.head < range.anchor ? -1 : 1);
        }
    }
    function betweenUneditable(pos) {
        return pos.node.nodeType == 1 && pos.node.firstChild &&
            (pos.offset == 0 || pos.node.childNodes[pos.offset - 1].contentEditable == "false") &&
            (pos.offset == pos.node.childNodes.length || pos.node.childNodes[pos.offset].contentEditable == "false");
    }
    class BlockGapWidget extends WidgetType {
        constructor(height) {
            super();
            this.height = height;
        }
        toDOM() {
            let elt = document.createElement("div");
            this.updateDOM(elt);
            return elt;
        }
        eq(other) { return other.height == this.height; }
        updateDOM(elt) {
            elt.style.height = this.height + "px";
            return true;
        }
        get estimatedHeight() { return this.height; }
    }
    function computeCompositionDeco(view, changes) {
        let sel = view.observer.selectionRange;
        let textNode = sel.focusNode && nearbyTextNode(sel.focusNode, sel.focusOffset, 0);
        if (!textNode)
            return Decoration.none;
        let cView = view.docView.nearest(textNode);
        let from, to, topNode = textNode;
        if (cView instanceof InlineView) {
            while (cView.parent instanceof InlineView)
                cView = cView.parent;
            from = cView.posAtStart;
            to = from + cView.length;
            topNode = cView.dom;
        }
        else if (cView instanceof LineView) {
            while (topNode.parentNode != cView.dom)
                topNode = topNode.parentNode;
            let prev = topNode.previousSibling;
            while (prev && !ContentView.get(prev))
                prev = prev.previousSibling;
            from = to = prev ? ContentView.get(prev).posAtEnd : cView.posAtStart;
        }
        else {
            return Decoration.none;
        }
        let newFrom = changes.mapPos(from, 1), newTo = Math.max(newFrom, changes.mapPos(to, -1));
        let text = textNode.nodeValue, { state } = view;
        if (newTo - newFrom < text.length) {
            if (state.sliceDoc(newFrom, Math.min(state.doc.length, newFrom + text.length)) == text)
                newTo = newFrom + text.length;
            else if (state.sliceDoc(Math.max(0, newTo - text.length), newTo) == text)
                newFrom = newTo - text.length;
            else
                return Decoration.none;
        }
        else if (state.sliceDoc(newFrom, newTo) != text) {
            return Decoration.none;
        }
        return Decoration.set(Decoration.replace({ widget: new CompositionWidget(topNode, textNode) }).range(newFrom, newTo));
    }
    class CompositionWidget extends WidgetType {
        constructor(top, text) {
            super();
            this.top = top;
            this.text = text;
        }
        eq(other) { return this.top == other.top && this.text == other.text; }
        toDOM() { return this.top; }
        ignoreEvent() { return false; }
        get customView() { return CompositionView; }
    }
    function nearbyTextNode(node, offset, side) {
        for (;;) {
            if (node.nodeType == 3)
                return node;
            if (node.nodeType == 1 && offset > 0 && side <= 0) {
                node = node.childNodes[offset - 1];
                offset = maxOffset(node);
            }
            else if (node.nodeType == 1 && offset < node.childNodes.length && side >= 0) {
                node = node.childNodes[offset];
                offset = 0;
            }
            else {
                return null;
            }
        }
    }
    function nextToUneditable(node, offset) {
        if (node.nodeType != 1)
            return 0;
        return (offset && node.childNodes[offset - 1].contentEditable == "false" ? 1 /* Before */ : 0) |
            (offset < node.childNodes.length && node.childNodes[offset].contentEditable == "false" ? 2 /* After */ : 0);
    }
    class DecorationComparator$1 {
        constructor() {
            this.changes = [];
        }
        compareRange(from, to) { addRange(from, to, this.changes); }
        comparePoint(from, to) { addRange(from, to, this.changes); }
    }
    function findChangedDeco(a, b, diff) {
        let comp = new DecorationComparator$1;
        RangeSet.compare(a, b, diff, comp);
        return comp.changes;
    }

    /**
    Used to indicate [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
    */
    var Direction = /*@__PURE__*/(function (Direction) {
        // (These are chosen to match the base levels, in bidi algorithm
        // terms, of spans in that direction.)
        /**
        Left-to-right.
        */
        Direction[Direction["LTR"] = 0] = "LTR";
        /**
        Right-to-left.
        */
        Direction[Direction["RTL"] = 1] = "RTL";
    return Direction})(Direction || (Direction = {}));
    const LTR = Direction.LTR, RTL = Direction.RTL;
    // Decode a string with each type encoded as log2(type)
    function dec(str) {
        let result = [];
        for (let i = 0; i < str.length; i++)
            result.push(1 << +str[i]);
        return result;
    }
    // Character types for codepoints 0 to 0xf8
    const LowTypes = /*@__PURE__*/dec("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008");
    // Character types for codepoints 0x600 to 0x6f9
    const ArabicTypes = /*@__PURE__*/dec("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333");
    const Brackets = /*@__PURE__*/Object.create(null), BracketStack = [];
    // There's a lot more in
    // https://www.unicode.org/Public/UCD/latest/ucd/BidiBrackets.txt,
    // which are left out to keep code size down.
    for (let p of ["()", "[]", "{}"]) {
        let l = /*@__PURE__*/p.charCodeAt(0), r = /*@__PURE__*/p.charCodeAt(1);
        Brackets[l] = r;
        Brackets[r] = -l;
    }
    function charType(ch) {
        return ch <= 0xf7 ? LowTypes[ch] :
            0x590 <= ch && ch <= 0x5f4 ? 2 /* R */ :
                0x600 <= ch && ch <= 0x6f9 ? ArabicTypes[ch - 0x600] :
                    0x6ee <= ch && ch <= 0x8ac ? 4 /* AL */ :
                        0x2000 <= ch && ch <= 0x200b ? 256 /* NI */ :
                            ch == 0x200c ? 256 /* NI */ : 1 /* L */;
    }
    const BidiRE = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/;
    /**
    Represents a contiguous range of text that has a single direction
    (as in left-to-right or right-to-left).
    */
    class BidiSpan {
        /**
        @internal
        */
        constructor(
        /**
        The start of the span (relative to the start of the line).
        */
        from, 
        /**
        The end of the span.
        */
        to, 
        /**
        The ["bidi
        level"](https://unicode.org/reports/tr9/#Basic_Display_Algorithm)
        of the span (in this context, 0 means
        left-to-right, 1 means right-to-left, 2 means left-to-right
        number inside right-to-left text).
        */
        level) {
            this.from = from;
            this.to = to;
            this.level = level;
        }
        /**
        The direction of this span.
        */
        get dir() { return this.level % 2 ? RTL : LTR; }
        /**
        @internal
        */
        side(end, dir) { return (this.dir == dir) == end ? this.to : this.from; }
        /**
        @internal
        */
        static find(order, index, level, assoc) {
            let maybe = -1;
            for (let i = 0; i < order.length; i++) {
                let span = order[i];
                if (span.from <= index && span.to >= index) {
                    if (span.level == level)
                        return i;
                    // When multiple spans match, if assoc != 0, take the one that
                    // covers that side, otherwise take the one with the minimum
                    // level.
                    if (maybe < 0 || (assoc != 0 ? (assoc < 0 ? span.from < index : span.to > index) : order[maybe].level > span.level))
                        maybe = i;
                }
            }
            if (maybe < 0)
                throw new RangeError("Index out of range");
            return maybe;
        }
    }
    // Reused array of character types
    const types$6 = [];
    function computeOrder(line, direction) {
        let len = line.length, outerType = direction == LTR ? 1 /* L */ : 2 /* R */, oppositeType = direction == LTR ? 2 /* R */ : 1 /* L */;
        if (!line || outerType == 1 /* L */ && !BidiRE.test(line))
            return trivialOrder(len);
        // W1. Examine each non-spacing mark (NSM) in the level run, and
        // change the type of the NSM to the type of the previous
        // character. If the NSM is at the start of the level run, it will
        // get the type of sor.
        // W2. Search backwards from each instance of a European number
        // until the first strong type (R, L, AL, or sor) is found. If an
        // AL is found, change the type of the European number to Arabic
        // number.
        // W3. Change all ALs to R.
        // (Left after this: L, R, EN, AN, ET, CS, NI)
        for (let i = 0, prev = outerType, prevStrong = outerType; i < len; i++) {
            let type = charType(line.charCodeAt(i));
            if (type == 512 /* NSM */)
                type = prev;
            else if (type == 8 /* EN */ && prevStrong == 4 /* AL */)
                type = 16 /* AN */;
            types$6[i] = type == 4 /* AL */ ? 2 /* R */ : type;
            if (type & 7 /* Strong */)
                prevStrong = type;
            prev = type;
        }
        // W5. A sequence of European terminators adjacent to European
        // numbers changes to all European numbers.
        // W6. Otherwise, separators and terminators change to Other
        // Neutral.
        // W7. Search backwards from each instance of a European number
        // until the first strong type (R, L, or sor) is found. If an L is
        // found, then change the type of the European number to L.
        // (Left after this: L, R, EN+AN, NI)
        for (let i = 0, prev = outerType, prevStrong = outerType; i < len; i++) {
            let type = types$6[i];
            if (type == 128 /* CS */) {
                if (i < len - 1 && prev == types$6[i + 1] && (prev & 24 /* Num */))
                    type = types$6[i] = prev;
                else
                    types$6[i] = 256 /* NI */;
            }
            else if (type == 64 /* ET */) {
                let end = i + 1;
                while (end < len && types$6[end] == 64 /* ET */)
                    end++;
                let replace = (i && prev == 8 /* EN */) || (end < len && types$6[end] == 8 /* EN */) ? (prevStrong == 1 /* L */ ? 1 /* L */ : 8 /* EN */) : 256 /* NI */;
                for (let j = i; j < end; j++)
                    types$6[j] = replace;
                i = end - 1;
            }
            else if (type == 8 /* EN */ && prevStrong == 1 /* L */) {
                types$6[i] = 1 /* L */;
            }
            prev = type;
            if (type & 7 /* Strong */)
                prevStrong = type;
        }
        // N0. Process bracket pairs in an isolating run sequence
        // sequentially in the logical order of the text positions of the
        // opening paired brackets using the logic given below. Within this
        // scope, bidirectional types EN and AN are treated as R.
        for (let i = 0, sI = 0, context = 0, ch, br, type; i < len; i++) {
            // Keeps [startIndex, type, strongSeen] triples for each open
            // bracket on BracketStack.
            if (br = Brackets[ch = line.charCodeAt(i)]) {
                if (br < 0) { // Closing bracket
                    for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
                        if (BracketStack[sJ + 1] == -br) {
                            let flags = BracketStack[sJ + 2];
                            let type = (flags & 2 /* EmbedInside */) ? outerType :
                                !(flags & 4 /* OppositeInside */) ? 0 :
                                    (flags & 1 /* OppositeBefore */) ? oppositeType : outerType;
                            if (type)
                                types$6[i] = types$6[BracketStack[sJ]] = type;
                            sI = sJ;
                            break;
                        }
                    }
                }
                else if (BracketStack.length == 189 /* MaxDepth */) {
                    break;
                }
                else {
                    BracketStack[sI++] = i;
                    BracketStack[sI++] = ch;
                    BracketStack[sI++] = context;
                }
            }
            else if ((type = types$6[i]) == 2 /* R */ || type == 1 /* L */) {
                let embed = type == outerType;
                context = embed ? 0 : 1 /* OppositeBefore */;
                for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
                    let cur = BracketStack[sJ + 2];
                    if (cur & 2 /* EmbedInside */)
                        break;
                    if (embed) {
                        BracketStack[sJ + 2] |= 2 /* EmbedInside */;
                    }
                    else {
                        if (cur & 4 /* OppositeInside */)
                            break;
                        BracketStack[sJ + 2] |= 4 /* OppositeInside */;
                    }
                }
            }
        }
        // N1. A sequence of neutrals takes the direction of the
        // surrounding strong text if the text on both sides has the same
        // direction. European and Arabic numbers act as if they were R in
        // terms of their influence on neutrals. Start-of-level-run (sor)
        // and end-of-level-run (eor) are used at level run boundaries.
        // N2. Any remaining neutrals take the embedding direction.
        // (Left after this: L, R, EN+AN)
        for (let i = 0; i < len; i++) {
            if (types$6[i] == 256 /* NI */) {
                let end = i + 1;
                while (end < len && types$6[end] == 256 /* NI */)
                    end++;
                let beforeL = (i ? types$6[i - 1] : outerType) == 1 /* L */;
                let afterL = (end < len ? types$6[end] : outerType) == 1 /* L */;
                let replace = beforeL == afterL ? (beforeL ? 1 /* L */ : 2 /* R */) : outerType;
                for (let j = i; j < end; j++)
                    types$6[j] = replace;
                i = end - 1;
            }
        }
        // Here we depart from the documented algorithm, in order to avoid
        // building up an actual levels array. Since there are only three
        // levels (0, 1, 2) in an implementation that doesn't take
        // explicit embedding into account, we can build up the order on
        // the fly, without following the level-based algorithm.
        let order = [];
        if (outerType == 1 /* L */) {
            for (let i = 0; i < len;) {
                let start = i, rtl = types$6[i++] != 1 /* L */;
                while (i < len && rtl == (types$6[i] != 1 /* L */))
                    i++;
                if (rtl) {
                    for (let j = i; j > start;) {
                        let end = j, l = types$6[--j] != 2 /* R */;
                        while (j > start && l == (types$6[j - 1] != 2 /* R */))
                            j--;
                        order.push(new BidiSpan(j, end, l ? 2 : 1));
                    }
                }
                else {
                    order.push(new BidiSpan(start, i, 0));
                }
            }
        }
        else {
            for (let i = 0; i < len;) {
                let start = i, rtl = types$6[i++] == 2 /* R */;
                while (i < len && rtl == (types$6[i] == 2 /* R */))
                    i++;
                order.push(new BidiSpan(start, i, rtl ? 1 : 2));
            }
        }
        return order;
    }
    function trivialOrder(length) {
        return [new BidiSpan(0, length, 0)];
    }
    let movedOver = "";
    function moveVisually(line, order, dir, start, forward) {
        var _a;
        let startIndex = start.head - line.from, spanI = -1;
        if (startIndex == 0) {
            if (!forward || !line.length)
                return null;
            if (order[0].level != dir) {
                startIndex = order[0].side(false, dir);
                spanI = 0;
            }
        }
        else if (startIndex == line.length) {
            if (forward)
                return null;
            let last = order[order.length - 1];
            if (last.level != dir) {
                startIndex = last.side(true, dir);
                spanI = order.length - 1;
            }
        }
        if (spanI < 0)
            spanI = BidiSpan.find(order, startIndex, (_a = start.bidiLevel) !== null && _a !== void 0 ? _a : -1, start.assoc);
        let span = order[spanI];
        // End of span. (But not end of line--that was checked for above.)
        if (startIndex == span.side(forward, dir)) {
            span = order[spanI += forward ? 1 : -1];
            startIndex = span.side(!forward, dir);
        }
        let indexForward = forward == (span.dir == dir);
        let nextIndex = findClusterBreak(line.text, startIndex, indexForward);
        movedOver = line.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));
        if (nextIndex != span.side(forward, dir))
            return EditorSelection.cursor(nextIndex + line.from, indexForward ? -1 : 1, span.level);
        let nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];
        if (!nextSpan && span.level != dir)
            return EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1, dir);
        if (nextSpan && nextSpan.level < span.level)
            return EditorSelection.cursor(nextSpan.side(!forward, dir) + line.from, forward ? 1 : -1, nextSpan.level);
        return EditorSelection.cursor(nextIndex + line.from, forward ? -1 : 1, span.level);
    }

    function groupAt(state, pos, bias = 1) {
        let categorize = state.charCategorizer(pos);
        let line = state.doc.lineAt(pos), linePos = pos - line.from;
        if (line.length == 0)
            return EditorSelection.cursor(pos);
        if (linePos == 0)
            bias = 1;
        else if (linePos == line.length)
            bias = -1;
        let from = linePos, to = linePos;
        if (bias < 0)
            from = findClusterBreak(line.text, linePos, false);
        else
            to = findClusterBreak(line.text, linePos);
        let cat = categorize(line.text.slice(from, to));
        while (from > 0) {
            let prev = findClusterBreak(line.text, from, false);
            if (categorize(line.text.slice(prev, from)) != cat)
                break;
            from = prev;
        }
        while (to < line.length) {
            let next = findClusterBreak(line.text, to);
            if (categorize(line.text.slice(to, next)) != cat)
                break;
            to = next;
        }
        return EditorSelection.range(from + line.from, to + line.from);
    }
    // Search the DOM for the {node, offset} position closest to the given
    // coordinates. Very inefficient and crude, but can usually be avoided
    // by calling caret(Position|Range)FromPoint instead.
    function getdx(x, rect) {
        return rect.left > x ? rect.left - x : Math.max(0, x - rect.right);
    }
    function getdy(y, rect) {
        return rect.top > y ? rect.top - y : Math.max(0, y - rect.bottom);
    }
    function yOverlap(a, b) {
        return a.top < b.bottom - 1 && a.bottom > b.top + 1;
    }
    function upTop(rect, top) {
        return top < rect.top ? { top, left: rect.left, right: rect.right, bottom: rect.bottom } : rect;
    }
    function upBot(rect, bottom) {
        return bottom > rect.bottom ? { top: rect.top, left: rect.left, right: rect.right, bottom } : rect;
    }
    function domPosAtCoords(parent, x, y) {
        let closest, closestRect, closestX, closestY;
        let above, below, aboveRect, belowRect;
        for (let child = parent.firstChild; child; child = child.nextSibling) {
            let rects = clientRectsFor(child);
            for (let i = 0; i < rects.length; i++) {
                let rect = rects[i];
                if (closestRect && yOverlap(closestRect, rect))
                    rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);
                let dx = getdx(x, rect), dy = getdy(y, rect);
                if (dx == 0 && dy == 0)
                    return child.nodeType == 3 ? domPosInText(child, x, y) : domPosAtCoords(child, x, y);
                if (!closest || closestY > dy || closestY == dy && closestX > dx) {
                    closest = child;
                    closestRect = rect;
                    closestX = dx;
                    closestY = dy;
                }
                if (dx == 0) {
                    if (y > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {
                        above = child;
                        aboveRect = rect;
                    }
                    else if (y < rect.top && (!belowRect || belowRect.top > rect.top)) {
                        below = child;
                        belowRect = rect;
                    }
                }
                else if (aboveRect && yOverlap(aboveRect, rect)) {
                    aboveRect = upBot(aboveRect, rect.bottom);
                }
                else if (belowRect && yOverlap(belowRect, rect)) {
                    belowRect = upTop(belowRect, rect.top);
                }
            }
        }
        if (aboveRect && aboveRect.bottom >= y) {
            closest = above;
            closestRect = aboveRect;
        }
        else if (belowRect && belowRect.top <= y) {
            closest = below;
            closestRect = belowRect;
        }
        if (!closest)
            return { node: parent, offset: 0 };
        let clipX = Math.max(closestRect.left, Math.min(closestRect.right, x));
        if (closest.nodeType == 3)
            return domPosInText(closest, clipX, y);
        if (!closestX && closest.contentEditable == "true")
            return domPosAtCoords(closest, clipX, y);
        let offset = Array.prototype.indexOf.call(parent.childNodes, closest) +
            (x >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);
        return { node: parent, offset };
    }
    function domPosInText(node, x, y) {
        let len = node.nodeValue.length;
        let closestOffset = -1, closestDY = 1e9, generalSide = 0;
        for (let i = 0; i < len; i++) {
            let rects = textRange(node, i, i + 1).getClientRects();
            for (let j = 0; j < rects.length; j++) {
                let rect = rects[j];
                if (rect.top == rect.bottom)
                    continue;
                if (!generalSide)
                    generalSide = x - rect.left;
                let dy = (rect.top > y ? rect.top - y : y - rect.bottom) - 1;
                if (rect.left - 1 <= x && rect.right + 1 >= x && dy < closestDY) {
                    let right = x >= (rect.left + rect.right) / 2, after = right;
                    if (browser.chrome || browser.gecko) {
                        // Check for RTL on browsers that support getting client
                        // rects for empty ranges.
                        let rectBefore = textRange(node, i).getBoundingClientRect();
                        if (rectBefore.left == rect.right)
                            after = !right;
                    }
                    if (dy <= 0)
                        return { node, offset: i + (after ? 1 : 0) };
                    closestOffset = i + (after ? 1 : 0);
                    closestDY = dy;
                }
            }
        }
        return { node, offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node.nodeValue.length : 0 };
    }
    function posAtCoords(view, { x, y }, precise, bias = -1) {
        let content = view.contentDOM.getBoundingClientRect(), block;
        let halfLine = view.defaultLineHeight / 2;
        for (let bounced = false;;) {
            block = view.blockAtHeight(y, content.top);
            if (block.top > y || block.bottom < y) {
                bias = block.top > y ? -1 : 1;
                y = Math.min(block.bottom - halfLine, Math.max(block.top + halfLine, y));
                if (bounced)
                    return precise ? null : 0;
                else
                    bounced = true;
            }
            if (block.type == BlockType.Text)
                break;
            y = bias > 0 ? block.bottom + halfLine : block.top - halfLine;
        }
        let lineStart = block.from;
        x = Math.max(content.left + 1, Math.min(content.right - 1, x));
        // If this is outside of the rendered viewport, we can't determine a position
        if (lineStart < view.viewport.from)
            return view.viewport.from == 0 ? 0 : posAtCoordsImprecise(view, content, block, x, y);
        if (lineStart > view.viewport.to)
            return view.viewport.to == view.state.doc.length ? view.state.doc.length : posAtCoordsImprecise(view, content, block, x, y);
        // Clip x to the viewport sides
        let root = view.root, element = root.elementFromPoint(x, y);
        // There's visible editor content under the point, so we can try
        // using caret(Position|Range)FromPoint as a shortcut
        let node, offset = -1;
        if (element && view.contentDOM.contains(element) && !(view.docView.nearest(element) instanceof WidgetView)) {
            if (root.caretPositionFromPoint) {
                let pos = root.caretPositionFromPoint(x, y);
                if (pos)
                    ({ offsetNode: node, offset } = pos);
            }
            else if (root.caretRangeFromPoint) {
                let range = root.caretRangeFromPoint(x, y);
                if (range) {
                    ({ startContainer: node, startOffset: offset } = range);
                    if (browser.safari && isSuspiciousCaretResult(node, offset, x))
                        node = undefined;
                }
            }
        }
        // No luck, do our own (potentially expensive) search
        if (!node || !view.docView.dom.contains(node)) {
            let line = LineView.find(view.docView, lineStart);
            ({ node, offset } = domPosAtCoords(line.dom, x, y));
        }
        return view.docView.posFromDOM(node, offset);
    }
    function posAtCoordsImprecise(view, contentRect, block, x, y) {
        let into = Math.round((x - contentRect.left) * view.defaultCharacterWidth);
        if (view.lineWrapping && block.height > view.defaultLineHeight * 1.5) {
            let line = Math.floor((y - block.top) / view.defaultLineHeight);
            into += line * view.viewState.heightOracle.lineLength;
        }
        let content = view.state.sliceDoc(block.from, block.to);
        return block.from + findColumn(content, into, view.state.tabSize);
    }
    // In case of a high line height, Safari's caretRangeFromPoint treats
    // the space between lines as belonging to the last character of the
    // line before. This is used to detect such a result so that it can be
    // ignored (issue #401).
    function isSuspiciousCaretResult(node, offset, x) {
        let len;
        if (node.nodeType != 3 || offset != (len = node.nodeValue.length))
            return false;
        for (let next = node.nextSibling; next; next = next.nextSibling)
            if (next.nodeType != 1 || next.nodeName != "BR")
                return false;
        return textRange(node, len - 1, len).getBoundingClientRect().left > x;
    }
    function moveToLineBoundary(view, start, forward, includeWrap) {
        let line = view.state.doc.lineAt(start.head);
        let coords = !includeWrap || !view.lineWrapping ? null
            : view.coordsAtPos(start.assoc < 0 && start.head > line.from ? start.head - 1 : start.head);
        if (coords) {
            let editorRect = view.dom.getBoundingClientRect();
            let pos = view.posAtCoords({ x: forward == (view.textDirection == Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,
                y: (coords.top + coords.bottom) / 2 });
            if (pos != null)
                return EditorSelection.cursor(pos, forward ? -1 : 1);
        }
        let lineView = LineView.find(view.docView, start.head);
        let end = lineView ? (forward ? lineView.posAtEnd : lineView.posAtStart) : (forward ? line.to : line.from);
        return EditorSelection.cursor(end, forward ? -1 : 1);
    }
    function moveByChar(view, start, forward, by) {
        let line = view.state.doc.lineAt(start.head), spans = view.bidiSpans(line);
        for (let cur = start, check = null;;) {
            let next = moveVisually(line, spans, view.textDirection, cur, forward), char = movedOver;
            if (!next) {
                if (line.number == (forward ? view.state.doc.lines : 1))
                    return cur;
                char = "\n";
                line = view.state.doc.line(line.number + (forward ? 1 : -1));
                spans = view.bidiSpans(line);
                next = EditorSelection.cursor(forward ? line.from : line.to);
            }
            if (!check) {
                if (!by)
                    return next;
                check = by(char);
            }
            else if (!check(char)) {
                return cur;
            }
            cur = next;
        }
    }
    function byGroup(view, pos, start) {
        let categorize = view.state.charCategorizer(pos);
        let cat = categorize(start);
        return (next) => {
            let nextCat = categorize(next);
            if (cat == CharCategory.Space)
                cat = nextCat;
            return cat == nextCat;
        };
    }
    function moveVertically(view, start, forward, distance) {
        let startPos = start.head, dir = forward ? 1 : -1;
        if (startPos == (forward ? view.state.doc.length : 0))
            return EditorSelection.cursor(startPos);
        let goal = start.goalColumn, startY;
        let rect = view.contentDOM.getBoundingClientRect();
        let startCoords = view.coordsAtPos(startPos);
        if (startCoords) {
            if (goal == null)
                goal = startCoords.left - rect.left;
            startY = dir < 0 ? startCoords.top : startCoords.bottom;
        }
        else {
            let line = view.viewState.lineAt(startPos, view.dom.getBoundingClientRect().top);
            if (goal == null)
                goal = Math.min(rect.right - rect.left, view.defaultCharacterWidth * (startPos - line.from));
            startY = dir < 0 ? line.top : line.bottom;
        }
        let resolvedGoal = rect.left + goal;
        let dist = distance !== null && distance !== void 0 ? distance : (view.defaultLineHeight >> 1);
        for (let extra = 0;; extra += 10) {
            let curY = startY + (dist + extra) * dir;
            let pos = posAtCoords(view, { x: resolvedGoal, y: curY }, false, dir);
            if (curY < rect.top || curY > rect.bottom || (dir < 0 ? pos < startPos : pos > startPos))
                return EditorSelection.cursor(pos, undefined, undefined, goal);
        }
    }
    function skipAtoms(view, oldPos, pos) {
        let atoms = view.pluginField(PluginField.atomicRanges);
        for (;;) {
            let moved = false;
            for (let set of atoms) {
                set.between(pos.from - 1, pos.from + 1, (from, to, value) => {
                    if (pos.from > from && pos.from < to) {
                        pos = oldPos.from > pos.from ? EditorSelection.cursor(from, 1) : EditorSelection.cursor(to, -1);
                        moved = true;
                    }
                });
            }
            if (!moved)
                return pos;
        }
    }

    // This will also be where dragging info and such goes
    class InputState {
        constructor(view) {
            this.lastKeyCode = 0;
            this.lastKeyTime = 0;
            this.pendingIOSKey = null;
            this.lastSelectionOrigin = null;
            this.lastSelectionTime = 0;
            this.lastEscPress = 0;
            this.lastContextMenu = 0;
            this.scrollHandlers = [];
            this.registeredEvents = [];
            this.customHandlers = [];
            // -1 means not in a composition. Otherwise, this counts the number
            // of changes made during the composition. The count is used to
            // avoid treating the start state of the composition, before any
            // changes have been made, as part of the composition.
            this.composing = -1;
            // Tracks whether the next change should be marked as starting the
            // composition (null means no composition, true means next is the
            // first, false means first has already been marked for this
            // composition)
            this.compositionFirstChange = null;
            this.compositionEndedAt = 0;
            this.rapidCompositionStart = false;
            this.mouseSelection = null;
            for (let type in handlers) {
                let handler = handlers[type];
                view.contentDOM.addEventListener(type, (event) => {
                    if (type == "keydown" && this.keydown(view, event))
                        return;
                    if (!eventBelongsToEditor(view, event) || this.ignoreDuringComposition(event))
                        return;
                    if (this.mustFlushObserver(event))
                        view.observer.forceFlush();
                    if (this.runCustomHandlers(type, view, event))
                        event.preventDefault();
                    else
                        handler(view, event);
                });
                this.registeredEvents.push(type);
            }
            this.notifiedFocused = view.hasFocus;
            this.ensureHandlers(view);
            // On Safari adding an input event handler somehow prevents an
            // issue where the composition vanishes when you press enter.
            if (browser.safari)
                view.contentDOM.addEventListener("input", () => null);
        }
        setSelectionOrigin(origin) {
            this.lastSelectionOrigin = origin;
            this.lastSelectionTime = Date.now();
        }
        ensureHandlers(view) {
            let handlers = this.customHandlers = view.pluginField(domEventHandlers);
            for (let set of handlers) {
                for (let type in set.handlers)
                    if (this.registeredEvents.indexOf(type) < 0 && type != "scroll") {
                        this.registeredEvents.push(type);
                        view.contentDOM.addEventListener(type, (event) => {
                            if (!eventBelongsToEditor(view, event))
                                return;
                            if (this.runCustomHandlers(type, view, event))
                                event.preventDefault();
                        });
                    }
            }
        }
        runCustomHandlers(type, view, event) {
            for (let set of this.customHandlers) {
                let handler = set.handlers[type], handled = false;
                if (handler) {
                    try {
                        handled = handler.call(set.plugin, event, view);
                    }
                    catch (e) {
                        logException(view.state, e);
                    }
                    if (handled || event.defaultPrevented) {
                        // Chrome for Android often applies a bunch of nonsensical
                        // DOM changes after an enter press, even when
                        // preventDefault-ed. This tries to ignore those.
                        if (browser.android && type == "keydown" && event.keyCode == 13)
                            view.observer.flushSoon();
                        return true;
                    }
                }
            }
            return false;
        }
        runScrollHandlers(view, event) {
            for (let set of this.customHandlers) {
                let handler = set.handlers.scroll;
                if (handler) {
                    try {
                        handler.call(set.plugin, event, view);
                    }
                    catch (e) {
                        logException(view.state, e);
                    }
                }
            }
        }
        keydown(view, event) {
            // Must always run, even if a custom handler handled the event
            this.lastKeyCode = event.keyCode;
            this.lastKeyTime = Date.now();
            if (this.screenKeyEvent(view, event))
                return true;
            // Prevent the default behavior of Enter on iOS makes the
            // virtual keyboard get stuck in the wrong (lowercase)
            // state. So we let it go through, and then, in
            // applyDOMChange, notify key handlers of it and reset to
            // the state they produce.
            if (browser.ios && (event.keyCode == 13 || event.keyCode == 8) &&
                !(event.ctrlKey || event.altKey || event.metaKey) && !event.synthetic) {
                this.pendingIOSKey = event.keyCode == 13 ? "enter" : "backspace";
                setTimeout(() => this.flushIOSKey(view), 250);
                return true;
            }
            return false;
        }
        flushIOSKey(view) {
            if (!this.pendingIOSKey)
                return false;
            let dom = view.contentDOM, key = this.pendingIOSKey;
            this.pendingIOSKey = null;
            return key == "enter" ? dispatchKey(dom, "Enter", 13) : dispatchKey(dom, "Backspace", 8);
        }
        ignoreDuringComposition(event) {
            if (!/^key/.test(event.type))
                return false;
            if (this.composing > 0)
                return true;
            // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.
            // On some input method editors (IMEs), the Enter key is used to
            // confirm character selection. On Safari, when Enter is pressed,
            // compositionend and keydown events are sometimes emitted in the
            // wrong order. The key event should still be ignored, even when
            // it happens after the compositionend event.
            if (browser.safari && Date.now() - this.compositionEndedAt < 500) {
                this.compositionEndedAt = 0;
                return true;
            }
            return false;
        }
        screenKeyEvent(view, event) {
            let protectedTab = event.keyCode == 9 && Date.now() < this.lastEscPress + 2000;
            if (event.keyCode == 27)
                this.lastEscPress = Date.now();
            else if (modifierCodes.indexOf(event.keyCode) < 0)
                this.lastEscPress = 0;
            return protectedTab;
        }
        mustFlushObserver(event) {
            return (event.type == "keydown" && event.keyCode != 229) ||
                event.type == "compositionend" && !browser.ios;
        }
        startMouseSelection(view, event, style) {
            if (this.mouseSelection)
                this.mouseSelection.destroy();
            this.mouseSelection = new MouseSelection(this, view, event, style);
        }
        update(update) {
            if (this.mouseSelection)
                this.mouseSelection.update(update);
            if (update.transactions.length)
                this.lastKeyCode = this.lastSelectionTime = 0;
        }
        destroy() {
            if (this.mouseSelection)
                this.mouseSelection.destroy();
        }
    }
    // Key codes for modifier keys
    const modifierCodes = [16, 17, 18, 20, 91, 92, 224, 225];
    class MouseSelection {
        constructor(inputState, view, startEvent, style) {
            this.inputState = inputState;
            this.view = view;
            this.style = style;
            this.lastEvent = startEvent;
            let doc = view.contentDOM.ownerDocument;
            doc.addEventListener("mousemove", this.move = this.move.bind(this));
            doc.addEventListener("mouseup", this.up = this.up.bind(this));
            this.extend = startEvent.shiftKey;
            this.multiple = view.state.facet(EditorState.allowMultipleSelections) && addsSelectionRange(view, startEvent);
            this.dragMove = dragMovesSelection(view, startEvent);
            this.dragging = isInPrimarySelection(view, startEvent) ? null : false;
            // When clicking outside of the selection, immediately apply the
            // effect of starting the selection
            if (this.dragging === false) {
                startEvent.preventDefault();
                this.select(startEvent);
            }
        }
        move(event) {
            if (event.buttons == 0)
                return this.destroy();
            if (this.dragging !== false)
                return;
            this.select(this.lastEvent = event);
        }
        up(event) {
            if (this.dragging == null)
                this.select(this.lastEvent);
            if (!this.dragging)
                event.preventDefault();
            this.destroy();
        }
        destroy() {
            let doc = this.view.contentDOM.ownerDocument;
            doc.removeEventListener("mousemove", this.move);
            doc.removeEventListener("mouseup", this.up);
            this.inputState.mouseSelection = null;
        }
        select(event) {
            let selection = this.style.get(event, this.extend, this.multiple);
            if (!selection.eq(this.view.state.selection) || selection.main.assoc != this.view.state.selection.main.assoc)
                this.view.dispatch({
                    selection,
                    userEvent: "select.pointer",
                    scrollIntoView: true
                });
        }
        update(update) {
            if (update.docChanged && this.dragging)
                this.dragging = this.dragging.map(update.changes);
            if (this.style.update(update))
                setTimeout(() => this.select(this.lastEvent), 20);
        }
    }
    function addsSelectionRange(view, event) {
        let facet = view.state.facet(clickAddsSelectionRange);
        return facet.length ? facet[0](event) : browser.mac ? event.metaKey : event.ctrlKey;
    }
    function dragMovesSelection(view, event) {
        let facet = view.state.facet(dragMovesSelection$1);
        return facet.length ? facet[0](event) : browser.mac ? !event.altKey : !event.ctrlKey;
    }
    function isInPrimarySelection(view, event) {
        let { main } = view.state.selection;
        if (main.empty)
            return false;
        // On boundary clicks, check whether the coordinates are inside the
        // selection's client rectangles
        let sel = getSelection(view.root);
        if (sel.rangeCount == 0)
            return true;
        let rects = sel.getRangeAt(0).getClientRects();
        for (let i = 0; i < rects.length; i++) {
            let rect = rects[i];
            if (rect.left <= event.clientX && rect.right >= event.clientX &&
                rect.top <= event.clientY && rect.bottom >= event.clientY)
                return true;
        }
        return false;
    }
    function eventBelongsToEditor(view, event) {
        if (!event.bubbles)
            return true;
        if (event.defaultPrevented)
            return false;
        for (let node = event.target, cView; node != view.contentDOM; node = node.parentNode)
            if (!node || node.nodeType == 11 || ((cView = ContentView.get(node)) && cView.ignoreEvent(event)))
                return false;
        return true;
    }
    const handlers = /*@__PURE__*/Object.create(null);
    // This is very crude, but unfortunately both these browsers _pretend_
    // that they have a clipboard API—all the objects and methods are
    // there, they just don't work, and they are hard to test.
    const brokenClipboardAPI = (browser.ie && browser.ie_version < 15) ||
        (browser.ios && browser.webkit_version < 604);
    function capturePaste(view) {
        let parent = view.dom.parentNode;
        if (!parent)
            return;
        let target = parent.appendChild(document.createElement("textarea"));
        target.style.cssText = "position: fixed; left: -10000px; top: 10px";
        target.focus();
        setTimeout(() => {
            view.focus();
            target.remove();
            doPaste(view, target.value);
        }, 50);
    }
    function doPaste(view, input) {
        let { state } = view, changes, i = 1, text = state.toText(input);
        let byLine = text.lines == state.selection.ranges.length;
        let linewise = lastLinewiseCopy && state.selection.ranges.every(r => r.empty) && lastLinewiseCopy == text.toString();
        if (linewise) {
            let lastLine = -1;
            changes = state.changeByRange(range => {
                let line = state.doc.lineAt(range.from);
                if (line.from == lastLine)
                    return { range };
                lastLine = line.from;
                let insert = state.toText((byLine ? text.line(i++).text : input) + state.lineBreak);
                return { changes: { from: line.from, insert },
                    range: EditorSelection.cursor(range.from + insert.length) };
            });
        }
        else if (byLine) {
            changes = state.changeByRange(range => {
                let line = text.line(i++);
                return { changes: { from: range.from, to: range.to, insert: line.text },
                    range: EditorSelection.cursor(range.from + line.length) };
            });
        }
        else {
            changes = state.replaceSelection(text);
        }
        view.dispatch(changes, {
            userEvent: "input.paste",
            scrollIntoView: true
        });
    }
    handlers.keydown = (view, event) => {
        view.inputState.setSelectionOrigin("select");
    };
    let lastTouch = 0;
    handlers.touchstart = (view, e) => {
        lastTouch = Date.now();
        view.inputState.setSelectionOrigin("select.pointer");
    };
    handlers.touchmove = view => {
        view.inputState.setSelectionOrigin("select.pointer");
    };
    handlers.mousedown = (view, event) => {
        view.observer.flush();
        if (lastTouch > Date.now() - 2000)
            return; // Ignore touch interaction
        let style = null;
        for (let makeStyle of view.state.facet(mouseSelectionStyle)) {
            style = makeStyle(view, event);
            if (style)
                break;
        }
        if (!style && event.button == 0)
            style = basicMouseSelection(view, event);
        if (style) {
            if (view.root.activeElement != view.contentDOM)
                view.observer.ignore(() => focusPreventScroll(view.contentDOM));
            view.inputState.startMouseSelection(view, event, style);
        }
    };
    function rangeForClick(view, pos, bias, type) {
        if (type == 1) { // Single click
            return EditorSelection.cursor(pos, bias);
        }
        else if (type == 2) { // Double click
            return groupAt(view.state, pos, bias);
        }
        else { // Triple click
            let visual = LineView.find(view.docView, pos), line = view.state.doc.lineAt(visual ? visual.posAtEnd : pos);
            let from = visual ? visual.posAtStart : line.from, to = visual ? visual.posAtEnd : line.to;
            if (to < view.state.doc.length && to == line.to)
                to++;
            return EditorSelection.range(from, to);
        }
    }
    let insideY = (y, rect) => y >= rect.top && y <= rect.bottom;
    let inside = (x, y, rect) => insideY(y, rect) && x >= rect.left && x <= rect.right;
    // Try to determine, for the given coordinates, associated with the
    // given position, whether they are related to the element before or
    // the element after the position.
    function findPositionSide(view, pos, x, y) {
        let line = LineView.find(view.docView, pos);
        if (!line)
            return 1;
        let off = pos - line.posAtStart;
        // Line boundaries point into the line
        if (off == 0)
            return 1;
        if (off == line.length)
            return -1;
        // Positions on top of an element point at that element
        let before = line.coordsAt(off, -1);
        if (before && inside(x, y, before))
            return -1;
        let after = line.coordsAt(off, 1);
        if (after && inside(x, y, after))
            return 1;
        // This is probably a line wrap point. Pick before if the point is
        // beside it.
        return before && insideY(y, before) ? -1 : 1;
    }
    function queryPos(view, event) {
        let pos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
        return { pos, bias: findPositionSide(view, pos, event.clientX, event.clientY) };
    }
    const BadMouseDetail = browser.ie && browser.ie_version <= 11;
    let lastMouseDown = null, lastMouseDownCount = 0, lastMouseDownTime = 0;
    function getClickType(event) {
        if (!BadMouseDetail)
            return event.detail;
        let last = lastMouseDown, lastTime = lastMouseDownTime;
        lastMouseDown = event;
        lastMouseDownTime = Date.now();
        return lastMouseDownCount = !last || (lastTime > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 &&
            Math.abs(last.clientY - event.clientY) < 2) ? (lastMouseDownCount + 1) % 3 : 1;
    }
    function basicMouseSelection(view, event) {
        let start = queryPos(view, event), type = getClickType(event);
        let startSel = view.state.selection;
        let last = start, lastEvent = event;
        return {
            update(update) {
                if (update.changes) {
                    if (start)
                        start.pos = update.changes.mapPos(start.pos);
                    startSel = startSel.map(update.changes);
                    lastEvent = null;
                }
            },
            get(event, extend, multiple) {
                let cur;
                if (lastEvent && event.clientX == lastEvent.clientX && event.clientY == lastEvent.clientY)
                    cur = last;
                else {
                    cur = last = queryPos(view, event);
                    lastEvent = event;
                }
                if (!cur || !start)
                    return startSel;
                let range = rangeForClick(view, cur.pos, cur.bias, type);
                if (start.pos != cur.pos && !extend) {
                    let startRange = rangeForClick(view, start.pos, start.bias, type);
                    let from = Math.min(startRange.from, range.from), to = Math.max(startRange.to, range.to);
                    range = from < range.from ? EditorSelection.range(from, to) : EditorSelection.range(to, from);
                }
                if (extend)
                    return startSel.replaceRange(startSel.main.extend(range.from, range.to));
                else if (multiple)
                    return startSel.addRange(range);
                else
                    return EditorSelection.create([range]);
            }
        };
    }
    handlers.dragstart = (view, event) => {
        let { selection: { main } } = view.state;
        let { mouseSelection } = view.inputState;
        if (mouseSelection)
            mouseSelection.dragging = main;
        if (event.dataTransfer) {
            event.dataTransfer.setData("Text", view.state.sliceDoc(main.from, main.to));
            event.dataTransfer.effectAllowed = "copyMove";
        }
    };
    function dropText(view, event, text, direct) {
        let dropPos = view.posAtCoords({ x: event.clientX, y: event.clientY });
        if (dropPos == null || !text)
            return;
        event.preventDefault();
        let { mouseSelection } = view.inputState;
        let del = direct && mouseSelection && mouseSelection.dragging && mouseSelection.dragMove ?
            { from: mouseSelection.dragging.from, to: mouseSelection.dragging.to } : null;
        let ins = { from: dropPos, insert: text };
        let changes = view.state.changes(del ? [del, ins] : ins);
        view.focus();
        view.dispatch({
            changes,
            selection: { anchor: changes.mapPos(dropPos, -1), head: changes.mapPos(dropPos, 1) },
            userEvent: del ? "move.drop" : "input.drop"
        });
    }
    handlers.drop = (view, event) => {
        if (!event.dataTransfer)
            return;
        if (view.state.readOnly)
            return event.preventDefault();
        let files = event.dataTransfer.files;
        if (files && files.length) { // For a file drop, read the file's text.
            event.preventDefault();
            let text = Array(files.length), read = 0;
            let finishFile = () => {
                if (++read == files.length)
                    dropText(view, event, text.filter(s => s != null).join(view.state.lineBreak), false);
            };
            for (let i = 0; i < files.length; i++) {
                let reader = new FileReader;
                reader.onerror = finishFile;
                reader.onload = () => {
                    if (!/[\x00-\x08\x0e-\x1f]{2}/.test(reader.result))
                        text[i] = reader.result;
                    finishFile();
                };
                reader.readAsText(files[i]);
            }
        }
        else {
            dropText(view, event, event.dataTransfer.getData("Text"), true);
        }
    };
    handlers.paste = (view, event) => {
        if (view.state.readOnly)
            return event.preventDefault();
        view.observer.flush();
        let data = brokenClipboardAPI ? null : event.clipboardData;
        let text = data && data.getData("text/plain");
        if (text) {
            doPaste(view, text);
            event.preventDefault();
        }
        else {
            capturePaste(view);
        }
    };
    function captureCopy(view, text) {
        // The extra wrapper is somehow necessary on IE/Edge to prevent the
        // content from being mangled when it is put onto the clipboard
        let parent = view.dom.parentNode;
        if (!parent)
            return;
        let target = parent.appendChild(document.createElement("textarea"));
        target.style.cssText = "position: fixed; left: -10000px; top: 10px";
        target.value = text;
        target.focus();
        target.selectionEnd = text.length;
        target.selectionStart = 0;
        setTimeout(() => {
            target.remove();
            view.focus();
        }, 50);
    }
    function copiedRange(state) {
        let content = [], ranges = [], linewise = false;
        for (let range of state.selection.ranges)
            if (!range.empty) {
                content.push(state.sliceDoc(range.from, range.to));
                ranges.push(range);
            }
        if (!content.length) {
            // Nothing selected, do a line-wise copy
            let upto = -1;
            for (let { from } of state.selection.ranges) {
                let line = state.doc.lineAt(from);
                if (line.number > upto) {
                    content.push(line.text);
                    ranges.push({ from: line.from, to: Math.min(state.doc.length, line.to + 1) });
                }
                upto = line.number;
            }
            linewise = true;
        }
        return { text: content.join(state.lineBreak), ranges, linewise };
    }
    let lastLinewiseCopy = null;
    handlers.copy = handlers.cut = (view, event) => {
        let { text, ranges, linewise } = copiedRange(view.state);
        if (!text)
            return;
        lastLinewiseCopy = linewise ? text : null;
        let data = brokenClipboardAPI ? null : event.clipboardData;
        if (data) {
            event.preventDefault();
            data.clearData();
            data.setData("text/plain", text);
        }
        else {
            captureCopy(view, text);
        }
        if (event.type == "cut" && !view.state.readOnly)
            view.dispatch({
                changes: ranges,
                scrollIntoView: true,
                userEvent: "delete.cut"
            });
    };
    handlers.focus = handlers.blur = view => {
        setTimeout(() => {
            if (view.hasFocus != view.inputState.notifiedFocused)
                view.update([]);
        }, 10);
    };
    handlers.beforeprint = view => {
        view.viewState.printing = true;
        view.requestMeasure();
        setTimeout(() => {
            view.viewState.printing = false;
            view.requestMeasure();
        }, 2000);
    };
    function forceClearComposition(view, rapid) {
        if (view.docView.compositionDeco.size) {
            view.inputState.rapidCompositionStart = rapid;
            try {
                view.update([]);
            }
            finally {
                view.inputState.rapidCompositionStart = false;
            }
        }
    }
    handlers.compositionstart = handlers.compositionupdate = view => {
        if (view.inputState.compositionFirstChange == null)
            view.inputState.compositionFirstChange = true;
        if (view.inputState.composing < 0) {
            if (view.docView.compositionDeco.size) {
                view.observer.flush();
                forceClearComposition(view, true);
            }
            // FIXME possibly set a timeout to clear it again on Android
            view.inputState.composing = 0;
        }
    };
    handlers.compositionend = view => {
        view.inputState.composing = -1;
        view.inputState.compositionEndedAt = Date.now();
        view.inputState.compositionFirstChange = null;
        setTimeout(() => {
            if (view.inputState.composing < 0)
                forceClearComposition(view, false);
        }, 50);
    };
    handlers.contextmenu = view => {
        view.inputState.lastContextMenu = Date.now();
    };

    const wrappingWhiteSpace = ["pre-wrap", "normal", "pre-line"];
    class HeightOracle {
        constructor() {
            this.doc = Text.empty;
            this.lineWrapping = false;
            this.direction = Direction.LTR;
            this.heightSamples = {};
            this.lineHeight = 14;
            this.charWidth = 7;
            this.lineLength = 30;
            // Used to track, during updateHeight, if any actual heights changed
            this.heightChanged = false;
        }
        heightForGap(from, to) {
            let lines = this.doc.lineAt(to).number - this.doc.lineAt(from).number + 1;
            if (this.lineWrapping)
                lines += Math.ceil(((to - from) - (lines * this.lineLength * 0.5)) / this.lineLength);
            return this.lineHeight * lines;
        }
        heightForLine(length) {
            if (!this.lineWrapping)
                return this.lineHeight;
            let lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / (this.lineLength - 5)));
            return lines * this.lineHeight;
        }
        setDoc(doc) { this.doc = doc; return this; }
        mustRefresh(lineHeights, whiteSpace, direction) {
            let newHeight = false;
            for (let i = 0; i < lineHeights.length; i++) {
                let h = lineHeights[i];
                if (h < 0) {
                    i++;
                }
                else if (!this.heightSamples[Math.floor(h * 10)]) { // Round to .1 pixels
                    newHeight = true;
                    this.heightSamples[Math.floor(h * 10)] = true;
                }
            }
            return newHeight || (wrappingWhiteSpace.indexOf(whiteSpace) > -1) != this.lineWrapping || this.direction != direction;
        }
        refresh(whiteSpace, direction, lineHeight, charWidth, lineLength, knownHeights) {
            let lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;
            let changed = Math.round(lineHeight) != Math.round(this.lineHeight) ||
                this.lineWrapping != lineWrapping ||
                this.direction != direction;
            this.lineWrapping = lineWrapping;
            this.direction = direction;
            this.lineHeight = lineHeight;
            this.charWidth = charWidth;
            this.lineLength = lineLength;
            if (changed) {
                this.heightSamples = {};
                for (let i = 0; i < knownHeights.length; i++) {
                    let h = knownHeights[i];
                    if (h < 0)
                        i++;
                    else
                        this.heightSamples[Math.floor(h * 10)] = true;
                }
            }
            return changed;
        }
    }
    // This object is used by `updateHeight` to make DOM measurements
    // arrive at the right nides. The `heights` array is a sequence of
    // block heights, starting from position `from`.
    class MeasuredHeights {
        constructor(from, heights) {
            this.from = from;
            this.heights = heights;
            this.index = 0;
        }
        get more() { return this.index < this.heights.length; }
    }
    /**
    Record used to represent information about a block-level element
    in the editor view.
    */
    class BlockInfo {
        /**
        @internal
        */
        constructor(
        /**
        The start of the element in the document.
        */
        from, 
        /**
        The length of the element.
        */
        length, 
        /**
        The top position of the element.
        */
        top, 
        /**
        Its height.
        */
        height, 
        /**
        The type of element this is. When querying lines, this may be
        an array of all the blocks that make up the line.
        */
        type) {
            this.from = from;
            this.length = length;
            this.top = top;
            this.height = height;
            this.type = type;
        }
        /**
        The end of the element as a document position.
        */
        get to() { return this.from + this.length; }
        /**
        The bottom position of the element.
        */
        get bottom() { return this.top + this.height; }
        /**
        @internal
        */
        join(other) {
            let detail = (Array.isArray(this.type) ? this.type : [this])
                .concat(Array.isArray(other.type) ? other.type : [other]);
            return new BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, detail);
        }
    }
    var QueryType = /*@__PURE__*/(function (QueryType) {
        QueryType[QueryType["ByPos"] = 0] = "ByPos";
        QueryType[QueryType["ByHeight"] = 1] = "ByHeight";
        QueryType[QueryType["ByPosNoHeight"] = 2] = "ByPosNoHeight";
    return QueryType})(QueryType || (QueryType = {}));
    const Epsilon = 1e-4;
    class HeightMap {
        constructor(length, // The number of characters covered
        height, // Height of this part of the document
        flags = 2 /* Outdated */) {
            this.length = length;
            this.height = height;
            this.flags = flags;
        }
        get outdated() { return (this.flags & 2 /* Outdated */) > 0; }
        set outdated(value) { this.flags = (value ? 2 /* Outdated */ : 0) | (this.flags & ~2 /* Outdated */); }
        setHeight(oracle, height) {
            if (this.height != height) {
                if (Math.abs(this.height - height) > Epsilon)
                    oracle.heightChanged = true;
                this.height = height;
            }
        }
        // Base case is to replace a leaf node, which simply builds a tree
        // from the new nodes and returns that (HeightMapBranch and
        // HeightMapGap override this to actually use from/to)
        replace(_from, _to, nodes) {
            return HeightMap.of(nodes);
        }
        // Again, these are base cases, and are overridden for branch and gap nodes.
        decomposeLeft(_to, result) { result.push(this); }
        decomposeRight(_from, result) { result.push(this); }
        applyChanges(decorations, oldDoc, oracle, changes) {
            let me = this;
            for (let i = changes.length - 1; i >= 0; i--) {
                let { fromA, toA, fromB, toB } = changes[i];
                let start = me.lineAt(fromA, QueryType.ByPosNoHeight, oldDoc, 0, 0);
                let end = start.to >= toA ? start : me.lineAt(toA, QueryType.ByPosNoHeight, oldDoc, 0, 0);
                toB += end.to - toA;
                toA = end.to;
                while (i > 0 && start.from <= changes[i - 1].toA) {
                    fromA = changes[i - 1].fromA;
                    fromB = changes[i - 1].fromB;
                    i--;
                    if (fromA < start.from)
                        start = me.lineAt(fromA, QueryType.ByPosNoHeight, oldDoc, 0, 0);
                }
                fromB += start.from - fromA;
                fromA = start.from;
                let nodes = NodeBuilder.build(oracle, decorations, fromB, toB);
                me = me.replace(fromA, toA, nodes);
            }
            return me.updateHeight(oracle, 0);
        }
        static empty() { return new HeightMapText(0, 0); }
        // nodes uses null values to indicate the position of line breaks.
        // There are never line breaks at the start or end of the array, or
        // two line breaks next to each other, and the array isn't allowed
        // to be empty (same restrictions as return value from the builder).
        static of(nodes) {
            if (nodes.length == 1)
                return nodes[0];
            let i = 0, j = nodes.length, before = 0, after = 0;
            for (;;) {
                if (i == j) {
                    if (before > after * 2) {
                        let split = nodes[i - 1];
                        if (split.break)
                            nodes.splice(--i, 1, split.left, null, split.right);
                        else
                            nodes.splice(--i, 1, split.left, split.right);
                        j += 1 + split.break;
                        before -= split.size;
                    }
                    else if (after > before * 2) {
                        let split = nodes[j];
                        if (split.break)
                            nodes.splice(j, 1, split.left, null, split.right);
                        else
                            nodes.splice(j, 1, split.left, split.right);
                        j += 2 + split.break;
                        after -= split.size;
                    }
                    else {
                        break;
                    }
                }
                else if (before < after) {
                    let next = nodes[i++];
                    if (next)
                        before += next.size;
                }
                else {
                    let next = nodes[--j];
                    if (next)
                        after += next.size;
                }
            }
            let brk = 0;
            if (nodes[i - 1] == null) {
                brk = 1;
                i--;
            }
            else if (nodes[i] == null) {
                brk = 1;
                j++;
            }
            return new HeightMapBranch(HeightMap.of(nodes.slice(0, i)), brk, HeightMap.of(nodes.slice(j)));
        }
    }
    HeightMap.prototype.size = 1;
    class HeightMapBlock extends HeightMap {
        constructor(length, height, type) {
            super(length, height);
            this.type = type;
        }
        blockAt(_height, _doc, top, offset) {
            return new BlockInfo(offset, this.length, top, this.height, this.type);
        }
        lineAt(_value, _type, doc, top, offset) {
            return this.blockAt(0, doc, top, offset);
        }
        forEachLine(_from, _to, doc, top, offset, f) {
            f(this.blockAt(0, doc, top, offset));
        }
        updateHeight(oracle, offset = 0, _force = false, measured) {
            if (measured && measured.from <= offset && measured.more)
                this.setHeight(oracle, measured.heights[measured.index++]);
            this.outdated = false;
            return this;
        }
        toString() { return `block(${this.length})`; }
    }
    class HeightMapText extends HeightMapBlock {
        constructor(length, height) {
            super(length, height, BlockType.Text);
            this.collapsed = 0; // Amount of collapsed content in the line
            this.widgetHeight = 0; // Maximum inline widget height
        }
        replace(_from, _to, nodes) {
            let node = nodes[0];
            if (nodes.length == 1 && (node instanceof HeightMapText || node instanceof HeightMapGap && (node.flags & 4 /* SingleLine */)) &&
                Math.abs(this.length - node.length) < 10) {
                if (node instanceof HeightMapGap)
                    node = new HeightMapText(node.length, this.height);
                else
                    node.height = this.height;
                if (!this.outdated)
                    node.outdated = false;
                return node;
            }
            else {
                return HeightMap.of(nodes);
            }
        }
        updateHeight(oracle, offset = 0, force = false, measured) {
            if (measured && measured.from <= offset && measured.more)
                this.setHeight(oracle, measured.heights[measured.index++]);
            else if (force || this.outdated)
                this.setHeight(oracle, Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)));
            this.outdated = false;
            return this;
        }
        toString() {
            return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
        }
    }
    class HeightMapGap extends HeightMap {
        constructor(length) { super(length, 0); }
        lines(doc, offset) {
            let firstLine = doc.lineAt(offset).number, lastLine = doc.lineAt(offset + this.length).number;
            return { firstLine, lastLine, lineHeight: this.height / (lastLine - firstLine + 1) };
        }
        blockAt(height, doc, top, offset) {
            let { firstLine, lastLine, lineHeight } = this.lines(doc, offset);
            let line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top) / lineHeight)));
            let { from, length } = doc.line(firstLine + line);
            return new BlockInfo(from, length, top + lineHeight * line, lineHeight, BlockType.Text);
        }
        lineAt(value, type, doc, top, offset) {
            if (type == QueryType.ByHeight)
                return this.blockAt(value, doc, top, offset);
            if (type == QueryType.ByPosNoHeight) {
                let { from, to } = doc.lineAt(value);
                return new BlockInfo(from, to - from, 0, 0, BlockType.Text);
            }
            let { firstLine, lineHeight } = this.lines(doc, offset);
            let { from, length, number } = doc.lineAt(value);
            return new BlockInfo(from, length, top + lineHeight * (number - firstLine), lineHeight, BlockType.Text);
        }
        forEachLine(from, to, doc, top, offset, f) {
            let { firstLine, lineHeight } = this.lines(doc, offset);
            for (let pos = Math.max(from, offset), end = Math.min(offset + this.length, to); pos <= end;) {
                let line = doc.lineAt(pos);
                if (pos == from)
                    top += lineHeight * (line.number - firstLine);
                f(new BlockInfo(line.from, line.length, top, lineHeight, BlockType.Text));
                top += lineHeight;
                pos = line.to + 1;
            }
        }
        replace(from, to, nodes) {
            let after = this.length - to;
            if (after > 0) {
                let last = nodes[nodes.length - 1];
                if (last instanceof HeightMapGap)
                    nodes[nodes.length - 1] = new HeightMapGap(last.length + after);
                else
                    nodes.push(null, new HeightMapGap(after - 1));
            }
            if (from > 0) {
                let first = nodes[0];
                if (first instanceof HeightMapGap)
                    nodes[0] = new HeightMapGap(from + first.length);
                else
                    nodes.unshift(new HeightMapGap(from - 1), null);
            }
            return HeightMap.of(nodes);
        }
        decomposeLeft(to, result) {
            result.push(new HeightMapGap(to - 1), null);
        }
        decomposeRight(from, result) {
            result.push(null, new HeightMapGap(this.length - from - 1));
        }
        updateHeight(oracle, offset = 0, force = false, measured) {
            let end = offset + this.length;
            if (measured && measured.from <= offset + this.length && measured.more) {
                // Fill in part of this gap with measured lines. We know there
                // can't be widgets or collapsed ranges in those lines, because
                // they would already have been added to the heightmap (gaps
                // only contain plain text).
                let nodes = [], pos = Math.max(offset, measured.from);
                if (measured.from > offset)
                    nodes.push(new HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));
                while (pos <= end && measured.more) {
                    let len = oracle.doc.lineAt(pos).length;
                    if (nodes.length)
                        nodes.push(null);
                    let line = new HeightMapText(len, measured.heights[measured.index++]);
                    line.outdated = false;
                    nodes.push(line);
                    pos += len + 1;
                }
                if (pos <= end)
                    nodes.push(null, new HeightMapGap(end - pos).updateHeight(oracle, pos));
                oracle.heightChanged = true;
                return HeightMap.of(nodes);
            }
            else if (force || this.outdated) {
                this.setHeight(oracle, oracle.heightForGap(offset, offset + this.length));
                this.outdated = false;
            }
            return this;
        }
        toString() { return `gap(${this.length})`; }
    }
    class HeightMapBranch extends HeightMap {
        constructor(left, brk, right) {
            super(left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2 /* Outdated */ : 0));
            this.left = left;
            this.right = right;
            this.size = left.size + right.size;
        }
        get break() { return this.flags & 1 /* Break */; }
        blockAt(height, doc, top, offset) {
            let mid = top + this.left.height;
            return height < mid || this.right.height == 0 ? this.left.blockAt(height, doc, top, offset)
                : this.right.blockAt(height, doc, mid, offset + this.left.length + this.break);
        }
        lineAt(value, type, doc, top, offset) {
            let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
            let left = type == QueryType.ByHeight ? value < rightTop || this.right.height == 0 : value < rightOffset;
            let base = left ? this.left.lineAt(value, type, doc, top, offset)
                : this.right.lineAt(value, type, doc, rightTop, rightOffset);
            if (this.break || (left ? base.to < rightOffset : base.from > rightOffset))
                return base;
            let subQuery = type == QueryType.ByPosNoHeight ? QueryType.ByPosNoHeight : QueryType.ByPos;
            if (left)
                return base.join(this.right.lineAt(rightOffset, subQuery, doc, rightTop, rightOffset));
            else
                return this.left.lineAt(rightOffset, subQuery, doc, top, offset).join(base);
        }
        forEachLine(from, to, doc, top, offset, f) {
            let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
            if (this.break) {
                if (from < rightOffset)
                    this.left.forEachLine(from, to, doc, top, offset, f);
                if (to >= rightOffset)
                    this.right.forEachLine(from, to, doc, rightTop, rightOffset, f);
            }
            else {
                let mid = this.lineAt(rightOffset, QueryType.ByPos, doc, top, offset);
                if (from < mid.from)
                    this.left.forEachLine(from, mid.from - 1, doc, top, offset, f);
                if (mid.to >= from && mid.from <= to)
                    f(mid);
                if (to > mid.to)
                    this.right.forEachLine(mid.to + 1, to, doc, rightTop, rightOffset, f);
            }
        }
        replace(from, to, nodes) {
            let rightStart = this.left.length + this.break;
            if (to < rightStart)
                return this.balanced(this.left.replace(from, to, nodes), this.right);
            if (from > this.left.length)
                return this.balanced(this.left, this.right.replace(from - rightStart, to - rightStart, nodes));
            let result = [];
            if (from > 0)
                this.decomposeLeft(from, result);
            let left = result.length;
            for (let node of nodes)
                result.push(node);
            if (from > 0)
                mergeGaps(result, left - 1);
            if (to < this.length) {
                let right = result.length;
                this.decomposeRight(to, result);
                mergeGaps(result, right);
            }
            return HeightMap.of(result);
        }
        decomposeLeft(to, result) {
            let left = this.left.length;
            if (to <= left)
                return this.left.decomposeLeft(to, result);
            result.push(this.left);
            if (this.break) {
                left++;
                if (to >= left)
                    result.push(null);
            }
            if (to > left)
                this.right.decomposeLeft(to - left, result);
        }
        decomposeRight(from, result) {
            let left = this.left.length, right = left + this.break;
            if (from >= right)
                return this.right.decomposeRight(from - right, result);
            if (from < left)
                this.left.decomposeRight(from, result);
            if (this.break && from < right)
                result.push(null);
            result.push(this.right);
        }
        balanced(left, right) {
            if (left.size > 2 * right.size || right.size > 2 * left.size)
                return HeightMap.of(this.break ? [left, null, right] : [left, right]);
            this.left = left;
            this.right = right;
            this.height = left.height + right.height;
            this.outdated = left.outdated || right.outdated;
            this.size = left.size + right.size;
            this.length = left.length + this.break + right.length;
            return this;
        }
        updateHeight(oracle, offset = 0, force = false, measured) {
            let { left, right } = this, rightStart = offset + left.length + this.break, rebalance = null;
            if (measured && measured.from <= offset + left.length && measured.more)
                rebalance = left = left.updateHeight(oracle, offset, force, measured);
            else
                left.updateHeight(oracle, offset, force);
            if (measured && measured.from <= rightStart + right.length && measured.more)
                rebalance = right = right.updateHeight(oracle, rightStart, force, measured);
            else
                right.updateHeight(oracle, rightStart, force);
            if (rebalance)
                return this.balanced(left, right);
            this.height = this.left.height + this.right.height;
            this.outdated = false;
            return this;
        }
        toString() { return this.left + (this.break ? " " : "-") + this.right; }
    }
    function mergeGaps(nodes, around) {
        let before, after;
        if (nodes[around] == null &&
            (before = nodes[around - 1]) instanceof HeightMapGap &&
            (after = nodes[around + 1]) instanceof HeightMapGap)
            nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));
    }
    const relevantWidgetHeight = 5;
    class NodeBuilder {
        constructor(pos, oracle) {
            this.pos = pos;
            this.oracle = oracle;
            this.nodes = [];
            this.lineStart = -1;
            this.lineEnd = -1;
            this.covering = null;
            this.writtenTo = pos;
        }
        get isCovered() {
            return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
        }
        span(_from, to) {
            if (this.lineStart > -1) {
                let end = Math.min(to, this.lineEnd), last = this.nodes[this.nodes.length - 1];
                if (last instanceof HeightMapText)
                    last.length += end - this.pos;
                else if (end > this.pos || !this.isCovered)
                    this.nodes.push(new HeightMapText(end - this.pos, -1));
                this.writtenTo = end;
                if (to > end) {
                    this.nodes.push(null);
                    this.writtenTo++;
                    this.lineStart = -1;
                }
            }
            this.pos = to;
        }
        point(from, to, deco) {
            if (from < to || deco.heightRelevant) {
                let height = deco.widget ? Math.max(0, deco.widget.estimatedHeight) : 0;
                let len = to - from;
                if (deco.block) {
                    this.addBlock(new HeightMapBlock(len, height, deco.type));
                }
                else if (len || height >= relevantWidgetHeight) {
                    this.addLineDeco(height, len);
                }
            }
            else if (to > from) {
                this.span(from, to);
            }
            if (this.lineEnd > -1 && this.lineEnd < this.pos)
                this.lineEnd = this.oracle.doc.lineAt(this.pos).to;
        }
        enterLine() {
            if (this.lineStart > -1)
                return;
            let { from, to } = this.oracle.doc.lineAt(this.pos);
            this.lineStart = from;
            this.lineEnd = to;
            if (this.writtenTo < from) {
                if (this.writtenTo < from - 1 || this.nodes[this.nodes.length - 1] == null)
                    this.nodes.push(this.blankContent(this.writtenTo, from - 1));
                this.nodes.push(null);
            }
            if (this.pos > from)
                this.nodes.push(new HeightMapText(this.pos - from, -1));
            this.writtenTo = this.pos;
        }
        blankContent(from, to) {
            let gap = new HeightMapGap(to - from);
            if (this.oracle.doc.lineAt(from).to == to)
                gap.flags |= 4 /* SingleLine */;
            return gap;
        }
        ensureLine() {
            this.enterLine();
            let last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
            if (last instanceof HeightMapText)
                return last;
            let line = new HeightMapText(0, -1);
            this.nodes.push(line);
            return line;
        }
        addBlock(block) {
            this.enterLine();
            if (block.type == BlockType.WidgetAfter && !this.isCovered)
                this.ensureLine();
            this.nodes.push(block);
            this.writtenTo = this.pos = this.pos + block.length;
            if (block.type != BlockType.WidgetBefore)
                this.covering = block;
        }
        addLineDeco(height, length) {
            let line = this.ensureLine();
            line.length += length;
            line.collapsed += length;
            line.widgetHeight = Math.max(line.widgetHeight, height);
            this.writtenTo = this.pos = this.pos + length;
        }
        finish(from) {
            let last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
            if (this.lineStart > -1 && !(last instanceof HeightMapText) && !this.isCovered)
                this.nodes.push(new HeightMapText(0, -1));
            else if (this.writtenTo < this.pos || last == null)
                this.nodes.push(this.blankContent(this.writtenTo, this.pos));
            let pos = from;
            for (let node of this.nodes) {
                if (node instanceof HeightMapText)
                    node.updateHeight(this.oracle, pos);
                pos += node ? node.length : 1;
            }
            return this.nodes;
        }
        // Always called with a region that on both sides either stretches
        // to a line break or the end of the document.
        // The returned array uses null to indicate line breaks, but never
        // starts or ends in a line break, or has multiple line breaks next
        // to each other.
        static build(oracle, decorations, from, to) {
            let builder = new NodeBuilder(from, oracle);
            RangeSet.spans(decorations, from, to, builder, 0);
            return builder.finish(from);
        }
    }
    function heightRelevantDecoChanges(a, b, diff) {
        let comp = new DecorationComparator;
        RangeSet.compare(a, b, diff, comp, 0);
        return comp.changes;
    }
    class DecorationComparator {
        constructor() {
            this.changes = [];
        }
        compareRange() { }
        comparePoint(from, to, a, b) {
            if (from < to || a && a.heightRelevant || b && b.heightRelevant)
                addRange(from, to, this.changes, 5);
        }
    }

    function visiblePixelRange(dom, paddingTop) {
        let rect = dom.getBoundingClientRect();
        let left = Math.max(0, rect.left), right = Math.min(innerWidth, rect.right);
        let top = Math.max(0, rect.top), bottom = Math.min(innerHeight, rect.bottom);
        for (let parent = dom.parentNode; parent;) { // (Cast to any because TypeScript is useless with Node types)
            if (parent.nodeType == 1) {
                let style = window.getComputedStyle(parent);
                if ((parent.scrollHeight > parent.clientHeight || parent.scrollWidth > parent.clientWidth) &&
                    style.overflow != "visible") {
                    let parentRect = parent.getBoundingClientRect();
                    left = Math.max(left, parentRect.left);
                    right = Math.min(right, parentRect.right);
                    top = Math.max(top, parentRect.top);
                    bottom = Math.min(bottom, parentRect.bottom);
                }
                parent = style.position == "absolute" || style.position == "fixed" ? parent.offsetParent : parent.parentNode;
            }
            else if (parent.nodeType == 11) { // Shadow root
                parent = parent.host;
            }
            else {
                break;
            }
        }
        return { left: left - rect.left, right: right - rect.left,
            top: top - (rect.top + paddingTop), bottom: bottom - (rect.top + paddingTop) };
    }
    // Line gaps are placeholder widgets used to hide pieces of overlong
    // lines within the viewport, as a kludge to keep the editor
    // responsive when a ridiculously long line is loaded into it.
    class LineGap {
        constructor(from, to, size) {
            this.from = from;
            this.to = to;
            this.size = size;
        }
        static same(a, b) {
            if (a.length != b.length)
                return false;
            for (let i = 0; i < a.length; i++) {
                let gA = a[i], gB = b[i];
                if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size)
                    return false;
            }
            return true;
        }
        draw(wrapping) {
            return Decoration.replace({ widget: new LineGapWidget(this.size, wrapping) }).range(this.from, this.to);
        }
    }
    class LineGapWidget extends WidgetType {
        constructor(size, vertical) {
            super();
            this.size = size;
            this.vertical = vertical;
        }
        eq(other) { return other.size == this.size && other.vertical == this.vertical; }
        toDOM() {
            let elt = document.createElement("div");
            if (this.vertical) {
                elt.style.height = this.size + "px";
            }
            else {
                elt.style.width = this.size + "px";
                elt.style.height = "2px";
                elt.style.display = "inline-block";
            }
            return elt;
        }
        get estimatedHeight() { return this.vertical ? this.size : -1; }
    }
    class ViewState {
        constructor(state) {
            this.state = state;
            // These are contentDOM-local coordinates
            this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 };
            this.inView = true;
            this.paddingTop = 0;
            this.paddingBottom = 0;
            this.contentWidth = 0;
            this.heightOracle = new HeightOracle;
            // See VP.MaxDOMHeight
            this.scaler = IdScaler;
            this.scrollTo = null;
            // Briefly set to true when printing, to disable viewport limiting
            this.printing = false;
            this.visibleRanges = [];
            // Cursor 'assoc' is only significant when the cursor is on a line
            // wrap point, where it must stick to the character that it is
            // associated with. Since browsers don't provide a reasonable
            // interface to set or query this, when a selection is set that
            // might cause this to be significant, this flag is set. The next
            // measure phase will check whether the cursor is on a line-wrapping
            // boundary and, if so, reset it to make sure it is positioned in
            // the right place.
            this.mustEnforceCursorAssoc = false;
            this.heightMap = HeightMap.empty().applyChanges(state.facet(decorations), Text.empty, this.heightOracle.setDoc(state.doc), [new ChangedRange(0, 0, 0, state.doc.length)]);
            this.viewport = this.getViewport(0, null);
            this.updateForViewport();
            this.lineGaps = this.ensureLineGaps([]);
            this.lineGapDeco = Decoration.set(this.lineGaps.map(gap => gap.draw(false)));
            this.computeVisibleRanges();
        }
        updateForViewport() {
            let viewports = [this.viewport], { main } = this.state.selection;
            for (let i = 0; i <= 1; i++) {
                let pos = i ? main.head : main.anchor;
                if (!viewports.some(({ from, to }) => pos >= from && pos <= to)) {
                    let { from, to } = this.lineAt(pos, 0);
                    viewports.push(new Viewport(from, to));
                }
            }
            this.viewports = viewports.sort((a, b) => a.from - b.from);
            this.scaler = this.heightMap.height <= 7000000 /* MaxDOMHeight */ ? IdScaler :
                new BigScaler(this.heightOracle.doc, this.heightMap, this.viewports);
        }
        update(update, scrollTo = null) {
            let prev = this.state;
            this.state = update.state;
            let newDeco = this.state.facet(decorations);
            let contentChanges = update.changedRanges;
            let heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(update.startState.facet(decorations), newDeco, update ? update.changes : ChangeSet.empty(this.state.doc.length)));
            let prevHeight = this.heightMap.height;
            this.heightMap = this.heightMap.applyChanges(newDeco, prev.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);
            if (this.heightMap.height != prevHeight)
                update.flags |= 2 /* Height */;
            let viewport = heightChanges.length ? this.mapViewport(this.viewport, update.changes) : this.viewport;
            if (scrollTo && (scrollTo.head < viewport.from || scrollTo.head > viewport.to) || !this.viewportIsAppropriate(viewport))
                viewport = this.getViewport(0, scrollTo);
            if (!viewport.eq(this.viewport)) {
                this.viewport = viewport;
                update.flags |= 4 /* Viewport */;
            }
            this.updateForViewport();
            if (this.lineGaps.length || this.viewport.to - this.viewport.from > 15000 /* MinViewPort */)
                update.flags |= this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, update.changes)));
            this.computeVisibleRanges();
            if (scrollTo)
                this.scrollTo = scrollTo;
            if (!this.mustEnforceCursorAssoc && update.selectionSet && update.view.lineWrapping &&
                update.state.selection.main.empty && update.state.selection.main.assoc)
                this.mustEnforceCursorAssoc = true;
        }
        measure(docView, repeated) {
            let dom = docView.dom, whiteSpace = "", direction = Direction.LTR;
            if (!repeated) {
                // Vertical padding
                let style = window.getComputedStyle(dom);
                whiteSpace = style.whiteSpace, direction = (style.direction == "rtl" ? Direction.RTL : Direction.LTR);
                this.paddingTop = parseInt(style.paddingTop) || 0;
                this.paddingBottom = parseInt(style.paddingBottom) || 0;
            }
            // Pixel viewport
            let pixelViewport = this.printing ? { top: -1e8, bottom: 1e8, left: -1e8, right: 1e8 } : visiblePixelRange(dom, this.paddingTop);
            let dTop = pixelViewport.top - this.pixelViewport.top, dBottom = pixelViewport.bottom - this.pixelViewport.bottom;
            this.pixelViewport = pixelViewport;
            this.inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
            if (!this.inView)
                return 0;
            let lineHeights = docView.measureVisibleLineHeights();
            let refresh = false, bias = 0, result = 0, oracle = this.heightOracle;
            if (!repeated) {
                let contentWidth = docView.dom.clientWidth;
                if (oracle.mustRefresh(lineHeights, whiteSpace, direction) ||
                    oracle.lineWrapping && Math.abs(contentWidth - this.contentWidth) > oracle.charWidth) {
                    let { lineHeight, charWidth } = docView.measureTextSize();
                    refresh = oracle.refresh(whiteSpace, direction, lineHeight, charWidth, contentWidth / charWidth, lineHeights);
                    if (refresh) {
                        docView.minWidth = 0;
                        result |= 16 /* Geometry */;
                    }
                }
                if (this.contentWidth != contentWidth) {
                    this.contentWidth = contentWidth;
                    result |= 16 /* Geometry */;
                }
                if (dTop > 0 && dBottom > 0)
                    bias = Math.max(dTop, dBottom);
                else if (dTop < 0 && dBottom < 0)
                    bias = Math.min(dTop, dBottom);
            }
            oracle.heightChanged = false;
            this.heightMap = this.heightMap.updateHeight(oracle, 0, refresh, new MeasuredHeights(this.viewport.from, lineHeights));
            if (oracle.heightChanged)
                result |= 2 /* Height */;
            if (!this.viewportIsAppropriate(this.viewport, bias) ||
                this.scrollTo && (this.scrollTo.head < this.viewport.from || this.scrollTo.head > this.viewport.to)) {
                let newVP = this.getViewport(bias, this.scrollTo);
                if (newVP.from != this.viewport.from || newVP.to != this.viewport.to) {
                    this.viewport = newVP;
                    result |= 4 /* Viewport */;
                }
            }
            this.updateForViewport();
            if (this.lineGaps.length || this.viewport.to - this.viewport.from > 15000 /* MinViewPort */)
                result |= this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps));
            this.computeVisibleRanges();
            if (this.mustEnforceCursorAssoc) {
                this.mustEnforceCursorAssoc = false;
                // This is done in the read stage, because moving the selection
                // to a line end is going to trigger a layout anyway, so it
                // can't be a pure write. It should be rare that it does any
                // writing.
                docView.enforceCursorAssoc();
            }
            return result;
        }
        get visibleTop() { return this.scaler.fromDOM(this.pixelViewport.top, 0); }
        get visibleBottom() { return this.scaler.fromDOM(this.pixelViewport.bottom, 0); }
        getViewport(bias, scrollTo) {
            // This will divide VP.Margin between the top and the
            // bottom, depending on the bias (the change in viewport position
            // since the last update). It'll hold a number between 0 and 1
            let marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1000 /* Margin */ / 2));
            let map = this.heightMap, doc = this.state.doc, { visibleTop, visibleBottom } = this;
            let viewport = new Viewport(map.lineAt(visibleTop - marginTop * 1000 /* Margin */, QueryType.ByHeight, doc, 0, 0).from, map.lineAt(visibleBottom + (1 - marginTop) * 1000 /* Margin */, QueryType.ByHeight, doc, 0, 0).to);
            // If scrollTo is given, make sure the viewport includes that position
            if (scrollTo) {
                if (scrollTo.head < viewport.from) {
                    let { top: newTop } = map.lineAt(scrollTo.head, QueryType.ByPos, doc, 0, 0);
                    viewport = new Viewport(map.lineAt(newTop - 1000 /* Margin */ / 2, QueryType.ByHeight, doc, 0, 0).from, map.lineAt(newTop + (visibleBottom - visibleTop) + 1000 /* Margin */ / 2, QueryType.ByHeight, doc, 0, 0).to);
                }
                else if (scrollTo.head > viewport.to) {
                    let { bottom: newBottom } = map.lineAt(scrollTo.head, QueryType.ByPos, doc, 0, 0);
                    viewport = new Viewport(map.lineAt(newBottom - (visibleBottom - visibleTop) - 1000 /* Margin */ / 2, QueryType.ByHeight, doc, 0, 0).from, map.lineAt(newBottom + 1000 /* Margin */ / 2, QueryType.ByHeight, doc, 0, 0).to);
                }
            }
            return viewport;
        }
        mapViewport(viewport, changes) {
            let from = changes.mapPos(viewport.from, -1), to = changes.mapPos(viewport.to, 1);
            return new Viewport(this.heightMap.lineAt(from, QueryType.ByPos, this.state.doc, 0, 0).from, this.heightMap.lineAt(to, QueryType.ByPos, this.state.doc, 0, 0).to);
        }
        // Checks if a given viewport covers the visible part of the
        // document and not too much beyond that.
        viewportIsAppropriate({ from, to }, bias = 0) {
            let { top } = this.heightMap.lineAt(from, QueryType.ByPos, this.state.doc, 0, 0);
            let { bottom } = this.heightMap.lineAt(to, QueryType.ByPos, this.state.doc, 0, 0);
            let { visibleTop, visibleBottom } = this;
            return (from == 0 || top <= visibleTop - Math.max(10 /* MinCoverMargin */, Math.min(-bias, 250 /* MaxCoverMargin */))) &&
                (to == this.state.doc.length ||
                    bottom >= visibleBottom + Math.max(10 /* MinCoverMargin */, Math.min(bias, 250 /* MaxCoverMargin */))) &&
                (top > visibleTop - 2 * 1000 /* Margin */ && bottom < visibleBottom + 2 * 1000 /* Margin */);
        }
        mapLineGaps(gaps, changes) {
            if (!gaps.length || changes.empty)
                return gaps;
            let mapped = [];
            for (let gap of gaps)
                if (!changes.touchesRange(gap.from, gap.to))
                    mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size));
            return mapped;
        }
        // Computes positions in the viewport where the start or end of a
        // line should be hidden, trying to reuse existing line gaps when
        // appropriate to avoid unneccesary redraws.
        // Uses crude character-counting for the positioning and sizing,
        // since actual DOM coordinates aren't always available and
        // predictable. Relies on generous margins (see LG.Margin) to hide
        // the artifacts this might produce from the user.
        ensureLineGaps(current) {
            let gaps = [];
            // This won't work at all in predominantly right-to-left text.
            if (this.heightOracle.direction != Direction.LTR)
                return gaps;
            this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.state.doc, 0, 0, line => {
                if (line.length < 10000 /* Margin */)
                    return;
                let structure = lineStructure(line.from, line.to, this.state);
                if (structure.total < 10000 /* Margin */)
                    return;
                let viewFrom, viewTo;
                if (this.heightOracle.lineWrapping) {
                    if (line.from != this.viewport.from)
                        viewFrom = line.from;
                    else
                        viewFrom = findPosition(structure, (this.visibleTop - line.top) / line.height);
                    if (line.to != this.viewport.to)
                        viewTo = line.to;
                    else
                        viewTo = findPosition(structure, (this.visibleBottom - line.top) / line.height);
                }
                else {
                    let totalWidth = structure.total * this.heightOracle.charWidth;
                    viewFrom = findPosition(structure, this.pixelViewport.left / totalWidth);
                    viewTo = findPosition(structure, this.pixelViewport.right / totalWidth);
                }
                let sel = this.state.selection.main;
                // Make sure the gap doesn't cover a selection end
                if (sel.from <= viewFrom && sel.to >= line.from)
                    viewFrom = sel.from;
                if (sel.from <= line.to && sel.to >= viewTo)
                    viewTo = sel.to;
                let gapTo = viewFrom - 10000 /* Margin */, gapFrom = viewTo + 10000 /* Margin */;
                if (gapTo > line.from + 5000 /* HalfMargin */)
                    gaps.push(find(current, gap => gap.from == line.from && gap.to > gapTo - 5000 /* HalfMargin */ && gap.to < gapTo + 5000 /* HalfMargin */) ||
                        new LineGap(line.from, gapTo, this.gapSize(line, gapTo, true, structure)));
                if (gapFrom < line.to - 5000 /* HalfMargin */)
                    gaps.push(find(current, gap => gap.to == line.to && gap.from > gapFrom - 5000 /* HalfMargin */ &&
                        gap.from < gapFrom + 5000 /* HalfMargin */) ||
                        new LineGap(gapFrom, line.to, this.gapSize(line, gapFrom, false, structure)));
            });
            return gaps;
        }
        gapSize(line, pos, start, structure) {
            if (this.heightOracle.lineWrapping) {
                let height = line.height * findFraction(structure, pos);
                return start ? height : line.height - height;
            }
            else {
                let ratio = findFraction(structure, pos);
                return structure.total * this.heightOracle.charWidth * (start ? ratio : 1 - ratio);
            }
        }
        updateLineGaps(gaps) {
            if (!LineGap.same(gaps, this.lineGaps)) {
                this.lineGaps = gaps;
                this.lineGapDeco = Decoration.set(gaps.map(gap => gap.draw(this.heightOracle.lineWrapping)));
                return 8 /* LineGaps */;
            }
            return 0;
        }
        computeVisibleRanges() {
            let deco = this.state.facet(decorations);
            if (this.lineGaps.length)
                deco = deco.concat(this.lineGapDeco);
            let ranges = [];
            RangeSet.spans(deco, this.viewport.from, this.viewport.to, {
                span(from, to) { ranges.push({ from, to }); },
                point() { }
            }, 20);
            this.visibleRanges = ranges;
        }
        lineAt(pos, editorTop) {
            editorTop += this.paddingTop;
            return scaleBlock(this.heightMap.lineAt(pos, QueryType.ByPos, this.state.doc, editorTop, 0), this.scaler, editorTop);
        }
        lineAtHeight(height, editorTop) {
            editorTop += this.paddingTop;
            return scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height, editorTop), QueryType.ByHeight, this.state.doc, editorTop, 0), this.scaler, editorTop);
        }
        blockAtHeight(height, editorTop) {
            editorTop += this.paddingTop;
            return scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height, editorTop), this.state.doc, editorTop, 0), this.scaler, editorTop);
        }
        forEachLine(from, to, f, editorTop) {
            editorTop += this.paddingTop;
            return this.heightMap.forEachLine(from, to, this.state.doc, editorTop, 0, this.scaler.scale == 1 ? f : b => f(scaleBlock(b, this.scaler, editorTop)));
        }
        get contentHeight() {
            return this.domHeight + this.paddingTop + this.paddingBottom;
        }
        get domHeight() {
            return this.scaler.toDOM(this.heightMap.height, this.paddingTop);
        }
    }
    /**
    Indicates the range of the document that is in the visible
    viewport.
    */
    class Viewport {
        constructor(from, to) {
            this.from = from;
            this.to = to;
        }
        eq(b) { return this.from == b.from && this.to == b.to; }
    }
    function lineStructure(from, to, state) {
        let ranges = [], pos = from, total = 0;
        RangeSet.spans(state.facet(decorations), from, to, {
            span() { },
            point(from, to) {
                if (from > pos) {
                    ranges.push({ from: pos, to: from });
                    total += from - pos;
                }
                pos = to;
            }
        }, 20); // We're only interested in collapsed ranges of a significant size
        if (pos < to) {
            ranges.push({ from: pos, to });
            total += to - pos;
        }
        return { total, ranges };
    }
    function findPosition({ total, ranges }, ratio) {
        if (ratio <= 0)
            return ranges[0].from;
        if (ratio >= 1)
            return ranges[ranges.length - 1].to;
        let dist = Math.floor(total * ratio);
        for (let i = 0;; i++) {
            let { from, to } = ranges[i], size = to - from;
            if (dist <= size)
                return from + dist;
            dist -= size;
        }
    }
    function findFraction(structure, pos) {
        let counted = 0;
        for (let { from, to } of structure.ranges) {
            if (pos <= to) {
                counted += pos - from;
                break;
            }
            counted += to - from;
        }
        return counted / structure.total;
    }
    function find(array, f) {
        for (let val of array)
            if (f(val))
                return val;
        return undefined;
    }
    // Don't scale when the document height is within the range of what
    // the DOM can handle.
    const IdScaler = {
        toDOM(n) { return n; },
        fromDOM(n) { return n; },
        scale: 1
    };
    // When the height is too big (> VP.MaxDOMHeight), scale down the
    // regions outside the viewports so that the total height is
    // VP.MaxDOMHeight.
    class BigScaler {
        constructor(doc, heightMap, viewports) {
            let vpHeight = 0, base = 0, domBase = 0;
            this.viewports = viewports.map(({ from, to }) => {
                let top = heightMap.lineAt(from, QueryType.ByPos, doc, 0, 0).top;
                let bottom = heightMap.lineAt(to, QueryType.ByPos, doc, 0, 0).bottom;
                vpHeight += bottom - top;
                return { from, to, top, bottom, domTop: 0, domBottom: 0 };
            });
            this.scale = (7000000 /* MaxDOMHeight */ - vpHeight) / (heightMap.height - vpHeight);
            for (let obj of this.viewports) {
                obj.domTop = domBase + (obj.top - base) * this.scale;
                domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);
                base = obj.bottom;
            }
        }
        toDOM(n, top) {
            n -= top;
            for (let i = 0, base = 0, domBase = 0;; i++) {
                let vp = i < this.viewports.length ? this.viewports[i] : null;
                if (!vp || n < vp.top)
                    return domBase + (n - base) * this.scale + top;
                if (n <= vp.bottom)
                    return vp.domTop + (n - vp.top) + top;
                base = vp.bottom;
                domBase = vp.domBottom;
            }
        }
        fromDOM(n, top) {
            n -= top;
            for (let i = 0, base = 0, domBase = 0;; i++) {
                let vp = i < this.viewports.length ? this.viewports[i] : null;
                if (!vp || n < vp.domTop)
                    return base + (n - domBase) / this.scale + top;
                if (n <= vp.domBottom)
                    return vp.top + (n - vp.domTop) + top;
                base = vp.bottom;
                domBase = vp.domBottom;
            }
        }
    }
    function scaleBlock(block, scaler, top) {
        if (scaler.scale == 1)
            return block;
        let bTop = scaler.toDOM(block.top, top), bBottom = scaler.toDOM(block.bottom, top);
        return new BlockInfo(block.from, block.length, bTop, bBottom - bTop, Array.isArray(block.type) ? block.type.map(b => scaleBlock(b, scaler, top)) : block.type);
    }

    const theme = /*@__PURE__*/Facet.define({ combine: strs => strs.join(" ") });
    const darkTheme = /*@__PURE__*/Facet.define({ combine: values => values.indexOf(true) > -1 });
    const baseThemeID = /*@__PURE__*/StyleModule.newName(), baseLightID = /*@__PURE__*/StyleModule.newName(), baseDarkID = /*@__PURE__*/StyleModule.newName();
    const lightDarkIDs = { "&light": "." + baseLightID, "&dark": "." + baseDarkID };
    function buildTheme(main, spec, scopes) {
        return new StyleModule(spec, {
            finish(sel) {
                return /&/.test(sel) ? sel.replace(/&\w*/, m => {
                    if (m == "&")
                        return main;
                    if (!scopes || !scopes[m])
                        throw new RangeError(`Unsupported selector: ${m}`);
                    return scopes[m];
                }) : main + " " + sel;
            }
        });
    }
    const baseTheme$4 = /*@__PURE__*/buildTheme("." + baseThemeID, {
        "&": {
            position: "relative !important",
            boxSizing: "border-box",
            "&.cm-focused": {
                // Provide a simple default outline to make sure a focused
                // editor is visually distinct. Can't leave the default behavior
                // because that will apply to the content element, which is
                // inside the scrollable container and doesn't include the
                // gutters. We also can't use an 'auto' outline, since those
                // are, for some reason, drawn behind the element content, which
                // will cause things like the active line background to cover
                // the outline (#297).
                outline: "1px dotted #212121"
            },
            display: "flex !important",
            flexDirection: "column"
        },
        ".cm-scroller": {
            display: "flex !important",
            alignItems: "flex-start !important",
            fontFamily: "monospace",
            lineHeight: 1.4,
            height: "100%",
            overflowX: "auto",
            position: "relative",
            zIndex: 0
        },
        ".cm-content": {
            margin: 0,
            flexGrow: 2,
            minHeight: "100%",
            display: "block",
            whiteSpace: "pre",
            wordWrap: "normal",
            boxSizing: "border-box",
            padding: "4px 0",
            outline: "none"
        },
        ".cm-lineWrapping": {
            whiteSpace: "pre-wrap",
            wordBreak: "break-word",
            overflowWrap: "anywhere"
        },
        "&light .cm-content": { caretColor: "black" },
        "&dark .cm-content": { caretColor: "white" },
        ".cm-line": {
            display: "block",
            padding: "0 2px 0 4px"
        },
        ".cm-selectionLayer": {
            zIndex: -1,
            contain: "size style"
        },
        ".cm-selectionBackground": {
            position: "absolute",
        },
        "&light .cm-selectionBackground": {
            background: "#d9d9d9"
        },
        "&dark .cm-selectionBackground": {
            background: "#222"
        },
        "&light.cm-focused .cm-selectionBackground": {
            background: "#d7d4f0"
        },
        "&dark.cm-focused .cm-selectionBackground": {
            background: "#233"
        },
        ".cm-cursorLayer": {
            zIndex: 100,
            contain: "size style",
            pointerEvents: "none"
        },
        "&.cm-focused .cm-cursorLayer": {
            animation: "steps(1) cm-blink 1.2s infinite"
        },
        // Two animations defined so that we can switch between them to
        // restart the animation without forcing another style
        // recomputation.
        "@keyframes cm-blink": { "0%": {}, "50%": { visibility: "hidden" }, "100%": {} },
        "@keyframes cm-blink2": { "0%": {}, "50%": { visibility: "hidden" }, "100%": {} },
        ".cm-cursor": {
            position: "absolute",
            borderLeft: "1.2px solid black",
            marginLeft: "-0.6px",
            pointerEvents: "none",
            display: "none"
        },
        "&dark .cm-cursor": {
            borderLeftColor: "#444"
        },
        "&.cm-focused .cm-cursor": {
            display: "block"
        },
        "&light .cm-activeLine": { backgroundColor: "#f3f9ff" },
        "&dark .cm-activeLine": { backgroundColor: "#223039" },
        "&light .cm-specialChar": { color: "red" },
        "&dark .cm-specialChar": { color: "#f78" },
        ".cm-tab": {
            display: "inline-block",
            overflow: "hidden",
            verticalAlign: "bottom"
        },
        ".cm-placeholder": {
            color: "#888",
            display: "inline-block"
        },
        ".cm-button": {
            verticalAlign: "middle",
            color: "inherit",
            fontSize: "70%",
            padding: ".2em 1em",
            borderRadius: "3px"
        },
        "&light .cm-button": {
            backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
            border: "1px solid #888",
            "&:active": {
                backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
            }
        },
        "&dark .cm-button": {
            backgroundImage: "linear-gradient(#393939, #111)",
            border: "1px solid #888",
            "&:active": {
                backgroundImage: "linear-gradient(#111, #333)"
            }
        },
        ".cm-textfield": {
            verticalAlign: "middle",
            color: "inherit",
            fontSize: "70%",
            border: "1px solid silver",
            padding: ".2em .5em"
        },
        "&light .cm-textfield": {
            backgroundColor: "white"
        },
        "&dark .cm-textfield": {
            border: "1px solid #555",
            backgroundColor: "inherit"
        }
    }, lightDarkIDs);

    const observeOptions = {
        childList: true,
        characterData: true,
        subtree: true,
        attributes: true,
        characterDataOldValue: true
    };
    // IE11 has very broken mutation observers, so we also listen to
    // DOMCharacterDataModified there
    const useCharData = browser.ie && browser.ie_version <= 11;
    class DOMObserver {
        constructor(view, onChange, onScrollChanged) {
            this.view = view;
            this.onChange = onChange;
            this.onScrollChanged = onScrollChanged;
            this.active = false;
            this.ignoreSelection = new DOMSelection;
            this.delayedFlush = -1;
            this.queue = [];
            this.lastFlush = 0;
            this.scrollTargets = [];
            this.intersection = null;
            this.intersecting = false;
            // Used to work around a Safari Selection/shadow DOM bug (#414)
            this._selectionRange = null;
            // Timeout for scheduling check of the parents that need scroll handlers
            this.parentCheck = -1;
            this.dom = view.contentDOM;
            this.observer = new MutationObserver(mutations => {
                for (let mut of mutations)
                    this.queue.push(mut);
                this._selectionRange = null;
                // IE11 will sometimes (on typing over a selection or
                // backspacing out a single character text node) call the
                // observer callback before actually updating the DOM.
                //
                // Unrelatedly, iOS Safari will, when ending a composition,
                // sometimes first clear it, deliver the mutations, and then
                // reinsert the finished text. CodeMirror's handling of the
                // deletion will prevent the reinsertion from happening,
                // breaking composition.
                if ((browser.ie && browser.ie_version <= 11 || browser.ios && view.composing) &&
                    mutations.some(m => m.type == "childList" && m.removedNodes.length ||
                        m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length))
                    this.flushSoon();
                else
                    this.flush();
            });
            if (useCharData)
                this.onCharData = (event) => {
                    this.queue.push({ target: event.target,
                        type: "characterData",
                        oldValue: event.prevValue });
                    this.flushSoon();
                };
            this.onSelectionChange = this.onSelectionChange.bind(this);
            this.start();
            this.onScroll = this.onScroll.bind(this);
            window.addEventListener("scroll", this.onScroll);
            if (typeof IntersectionObserver == "function") {
                this.intersection = new IntersectionObserver(entries => {
                    if (this.parentCheck < 0)
                        this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1000);
                    if (entries[entries.length - 1].intersectionRatio > 0 != this.intersecting) {
                        this.intersecting = !this.intersecting;
                        if (this.intersecting != this.view.inView)
                            this.onScrollChanged(document.createEvent("Event"));
                    }
                }, {});
                this.intersection.observe(this.dom);
            }
            this.listenForScroll();
        }
        onScroll(e) {
            if (this.intersecting)
                this.flush();
            this.onScrollChanged(e);
        }
        onSelectionChange(event) {
            if (this.lastFlush < Date.now() - 50)
                this._selectionRange = null;
            let { view } = this, sel = this.selectionRange;
            if (view.state.facet(editable) ? view.root.activeElement != this.dom : !hasSelection(view.dom, sel))
                return;
            let context = sel.anchorNode && view.docView.nearest(sel.anchorNode);
            if (context && context.ignoreEvent(event))
                return;
            // Deletions on IE11 fire their events in the wrong order, giving
            // us a selection change event before the DOM changes are
            // reported.
            // (Selection.isCollapsed isn't reliable on IE)
            if (browser.ie && browser.ie_version <= 11 && !view.state.selection.main.empty &&
                sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
                this.flushSoon();
            else
                this.flush();
        }
        get selectionRange() {
            if (!this._selectionRange) {
                let { root } = this.view, sel = getSelection(root);
                // The Selection object is broken in shadow roots in Safari. See
                // https://github.com/codemirror/codemirror.next/issues/414
                if (browser.safari && root.nodeType == 11 && deepActiveElement() == this.view.contentDOM)
                    sel = safariSelectionRangeHack(this.view) || sel;
                this._selectionRange = sel;
            }
            return this._selectionRange;
        }
        setSelectionRange(anchor, head) {
            var _a;
            if (!((_a = this._selectionRange) === null || _a === void 0 ? void 0 : _a.type))
                this._selectionRange = { anchorNode: anchor.node, anchorOffset: anchor.offset,
                    focusNode: head.node, focusOffset: head.offset };
        }
        listenForScroll() {
            this.parentCheck = -1;
            let i = 0, changed = null;
            for (let dom = this.dom; dom;) {
                if (dom.nodeType == 1) {
                    if (!changed && i < this.scrollTargets.length && this.scrollTargets[i] == dom)
                        i++;
                    else if (!changed)
                        changed = this.scrollTargets.slice(0, i);
                    if (changed)
                        changed.push(dom);
                    dom = dom.assignedSlot || dom.parentNode;
                }
                else if (dom.nodeType == 11) { // Shadow root
                    dom = dom.host;
                }
                else {
                    break;
                }
            }
            if (i < this.scrollTargets.length && !changed)
                changed = this.scrollTargets.slice(0, i);
            if (changed) {
                for (let dom of this.scrollTargets)
                    dom.removeEventListener("scroll", this.onScroll);
                for (let dom of this.scrollTargets = changed)
                    dom.addEventListener("scroll", this.onScroll);
            }
        }
        ignore(f) {
            if (!this.active)
                return f();
            try {
                this.stop();
                return f();
            }
            finally {
                this.start();
                this.clear();
            }
        }
        start() {
            if (this.active)
                return;
            this.observer.observe(this.dom, observeOptions);
            this.dom.ownerDocument.addEventListener("selectionchange", this.onSelectionChange);
            if (useCharData)
                this.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
            this.active = true;
        }
        stop() {
            if (!this.active)
                return;
            this.active = false;
            this.observer.disconnect();
            this.dom.ownerDocument.removeEventListener("selectionchange", this.onSelectionChange);
            if (useCharData)
                this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
        }
        clearSelection() {
            this.ignoreSelection.set(this.selectionRange);
        }
        // Throw away any pending changes
        clear() {
            this.observer.takeRecords();
            this.queue.length = 0;
            this.clearSelection();
        }
        flushSoon() {
            if (this.delayedFlush < 0)
                this.delayedFlush = window.setTimeout(() => { this.delayedFlush = -1; this.flush(); }, 20);
        }
        forceFlush() {
            if (this.delayedFlush >= 0) {
                window.clearTimeout(this.delayedFlush);
                this.delayedFlush = -1;
                this.flush();
            }
        }
        // Apply pending changes, if any
        flush() {
            if (this.delayedFlush >= 0)
                return;
            this.lastFlush = Date.now();
            let records = this.queue;
            for (let mut of this.observer.takeRecords())
                records.push(mut);
            if (records.length)
                this.queue = [];
            let selection = this.selectionRange;
            let newSel = !this.ignoreSelection.eq(selection) && hasSelection(this.dom, selection);
            if (records.length == 0 && !newSel)
                return;
            let from = -1, to = -1, typeOver = false;
            for (let record of records) {
                let range = this.readMutation(record);
                if (!range)
                    continue;
                if (range.typeOver)
                    typeOver = true;
                if (from == -1) {
                    ({ from, to } = range);
                }
                else {
                    from = Math.min(range.from, from);
                    to = Math.max(range.to, to);
                }
            }
            let startState = this.view.state;
            if (from > -1 || newSel)
                this.onChange(from, to, typeOver);
            if (this.view.state == startState) { // The view wasn't updated
                if (this.view.docView.dirty) {
                    this.ignore(() => this.view.docView.sync());
                    this.view.docView.dirty = 0 /* Not */;
                }
                if (newSel)
                    this.view.docView.updateSelection();
            }
            this.clearSelection();
        }
        readMutation(rec) {
            let cView = this.view.docView.nearest(rec.target);
            if (!cView || cView.ignoreMutation(rec))
                return null;
            cView.markDirty(rec.type == "attributes");
            if (rec.type == "attributes")
                cView.dirty |= 4 /* Attrs */;
            if (rec.type == "childList") {
                let childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);
                let childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);
                return { from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,
                    to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd, typeOver: false };
            }
            else if (rec.type == "characterData") {
                return { from: cView.posAtStart, to: cView.posAtEnd, typeOver: rec.target.nodeValue == rec.oldValue };
            }
            else {
                return null;
            }
        }
        destroy() {
            this.stop();
            if (this.intersection)
                this.intersection.disconnect();
            for (let dom of this.scrollTargets)
                dom.removeEventListener("scroll", this.onScroll);
            window.removeEventListener("scroll", this.onScroll);
            clearTimeout(this.parentCheck);
        }
    }
    function findChild(cView, dom, dir) {
        while (dom) {
            let curView = ContentView.get(dom);
            if (curView && curView.parent == cView)
                return curView;
            let parent = dom.parentNode;
            dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;
        }
        return null;
    }
    function safariSelectionRangeHack(view) {
        let found = null;
        // Because Safari (at least in 2018-2021) doesn't provide regular
        // access to the selection inside a shadowroot, we have to perform a
        // ridiculous hack to get at it—using `execCommand` to trigger a
        // `beforeInput` event so that we can read the target range from the
        // event.
        function read(event) {
            event.preventDefault();
            event.stopImmediatePropagation();
            found = event.getTargetRanges()[0];
        }
        view.contentDOM.addEventListener("beforeinput", read, true);
        document.execCommand("indent");
        view.contentDOM.removeEventListener("beforeinput", read, true);
        if (!found)
            return null;
        let anchorNode = found.startContainer, anchorOffset = found.startOffset;
        let focusNode = found.endContainer, focusOffset = found.endOffset;
        let curAnchor = view.docView.domAtPos(view.state.selection.main.anchor);
        // Since such a range doesn't distinguish between anchor and head,
        // use a heuristic that flips it around if its end matches the
        // current anchor.
        if (isEquivalentPosition(curAnchor.node, curAnchor.offset, focusNode, focusOffset))
            [anchorNode, anchorOffset, focusNode, focusOffset] = [focusNode, focusOffset, anchorNode, anchorOffset];
        return { anchorNode, anchorOffset, focusNode, focusOffset };
    }

    function applyDOMChange(view, start, end, typeOver) {
        let change, newSel;
        let sel = view.state.selection.main, bounds;
        if (start > -1 && !view.state.readOnly && (bounds = view.docView.domBoundsAround(start, end, 0))) {
            let { from, to } = bounds;
            let selPoints = view.docView.impreciseHead || view.docView.impreciseAnchor ? [] : selectionPoints(view);
            let reader = new DOMReader(selPoints, view);
            reader.readRange(bounds.startDOM, bounds.endDOM);
            newSel = selectionFromPoints(selPoints, from);
            let preferredPos = sel.from, preferredSide = null;
            // Prefer anchoring to end when Backspace is pressed (or, on
            // Android, when something was deleted)
            if (view.inputState.lastKeyCode === 8 && view.inputState.lastKeyTime > Date.now() - 100 ||
                browser.android && reader.text.length < to - from) {
                preferredPos = sel.to;
                preferredSide = "end";
            }
            let diff = findDiff(view.state.sliceDoc(from, to), reader.text, preferredPos - from, preferredSide);
            if (diff)
                change = { from: from + diff.from, to: from + diff.toA,
                    insert: view.state.toText(reader.text.slice(diff.from, diff.toB)) };
        }
        else if (view.hasFocus || !view.state.facet(editable)) {
            let domSel = view.observer.selectionRange;
            let { impreciseHead: iHead, impreciseAnchor: iAnchor } = view.docView;
            let head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset ||
                !contains$1(view.contentDOM, domSel.focusNode)
                ? view.state.selection.main.head
                : view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
            let anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset ||
                !contains$1(view.contentDOM, domSel.anchorNode)
                ? view.state.selection.main.anchor
                : view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);
            if (head != sel.head || anchor != sel.anchor)
                newSel = EditorSelection.single(anchor, head);
        }
        if (!change && !newSel)
            return;
        // Heuristic to notice typing over a selected character
        if (!change && typeOver && !sel.empty && newSel && newSel.main.empty)
            change = { from: sel.from, to: sel.to, insert: view.state.doc.slice(sel.from, sel.to) };
        // If the change is inside the selection and covers most of it,
        // assume it is a selection replace (with identical characters at
        // the start/end not included in the diff)
        else if (change && change.from >= sel.from && change.to <= sel.to &&
            (change.from != sel.from || change.to != sel.to) &&
            (sel.to - sel.from) - (change.to - change.from) <= 4)
            change = {
                from: sel.from, to: sel.to,
                insert: view.state.doc.slice(sel.from, change.from).append(change.insert).append(view.state.doc.slice(change.to, sel.to))
            };
        if (change) {
            let startState = view.state;
            // Android browsers don't fire reasonable key events for enter,
            // backspace, or delete. So this detects changes that look like
            // they're caused by those keys, and reinterprets them as key
            // events.
            if (browser.android &&
                ((change.from == sel.from && change.to == sel.to &&
                    change.insert.length == 1 && change.insert.lines == 2 &&
                    dispatchKey(view.contentDOM, "Enter", 13)) ||
                    (change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 &&
                        dispatchKey(view.contentDOM, "Backspace", 8)) ||
                    (change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 &&
                        dispatchKey(view.contentDOM, "Delete", 46))) ||
                browser.ios && view.inputState.flushIOSKey(view))
                return;
            let text = change.insert.toString();
            if (view.state.facet(inputHandler).some(h => h(view, change.from, change.to, text)))
                return;
            if (view.inputState.composing >= 0)
                view.inputState.composing++;
            let tr;
            if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 &&
                (!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length)) {
                let before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : "";
                let after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : "";
                tr = startState.replaceSelection(view.state.toText(before + change.insert.sliceString(0, undefined, view.state.lineBreak) +
                    after));
            }
            else {
                let changes = startState.changes(change);
                tr = {
                    changes,
                    selection: newSel && !startState.selection.main.eq(newSel.main) && newSel.main.to <= changes.newLength
                        ? startState.selection.replaceRange(newSel.main) : undefined
                };
            }
            let userEvent = "input.type";
            if (view.composing) {
                userEvent += ".compose";
                if (view.inputState.compositionFirstChange) {
                    userEvent += ".start";
                    view.inputState.compositionFirstChange = false;
                }
            }
            view.dispatch(tr, { scrollIntoView: true, userEvent });
        }
        else if (newSel && !newSel.main.eq(sel)) {
            let scrollIntoView = false, userEvent = "select";
            if (view.inputState.lastSelectionTime > Date.now() - 50) {
                if (view.inputState.lastSelectionOrigin == "select")
                    scrollIntoView = true;
                userEvent = view.inputState.lastSelectionOrigin;
            }
            view.dispatch({ selection: newSel, scrollIntoView, userEvent });
        }
    }
    function findDiff(a, b, preferredPos, preferredSide) {
        let minLen = Math.min(a.length, b.length);
        let from = 0;
        while (from < minLen && a.charCodeAt(from) == b.charCodeAt(from))
            from++;
        if (from == minLen && a.length == b.length)
            return null;
        let toA = a.length, toB = b.length;
        while (toA > 0 && toB > 0 && a.charCodeAt(toA - 1) == b.charCodeAt(toB - 1)) {
            toA--;
            toB--;
        }
        if (preferredSide == "end") {
            let adjust = Math.max(0, from - Math.min(toA, toB));
            preferredPos -= toA + adjust - from;
        }
        if (toA < from && a.length < b.length) {
            let move = preferredPos <= from && preferredPos >= toA ? from - preferredPos : 0;
            from -= move;
            toB = from + (toB - toA);
            toA = from;
        }
        else if (toB < from) {
            let move = preferredPos <= from && preferredPos >= toB ? from - preferredPos : 0;
            from -= move;
            toA = from + (toA - toB);
            toB = from;
        }
        return { from, toA, toB };
    }
    class DOMReader {
        constructor(points, view) {
            this.points = points;
            this.view = view;
            this.text = "";
            this.lineBreak = view.state.lineBreak;
        }
        readRange(start, end) {
            if (!start)
                return;
            let parent = start.parentNode;
            for (let cur = start;;) {
                this.findPointBefore(parent, cur);
                this.readNode(cur);
                let next = cur.nextSibling;
                if (next == end)
                    break;
                let view = ContentView.get(cur), nextView = ContentView.get(next);
                if ((view ? view.breakAfter : isBlockElement(cur)) ||
                    ((nextView ? nextView.breakAfter : isBlockElement(next)) && !(cur.nodeName == "BR" && !cur.cmIgnore)))
                    this.text += this.lineBreak;
                cur = next;
            }
            this.findPointBefore(parent, end);
        }
        readNode(node) {
            if (node.cmIgnore)
                return;
            let view = ContentView.get(node);
            let fromView = view && view.overrideDOMText;
            let text;
            if (fromView != null)
                text = fromView.sliceString(0, undefined, this.lineBreak);
            else if (node.nodeType == 3)
                text = node.nodeValue;
            else if (node.nodeName == "BR")
                text = node.nextSibling ? this.lineBreak : "";
            else if (node.nodeType == 1)
                this.readRange(node.firstChild, null);
            if (text != null) {
                this.findPointIn(node, text.length);
                this.text += text;
                // Chrome inserts two newlines when pressing shift-enter at the
                // end of a line. This drops one of those.
                if (browser.chrome && this.view.inputState.lastKeyCode == 13 && !node.nextSibling && /\n\n$/.test(this.text))
                    this.text = this.text.slice(0, -1);
            }
        }
        findPointBefore(node, next) {
            for (let point of this.points)
                if (point.node == node && node.childNodes[point.offset] == next)
                    point.pos = this.text.length;
        }
        findPointIn(node, maxLen) {
            for (let point of this.points)
                if (point.node == node)
                    point.pos = this.text.length + Math.min(point.offset, maxLen);
        }
    }
    function isBlockElement(node) {
        return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(node.nodeName);
    }
    class DOMPoint {
        constructor(node, offset) {
            this.node = node;
            this.offset = offset;
            this.pos = -1;
        }
    }
    function selectionPoints(view) {
        let result = [];
        if (view.root.activeElement != view.contentDOM)
            return result;
        let { anchorNode, anchorOffset, focusNode, focusOffset } = view.observer.selectionRange;
        if (anchorNode) {
            result.push(new DOMPoint(anchorNode, anchorOffset));
            if (focusNode != anchorNode || focusOffset != anchorOffset)
                result.push(new DOMPoint(focusNode, focusOffset));
        }
        return result;
    }
    function selectionFromPoints(points, base) {
        if (points.length == 0)
            return null;
        let anchor = points[0].pos, head = points.length == 2 ? points[1].pos : anchor;
        return anchor > -1 && head > -1 ? EditorSelection.single(anchor + base, head + base) : null;
    }

    // The editor's update state machine looks something like this:
    //
    //     Idle → Updating ⇆ Idle (unchecked) → Measuring → Idle
    //                                         ↑      ↓
    //                                         Updating (measure)
    //
    // The difference between 'Idle' and 'Idle (unchecked)' lies in
    // whether a layout check has been scheduled. A regular update through
    // the `update` method updates the DOM in a write-only fashion, and
    // relies on a check (scheduled with `requestAnimationFrame`) to make
    // sure everything is where it should be and the viewport covers the
    // visible code. That check continues to measure and then optionally
    // update until it reaches a coherent state.
    /**
    An editor view represents the editor's user interface. It holds
    the editable DOM surface, and possibly other elements such as the
    line number gutter. It handles events and dispatches state
    transactions for editing actions.
    */
    class EditorView {
        /**
        Construct a new view. You'll usually want to put `view.dom` into
        your document after creating a view, so that the user can see
        it.
        */
        constructor(
        /**
        Initialization options.
        */
        config = {}) {
            this.plugins = [];
            this.editorAttrs = {};
            this.contentAttrs = {};
            this.bidiCache = [];
            /**
            @internal
            */
            this.updateState = 2 /* Updating */;
            /**
            @internal
            */
            this.measureScheduled = -1;
            /**
            @internal
            */
            this.measureRequests = [];
            this.contentDOM = document.createElement("div");
            this.scrollDOM = document.createElement("div");
            this.scrollDOM.tabIndex = -1;
            this.scrollDOM.className = "cm-scroller";
            this.scrollDOM.appendChild(this.contentDOM);
            this.announceDOM = document.createElement("div");
            this.announceDOM.style.cssText = "position: absolute; top: -10000px";
            this.announceDOM.setAttribute("aria-live", "polite");
            this.dom = document.createElement("div");
            this.dom.appendChild(this.announceDOM);
            this.dom.appendChild(this.scrollDOM);
            this._dispatch = config.dispatch || ((tr) => this.update([tr]));
            this.dispatch = this.dispatch.bind(this);
            this.root = (config.root || document);
            this.viewState = new ViewState(config.state || EditorState.create());
            this.plugins = this.state.facet(viewPlugin).map(spec => new PluginInstance(spec).update(this));
            this.observer = new DOMObserver(this, (from, to, typeOver) => {
                applyDOMChange(this, from, to, typeOver);
            }, event => {
                this.inputState.runScrollHandlers(this, event);
                if (this.observer.intersecting)
                    this.measure();
            });
            this.inputState = new InputState(this);
            this.docView = new DocView(this);
            this.mountStyles();
            this.updateAttrs();
            this.updateState = 0 /* Idle */;
            ensureGlobalHandler();
            this.requestMeasure();
            if (config.parent)
                config.parent.appendChild(this.dom);
        }
        /**
        The current editor state.
        */
        get state() { return this.viewState.state; }
        /**
        To be able to display large documents without consuming too much
        memory or overloading the browser, CodeMirror only draws the
        code that is visible (plus a margin around it) to the DOM. This
        property tells you the extent of the current drawn viewport, in
        document positions.
        */
        get viewport() { return this.viewState.viewport; }
        /**
        When there are, for example, large collapsed ranges in the
        viewport, its size can be a lot bigger than the actual visible
        content. Thus, if you are doing something like styling the
        content in the viewport, it is preferable to only do so for
        these ranges, which are the subset of the viewport that is
        actually drawn.
        */
        get visibleRanges() { return this.viewState.visibleRanges; }
        /**
        Returns false when the editor is entirely scrolled out of view
        or otherwise hidden.
        */
        get inView() { return this.viewState.inView; }
        /**
        Indicates whether the user is currently composing text via
        [IME](https://en.wikipedia.org/wiki/Input_method).
        */
        get composing() { return this.inputState.composing > 0; }
        dispatch(...input) {
            this._dispatch(input.length == 1 && input[0] instanceof Transaction ? input[0]
                : this.state.update(...input));
        }
        /**
        Update the view for the given array of transactions. This will
        update the visible document and selection to match the state
        produced by the transactions, and notify view plugins of the
        change. You should usually call
        [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
        as a primitive.
        */
        update(transactions) {
            if (this.updateState != 0 /* Idle */)
                throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
            let redrawn = false, update;
            let state = this.state;
            for (let tr of transactions) {
                if (tr.startState != state)
                    throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
                state = tr.state;
            }
            // When the phrases change, redraw the editor
            if (state.facet(EditorState.phrases) != this.state.facet(EditorState.phrases))
                return this.setState(state);
            update = new ViewUpdate(this, state, transactions);
            let scrollPos = null;
            try {
                this.updateState = 2 /* Updating */;
                for (let tr of transactions) {
                    if (scrollPos)
                        scrollPos = scrollPos.map(tr.changes);
                    if (tr.scrollIntoView) {
                        let { main } = tr.state.selection;
                        scrollPos = main.empty ? main : EditorSelection.cursor(main.head, main.head > main.anchor ? -1 : 1);
                    }
                    for (let e of tr.effects)
                        if (e.is(scrollTo))
                            scrollPos = e.value;
                }
                this.viewState.update(update, scrollPos);
                this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);
                if (!update.empty) {
                    this.updatePlugins(update);
                    this.inputState.update(update);
                }
                redrawn = this.docView.update(update);
                if (this.state.facet(styleModule) != this.styleModules)
                    this.mountStyles();
                this.updateAttrs();
                this.showAnnouncements(transactions);
            }
            finally {
                this.updateState = 0 /* Idle */;
            }
            if (redrawn || scrollPos || this.viewState.mustEnforceCursorAssoc)
                this.requestMeasure();
            if (!update.empty)
                for (let listener of this.state.facet(updateListener))
                    listener(update);
        }
        /**
        Reset the view to the given state. (This will cause the entire
        document to be redrawn and all view plugins to be reinitialized,
        so you should probably only use it when the new state isn't
        derived from the old state. Otherwise, use
        [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
        */
        setState(newState) {
            if (this.updateState != 0 /* Idle */)
                throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
            this.updateState = 2 /* Updating */;
            try {
                for (let plugin of this.plugins)
                    plugin.destroy(this);
                this.viewState = new ViewState(newState);
                this.plugins = newState.facet(viewPlugin).map(spec => new PluginInstance(spec).update(this));
                this.docView = new DocView(this);
                this.inputState.ensureHandlers(this);
                this.mountStyles();
                this.updateAttrs();
                this.bidiCache = [];
            }
            finally {
                this.updateState = 0 /* Idle */;
            }
            this.requestMeasure();
        }
        updatePlugins(update) {
            let prevSpecs = update.startState.facet(viewPlugin), specs = update.state.facet(viewPlugin);
            if (prevSpecs != specs) {
                let newPlugins = [];
                for (let spec of specs) {
                    let found = prevSpecs.indexOf(spec);
                    if (found < 0) {
                        newPlugins.push(new PluginInstance(spec));
                    }
                    else {
                        let plugin = this.plugins[found];
                        plugin.mustUpdate = update;
                        newPlugins.push(plugin);
                    }
                }
                for (let plugin of this.plugins)
                    if (plugin.mustUpdate != update)
                        plugin.destroy(this);
                this.plugins = newPlugins;
                this.inputState.ensureHandlers(this);
            }
            else {
                for (let p of this.plugins)
                    p.mustUpdate = update;
            }
            for (let i = 0; i < this.plugins.length; i++)
                this.plugins[i] = this.plugins[i].update(this);
        }
        /**
        @internal
        */
        measure(flush = true) {
            if (this.measureScheduled > -1)
                cancelAnimationFrame(this.measureScheduled);
            this.measureScheduled = -1; // Prevent requestMeasure calls from scheduling another animation frame
            if (flush)
                this.observer.flush();
            let updated = null;
            try {
                for (let i = 0;; i++) {
                    this.updateState = 1 /* Measuring */;
                    let changed = this.viewState.measure(this.docView, i > 0);
                    let measuring = this.measureRequests;
                    if (!changed && !measuring.length && this.viewState.scrollTo == null)
                        break;
                    this.measureRequests = [];
                    if (i > 5) {
                        console.warn("Viewport failed to stabilize");
                        break;
                    }
                    let measured = measuring.map(m => {
                        try {
                            return m.read(this);
                        }
                        catch (e) {
                            logException(this.state, e);
                            return BadMeasure;
                        }
                    });
                    let update = new ViewUpdate(this, this.state);
                    update.flags |= changed;
                    if (!updated)
                        updated = update;
                    else
                        updated.flags |= changed;
                    this.updateState = 2 /* Updating */;
                    if (!update.empty) {
                        this.updatePlugins(update);
                        this.inputState.update(update);
                    }
                    this.updateAttrs();
                    if (changed)
                        this.docView.update(update);
                    for (let i = 0; i < measuring.length; i++)
                        if (measured[i] != BadMeasure) {
                            try {
                                measuring[i].write(measured[i], this);
                            }
                            catch (e) {
                                logException(this.state, e);
                            }
                        }
                    if (this.viewState.scrollTo) {
                        this.docView.scrollRangeIntoView(this.viewState.scrollTo);
                        this.viewState.scrollTo = null;
                    }
                    if (!(changed & 4 /* Viewport */) && this.measureRequests.length == 0)
                        break;
                }
            }
            finally {
                this.updateState = 0 /* Idle */;
            }
            this.measureScheduled = -1;
            if (updated && !updated.empty)
                for (let listener of this.state.facet(updateListener))
                    listener(updated);
        }
        /**
        Get the CSS classes for the currently active editor themes.
        */
        get themeClasses() {
            return baseThemeID + " " +
                (this.state.facet(darkTheme) ? baseDarkID : baseLightID) + " " +
                this.state.facet(theme);
        }
        updateAttrs() {
            let editorAttrs = combineAttrs(this.state.facet(editorAttributes), {
                class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
            });
            updateAttrs(this.dom, this.editorAttrs, editorAttrs);
            this.editorAttrs = editorAttrs;
            let contentAttrs = {
                spellcheck: "false",
                autocorrect: "off",
                autocapitalize: "off",
                contenteditable: !this.state.facet(editable) ? "false" : contentEditablePlainTextSupported() ? "plaintext-only" : "true",
                class: "cm-content",
                style: `${browser.tabSize}: ${this.state.tabSize}`,
                role: "textbox",
                "aria-multiline": "true"
            };
            if (this.state.readOnly)
                contentAttrs["aria-readonly"] = "true";
            combineAttrs(this.state.facet(contentAttributes), contentAttrs);
            updateAttrs(this.contentDOM, this.contentAttrs, contentAttrs);
            this.contentAttrs = contentAttrs;
        }
        showAnnouncements(trs) {
            let first = true;
            for (let tr of trs)
                for (let effect of tr.effects)
                    if (effect.is(EditorView.announce)) {
                        if (first)
                            this.announceDOM.textContent = "";
                        first = false;
                        let div = this.announceDOM.appendChild(document.createElement("div"));
                        div.textContent = effect.value;
                    }
        }
        mountStyles() {
            this.styleModules = this.state.facet(styleModule);
            StyleModule.mount(this.root, this.styleModules.concat(baseTheme$4).reverse());
        }
        readMeasured() {
            if (this.updateState == 2 /* Updating */)
                throw new Error("Reading the editor layout isn't allowed during an update");
            if (this.updateState == 0 /* Idle */ && this.measureScheduled > -1)
                this.measure(false);
        }
        /**
        Schedule a layout measurement, optionally providing callbacks to
        do custom DOM measuring followed by a DOM write phase. Using
        this is preferable reading DOM layout directly from, for
        example, an event handler, because it'll make sure measuring and
        drawing done by other components is synchronized, avoiding
        unnecessary DOM layout computations.
        */
        requestMeasure(request) {
            if (this.measureScheduled < 0)
                this.measureScheduled = requestAnimationFrame(() => this.measure());
            if (request) {
                if (request.key != null)
                    for (let i = 0; i < this.measureRequests.length; i++) {
                        if (this.measureRequests[i].key === request.key) {
                            this.measureRequests[i] = request;
                            return;
                        }
                    }
                this.measureRequests.push(request);
            }
        }
        /**
        Collect all values provided by the active plugins for a given
        field.
        */
        pluginField(field) {
            let result = [];
            for (let plugin of this.plugins)
                plugin.update(this).takeField(field, result);
            return result;
        }
        /**
        Get the value of a specific plugin, if present. Note that
        plugins that crash can be dropped from a view, so even when you
        know you registered a given plugin, it is recommended to check
        the return value of this method.
        */
        plugin(plugin) {
            for (let inst of this.plugins)
                if (inst.spec == plugin)
                    return inst.update(this).value;
            return null;
        }
        /**
        Find the line or block widget at the given vertical position.
        
        By default, this position is interpreted as a screen position,
        meaning `docTop` is set to the DOM top position of the editor
        content (forcing a layout). You can pass a different `docTop`
        value—for example 0 to interpret `height` as a document-relative
        position, or a precomputed document top
        (`view.contentDOM.getBoundingClientRect().top`) to limit layout
        queries.
        */
        blockAtHeight(height, docTop) {
            this.readMeasured();
            return this.viewState.blockAtHeight(height, ensureTop(docTop, this.contentDOM));
        }
        /**
        Find information for the visual line (see
        [`visualLineAt`](https://codemirror.net/6/docs/ref/#view.EditorView.visualLineAt)) at the given
        vertical position. The resulting block info might hold another
        array of block info structs in its `type` field if this line
        consists of more than one block.
        
        Defaults to treating `height` as a screen position. See
        [`blockAtHeight`](https://codemirror.net/6/docs/ref/#view.EditorView.blockAtHeight) for the
        interpretation of the `docTop` parameter.
        */
        visualLineAtHeight(height, docTop) {
            this.readMeasured();
            return this.viewState.lineAtHeight(height, ensureTop(docTop, this.contentDOM));
        }
        /**
        Iterate over the height information of the visual lines in the
        viewport. The heights of lines are reported relative to the
        given document top, which defaults to the screen position of the
        document (forcing a layout).
        */
        viewportLines(f, docTop) {
            let { from, to } = this.viewport;
            this.viewState.forEachLine(from, to, f, ensureTop(docTop, this.contentDOM));
        }
        /**
        Find the extent and height of the visual line (a range delimited
        on both sides by either non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^range)
        line breaks, or the start/end of the document) at the given position.
        
        Vertical positions are computed relative to the `docTop`
        argument, which defaults to 0 for this method. You can pass
        `view.contentDOM.getBoundingClientRect().top` here to get screen
        coordinates.
        */
        visualLineAt(pos, docTop = 0) {
            return this.viewState.lineAt(pos, docTop);
        }
        /**
        The editor's total content height.
        */
        get contentHeight() {
            return this.viewState.contentHeight;
        }
        /**
        Move a cursor position by [grapheme
        cluster](https://codemirror.net/6/docs/ref/#text.findClusterBreak). `forward` determines whether
        the motion is away from the line start, or towards it. Motion in
        bidirectional text is in visual order, in the editor's [text
        direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). When the start
        position was the last one on the line, the returned position
        will be across the line break. If there is no further line, the
        original position is returned.
        
        By default, this method moves over a single cluster. The
        optional `by` argument can be used to move across more. It will
        be called with the first cluster as argument, and should return
        a predicate that determines, for each subsequent cluster,
        whether it should also be moved over.
        */
        moveByChar(start, forward, by) {
            return skipAtoms(this, start, moveByChar(this, start, forward, by));
        }
        /**
        Move a cursor position across the next group of either
        [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
        non-whitespace characters.
        */
        moveByGroup(start, forward) {
            return skipAtoms(this, start, moveByChar(this, start, forward, initial => byGroup(this, start.head, initial)));
        }
        /**
        Move to the next line boundary in the given direction. If
        `includeWrap` is true, line wrapping is on, and there is a
        further wrap point on the current line, the wrap point will be
        returned. Otherwise this function will return the start or end
        of the line.
        */
        moveToLineBoundary(start, forward, includeWrap = true) {
            return moveToLineBoundary(this, start, forward, includeWrap);
        }
        /**
        Move a cursor position vertically. When `distance` isn't given,
        it defaults to moving to the next line (including wrapped
        lines). Otherwise, `distance` should provide a positive distance
        in pixels.
        
        When `start` has a
        [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
        motion will use that as a target horizontal position. Otherwise,
        the cursor's own horizontal position is used. The returned
        cursor will have its goal column set to whichever column was
        used.
        */
        moveVertically(start, forward, distance) {
            return skipAtoms(this, start, moveVertically(this, start, forward, distance));
        }
        /**
        Scroll the given document position into view.
        */
        scrollPosIntoView(pos) {
            this.viewState.scrollTo = EditorSelection.cursor(pos);
            this.requestMeasure();
        }
        /**
        Find the DOM parent node and offset (child offset if `node` is
        an element, character offset when it is a text node) at the
        given document position.
        */
        domAtPos(pos) {
            return this.docView.domAtPos(pos);
        }
        /**
        Find the document position at the given DOM node. Can be useful
        for associating positions with DOM events. Will raise an error
        when `node` isn't part of the editor content.
        */
        posAtDOM(node, offset = 0) {
            return this.docView.posFromDOM(node, offset);
        }
        posAtCoords(coords, precise = true) {
            this.readMeasured();
            return posAtCoords(this, coords, precise);
        }
        /**
        Get the screen coordinates at the given document position.
        `side` determines whether the coordinates are based on the
        element before (-1) or after (1) the position (if no element is
        available on the given side, the method will transparently use
        another strategy to get reasonable coordinates).
        */
        coordsAtPos(pos, side = 1) {
            this.readMeasured();
            let rect = this.docView.coordsAt(pos, side);
            if (!rect || rect.left == rect.right)
                return rect;
            let line = this.state.doc.lineAt(pos), order = this.bidiSpans(line);
            let span = order[BidiSpan.find(order, pos - line.from, -1, side)];
            return flattenRect(rect, (span.dir == Direction.LTR) == (side > 0));
        }
        /**
        The default width of a character in the editor. May not
        accurately reflect the width of all characters (given variable
        width fonts or styling of invididual ranges).
        */
        get defaultCharacterWidth() { return this.viewState.heightOracle.charWidth; }
        /**
        The default height of a line in the editor. May not be accurate
        for all lines.
        */
        get defaultLineHeight() { return this.viewState.heightOracle.lineHeight; }
        /**
        The text direction
        ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
        CSS property) of the editor.
        */
        get textDirection() { return this.viewState.heightOracle.direction; }
        /**
        Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
        (as determined by the
        [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
        CSS property of its content element).
        */
        get lineWrapping() { return this.viewState.heightOracle.lineWrapping; }
        /**
        Returns the bidirectional text structure of the given line
        (which should be in the current document) as an array of span
        objects. The order of these spans matches the [text
        direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
        left-to-right, the leftmost spans come first, otherwise the
        rightmost spans come first.
        */
        bidiSpans(line) {
            if (line.length > MaxBidiLine)
                return trivialOrder(line.length);
            let dir = this.textDirection;
            for (let entry of this.bidiCache)
                if (entry.from == line.from && entry.dir == dir)
                    return entry.order;
            let order = computeOrder(line.text, this.textDirection);
            this.bidiCache.push(new CachedOrder(line.from, line.to, dir, order));
            return order;
        }
        /**
        Check whether the editor has focus.
        */
        get hasFocus() {
            var _a;
            // Safari return false for hasFocus when the context menu is open
            // or closing, which leads us to ignore selection changes from the
            // context menu because it looks like the editor isn't focused.
            // This kludges around that.
            return (document.hasFocus() || browser.safari && ((_a = this.inputState) === null || _a === void 0 ? void 0 : _a.lastContextMenu) > Date.now() - 3e4) &&
                this.root.activeElement == this.contentDOM;
        }
        /**
        Put focus on the editor.
        */
        focus() {
            this.observer.ignore(() => {
                focusPreventScroll(this.contentDOM);
                this.docView.updateSelection();
            });
        }
        /**
        Clean up this editor view, removing its element from the
        document, unregistering event handlers, and notifying
        plugins. The view instance can no longer be used after
        calling this.
        */
        destroy() {
            for (let plugin of this.plugins)
                plugin.destroy(this);
            this.inputState.destroy();
            this.dom.remove();
            this.observer.destroy();
            if (this.measureScheduled > -1)
                cancelAnimationFrame(this.measureScheduled);
        }
        /**
        Facet that can be used to add DOM event handlers. The value
        should be an object mapping event names to handler functions. The
        first such function to return true will be assumed to have handled
        that event, and no other handlers or built-in behavior will be
        activated for it.
        These are registered on the [content
        element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except for `scroll`
        handlers, which will be called any time the editor's [scroll
        element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of its parent nodes
        is scrolled.
        */
        static domEventHandlers(handlers) {
            return ViewPlugin.define(() => ({}), { eventHandlers: handlers });
        }
        /**
        Create a theme extension. The first argument can be a
        [`style-mod`](https://github.com/marijnh/style-mod#documentation)
        style spec providing the styles for the theme. These will be
        prefixed with a generated class for the style.
        
        Because the selectors will be prefixed with a scope class, rule
        that directly match the editor's [wrapper
        element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
        added—need to be explicitly differentiated by adding an `&` to
        the selector for that element—for example
        `&.cm-focused`.
        
        When `dark` is set to true, the theme will be marked as dark,
        which will cause the `&dark` rules from [base
        themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
        `&light` when a light theme is active).
        */
        static theme(spec, options) {
            let prefix = StyleModule.newName();
            let result = [theme.of(prefix), styleModule.of(buildTheme(`.${prefix}`, spec))];
            if (options && options.dark)
                result.push(darkTheme.of(true));
            return result;
        }
        /**
        Create an extension that adds styles to the base theme. Like
        with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
        place of the editor wrapper element when directly targeting
        that. You can also use `&dark` or `&light` instead to only
        target editors with a dark or light theme.
        */
        static baseTheme(spec) {
            return Prec.fallback(styleModule.of(buildTheme("." + baseThemeID, spec, lightDarkIDs)));
        }
    }
    /**
    Effect that can be [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a
    transaction to make it scroll the given range into view.
    */
    EditorView.scrollTo = scrollTo;
    /**
    Facet to add a [style
    module](https://github.com/marijnh/style-mod#documentation) to
    an editor view. The view will ensure that the module is
    mounted in its [document
    root](https://codemirror.net/6/docs/ref/#view.EditorView.constructor^config.root).
    */
    EditorView.styleModule = styleModule;
    /**
    An input handler can override the way changes to the editable
    DOM content are handled. Handlers are passed the document
    positions between which the change was found, and the new
    content. When one returns true, no further input handlers are
    called and the default behavior is prevented.
    */
    EditorView.inputHandler = inputHandler;
    /**
    Allows you to provide a function that should be called when the
    library catches an exception from an extension (mostly from view
    plugins, but may be used by other extensions to route exceptions
    from user-code-provided callbacks). This is mostly useful for
    debugging and logging. See [`logException`](https://codemirror.net/6/docs/ref/#view.logException).
    */
    EditorView.exceptionSink = exceptionSink;
    /**
    A facet that can be used to register a function to be called
    every time the view updates.
    */
    EditorView.updateListener = updateListener;
    /**
    Facet that controls whether the editor content DOM is editable.
    When its highest-precedence value is `false`, the element will
    not longer have its `contenteditable` attribute set. (Note that
    this doesn't affect API calls that change the editor content,
    even when those are bound to keys or buttons. See the
    [`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) facet for that.)
    */
    EditorView.editable = editable;
    /**
    Allows you to influence the way mouse selection happens. The
    functions in this facet will be called for a `mousedown` event
    on the editor, and can return an object that overrides the way a
    selection is computed from that mouse click or drag.
    */
    EditorView.mouseSelectionStyle = mouseSelectionStyle;
    /**
    Facet used to configure whether a given selection drag event
    should move or copy the selection. The given predicate will be
    called with the `mousedown` event, and can return `true` when
    the drag should move the content.
    */
    EditorView.dragMovesSelection = dragMovesSelection$1;
    /**
    Facet used to configure whether a given selecting click adds
    a new range to the existing selection or replaces it entirely.
    */
    EditorView.clickAddsSelectionRange = clickAddsSelectionRange;
    /**
    A facet that determines which [decorations](https://codemirror.net/6/docs/ref/#view.Decoration)
    are shown in the view. See also [view
    plugins](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), which have a separate
    mechanism for providing decorations.
    */
    EditorView.decorations = decorations;
    /**
    Facet that provides additional DOM attributes for the editor's
    editable DOM element.
    */
    EditorView.contentAttributes = contentAttributes;
    /**
    Facet that provides DOM attributes for the editor's outer
    element.
    */
    EditorView.editorAttributes = editorAttributes;
    /**
    An extension that enables line wrapping in the editor (by
    setting CSS `white-space` to `pre-wrap` in the content).
    */
    EditorView.lineWrapping = /*@__PURE__*/EditorView.contentAttributes.of({ "class": "cm-lineWrapping" });
    /**
    State effect used to include screen reader announcements in a
    transaction. These will be added to the DOM in a visually hidden
    element with `aria-live="polite"` set, and should be used to
    describe effects that are visually obvious but may not be
    noticed by screen reader users (such as moving to the next
    search match).
    */
    EditorView.announce = /*@__PURE__*/StateEffect.define();
    // Maximum line length for which we compute accurate bidi info
    const MaxBidiLine = 4096;
    function ensureTop(given, dom) {
        return given == null ? dom.getBoundingClientRect().top : given;
    }
    let resizeDebounce = -1;
    function ensureGlobalHandler() {
        window.addEventListener("resize", () => {
            if (resizeDebounce == -1)
                resizeDebounce = setTimeout(handleResize, 50);
        });
    }
    function handleResize() {
        resizeDebounce = -1;
        let found = document.querySelectorAll(".cm-content");
        for (let i = 0; i < found.length; i++) {
            let docView = ContentView.get(found[i]);
            if (docView)
                docView.editorView.requestMeasure();
        }
    }
    const BadMeasure = {};
    class CachedOrder {
        constructor(from, to, dir, order) {
            this.from = from;
            this.to = to;
            this.dir = dir;
            this.order = order;
        }
        static update(cache, changes) {
            if (changes.empty)
                return cache;
            let result = [], lastDir = cache.length ? cache[cache.length - 1].dir : Direction.LTR;
            for (let i = Math.max(0, cache.length - 10); i < cache.length; i++) {
                let entry = cache[i];
                if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to))
                    result.push(new CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.order));
            }
            return result;
        }
    }

    const currentPlatform = typeof navigator == "undefined" ? "key"
        : /*@__PURE__*//Mac/.test(navigator.platform) ? "mac"
            : /*@__PURE__*//Win/.test(navigator.platform) ? "win"
                : /*@__PURE__*//Linux|X11/.test(navigator.platform) ? "linux"
                    : "key";
    function normalizeKeyName(name, platform) {
        const parts = name.split(/-(?!$)/);
        let result = parts[parts.length - 1];
        if (result == "Space")
            result = " ";
        let alt, ctrl, shift, meta;
        for (let i = 0; i < parts.length - 1; ++i) {
            const mod = parts[i];
            if (/^(cmd|meta|m)$/i.test(mod))
                meta = true;
            else if (/^a(lt)?$/i.test(mod))
                alt = true;
            else if (/^(c|ctrl|control)$/i.test(mod))
                ctrl = true;
            else if (/^s(hift)?$/i.test(mod))
                shift = true;
            else if (/^mod$/i.test(mod)) {
                if (platform == "mac")
                    meta = true;
                else
                    ctrl = true;
            }
            else
                throw new Error("Unrecognized modifier name: " + mod);
        }
        if (alt)
            result = "Alt-" + result;
        if (ctrl)
            result = "Ctrl-" + result;
        if (meta)
            result = "Meta-" + result;
        if (shift)
            result = "Shift-" + result;
        return result;
    }
    function modifiers(name, event, shift) {
        if (event.altKey)
            name = "Alt-" + name;
        if (event.ctrlKey)
            name = "Ctrl-" + name;
        if (event.metaKey)
            name = "Meta-" + name;
        if (shift !== false && event.shiftKey)
            name = "Shift-" + name;
        return name;
    }
    const handleKeyEvents = /*@__PURE__*/EditorView.domEventHandlers({
        keydown(event, view) {
            return runHandlers(getKeymap(view.state), event, view, "editor");
        }
    });
    /**
    Facet used for registering keymaps.

    You can add multiple keymaps to an editor. Their priorities
    determine their precedence (the ones specified early or with high
    priority get checked first). When a handler has returned `true`
    for a given key, no further handlers are called.
    */
    const keymap = /*@__PURE__*/Facet.define({ enables: handleKeyEvents });
    const Keymaps = /*@__PURE__*/new WeakMap();
    // This is hidden behind an indirection, rather than directly computed
    // by the facet, to keep internal types out of the facet's type.
    function getKeymap(state) {
        let bindings = state.facet(keymap);
        let map = Keymaps.get(bindings);
        if (!map)
            Keymaps.set(bindings, map = buildKeymap(bindings.reduce((a, b) => a.concat(b), [])));
        return map;
    }
    let storedPrefix = null;
    const PrefixTimeout = 4000;
    function buildKeymap(bindings, platform = currentPlatform) {
        let bound = Object.create(null);
        let isPrefix = Object.create(null);
        let checkPrefix = (name, is) => {
            let current = isPrefix[name];
            if (current == null)
                isPrefix[name] = is;
            else if (current != is)
                throw new Error("Key binding " + name + " is used both as a regular binding and as a multi-stroke prefix");
        };
        let add = (scope, key, command, preventDefault) => {
            let scopeObj = bound[scope] || (bound[scope] = Object.create(null));
            let parts = key.split(/ (?!$)/).map(k => normalizeKeyName(k, platform));
            for (let i = 1; i < parts.length; i++) {
                let prefix = parts.slice(0, i).join(" ");
                checkPrefix(prefix, true);
                if (!scopeObj[prefix])
                    scopeObj[prefix] = {
                        preventDefault: true,
                        commands: [(view) => {
                                let ourObj = storedPrefix = { view, prefix, scope };
                                setTimeout(() => { if (storedPrefix == ourObj)
                                    storedPrefix = null; }, PrefixTimeout);
                                return true;
                            }]
                    };
            }
            let full = parts.join(" ");
            checkPrefix(full, false);
            let binding = scopeObj[full] || (scopeObj[full] = { preventDefault: false, commands: [] });
            binding.commands.push(command);
            if (preventDefault)
                binding.preventDefault = true;
        };
        for (let b of bindings) {
            let name = b[platform] || b.key;
            if (!name)
                continue;
            for (let scope of b.scope ? b.scope.split(" ") : ["editor"]) {
                add(scope, name, b.run, b.preventDefault);
                if (b.shift)
                    add(scope, "Shift-" + name, b.shift, b.preventDefault);
            }
        }
        return bound;
    }
    function runHandlers(map, event, view, scope) {
        let name = keyName(event), isChar = name.length == 1 && name != " ";
        let prefix = "", fallthrough = false;
        if (storedPrefix && storedPrefix.view == view && storedPrefix.scope == scope) {
            prefix = storedPrefix.prefix + " ";
            if (fallthrough = modifierCodes.indexOf(event.keyCode) < 0)
                storedPrefix = null;
        }
        let runFor = (binding) => {
            if (binding) {
                for (let cmd of binding.commands)
                    if (cmd(view))
                        return true;
                if (binding.preventDefault)
                    fallthrough = true;
            }
            return false;
        };
        let scopeObj = map[scope], baseName;
        if (scopeObj) {
            if (runFor(scopeObj[prefix + modifiers(name, event, !isChar)]))
                return true;
            if (isChar && (event.shiftKey || event.altKey || event.metaKey) &&
                (baseName = base$2[event.keyCode]) && baseName != name) {
                if (runFor(scopeObj[prefix + modifiers(baseName, event, true)]))
                    return true;
            }
            else if (isChar && event.shiftKey) {
                if (runFor(scopeObj[prefix + modifiers(name, event, true)]))
                    return true;
            }
        }
        return fallthrough;
    }

    const CanHidePrimary = !browser.ios; // FIXME test IE
    const selectionConfig = /*@__PURE__*/Facet.define({
        combine(configs) {
            return combineConfig(configs, {
                cursorBlinkRate: 1200,
                drawRangeCursor: true
            }, {
                cursorBlinkRate: (a, b) => Math.min(a, b),
                drawRangeCursor: (a, b) => a || b
            });
        }
    });
    /**
    Returns an extension that hides the browser's native selection and
    cursor, replacing the selection with a background behind the text
    (with the `cm-selectionBackground` class), and the
    cursors with elements overlaid over the code (using
    `cm-cursor-primary` and `cm-cursor-secondary`).

    This allows the editor to display secondary selection ranges, and
    tends to produce a type of selection more in line with that users
    expect in a text editor (the native selection styling will often
    leave gaps between lines and won't fill the horizontal space after
    a line when the selection continues past it).

    It does have a performance cost, in that it requires an extra DOM
    layout cycle for many updates (the selection is drawn based on DOM
    layout information that's only available after laying out the
    content).
    */
    function drawSelection(config = {}) {
        return [
            selectionConfig.of(config),
            drawSelectionPlugin,
            hideNativeSelection
        ];
    }
    class Piece {
        constructor(left, top, width, height, className) {
            this.left = left;
            this.top = top;
            this.width = width;
            this.height = height;
            this.className = className;
        }
        draw() {
            let elt = document.createElement("div");
            elt.className = this.className;
            this.adjust(elt);
            return elt;
        }
        adjust(elt) {
            elt.style.left = this.left + "px";
            elt.style.top = this.top + "px";
            if (this.width >= 0)
                elt.style.width = this.width + "px";
            elt.style.height = this.height + "px";
        }
        eq(p) {
            return this.left == p.left && this.top == p.top && this.width == p.width && this.height == p.height &&
                this.className == p.className;
        }
    }
    const drawSelectionPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
        constructor(view) {
            this.view = view;
            this.rangePieces = [];
            this.cursors = [];
            this.measureReq = { read: this.readPos.bind(this), write: this.drawSel.bind(this) };
            this.selectionLayer = view.scrollDOM.appendChild(document.createElement("div"));
            this.selectionLayer.className = "cm-selectionLayer";
            this.selectionLayer.setAttribute("aria-hidden", "true");
            this.cursorLayer = view.scrollDOM.appendChild(document.createElement("div"));
            this.cursorLayer.className = "cm-cursorLayer";
            this.cursorLayer.setAttribute("aria-hidden", "true");
            view.requestMeasure(this.measureReq);
            this.setBlinkRate();
        }
        setBlinkRate() {
            this.cursorLayer.style.animationDuration = this.view.state.facet(selectionConfig).cursorBlinkRate + "ms";
        }
        update(update) {
            let confChanged = update.startState.facet(selectionConfig) != update.state.facet(selectionConfig);
            if (confChanged || update.selectionSet || update.geometryChanged || update.viewportChanged)
                this.view.requestMeasure(this.measureReq);
            if (update.transactions.some(tr => tr.scrollIntoView))
                this.cursorLayer.style.animationName = this.cursorLayer.style.animationName == "cm-blink" ? "cm-blink2" : "cm-blink";
            if (confChanged)
                this.setBlinkRate();
        }
        readPos() {
            let { state } = this.view, conf = state.facet(selectionConfig);
            let rangePieces = state.selection.ranges.map(r => r.empty ? [] : measureRange(this.view, r)).reduce((a, b) => a.concat(b));
            let cursors = [];
            for (let r of state.selection.ranges) {
                let prim = r == state.selection.main;
                if (r.empty ? !prim || CanHidePrimary : conf.drawRangeCursor) {
                    let piece = measureCursor(this.view, r, prim);
                    if (piece)
                        cursors.push(piece);
                }
            }
            return { rangePieces, cursors };
        }
        drawSel({ rangePieces, cursors }) {
            if (rangePieces.length != this.rangePieces.length || rangePieces.some((p, i) => !p.eq(this.rangePieces[i]))) {
                this.selectionLayer.textContent = "";
                for (let p of rangePieces)
                    this.selectionLayer.appendChild(p.draw());
                this.rangePieces = rangePieces;
            }
            if (cursors.length != this.cursors.length || cursors.some((c, i) => !c.eq(this.cursors[i]))) {
                let oldCursors = this.cursorLayer.children;
                if (oldCursors.length !== cursors.length) {
                    this.cursorLayer.textContent = "";
                    for (const c of cursors)
                        this.cursorLayer.appendChild(c.draw());
                }
                else {
                    cursors.forEach((c, idx) => c.adjust(oldCursors[idx]));
                }
                this.cursors = cursors;
            }
        }
        destroy() {
            this.selectionLayer.remove();
            this.cursorLayer.remove();
        }
    });
    const themeSpec = {
        ".cm-line": {
            "& ::selection": { backgroundColor: "transparent !important" },
            "&::selection": { backgroundColor: "transparent !important" }
        }
    };
    if (CanHidePrimary)
        themeSpec[".cm-line"].caretColor = "transparent !important";
    const hideNativeSelection = /*@__PURE__*/Prec.override(/*@__PURE__*/EditorView.theme(themeSpec));
    function getBase(view) {
        let rect = view.scrollDOM.getBoundingClientRect();
        let left = view.textDirection == Direction.LTR ? rect.left : rect.right - view.scrollDOM.clientWidth;
        return { left: left - view.scrollDOM.scrollLeft, top: rect.top - view.scrollDOM.scrollTop };
    }
    function wrappedLine(view, pos, inside) {
        let range = EditorSelection.cursor(pos);
        return { from: Math.max(inside.from, view.moveToLineBoundary(range, false, true).from),
            to: Math.min(inside.to, view.moveToLineBoundary(range, true, true).from),
            type: BlockType.Text };
    }
    function blockAt(view, pos) {
        let line = view.visualLineAt(pos);
        if (Array.isArray(line.type))
            for (let l of line.type) {
                if (l.to > pos || l.to == pos && (l.to == line.to || l.type == BlockType.Text))
                    return l;
            }
        return line;
    }
    function measureRange(view, range) {
        if (range.to <= view.viewport.from || range.from >= view.viewport.to)
            return [];
        let from = Math.max(range.from, view.viewport.from), to = Math.min(range.to, view.viewport.to);
        let ltr = view.textDirection == Direction.LTR;
        let content = view.contentDOM, contentRect = content.getBoundingClientRect(), base = getBase(view);
        let lineStyle = window.getComputedStyle(content.firstChild);
        let leftSide = contentRect.left + parseInt(lineStyle.paddingLeft);
        let rightSide = contentRect.right - parseInt(lineStyle.paddingRight);
        let startBlock = blockAt(view, from), endBlock = blockAt(view, to);
        let visualStart = startBlock.type == BlockType.Text ? startBlock : null;
        let visualEnd = endBlock.type == BlockType.Text ? endBlock : null;
        if (view.lineWrapping) {
            if (visualStart)
                visualStart = wrappedLine(view, from, visualStart);
            if (visualEnd)
                visualEnd = wrappedLine(view, to, visualEnd);
        }
        if (visualStart && visualEnd && visualStart.from == visualEnd.from) {
            return pieces(drawForLine(range.from, range.to, visualStart));
        }
        else {
            let top = visualStart ? drawForLine(range.from, null, visualStart) : drawForWidget(startBlock, false);
            let bottom = visualEnd ? drawForLine(null, range.to, visualEnd) : drawForWidget(endBlock, true);
            let between = [];
            if ((visualStart || startBlock).to < (visualEnd || endBlock).from - 1)
                between.push(piece(leftSide, top.bottom, rightSide, bottom.top));
            else if (top.bottom < bottom.top && blockAt(view, (top.bottom + bottom.top) / 2).type == BlockType.Text)
                top.bottom = bottom.top = (top.bottom + bottom.top) / 2;
            return pieces(top).concat(between).concat(pieces(bottom));
        }
        function piece(left, top, right, bottom) {
            return new Piece(left - base.left, top - base.top, right - left, bottom - top, "cm-selectionBackground");
        }
        function pieces({ top, bottom, horizontal }) {
            let pieces = [];
            for (let i = 0; i < horizontal.length; i += 2)
                pieces.push(piece(horizontal[i], top, horizontal[i + 1], bottom));
            return pieces;
        }
        // Gets passed from/to in line-local positions
        function drawForLine(from, to, line) {
            let top = 1e9, bottom = -1e9, horizontal = [];
            function addSpan(from, fromOpen, to, toOpen, dir) {
                // Passing 2/-2 is a kludge to force the view to return
                // coordinates on the proper side of block widgets, since
                // normalizing the side there, though appropriate for most
                // coordsAtPos queries, would break selection drawing.
                let fromCoords = view.coordsAtPos(from, (from == line.to ? -2 : 2));
                let toCoords = view.coordsAtPos(to, (to == line.from ? 2 : -2));
                top = Math.min(fromCoords.top, toCoords.top, top);
                bottom = Math.max(fromCoords.bottom, toCoords.bottom, bottom);
                if (dir == Direction.LTR)
                    horizontal.push(ltr && fromOpen ? leftSide : fromCoords.left, ltr && toOpen ? rightSide : toCoords.right);
                else
                    horizontal.push(!ltr && toOpen ? leftSide : toCoords.left, !ltr && fromOpen ? rightSide : fromCoords.right);
            }
            let start = from !== null && from !== void 0 ? from : line.from, end = to !== null && to !== void 0 ? to : line.to;
            // Split the range by visible range and document line
            for (let r of view.visibleRanges)
                if (r.to > start && r.from < end) {
                    for (let pos = Math.max(r.from, start), endPos = Math.min(r.to, end);;) {
                        let docLine = view.state.doc.lineAt(pos);
                        for (let span of view.bidiSpans(docLine)) {
                            let spanFrom = span.from + docLine.from, spanTo = span.to + docLine.from;
                            if (spanFrom >= endPos)
                                break;
                            if (spanTo > pos)
                                addSpan(Math.max(spanFrom, pos), from == null && spanFrom <= start, Math.min(spanTo, endPos), to == null && spanTo >= end, span.dir);
                        }
                        pos = docLine.to + 1;
                        if (pos >= endPos)
                            break;
                    }
                }
            if (horizontal.length == 0)
                addSpan(start, from == null, end, to == null, view.textDirection);
            return { top, bottom, horizontal };
        }
        function drawForWidget(block, top) {
            let y = contentRect.top + (top ? block.top : block.bottom);
            return { top: y, bottom: y, horizontal: [] };
        }
    }
    function measureCursor(view, cursor, primary) {
        let pos = view.coordsAtPos(cursor.head, cursor.assoc || 1);
        if (!pos)
            return null;
        let base = getBase(view);
        return new Piece(pos.left - base.left, pos.top - base.top, -1, pos.bottom - pos.top, primary ? "cm-cursor cm-cursor-primary" : "cm-cursor cm-cursor-secondary");
    }

    /**
    Mark lines that have a cursor on them with the `"cm-activeLine"`
    DOM class.
    */
    function highlightActiveLine() {
        return activeLineHighlighter;
    }
    const lineDeco = /*@__PURE__*/Decoration.line({ attributes: { class: "cm-activeLine" } });
    const activeLineHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {
        constructor(view) {
            this.decorations = this.getDeco(view);
        }
        update(update) {
            if (update.docChanged || update.selectionSet)
                this.decorations = this.getDeco(update.view);
        }
        getDeco(view) {
            let lastLineStart = -1, deco = [];
            for (let r of view.state.selection.ranges) {
                if (!r.empty)
                    return Decoration.none;
                let line = view.visualLineAt(r.head);
                if (line.from > lastLineStart) {
                    deco.push(lineDeco.range(line.from));
                    lastLineStart = line.from;
                }
            }
            return Decoration.set(deco);
        }
    }, {
        decorations: v => v.decorations
    });

    // FIXME profile adding a per-Tree TreeNode cache, validating it by
    // parent pointer
    /// The default maximum length of a `TreeBuffer` node (1024).
    const DefaultBufferLength = 1024;
    let nextPropID = 0;
    class Range {
        constructor(from, to) {
            this.from = from;
            this.to = to;
        }
    }
    /// Each [node type](#common.NodeType) or [individual tree](#common.Tree)
    /// can have metadata associated with it in props. Instances of this
    /// class represent prop names.
    class NodeProp {
        /// Create a new node prop type.
        constructor(config = {}) {
            this.id = nextPropID++;
            this.perNode = !!config.perNode;
            this.deserialize = config.deserialize || (() => {
                throw new Error("This node type doesn't define a deserialize function");
            });
        }
        /// This is meant to be used with
        /// [`NodeSet.extend`](#common.NodeSet.extend) or
        /// [`LRParser.configure`](#lr.ParserConfig.props) to compute
        /// prop values for each node type in the set. Takes a [match
        /// object](#common.NodeType^match) or function that returns undefined
        /// if the node type doesn't get this prop, and the prop's value if
        /// it does.
        add(match) {
            if (this.perNode)
                throw new RangeError("Can't add per-node props to node types");
            if (typeof match != "function")
                match = NodeType.match(match);
            return (type) => {
                let result = match(type);
                return result === undefined ? null : [this, result];
            };
        }
    }
    /// Prop that is used to describe matching delimiters. For opening
    /// delimiters, this holds an array of node names (written as a
    /// space-separated string when declaring this prop in a grammar)
    /// for the node types of closing delimiters that match it.
    NodeProp.closedBy = new NodeProp({ deserialize: str => str.split(" ") });
    /// The inverse of [`closedBy`](#common.NodeProp^closedBy). This is
    /// attached to closing delimiters, holding an array of node names
    /// of types of matching opening delimiters.
    NodeProp.openedBy = new NodeProp({ deserialize: str => str.split(" ") });
    /// Used to assign node types to groups (for example, all node
    /// types that represent an expression could be tagged with an
    /// `"Expression"` group).
    NodeProp.group = new NodeProp({ deserialize: str => str.split(" ") });
    /// The hash of the [context](#lr.ContextTracker.constructor)
    /// that the node was parsed in, if any. Used to limit reuse of
    /// contextual nodes.
    NodeProp.contextHash = new NodeProp({ perNode: true });
    /// The distance beyond the end of the node that the tokenizer
    /// looked ahead for any of the tokens inside the node. (The LR
    /// parser only stores this when it is larger than 25, for
    /// efficiency reasons.)
    NodeProp.lookAhead = new NodeProp({ perNode: true });
    /// This per-node prop is used to replace a given node, or part of a
    /// node, with another tree. This is useful to include trees from
    /// different languages.
    NodeProp.mounted = new NodeProp({ perNode: true });
    /// A mounted tree, which can be [stored](#common.NodeProp^mounted) on
    /// a tree node to indicate that parts of its content are
    /// represented by another tree.
    class MountedTree {
        constructor(
        /// The inner tree.
        tree, 
        /// If this is null, this tree replaces the entire node (it will
        /// be included in the regular iteration instead of its host
        /// node). If not, only the given ranges are considered to be
        /// covered by this tree. This is used for trees that are mixed in
        /// a way that isn't strictly hierarchical. Such mounted trees are
        /// only entered by [`resolveInner`](#common.Tree.resolveInner)
        /// and [`enter`](#common.SyntaxNode.enter).
        overlay, 
        /// The parser used to create this subtree.
        parser) {
            this.tree = tree;
            this.overlay = overlay;
            this.parser = parser;
        }
    }
    const noProps = Object.create(null);
    /// Each node in a syntax tree has a node type associated with it.
    class NodeType {
        /// @internal
        constructor(
        /// The name of the node type. Not necessarily unique, but if the
        /// grammar was written properly, different node types with the
        /// same name within a node set should play the same semantic
        /// role.
        name, 
        /// @internal
        props, 
        /// The id of this node in its set. Corresponds to the term ids
        /// used in the parser.
        id, 
        /// @internal
        flags = 0) {
            this.name = name;
            this.props = props;
            this.id = id;
            this.flags = flags;
        }
        static define(spec) {
            let props = spec.props && spec.props.length ? Object.create(null) : noProps;
            let flags = (spec.top ? 1 /* Top */ : 0) | (spec.skipped ? 2 /* Skipped */ : 0) |
                (spec.error ? 4 /* Error */ : 0) | (spec.name == null ? 8 /* Anonymous */ : 0);
            let type = new NodeType(spec.name || "", props, spec.id, flags);
            if (spec.props)
                for (let src of spec.props) {
                    if (!Array.isArray(src))
                        src = src(type);
                    if (src) {
                        if (src[0].perNode)
                            throw new RangeError("Can't store a per-node prop on a node type");
                        props[src[0].id] = src[1];
                    }
                }
            return type;
        }
        /// Retrieves a node prop for this type. Will return `undefined` if
        /// the prop isn't present on this node.
        prop(prop) { return this.props[prop.id]; }
        /// True when this is the top node of a grammar.
        get isTop() { return (this.flags & 1 /* Top */) > 0; }
        /// True when this node is produced by a skip rule.
        get isSkipped() { return (this.flags & 2 /* Skipped */) > 0; }
        /// Indicates whether this is an error node.
        get isError() { return (this.flags & 4 /* Error */) > 0; }
        /// When true, this node type doesn't correspond to a user-declared
        /// named node, for example because it is used to cache repetition.
        get isAnonymous() { return (this.flags & 8 /* Anonymous */) > 0; }
        /// Returns true when this node's name or one of its
        /// [groups](#common.NodeProp^group) matches the given string.
        is(name) {
            if (typeof name == 'string') {
                if (this.name == name)
                    return true;
                let group = this.prop(NodeProp.group);
                return group ? group.indexOf(name) > -1 : false;
            }
            return this.id == name;
        }
        /// Create a function from node types to arbitrary values by
        /// specifying an object whose property names are node or
        /// [group](#common.NodeProp^group) names. Often useful with
        /// [`NodeProp.add`](#common.NodeProp.add). You can put multiple
        /// names, separated by spaces, in a single property name to map
        /// multiple node names to a single value.
        static match(map) {
            let direct = Object.create(null);
            for (let prop in map)
                for (let name of prop.split(" "))
                    direct[name] = map[prop];
            return (node) => {
                for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {
                    let found = direct[i < 0 ? node.name : groups[i]];
                    if (found)
                        return found;
                }
            };
        }
    }
    /// An empty dummy node type to use when no actual type is available.
    NodeType.none = new NodeType("", Object.create(null), 0, 8 /* Anonymous */);
    /// A node set holds a collection of node types. It is used to
    /// compactly represent trees by storing their type ids, rather than a
    /// full pointer to the type object, in a numeric array. Each parser
    /// [has](#lr.LRParser.nodeSet) a node set, and [tree
    /// buffers](#common.TreeBuffer) can only store collections of nodes
    /// from the same set. A set can have a maximum of 2**16 (65536) node
    /// types in it, so that the ids fit into 16-bit typed array slots.
    class NodeSet {
        /// Create a set with the given types. The `id` property of each
        /// type should correspond to its position within the array.
        constructor(
        /// The node types in this set, by id.
        types) {
            this.types = types;
            for (let i = 0; i < types.length; i++)
                if (types[i].id != i)
                    throw new RangeError("Node type ids should correspond to array positions when creating a node set");
        }
        /// Create a copy of this set with some node properties added. The
        /// arguments to this method should be created with
        /// [`NodeProp.add`](#common.NodeProp.add).
        extend(...props) {
            let newTypes = [];
            for (let type of this.types) {
                let newProps = null;
                for (let source of props) {
                    let add = source(type);
                    if (add) {
                        if (!newProps)
                            newProps = Object.assign({}, type.props);
                        newProps[add[0].id] = add[1];
                    }
                }
                newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);
            }
            return new NodeSet(newTypes);
        }
    }
    const CachedNode = new WeakMap();
    /// A piece of syntax tree. There are two ways to approach these
    /// trees: the way they are actually stored in memory, and the
    /// convenient way.
    ///
    /// Syntax trees are stored as a tree of `Tree` and `TreeBuffer`
    /// objects. By packing detail information into `TreeBuffer` leaf
    /// nodes, the representation is made a lot more memory-efficient.
    ///
    /// However, when you want to actually work with tree nodes, this
    /// representation is very awkward, so most client code will want to
    /// use the [`TreeCursor`](#common.TreeCursor) or
    /// [`SyntaxNode`](#common.SyntaxNode) interface instead, which provides
    /// a view on some part of this data structure, and can be used to
    /// move around to adjacent nodes.
    class Tree {
        /// Construct a new tree. See also [`Tree.build`](#common.Tree^build).
        constructor(
        /// The type of the top node.
        type, 
        /// This node's child nodes.
        children, 
        /// The positions (offsets relative to the start of this tree) of
        /// the children.
        positions, 
        /// The total length of this tree
        length, 
        /// Per-node [node props](#common.NodeProp) to associate with this node.
        props) {
            this.type = type;
            this.children = children;
            this.positions = positions;
            this.length = length;
            /// @internal
            this.props = null;
            if (props && props.length) {
                this.props = Object.create(null);
                for (let [prop, value] of props)
                    this.props[typeof prop == "number" ? prop : prop.id] = value;
            }
        }
        /// @internal
        toString() {
            let mounted = this.prop(NodeProp.mounted);
            if (mounted && !mounted.overlay)
                return mounted.tree.toString();
            let children = "";
            for (let ch of this.children) {
                let str = ch.toString();
                if (str) {
                    if (children)
                        children += ",";
                    children += str;
                }
            }
            return !this.type.name ? children :
                (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) +
                    (children.length ? "(" + children + ")" : "");
        }
        /// Get a [tree cursor](#common.TreeCursor) rooted at this tree. When
        /// `pos` is given, the cursor is [moved](#common.TreeCursor.moveTo)
        /// to the given position and side.
        cursor(pos, side = 0) {
            let scope = (pos != null && CachedNode.get(this)) || this.topNode;
            let cursor = new TreeCursor(scope);
            if (pos != null) {
                cursor.moveTo(pos, side);
                CachedNode.set(this, cursor._tree);
            }
            return cursor;
        }
        /// Get a [tree cursor](#common.TreeCursor) that, unlike regular
        /// cursors, doesn't skip through
        /// [anonymous](#common.NodeType.isAnonymous) nodes.
        fullCursor() {
            return new TreeCursor(this.topNode, 1 /* Full */);
        }
        /// Get a [syntax node](#common.SyntaxNode) object for the top of the
        /// tree.
        get topNode() {
            return new TreeNode(this, 0, 0, null);
        }
        /// Get the [syntax node](#common.SyntaxNode) at the given position.
        /// If `side` is -1, this will move into nodes that end at the
        /// position. If 1, it'll move into nodes that start at the
        /// position. With 0, it'll only enter nodes that cover the position
        /// from both sides.
        resolve(pos, side = 0) {
            return this.cursor(pos, side).node;
        }
        /// Like [`resolve`](#common.Tree.resolve), but will enter
        /// [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
        /// pointing into the innermost overlaid tree at the given position
        /// (with parent links going through all parent structure, including
        /// the host trees).
        resolveInner(pos, side = 0) {
            let result = this.topNode;
            for (;;) {
                let inner = result.enter(pos, side);
                if (!inner)
                    return result;
                result = inner;
            }
        }
        /// Iterate over the tree and its children, calling `enter` for any
        /// node that touches the `from`/`to` region (if given) before
        /// running over such a node's children, and `leave` (if given) when
        /// leaving the node. When `enter` returns `false`, that node will
        /// not have its children iterated over (or `leave` called).
        iterate(spec) {
            let { enter, leave, from = 0, to = this.length } = spec;
            for (let c = this.cursor(), get = () => c.node;;) {
                let mustLeave = false;
                if (c.from <= to && c.to >= from && (c.type.isAnonymous || enter(c.type, c.from, c.to, get) !== false)) {
                    if (c.firstChild())
                        continue;
                    if (!c.type.isAnonymous)
                        mustLeave = true;
                }
                for (;;) {
                    if (mustLeave && leave)
                        leave(c.type, c.from, c.to, get);
                    mustLeave = c.type.isAnonymous;
                    if (c.nextSibling())
                        break;
                    if (!c.parent())
                        return;
                    mustLeave = true;
                }
            }
        }
        /// Get the value of the given [node prop](#common.NodeProp) for this
        /// node. Works with both per-node and per-type props.
        prop(prop) {
            return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : undefined;
        }
        /// Returns the node's [per-node props](#common.NodeProp.perNode) in a
        /// format that can be passed to the [`Tree`](#common.Tree)
        /// constructor.
        get propValues() {
            let result = [];
            if (this.props)
                for (let id in this.props)
                    result.push([+id, this.props[id]]);
            return result;
        }
        /// Balance the direct children of this tree, producing a copy of
        /// which may have children grouped into subtrees with type
        /// [`NodeType.none`](#common.NodeType^none).
        balance(config = {}) {
            return this.children.length <= 8 /* BranchFactor */ ? this :
                balanceRange(this.type, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new Tree(this.type, children, positions, length, this.propValues), config.makeTree || ((children, positions, length) => new Tree(NodeType.none, children, positions, length)));
        }
        /// Build a tree from a postfix-ordered buffer of node information,
        /// or a cursor over such a buffer.
        static build(data) { return buildTree(data); }
    }
    /// The empty tree
    Tree.empty = new Tree(NodeType.none, [], [], 0);
    class FlatBufferCursor {
        constructor(buffer, index) {
            this.buffer = buffer;
            this.index = index;
        }
        get id() { return this.buffer[this.index - 4]; }
        get start() { return this.buffer[this.index - 3]; }
        get end() { return this.buffer[this.index - 2]; }
        get size() { return this.buffer[this.index - 1]; }
        get pos() { return this.index; }
        next() { this.index -= 4; }
        fork() { return new FlatBufferCursor(this.buffer, this.index); }
    }
    /// Tree buffers contain (type, start, end, endIndex) quads for each
    /// node. In such a buffer, nodes are stored in prefix order (parents
    /// before children, with the endIndex of the parent indicating which
    /// children belong to it)
    class TreeBuffer {
        /// Create a tree buffer.
        constructor(
        /// The buffer's content.
        buffer, 
        /// The total length of the group of nodes in the buffer.
        length, 
        /// The node set used in this buffer.
        set) {
            this.buffer = buffer;
            this.length = length;
            this.set = set;
        }
        /// @internal
        get type() { return NodeType.none; }
        /// @internal
        toString() {
            let result = [];
            for (let index = 0; index < this.buffer.length;) {
                result.push(this.childString(index));
                index = this.buffer[index + 3];
            }
            return result.join(",");
        }
        /// @internal
        childString(index) {
            let id = this.buffer[index], endIndex = this.buffer[index + 3];
            let type = this.set.types[id], result = type.name;
            if (/\W/.test(result) && !type.isError)
                result = JSON.stringify(result);
            index += 4;
            if (endIndex == index)
                return result;
            let children = [];
            while (index < endIndex) {
                children.push(this.childString(index));
                index = this.buffer[index + 3];
            }
            return result + "(" + children.join(",") + ")";
        }
        /// @internal
        findChild(startIndex, endIndex, dir, pos, side) {
            let { buffer } = this, pick = -1;
            for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {
                if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {
                    pick = i;
                    if (dir > 0)
                        break;
                }
            }
            return pick;
        }
        /// @internal
        slice(startI, endI, from, to) {
            let b = this.buffer;
            let copy = new Uint16Array(endI - startI);
            for (let i = startI, j = 0; i < endI;) {
                copy[j++] = b[i++];
                copy[j++] = b[i++] - from;
                copy[j++] = b[i++] - from;
                copy[j++] = b[i++] - startI;
            }
            return new TreeBuffer(copy, to - from, this.set);
        }
    }
    function checkSide(side, pos, from, to) {
        switch (side) {
            case -2 /* Before */: return from < pos;
            case -1 /* AtOrBefore */: return to >= pos && from < pos;
            case 0 /* Around */: return from < pos && to > pos;
            case 1 /* AtOrAfter */: return from <= pos && to > pos;
            case 2 /* After */: return to > pos;
            case 4 /* DontCare */: return true;
        }
    }
    function enterUnfinishedNodesBefore(node, pos) {
        let scan = node.childBefore(pos);
        while (scan) {
            let last = scan.lastChild;
            if (!last || last.to != scan.to)
                break;
            if (last.type.isError && last.from == last.to) {
                node = scan;
                scan = last.prevSibling;
            }
            else {
                scan = last;
            }
        }
        return node;
    }
    class TreeNode {
        constructor(node, _from, 
        // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)
        index, _parent) {
            this.node = node;
            this._from = _from;
            this.index = index;
            this._parent = _parent;
        }
        get type() { return this.node.type; }
        get name() { return this.node.type.name; }
        get from() { return this._from; }
        get to() { return this._from + this.node.length; }
        nextChild(i, dir, pos, side, mode = 0) {
            for (let parent = this;;) {
                for (let { children, positions } = parent.node, e = dir > 0 ? children.length : -1; i != e; i += dir) {
                    let next = children[i], start = positions[i] + parent._from;
                    if (!checkSide(side, pos, start, start + next.length))
                        continue;
                    if (next instanceof TreeBuffer) {
                        if (mode & 2 /* NoEnterBuffer */)
                            continue;
                        let index = next.findChild(0, next.buffer.length, dir, pos - start, side);
                        if (index > -1)
                            return new BufferNode(new BufferContext(parent, next, i, start), null, index);
                    }
                    else if ((mode & 1 /* Full */) || (!next.type.isAnonymous || hasChild(next))) {
                        let mounted;
                        if (next.props && (mounted = next.prop(NodeProp.mounted)) && !mounted.overlay)
                            return new TreeNode(mounted.tree, start, i, parent);
                        let inner = new TreeNode(next, start, i, parent);
                        return (mode & 1 /* Full */) || !inner.type.isAnonymous ? inner
                            : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);
                    }
                }
                if ((mode & 1 /* Full */) || !parent.type.isAnonymous)
                    return null;
                if (parent.index >= 0)
                    i = parent.index + dir;
                else
                    i = dir < 0 ? -1 : parent._parent.node.children.length;
                parent = parent._parent;
                if (!parent)
                    return null;
            }
        }
        get firstChild() { return this.nextChild(0, 1, 0, 4 /* DontCare */); }
        get lastChild() { return this.nextChild(this.node.children.length - 1, -1, 0, 4 /* DontCare */); }
        childAfter(pos) { return this.nextChild(0, 1, pos, 2 /* After */); }
        childBefore(pos) { return this.nextChild(this.node.children.length - 1, -1, pos, -2 /* Before */); }
        enter(pos, side, overlays = true, buffers = true) {
            let mounted;
            if (overlays && (mounted = this.node.prop(NodeProp.mounted)) && mounted.overlay) {
                let rPos = pos - this.from;
                for (let { from, to } of mounted.overlay) {
                    if ((side > 0 ? from <= rPos : from < rPos) &&
                        (side < 0 ? to >= rPos : to > rPos))
                        return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);
                }
            }
            return this.nextChild(0, 1, pos, side, buffers ? 0 : 2 /* NoEnterBuffer */);
        }
        nextSignificantParent() {
            let val = this;
            while (val.type.isAnonymous && val._parent)
                val = val._parent;
            return val;
        }
        get parent() {
            return this._parent ? this._parent.nextSignificantParent() : null;
        }
        get nextSibling() {
            return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4 /* DontCare */) : null;
        }
        get prevSibling() {
            return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4 /* DontCare */) : null;
        }
        get cursor() { return new TreeCursor(this); }
        get tree() { return this.node; }
        toTree() { return this.node; }
        resolve(pos, side = 0) {
            return this.cursor.moveTo(pos, side).node;
        }
        enterUnfinishedNodesBefore(pos) { return enterUnfinishedNodesBefore(this, pos); }
        getChild(type, before = null, after = null) {
            let r = getChildren(this, type, before, after);
            return r.length ? r[0] : null;
        }
        getChildren(type, before = null, after = null) {
            return getChildren(this, type, before, after);
        }
        /// @internal
        toString() { return this.node.toString(); }
    }
    function getChildren(node, type, before, after) {
        let cur = node.cursor, result = [];
        if (!cur.firstChild())
            return result;
        if (before != null)
            while (!cur.type.is(before))
                if (!cur.nextSibling())
                    return result;
        for (;;) {
            if (after != null && cur.type.is(after))
                return result;
            if (cur.type.is(type))
                result.push(cur.node);
            if (!cur.nextSibling())
                return after == null ? result : [];
        }
    }
    class BufferContext {
        constructor(parent, buffer, index, start) {
            this.parent = parent;
            this.buffer = buffer;
            this.index = index;
            this.start = start;
        }
    }
    class BufferNode {
        constructor(context, _parent, index) {
            this.context = context;
            this._parent = _parent;
            this.index = index;
            this.type = context.buffer.set.types[context.buffer.buffer[index]];
        }
        get name() { return this.type.name; }
        get from() { return this.context.start + this.context.buffer.buffer[this.index + 1]; }
        get to() { return this.context.start + this.context.buffer.buffer[this.index + 2]; }
        child(dir, pos, side) {
            let { buffer } = this.context;
            let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);
            return index < 0 ? null : new BufferNode(this.context, this, index);
        }
        get firstChild() { return this.child(1, 0, 4 /* DontCare */); }
        get lastChild() { return this.child(-1, 0, 4 /* DontCare */); }
        childAfter(pos) { return this.child(1, pos, 2 /* After */); }
        childBefore(pos) { return this.child(-1, pos, -2 /* Before */); }
        enter(pos, side, overlays, buffers = true) {
            if (!buffers)
                return null;
            let { buffer } = this.context;
            let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);
            return index < 0 ? null : new BufferNode(this.context, this, index);
        }
        get parent() {
            return this._parent || this.context.parent.nextSignificantParent();
        }
        externalSibling(dir) {
            return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4 /* DontCare */);
        }
        get nextSibling() {
            let { buffer } = this.context;
            let after = buffer.buffer[this.index + 3];
            if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))
                return new BufferNode(this.context, this._parent, after);
            return this.externalSibling(1);
        }
        get prevSibling() {
            let { buffer } = this.context;
            let parentStart = this._parent ? this._parent.index + 4 : 0;
            if (this.index == parentStart)
                return this.externalSibling(-1);
            return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4 /* DontCare */));
        }
        get cursor() { return new TreeCursor(this); }
        get tree() { return null; }
        toTree() {
            let children = [], positions = [];
            let { buffer } = this.context;
            let startI = this.index + 4, endI = buffer.buffer[this.index + 3];
            if (endI > startI) {
                let from = buffer.buffer[this.index + 1], to = buffer.buffer[this.index + 2];
                children.push(buffer.slice(startI, endI, from, to));
                positions.push(0);
            }
            return new Tree(this.type, children, positions, this.to - this.from);
        }
        resolve(pos, side = 0) {
            return this.cursor.moveTo(pos, side).node;
        }
        enterUnfinishedNodesBefore(pos) { return enterUnfinishedNodesBefore(this, pos); }
        /// @internal
        toString() { return this.context.buffer.childString(this.index); }
        getChild(type, before = null, after = null) {
            let r = getChildren(this, type, before, after);
            return r.length ? r[0] : null;
        }
        getChildren(type, before = null, after = null) {
            return getChildren(this, type, before, after);
        }
    }
    /// A tree cursor object focuses on a given node in a syntax tree, and
    /// allows you to move to adjacent nodes.
    class TreeCursor {
        /// @internal
        constructor(node, 
        /// @internal
        mode = 0) {
            this.mode = mode;
            this.buffer = null;
            this.stack = [];
            this.index = 0;
            this.bufferNode = null;
            if (node instanceof TreeNode) {
                this.yieldNode(node);
            }
            else {
                this._tree = node.context.parent;
                this.buffer = node.context;
                for (let n = node._parent; n; n = n._parent)
                    this.stack.unshift(n.index);
                this.bufferNode = node;
                this.yieldBuf(node.index);
            }
        }
        /// Shorthand for `.type.name`.
        get name() { return this.type.name; }
        yieldNode(node) {
            if (!node)
                return false;
            this._tree = node;
            this.type = node.type;
            this.from = node.from;
            this.to = node.to;
            return true;
        }
        yieldBuf(index, type) {
            this.index = index;
            let { start, buffer } = this.buffer;
            this.type = type || buffer.set.types[buffer.buffer[index]];
            this.from = start + buffer.buffer[index + 1];
            this.to = start + buffer.buffer[index + 2];
            return true;
        }
        yield(node) {
            if (!node)
                return false;
            if (node instanceof TreeNode) {
                this.buffer = null;
                return this.yieldNode(node);
            }
            this.buffer = node.context;
            return this.yieldBuf(node.index, node.type);
        }
        /// @internal
        toString() {
            return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
        }
        /// @internal
        enterChild(dir, pos, side) {
            if (!this.buffer)
                return this.yield(this._tree.nextChild(dir < 0 ? this._tree.node.children.length - 1 : 0, dir, pos, side, this.mode));
            let { buffer } = this.buffer;
            let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);
            if (index < 0)
                return false;
            this.stack.push(this.index);
            return this.yieldBuf(index);
        }
        /// Move the cursor to this node's first child. When this returns
        /// false, the node has no child, and the cursor has not been moved.
        firstChild() { return this.enterChild(1, 0, 4 /* DontCare */); }
        /// Move the cursor to this node's last child.
        lastChild() { return this.enterChild(-1, 0, 4 /* DontCare */); }
        /// Move the cursor to the first child that ends after `pos`.
        childAfter(pos) { return this.enterChild(1, pos, 2 /* After */); }
        /// Move to the last child that starts before `pos`.
        childBefore(pos) { return this.enterChild(-1, pos, -2 /* Before */); }
        /// Move the cursor to the child around `pos`. If side is -1 the
        /// child may end at that position, when 1 it may start there. This
        /// will also enter [overlaid](#common.MountedTree.overlay)
        /// [mounted](#common.NodeProp^mounted) trees unless `overlays` is
        /// set to false.
        enter(pos, side, overlays = true, buffers = true) {
            if (!this.buffer)
                return this.yield(this._tree.enter(pos, side, overlays, buffers));
            return buffers ? this.enterChild(1, pos, side) : false;
        }
        /// Move the node's parent node, if this isn't the top node.
        parent() {
            if (!this.buffer)
                return this.yieldNode((this.mode & 1 /* Full */) ? this._tree._parent : this._tree.parent);
            if (this.stack.length)
                return this.yieldBuf(this.stack.pop());
            let parent = (this.mode & 1 /* Full */) ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
            this.buffer = null;
            return this.yieldNode(parent);
        }
        /// @internal
        sibling(dir) {
            if (!this.buffer)
                return !this._tree._parent ? false
                    : this.yield(this._tree.index < 0 ? null
                        : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4 /* DontCare */, this.mode));
            let { buffer } = this.buffer, d = this.stack.length - 1;
            if (dir < 0) {
                let parentStart = d < 0 ? 0 : this.stack[d] + 4;
                if (this.index != parentStart)
                    return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4 /* DontCare */));
            }
            else {
                let after = buffer.buffer[this.index + 3];
                if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3]))
                    return this.yieldBuf(after);
            }
            return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4 /* DontCare */, this.mode)) : false;
        }
        /// Move to this node's next sibling, if any.
        nextSibling() { return this.sibling(1); }
        /// Move to this node's previous sibling, if any.
        prevSibling() { return this.sibling(-1); }
        atLastNode(dir) {
            let index, parent, { buffer } = this;
            if (buffer) {
                if (dir > 0) {
                    if (this.index < buffer.buffer.buffer.length)
                        return false;
                }
                else {
                    for (let i = 0; i < this.index; i++)
                        if (buffer.buffer.buffer[i + 3] < this.index)
                            return false;
                }
                ({ index, parent } = buffer);
            }
            else {
                ({ index, _parent: parent } = this._tree);
            }
            for (; parent; { index, _parent: parent } = parent) {
                if (index > -1)
                    for (let i = index + dir, e = dir < 0 ? -1 : parent.node.children.length; i != e; i += dir) {
                        let child = parent.node.children[i];
                        if ((this.mode & 1 /* Full */) || child instanceof TreeBuffer || !child.type.isAnonymous || hasChild(child))
                            return false;
                    }
            }
            return true;
        }
        move(dir, enter) {
            if (enter && this.enterChild(dir, 0, 4 /* DontCare */))
                return true;
            for (;;) {
                if (this.sibling(dir))
                    return true;
                if (this.atLastNode(dir) || !this.parent())
                    return false;
            }
        }
        /// Move to the next node in a
        /// [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_(NLR))
        /// traversal, going from a node to its first child or, if the
        /// current node is empty or `enter` is false, its next sibling or
        /// the next sibling of the first parent node that has one.
        next(enter = true) { return this.move(1, enter); }
        /// Move to the next node in a last-to-first pre-order traveral. A
        /// node is followed by its last child or, if it has none, its
        /// previous sibling or the previous sibling of the first parent
        /// node that has one.
        prev(enter = true) { return this.move(-1, enter); }
        /// Move the cursor to the innermost node that covers `pos`. If
        /// `side` is -1, it will enter nodes that end at `pos`. If it is 1,
        /// it will enter nodes that start at `pos`.
        moveTo(pos, side = 0) {
            // Move up to a node that actually holds the position, if possible
            while (this.from == this.to ||
                (side < 1 ? this.from >= pos : this.from > pos) ||
                (side > -1 ? this.to <= pos : this.to < pos))
                if (!this.parent())
                    break;
            // Then scan down into child nodes as far as possible
            while (this.enterChild(1, pos, side)) { }
            return this;
        }
        /// Get a [syntax node](#common.SyntaxNode) at the cursor's current
        /// position.
        get node() {
            if (!this.buffer)
                return this._tree;
            let cache = this.bufferNode, result = null, depth = 0;
            if (cache && cache.context == this.buffer) {
                scan: for (let index = this.index, d = this.stack.length; d >= 0;) {
                    for (let c = cache; c; c = c._parent)
                        if (c.index == index) {
                            if (index == this.index)
                                return c;
                            result = c;
                            depth = d + 1;
                            break scan;
                        }
                    index = this.stack[--d];
                }
            }
            for (let i = depth; i < this.stack.length; i++)
                result = new BufferNode(this.buffer, result, this.stack[i]);
            return this.bufferNode = new BufferNode(this.buffer, result, this.index);
        }
        /// Get the [tree](#common.Tree) that represents the current node, if
        /// any. Will return null when the node is in a [tree
        /// buffer](#common.TreeBuffer).
        get tree() {
            return this.buffer ? null : this._tree.node;
        }
    }
    function hasChild(tree) {
        return tree.children.some(ch => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));
    }
    function buildTree(data) {
        var _a;
        let { buffer, nodeSet, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet.types.length } = data;
        let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;
        let types = nodeSet.types;
        let contextHash = 0, lookAhead = 0;
        function takeNode(parentStart, minPos, children, positions, inRepeat) {
            let { id, start, end, size } = cursor;
            let lookAheadAtStart = lookAhead;
            while (size < 0) {
                cursor.next();
                if (size == -1 /* Reuse */) {
                    let node = reused[id];
                    children.push(node);
                    positions.push(start - parentStart);
                    return;
                }
                else if (size == -3 /* ContextChange */) { // Context change
                    contextHash = id;
                    return;
                }
                else if (size == -4 /* LookAhead */) {
                    lookAhead = id;
                    return;
                }
                else {
                    throw new RangeError(`Unrecognized record size: ${size}`);
                }
            }
            let type = types[id], node, buffer;
            let startPos = start - parentStart;
            if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {
                // Small enough for a buffer, and no reused nodes inside
                let data = new Uint16Array(buffer.size - buffer.skip);
                let endPos = cursor.pos - buffer.size, index = data.length;
                while (cursor.pos > endPos)
                    index = copyToBuffer(buffer.start, data, index);
                node = new TreeBuffer(data, end - buffer.start, nodeSet);
                startPos = buffer.start - parentStart;
            }
            else { // Make it a node
                let endPos = cursor.pos - size;
                cursor.next();
                let localChildren = [], localPositions = [];
                let localInRepeat = id >= minRepeatType ? id : -1;
                let lastGroup = 0, lastEnd = end;
                while (cursor.pos > endPos) {
                    if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {
                        if (cursor.end <= lastEnd - maxBufferLength) {
                            makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart);
                            lastGroup = localChildren.length;
                            lastEnd = cursor.end;
                        }
                        cursor.next();
                    }
                    else {
                        takeNode(start, endPos, localChildren, localPositions, localInRepeat);
                    }
                }
                if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)
                    makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart);
                localChildren.reverse();
                localPositions.reverse();
                if (localInRepeat > -1 && lastGroup > 0) {
                    let make = makeBalanced(type);
                    node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);
                }
                else {
                    node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end);
                }
            }
            children.push(node);
            positions.push(startPos);
        }
        function makeBalanced(type) {
            return (children, positions, length) => {
                let lookAhead = 0, lastI = children.length - 1, last, lookAheadProp;
                if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {
                    if (!lastI && last.type == type && last.length == length)
                        return last;
                    if (lookAheadProp = last.prop(NodeProp.lookAhead))
                        lookAhead = positions[lastI] + last.length + lookAheadProp;
                }
                return makeTree(type, children, positions, length, lookAhead);
            };
        }
        function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead) {
            let localChildren = [], localPositions = [];
            while (children.length > i) {
                localChildren.push(children.pop());
                localPositions.push(positions.pop() + base - from);
            }
            children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to));
            positions.push(from - base);
        }
        function makeTree(type, children, positions, length, lookAhead = 0, props) {
            if (contextHash) {
                let pair = [NodeProp.contextHash, contextHash];
                props = props ? [pair].concat(props) : [pair];
            }
            if (lookAhead > 25) {
                let pair = [NodeProp.lookAhead, lookAhead];
                props = props ? [pair].concat(props) : [pair];
            }
            return new Tree(type, children, positions, length, props);
        }
        function findBufferSize(maxSize, inRepeat) {
            // Scan through the buffer to find previous siblings that fit
            // together in a TreeBuffer, and don't contain any reused nodes
            // (which can't be stored in a buffer).
            // If `inRepeat` is > -1, ignore node boundaries of that type for
            // nesting, but make sure the end falls either at the start
            // (`maxSize`) or before such a node.
            let fork = cursor.fork();
            let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;
            let result = { size: 0, start: 0, skip: 0 };
            scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos;) {
                let nodeSize = fork.size;
                // Pretend nested repeat nodes of the same type don't exist
                if (fork.id == inRepeat && nodeSize >= 0) {
                    // Except that we store the current state as a valid return
                    // value.
                    result.size = size;
                    result.start = start;
                    result.skip = skip;
                    skip += 4;
                    size += 4;
                    fork.next();
                    continue;
                }
                let startPos = fork.pos - nodeSize;
                if (nodeSize < 0 || startPos < minPos || fork.start < minStart)
                    break;
                let localSkipped = fork.id >= minRepeatType ? 4 : 0;
                let nodeStart = fork.start;
                fork.next();
                while (fork.pos > startPos) {
                    if (fork.size < 0) {
                        if (fork.size == -3 /* ContextChange */)
                            localSkipped += 4;
                        else
                            break scan;
                    }
                    else if (fork.id >= minRepeatType) {
                        localSkipped += 4;
                    }
                    fork.next();
                }
                start = nodeStart;
                size += nodeSize;
                skip += localSkipped;
            }
            if (inRepeat < 0 || size == maxSize) {
                result.size = size;
                result.start = start;
                result.skip = skip;
            }
            return result.size > 4 ? result : undefined;
        }
        function copyToBuffer(bufferStart, buffer, index) {
            let { id, start, end, size } = cursor;
            cursor.next();
            if (size >= 0 && id < minRepeatType) {
                let startIndex = index;
                if (size > 4) {
                    let endPos = cursor.pos - (size - 4);
                    while (cursor.pos > endPos)
                        index = copyToBuffer(bufferStart, buffer, index);
                }
                buffer[--index] = startIndex;
                buffer[--index] = end - bufferStart;
                buffer[--index] = start - bufferStart;
                buffer[--index] = id;
            }
            else if (size == -3 /* ContextChange */) {
                contextHash = id;
            }
            else if (size == -4 /* LookAhead */) {
                lookAhead = id;
            }
            return index;
        }
        let children = [], positions = [];
        while (cursor.pos > 0)
            takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1);
        let length = (_a = data.length) !== null && _a !== void 0 ? _a : (children.length ? positions[0] + children[0].length : 0);
        return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);
    }
    const nodeSizeCache = new WeakMap;
    function nodeSize(balanceType, node) {
        if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType)
            return 1;
        let size = nodeSizeCache.get(node);
        if (size == null) {
            size = node.children.reduce((s, ch) => s + nodeSize(balanceType, ch), 1);
            nodeSizeCache.set(node, size);
        }
        return size;
    }
    function balanceRange(
    // The type to tag the resulting tree with. Will also be used for
    // internal nodes when it is an anonymous type
    type, 
    // The direct children and their positions
    children, positions, 
    // The index range in children/positions to use
    from, to, 
    // The start position of the nodes, relative to their parent.
    start, 
    // Length of the outer node
    length, 
    // Function to build the top node of the balanced tree
    mkTop, 
    // Function to build internal nodes for the balanced tree
    mkTree) {
        let total = 0;
        for (let i = from; i < to; i++)
            total += nodeSize(type, children[i]);
        let maxChild = Math.ceil((total * 1.5) / 8 /* BranchFactor */);
        let localChildren = [], localPositions = [];
        function divide(children, positions, from, to, offset) {
            for (let i = from; i < to;) {
                let groupFrom = i, groupStart = positions[i], groupSize = nodeSize(type, children[i]);
                i++;
                for (; i < to; i++) {
                    let nextSize = nodeSize(type, children[i]);
                    if (groupSize + nextSize >= maxChild)
                        break;
                    groupSize += nextSize;
                }
                if (i == groupFrom + 1) {
                    if (groupSize > maxChild) {
                        let only = children[groupFrom];
                        divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);
                        continue;
                    }
                    localChildren.push(children[groupFrom]);
                }
                else {
                    let length = positions[i - 1] + children[i - 1].length - groupStart;
                    localChildren.push(balanceRange(type, children, positions, groupFrom, i, groupStart, length, null, mkTree));
                }
                localPositions.push(groupStart + offset - start);
            }
        }
        divide(children, positions, from, to, 0);
        return (mkTop || mkTree)(localChildren, localPositions, length);
    }

    /// Tree fragments are used during [incremental
    /// parsing](#common.Parser.startParse) to track parts of old trees
    /// that can be reused in a new parse. An array of fragments is used
    /// to track regions of an old tree whose nodes might be reused in new
    /// parses. Use the static
    /// [`applyChanges`](#common.TreeFragment^applyChanges) method to
    /// update fragments for document changes.
    class TreeFragment {
        /// Construct a tree fragment.
        constructor(
        /// The start of the unchanged range pointed to by this fragment.
        /// This refers to an offset in the _updated_ document (as opposed
        /// to the original tree).
        from, 
        /// The end of the unchanged range.
        to, 
        /// The tree that this fragment is based on.
        tree, 
        /// The offset between the fragment's tree and the document that
        /// this fragment can be used against. Add this when going from
        /// document to tree positions, subtract it to go from tree to
        /// document positions.
        offset, openStart = false, openEnd = false) {
            this.from = from;
            this.to = to;
            this.tree = tree;
            this.offset = offset;
            this.open = (openStart ? 1 /* Start */ : 0) | (openEnd ? 2 /* End */ : 0);
        }
        /// Whether the start of the fragment represents the start of a
        /// parse, or the end of a change. (In the second case, it may not
        /// be safe to reuse some nodes at the start, depending on the
        /// parsing algorithm.)
        get openStart() { return (this.open & 1 /* Start */) > 0; }
        /// Whether the end of the fragment represents the end of a
        /// full-document parse, or the start of a change.
        get openEnd() { return (this.open & 2 /* End */) > 0; }
        /// Create a set of fragments from a freshly parsed tree, or update
        /// an existing set of fragments by replacing the ones that overlap
        /// with a tree with content from the new tree. When `partial` is
        /// true, the parse is treated as incomplete, and the resulting
        /// fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
        /// true.
        static addTree(tree, fragments = [], partial = false) {
            let result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];
            for (let f of fragments)
                if (f.to > tree.length)
                    result.push(f);
            return result;
        }
        /// Apply a set of edits to an array of fragments, removing or
        /// splitting fragments as necessary to remove edited ranges, and
        /// adjusting offsets for fragments that moved.
        static applyChanges(fragments, changes, minGap = 128) {
            if (!changes.length)
                return fragments;
            let result = [];
            let fI = 1, nextF = fragments.length ? fragments[0] : null;
            for (let cI = 0, pos = 0, off = 0;; cI++) {
                let nextC = cI < changes.length ? changes[cI] : null;
                let nextPos = nextC ? nextC.fromA : 1e9;
                if (nextPos - pos >= minGap)
                    while (nextF && nextF.from < nextPos) {
                        let cut = nextF;
                        if (pos >= cut.from || nextPos <= cut.to || off) {
                            let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;
                            cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);
                        }
                        if (cut)
                            result.push(cut);
                        if (nextF.to > nextPos)
                            break;
                        nextF = fI < fragments.length ? fragments[fI++] : null;
                    }
                if (!nextC)
                    break;
                pos = nextC.toA;
                off = nextC.toA - nextC.toB;
            }
            return result;
        }
    }
    /// A superclass that parsers should extend.
    class Parser {
        /// Start a parse, returning a [partial parse](#common.PartialParse)
        /// object. [`fragments`](#common.TreeFragment) can be passed in to
        /// make the parse incremental.
        ///
        /// By default, the entire input is parsed. You can pass `ranges`,
        /// which should be a sorted array of non-empty, non-overlapping
        /// ranges, to parse only those ranges. The tree returned in that
        /// case will start at `ranges[0].from`.
        startParse(input, fragments, ranges) {
            if (typeof input == "string")
                input = new StringInput(input);
            ranges = !ranges ? [new Range(0, input.length)] : ranges.length ? ranges.map(r => new Range(r.from, r.to)) : [new Range(0, 0)];
            return this.createParse(input, fragments || [], ranges);
        }
        /// Run a full parse, returning the resulting tree.
        parse(input, fragments, ranges) {
            let parse = this.startParse(input, fragments, ranges);
            for (;;) {
                let done = parse.advance();
                if (done)
                    return done;
            }
        }
    }
    class StringInput {
        constructor(string) {
            this.string = string;
        }
        get length() { return this.string.length; }
        chunk(from) { return this.string.slice(from); }
        get lineChunks() { return false; }
        read(from, to) { return this.string.slice(from, to); }
    }

    /// Create a parse wrapper that, after the inner parse completes,
    /// scans its tree for mixed language regions with the `nest`
    /// function, runs the resulting [inner parses](#common.NestedParse),
    /// and then [mounts](#common.NodeProp^mounted) their results onto the
    /// tree.
    ///
    /// The nesting function is passed a cursor to provide context for a
    /// node, but _should not_ move that cursor, only inspect its
    /// properties and optionally access its
    /// [node object](#common.TreeCursor.node).
    function parseMixed(nest) {
        return (parse, input, fragments, ranges) => new MixedParse(parse, nest, input, fragments, ranges);
    }
    class InnerParse {
        constructor(parser, parse, overlay, target) {
            this.parser = parser;
            this.parse = parse;
            this.overlay = overlay;
            this.target = target;
        }
    }
    class ActiveOverlay {
        constructor(parser, predicate, mounts, index, start, target, prev) {
            this.parser = parser;
            this.predicate = predicate;
            this.mounts = mounts;
            this.index = index;
            this.start = start;
            this.target = target;
            this.prev = prev;
            this.depth = 0;
            this.ranges = [];
        }
    }
    class MixedParse {
        constructor(base, nest, input, fragments, ranges) {
            this.nest = nest;
            this.input = input;
            this.fragments = fragments;
            this.ranges = ranges;
            this.inner = [];
            this.innerDone = 0;
            this.baseTree = null;
            this.stoppedAt = null;
            this.baseParse = base;
        }
        advance() {
            if (this.baseParse) {
                let done = this.baseParse.advance();
                if (!done)
                    return null;
                this.baseParse = null;
                this.baseTree = done;
                this.startInner();
            }
            if (this.innerDone == this.inner.length)
                return this.baseTree;
            let inner = this.inner[this.innerDone], done = inner.parse.advance();
            if (done) {
                this.innerDone++;
                // This is a somewhat dodgy but super helpful hack where we
                // patch up nodes created by the inner parse (and thus
                // presumably not aliased anywhere else) to hold the information
                // about the inner parse.
                let props = Object.assign(Object.create(null), inner.target.props);
                props[NodeProp.mounted.id] = new MountedTree(done, inner.overlay, inner.parser);
                inner.target.props = props;
            }
            return null;
        }
        get parsedPos() {
            if (this.baseParse)
                return 0;
            let next = this.inner[this.innerDone];
            return next ? next.parse.parsedPos : this.input.length;
        }
        stopAt(pos) {
            this.stoppedAt = pos;
            if (this.baseParse)
                this.baseParse.stopAt(pos);
            else
                for (let i = this.innerDone; i < this.inner.length; i++)
                    this.inner[i].parse.stopAt(pos);
        }
        startInner() {
            let fragmentCursor = new FragmentCursor$2(this.fragments);
            let overlay = null;
            let covered = null;
            scan: for (let cursor = this.baseTree.fullCursor(), nest, isCovered;;) {
                let enter = true, range;
                if (fragmentCursor.hasNode(cursor)) {
                    if (overlay) {
                        let match = overlay.mounts.find(m => m.frag.from <= cursor.from && m.frag.to >= cursor.to && m.mount.overlay);
                        if (match)
                            for (let r of match.mount.overlay) {
                                let from = r.from + match.pos, to = r.to + match.pos;
                                if (from >= cursor.from && to <= cursor.to)
                                    overlay.ranges.push({ from, to });
                            }
                    }
                    enter = false;
                }
                else if (covered && (isCovered = checkCover(covered.ranges, cursor.from, cursor.to))) {
                    enter = isCovered != 2 /* Full */;
                }
                else if (!cursor.type.isAnonymous && cursor.from < cursor.to && (nest = this.nest(cursor, this.input))) {
                    if (!cursor.tree)
                        materialize(cursor);
                    let oldMounts = fragmentCursor.findMounts(cursor.from, nest.parser);
                    if (typeof nest.overlay == "function") {
                        overlay = new ActiveOverlay(nest.parser, nest.overlay, oldMounts, this.inner.length, cursor.from, cursor.tree, overlay);
                    }
                    else {
                        let ranges = punchRanges(this.ranges, nest.overlay || [new Range(cursor.from, cursor.to)]);
                        if (ranges.length)
                            this.inner.push(new InnerParse(nest.parser, nest.parser.startParse(this.input, enterFragments(oldMounts, ranges), ranges), nest.overlay ? nest.overlay.map(r => new Range(r.from - cursor.from, r.to - cursor.from)) : null, cursor.tree));
                        if (!nest.overlay)
                            enter = false;
                        else if (ranges.length)
                            covered = { ranges, depth: 0, prev: covered };
                    }
                }
                else if (overlay && (range = overlay.predicate(cursor))) {
                    if (range === true)
                        range = new Range(cursor.from, cursor.to);
                    if (range.from < range.to)
                        overlay.ranges.push(range);
                }
                if (enter && cursor.firstChild()) {
                    if (overlay)
                        overlay.depth++;
                    if (covered)
                        covered.depth++;
                }
                else {
                    for (;;) {
                        if (cursor.nextSibling())
                            break;
                        if (!cursor.parent())
                            break scan;
                        if (overlay && !--overlay.depth) {
                            let ranges = punchRanges(this.ranges, overlay.ranges);
                            if (ranges.length)
                                this.inner.splice(overlay.index, 0, new InnerParse(overlay.parser, overlay.parser.startParse(this.input, enterFragments(overlay.mounts, ranges), ranges), overlay.ranges.map(r => new Range(r.from - overlay.start, r.to - overlay.start)), overlay.target));
                            overlay = overlay.prev;
                        }
                        if (covered && !--covered.depth)
                            covered = covered.prev;
                    }
                }
            }
        }
    }
    function checkCover(covered, from, to) {
        for (let range of covered) {
            if (range.from >= to)
                break;
            if (range.to > from)
                return range.from <= from && range.to >= to ? 2 /* Full */ : 1 /* Partial */;
        }
        return 0 /* None */;
    }
    // Take a piece of buffer and convert it into a stand-alone
    // TreeBuffer.
    function sliceBuf(buf, startI, endI, nodes, positions, off) {
        if (startI < endI) {
            let from = buf.buffer[startI + 1], to = buf.buffer[endI - 2];
            nodes.push(buf.slice(startI, endI, from, to));
            positions.push(from - off);
        }
    }
    // This function takes a node that's in a buffer, and converts it, and
    // its parent buffer nodes, into a Tree. This is again acting on the
    // assumption that the trees and buffers have been constructed by the
    // parse that was ran via the mix parser, and thus aren't shared with
    // any other code, making violations of the immutability safe.
    function materialize(cursor) {
        let { node } = cursor, depth = 0;
        // Scan up to the nearest tree
        do {
            cursor.parent();
            depth++;
        } while (!cursor.tree);
        // Find the index of the buffer in that tree
        let i = 0, base = cursor.tree, off = 0;
        for (;; i++) {
            off = base.positions[i] + cursor.from;
            if (off <= node.from && off + base.children[i].length >= node.to)
                break;
        }
        let buf = base.children[i], b = buf.buffer;
        // Split a level in the buffer, putting the nodes before and after
        // the child that contains `node` into new buffers.
        function split(startI, endI, type, innerOffset) {
            let i = startI;
            while (b[i + 2] + off <= node.from)
                i = b[i + 3];
            let children = [], positions = [];
            sliceBuf(buf, startI, i, children, positions, innerOffset);
            let isTarget = b[i + 1] + off == node.from && b[i + 2] + off == node.to && b[i] == node.type.id;
            children.push(isTarget ? node.toTree() : split(i + 4, b[i + 3], buf.set.types[b[i]], b[i + 1]));
            positions.push(b[i + 1] - innerOffset);
            sliceBuf(buf, b[i + 3], endI, children, positions, innerOffset);
            let last = children.length - 1;
            return new Tree(type, children, positions, positions[last] + children[last].length);
        }
        base.children[i] = split(0, b.length, NodeType.none, 0);
        // Move the cursor back to the target node
        for (let d = 0; d <= depth; d++)
            cursor.childAfter(node.from);
    }
    class StructureCursor {
        constructor(root, offset) {
            this.offset = offset;
            this.done = false;
            this.cursor = root.fullCursor();
        }
        // Move to the first node (in pre-order) that starts at or after `pos`.
        moveTo(pos) {
            let { cursor } = this, p = pos - this.offset;
            while (!this.done && cursor.from < p) {
                if (cursor.to >= pos && cursor.enter(p, 1, false, false)) ;
                else if (!cursor.next(false))
                    this.done = true;
            }
        }
        hasNode(cursor) {
            this.moveTo(cursor.from);
            if (!this.done && this.cursor.from + this.offset == cursor.from) {
                for (let tree = this.cursor.tree;;) {
                    if (tree == cursor.tree)
                        return true;
                    if (tree.children.length && tree.positions[0] == 0 && tree.children[0] instanceof Tree)
                        tree = tree.children[0];
                    else
                        break;
                }
            }
            return false;
        }
    }
    class FragmentCursor$2 {
        constructor(fragments) {
            this.fragments = fragments;
            this.fragI = 0;
            if (fragments.length) {
                let first = this.curFrag = fragments[0];
                this.inner = new StructureCursor(first.tree, -first.offset);
            }
            else {
                this.curFrag = this.inner = null;
            }
        }
        hasNode(node) {
            while (this.curFrag && node.from >= this.curFrag.to)
                this.nextFrag();
            return this.curFrag && this.curFrag.from <= node.from && this.curFrag.to >= node.to && this.inner.hasNode(node);
        }
        nextFrag() {
            this.fragI++;
            if (this.fragI == this.fragments.length) {
                this.curFrag = this.inner = null;
            }
            else {
                let frag = this.curFrag = this.fragments[this.fragI];
                this.inner = new StructureCursor(frag.tree, -frag.offset);
            }
        }
        findMounts(pos, parser) {
            var _a;
            let result = [];
            if (this.inner) {
                this.inner.cursor.moveTo(pos, 1);
                for (let pos = this.inner.cursor.node; pos; pos = pos.parent) {
                    let mount = (_a = pos.tree) === null || _a === void 0 ? void 0 : _a.prop(NodeProp.mounted);
                    if (mount && mount.parser == parser) {
                        for (let i = this.fragI; i < this.fragments.length; i++) {
                            let frag = this.fragments[i];
                            if (frag.from >= pos.to)
                                break;
                            if (frag.tree == this.curFrag.tree)
                                result.push({
                                    frag,
                                    pos: pos.from - frag.offset,
                                    mount
                                });
                        }
                    }
                }
            }
            return result;
        }
    }
    function punchRanges(outer, ranges) {
        let copy = null, current = ranges;
        for (let i = 1, j = 0; i < outer.length; i++) {
            let gapFrom = outer[i - 1].to, gapTo = outer[i].from;
            for (; j < current.length; j++) {
                let r = current[j];
                if (r.from >= gapTo)
                    break;
                if (r.to <= gapFrom)
                    continue;
                if (!copy)
                    current = copy = ranges.slice();
                if (r.from < gapFrom) {
                    copy[j] = new Range(r.from, gapFrom);
                    if (r.to > gapTo)
                        copy.splice(j + 1, 0, new Range(gapTo, r.to));
                }
                else if (r.to > gapTo) {
                    copy[j--] = new Range(gapTo, r.to);
                }
                else {
                    copy.splice(j--, 1);
                }
            }
        }
        return current;
    }
    function findCoverChanges(a, b, from, to) {
        let iA = 0, iB = 0, inA = false, inB = false, pos = -1e9;
        let result = [];
        for (;;) {
            let nextA = iA == a.length ? 1e9 : inA ? a[iA].to : a[iA].from;
            let nextB = iB == b.length ? 1e9 : inB ? b[iB].to : b[iB].from;
            if (inA != inB) {
                let start = Math.max(pos, from), end = Math.min(nextA, nextB, to);
                if (start < end)
                    result.push(new Range(start, end));
            }
            pos = Math.min(nextA, nextB);
            if (pos == 1e9)
                break;
            if (nextA == pos) {
                if (!inA)
                    inA = true;
                else {
                    inA = false;
                    iA++;
                }
            }
            if (nextB == pos) {
                if (!inB)
                    inB = true;
                else {
                    inB = false;
                    iB++;
                }
            }
        }
        return result;
    }
    // Given a number of fragments for the outer tree, and a set of ranges
    // to parse, find fragments for inner trees mounted around those
    // ranges, if any.
    function enterFragments(mounts, ranges) {
        let result = [];
        for (let { pos, mount, frag } of mounts) {
            let startPos = pos + (mount.overlay ? mount.overlay[0].from : 0), endPos = startPos + mount.tree.length;
            let from = Math.max(frag.from, startPos), to = Math.min(frag.to, endPos);
            if (mount.overlay) {
                let overlay = mount.overlay.map(r => new Range(r.from + pos, r.to + pos));
                let changes = findCoverChanges(ranges, overlay, from, to);
                for (let i = 0, pos = from;; i++) {
                    let last = i == changes.length, end = last ? to : changes[i].from;
                    if (end > pos)
                        result.push(new TreeFragment(pos, end, mount.tree, -startPos, frag.from >= pos, frag.to <= end));
                    if (last)
                        break;
                    pos = changes[i].to;
                }
            }
            else {
                result.push(new TreeFragment(from, to, mount.tree, -startPos, frag.from >= startPos, frag.to <= endPos));
            }
        }
        return result;
    }

    /**
    Node prop stored in a grammar's top syntax node to provide the
    facet that stores language data for that language.
    */
    const languageDataProp = /*@__PURE__*/new NodeProp();
    /**
    Helper function to define a facet (to be added to the top syntax
    node(s) for a language via
    [`languageDataProp`](https://codemirror.net/6/docs/ref/#language.languageDataProp)), that will be
    used to associate language data with the language. You
    probably only need this when subclassing
    [`Language`](https://codemirror.net/6/docs/ref/#language.Language).
    */
    function defineLanguageFacet(baseData) {
        return Facet.define({
            combine: baseData ? values => values.concat(baseData) : undefined
        });
    }
    /**
    A language object manages parsing and per-language
    [metadata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt). Parse data is
    managed as a [Lezer](https://lezer.codemirror.net) tree. You'll
    want to subclass this class for custom parsers, or use the
    [`LRLanguage`](https://codemirror.net/6/docs/ref/#language.LRLanguage) or
    [`StreamLanguage`](https://codemirror.net/6/docs/ref/#stream-parser.StreamLanguage) abstractions for
    [Lezer](https://lezer.codemirror.net/) or stream parsers.
    */
    class Language {
        /**
        Construct a language object. You usually don't need to invoke
        this directly. But when you do, make sure you use
        [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet) to create
        the first argument.
        */
        constructor(
        /**
        The [language data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) data
        facet used for this language.
        */
        data, parser, 
        /**
        The node type of the top node of trees produced by this parser.
        */
        topNode, extraExtensions = []) {
            this.data = data;
            this.topNode = topNode;
            // Kludge to define EditorState.tree as a debugging helper,
            // without the EditorState package actually knowing about
            // languages and lezer trees.
            if (!EditorState.prototype.hasOwnProperty("tree"))
                Object.defineProperty(EditorState.prototype, "tree", { get() { return syntaxTree(this); } });
            this.parser = parser;
            this.extension = [
                language.of(this),
                EditorState.languageData.of((state, pos, side) => state.facet(languageDataFacetAt(state, pos, side)))
            ].concat(extraExtensions);
        }
        /**
        Query whether this language is active at the given position.
        */
        isActiveAt(state, pos, side = -1) {
            return languageDataFacetAt(state, pos, side) == this.data;
        }
        /**
        Find the document regions that were parsed using this language.
        The returned regions will _include_ any nested languages rooted
        in this language, when those exist.
        */
        findRegions(state) {
            let lang = state.facet(language);
            if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data)
                return [{ from: 0, to: state.doc.length }];
            if (!lang || !lang.allowsNesting)
                return [];
            let result = [];
            let explore = (tree, from) => {
                if (tree.prop(languageDataProp) == this.data) {
                    result.push({ from, to: from + tree.length });
                    return;
                }
                let mount = tree.prop(NodeProp.mounted);
                if (mount) {
                    if (mount.tree.prop(languageDataProp) == this.data) {
                        if (mount.overlay)
                            for (let r of mount.overlay)
                                result.push({ from: r.from + from, to: r.to + from });
                        else
                            result.push({ from: from, to: from + tree.length });
                        return;
                    }
                    else if (mount.overlay) {
                        let size = result.length;
                        explore(mount.tree, mount.overlay[0].from + from);
                        if (result.length > size)
                            return;
                    }
                }
                for (let i = 0; i < tree.children.length; i++) {
                    let ch = tree.children[i];
                    if (ch instanceof Tree)
                        explore(ch, tree.positions[i] + from);
                }
            };
            explore(syntaxTree(state), 0);
            return result;
        }
        /**
        Indicates whether this language allows nested languages. The
        default implementation returns true.
        */
        get allowsNesting() { return true; }
    }
    /**
    @internal
    */
    Language.setState = /*@__PURE__*/StateEffect.define();
    function languageDataFacetAt(state, pos, side) {
        let topLang = state.facet(language);
        if (!topLang)
            return null;
        let facet = topLang.data;
        if (topLang.allowsNesting) {
            for (let node = syntaxTree(state).topNode; node; node = node.enter(pos, side, true, false))
                facet = node.type.prop(languageDataProp) || facet;
        }
        return facet;
    }
    /**
    A subclass of [`Language`](https://codemirror.net/6/docs/ref/#language.Language) for use with Lezer
    [LR parsers](https://lezer.codemirror.net/docs/ref#lr.LRParser)
    parsers.
    */
    class LRLanguage extends Language {
        constructor(data, parser) {
            super(data, parser, parser.topNode);
            this.parser = parser;
        }
        /**
        Define a language from a parser.
        */
        static define(spec) {
            let data = defineLanguageFacet(spec.languageData);
            return new LRLanguage(data, spec.parser.configure({
                props: [languageDataProp.add(type => type.isTop ? data : undefined)]
            }));
        }
        /**
        Create a new instance of this language with a reconfigured
        version of its parser.
        */
        configure(options) {
            return new LRLanguage(this.data, this.parser.configure(options));
        }
        get allowsNesting() { return this.parser.wrappers.length > 0; } // FIXME
    }
    /**
    Get the syntax tree for a state, which is the current (possibly
    incomplete) parse tree of active [language](https://codemirror.net/6/docs/ref/#language.Language),
    or the empty tree if there is no language available.
    */
    function syntaxTree(state) {
        let field = state.field(Language.state, false);
        return field ? field.tree : Tree.empty;
    }
    // Lezer-style Input object for a Text document.
    class DocInput {
        constructor(doc, length = doc.length) {
            this.doc = doc;
            this.length = length;
            this.cursorPos = 0;
            this.string = "";
            this.cursor = doc.iter();
        }
        syncTo(pos) {
            this.string = this.cursor.next(pos - this.cursorPos).value;
            this.cursorPos = pos + this.string.length;
            return this.cursorPos - this.string.length;
        }
        chunk(pos) {
            this.syncTo(pos);
            return this.string;
        }
        get lineChunks() { return true; }
        read(from, to) {
            let stringStart = this.cursorPos - this.string.length;
            if (from < stringStart || to >= this.cursorPos)
                return this.doc.sliceString(from, to);
            else
                return this.string.slice(from - stringStart, to - stringStart);
        }
    }
    let currentContext = null;
    /**
    A parse context provided to parsers working on the editor content.
    */
    class ParseContext {
        /**
        @internal
        */
        constructor(parser, 
        /**
        The current editor state.
        */
        state, 
        /**
        Tree fragments that can be reused by incremental re-parses.
        */
        fragments = [], 
        /**
        @internal
        */
        tree, treeLen, 
        /**
        The current editor viewport (or some overapproximation
        thereof). Intended to be used for opportunistically avoiding
        work (in which case
        [`skipUntilInView`](https://codemirror.net/6/docs/ref/#language.ParseContext.skipUntilInView)
        should be called to make sure the parser is restarted when the
        skipped region becomes visible).
        */
        viewport, 
        /**
        @internal
        */
        skipped, 
        /**
        This is where skipping parsers can register a promise that,
        when resolved, will schedule a new parse. It is cleared when
        the parse worker picks up the promise. @internal
        */
        scheduleOn) {
            this.parser = parser;
            this.state = state;
            this.fragments = fragments;
            this.tree = tree;
            this.treeLen = treeLen;
            this.viewport = viewport;
            this.skipped = skipped;
            this.scheduleOn = scheduleOn;
            this.parse = null;
            /**
            @internal
            */
            this.tempSkipped = [];
        }
        startParse() {
            return this.parser.startParse(new DocInput(this.state.doc), this.fragments);
        }
        /**
        @internal
        */
        work(time, upto) {
            if (upto != null && upto >= this.state.doc.length)
                upto = undefined;
            if (this.tree != Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {
                this.takeTree();
                return true;
            }
            return this.withContext(() => {
                var _a;
                if (!this.parse)
                    this.parse = this.startParse();
                if (upto != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > upto) &&
                    upto < this.state.doc.length)
                    this.parse.stopAt(upto);
                let endTime = Date.now() + time;
                for (;;) {
                    let done = this.parse.advance();
                    if (done) {
                        this.fragments = this.withoutTempSkipped(TreeFragment.addTree(done, this.fragments, this.parse.stoppedAt != null));
                        this.treeLen = (_a = this.parse.stoppedAt) !== null && _a !== void 0 ? _a : this.state.doc.length;
                        this.tree = done;
                        this.parse = null;
                        if (this.treeLen < (upto !== null && upto !== void 0 ? upto : this.state.doc.length))
                            this.parse = this.startParse();
                        else
                            return true;
                    }
                    if (Date.now() > endTime)
                        return false;
                }
            });
        }
        /**
        @internal
        */
        takeTree() {
            let pos, tree;
            if (this.parse && (pos = this.parse.parsedPos) > this.treeLen) {
                if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos)
                    this.parse.stopAt(pos);
                this.withContext(() => { while (!(tree = this.parse.advance())) { } });
                this.tree = tree;
                this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));
                this.parse = null;
            }
        }
        withContext(f) {
            let prev = currentContext;
            currentContext = this;
            try {
                return f();
            }
            finally {
                currentContext = prev;
            }
        }
        withoutTempSkipped(fragments) {
            for (let r; r = this.tempSkipped.pop();)
                fragments = cutFragments(fragments, r.from, r.to);
            return fragments;
        }
        /**
        @internal
        */
        changes(changes, newState) {
            let { fragments, tree, treeLen, viewport, skipped } = this;
            this.takeTree();
            if (!changes.empty) {
                let ranges = [];
                changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({ fromA, toA, fromB, toB }));
                fragments = TreeFragment.applyChanges(fragments, ranges);
                tree = Tree.empty;
                treeLen = 0;
                viewport = { from: changes.mapPos(viewport.from, -1), to: changes.mapPos(viewport.to, 1) };
                if (this.skipped.length) {
                    skipped = [];
                    for (let r of this.skipped) {
                        let from = changes.mapPos(r.from, 1), to = changes.mapPos(r.to, -1);
                        if (from < to)
                            skipped.push({ from, to });
                    }
                }
            }
            return new ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);
        }
        /**
        @internal
        */
        updateViewport(viewport) {
            if (this.viewport.from == viewport.from && this.viewport.to == viewport.to)
                return false;
            this.viewport = viewport;
            let startLen = this.skipped.length;
            for (let i = 0; i < this.skipped.length; i++) {
                let { from, to } = this.skipped[i];
                if (from < viewport.to && to > viewport.from) {
                    this.fragments = cutFragments(this.fragments, from, to);
                    this.skipped.splice(i--, 1);
                }
            }
            if (this.skipped.length >= startLen)
                return false;
            this.reset();
            return true;
        }
        /**
        @internal
        */
        reset() {
            if (this.parse) {
                this.takeTree();
                this.parse = null;
            }
        }
        /**
        Notify the parse scheduler that the given region was skipped
        because it wasn't in view, and the parse should be restarted
        when it comes into view.
        */
        skipUntilInView(from, to) {
            this.skipped.push({ from, to });
        }
        /**
        Returns a parser intended to be used as placeholder when
        asynchronously loading a nested parser. It'll skip its input and
        mark it as not-really-parsed, so that the next update will parse
        it again.
        
        When `until` is given, a reparse will be scheduled when that
        promise resolves.
        */
        static getSkippingParser(until) {
            return new class extends Parser {
                createParse(input, fragments, ranges) {
                    let from = ranges[0].from, to = ranges[ranges.length - 1].to;
                    let parser = {
                        parsedPos: from,
                        advance() {
                            let cx = currentContext;
                            if (cx) {
                                for (let r of ranges)
                                    cx.tempSkipped.push(r);
                                if (until)
                                    cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;
                            }
                            this.parsedPos = to;
                            return new Tree(NodeType.none, [], [], to - from);
                        },
                        stoppedAt: null,
                        stopAt() { }
                    };
                    return parser;
                }
            };
        }
        /**
        @internal
        */
        movedPast(pos) {
            return this.treeLen < pos && this.parse && this.parse.parsedPos >= pos;
        }
        /**
        @internal
        */
        isDone(upto) {
            let frags = this.fragments;
            return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;
        }
        /**
        Get the context for the current parse, or `null` if no editor
        parse is in progress.
        */
        static get() { return currentContext; }
    }
    function cutFragments(fragments, from, to) {
        return TreeFragment.applyChanges(fragments, [{ fromA: from, toA: to, fromB: from, toB: to }]);
    }
    class LanguageState {
        constructor(
        // A mutable parse state that is used to preserve work done during
        // the lifetime of a state when moving to the next state.
        context) {
            this.context = context;
            this.tree = context.tree;
        }
        apply(tr) {
            if (!tr.docChanged)
                return this;
            let newCx = this.context.changes(tr.changes, tr.state);
            // If the previous parse wasn't done, go forward only up to its
            // end position or the end of the viewport, to avoid slowing down
            // state updates with parse work beyond the viewport.
            let upto = this.context.treeLen == tr.startState.doc.length ? undefined
                : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);
            if (!newCx.work(25 /* Apply */, upto))
                newCx.takeTree();
            return new LanguageState(newCx);
        }
        static init(state) {
            let parseState = new ParseContext(state.facet(language).parser, state, [], Tree.empty, 0, { from: 0, to: state.doc.length }, [], null);
            if (!parseState.work(25 /* Apply */))
                parseState.takeTree();
            return new LanguageState(parseState);
        }
    }
    Language.state = /*@__PURE__*/StateField.define({
        create: LanguageState.init,
        update(value, tr) {
            for (let e of tr.effects)
                if (e.is(Language.setState))
                    return e.value;
            if (tr.startState.facet(language) != tr.state.facet(language))
                return LanguageState.init(tr.state);
            return value.apply(tr);
        }
    });
    let requestIdle = typeof window != "undefined" && window.requestIdleCallback ||
        ((callback, { timeout }) => setTimeout(callback, timeout));
    let cancelIdle = typeof window != "undefined" && window.cancelIdleCallback || clearTimeout;
    const parseWorker = /*@__PURE__*/ViewPlugin.fromClass(class ParseWorker {
        constructor(view) {
            this.view = view;
            this.working = -1;
            // End of the current time chunk
            this.chunkEnd = -1;
            // Milliseconds of budget left for this chunk
            this.chunkBudget = -1;
            this.work = this.work.bind(this);
            this.scheduleWork();
        }
        update(update) {
            let cx = this.view.state.field(Language.state).context;
            if (cx.updateViewport(update.view.viewport) || this.view.viewport.to > cx.treeLen)
                this.scheduleWork();
            if (update.docChanged) {
                if (this.view.hasFocus)
                    this.chunkBudget += 50 /* ChangeBonus */;
                this.scheduleWork();
            }
            this.checkAsyncSchedule(cx);
        }
        scheduleWork() {
            if (this.working > -1)
                return;
            let { state } = this.view, field = state.field(Language.state);
            if (field.tree != field.context.tree || !field.context.isDone(state.doc.length))
                this.working = requestIdle(this.work, { timeout: 500 /* Pause */ });
        }
        work(deadline) {
            this.working = -1;
            let now = Date.now();
            if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) { // Start a new chunk
                this.chunkEnd = now + 30000 /* ChunkTime */;
                this.chunkBudget = 3000 /* ChunkBudget */;
            }
            if (this.chunkBudget <= 0)
                return; // No more budget
            let { state, viewport: { to: vpTo } } = this.view, field = state.field(Language.state);
            if (field.tree == field.context.tree && field.context.treeLen >= vpTo + 1000000 /* MaxParseAhead */)
                return;
            let time = Math.min(this.chunkBudget, deadline ? Math.max(25 /* MinSlice */, deadline.timeRemaining()) : 100 /* Slice */);
            let done = field.context.work(time, vpTo + 1000000 /* MaxParseAhead */);
            this.chunkBudget -= Date.now() - now;
            if (done || this.chunkBudget <= 0 || field.context.movedPast(vpTo)) {
                field.context.takeTree();
                this.view.dispatch({ effects: Language.setState.of(new LanguageState(field.context)) });
            }
            if (!done && this.chunkBudget > 0)
                this.scheduleWork();
            this.checkAsyncSchedule(field.context);
        }
        checkAsyncSchedule(cx) {
            if (cx.scheduleOn) {
                cx.scheduleOn.then(() => this.scheduleWork());
                cx.scheduleOn = null;
            }
        }
        destroy() {
            if (this.working >= 0)
                cancelIdle(this.working);
        }
    }, {
        eventHandlers: { focus() { this.scheduleWork(); } }
    });
    /**
    The facet used to associate a language with an editor state.
    */
    const language = /*@__PURE__*/Facet.define({
        combine(languages) { return languages.length ? languages[0] : null; },
        enables: [Language.state, parseWorker]
    });
    /**
    This class bundles a [language object](https://codemirror.net/6/docs/ref/#language.Language) with an
    optional set of supporting extensions. Language packages are
    encouraged to export a function that optionally takes a
    configuration object and returns a `LanguageSupport` instance, as
    the main way for client code to use the package.
    */
    class LanguageSupport {
        /**
        Create a support object.
        */
        constructor(
        /**
        The language object.
        */
        language, 
        /**
        An optional set of supporting extensions. When nesting a
        language in another language, the outer language is encouraged
        to include the supporting extensions for its inner languages
        in its own set of support extensions.
        */
        support = []) {
            this.language = language;
            this.support = support;
            this.extension = [language, support];
        }
    }
    /**
    Language descriptions are used to store metadata about languages
    and to dynamically load them. Their main role is finding the
    appropriate language for a filename or dynamically loading nested
    parsers.
    */
    class LanguageDescription {
        constructor(
        /**
        The name of this language.
        */
        name, 
        /**
        Alternative names for the mode (lowercased, includes `this.name`).
        */
        alias, 
        /**
        File extensions associated with this language.
        */
        extensions, 
        /**
        Optional filename pattern that should be associated with this
        language.
        */
        filename, loadFunc) {
            this.name = name;
            this.alias = alias;
            this.extensions = extensions;
            this.filename = filename;
            this.loadFunc = loadFunc;
            /**
            If the language has been loaded, this will hold its value.
            */
            this.support = undefined;
            this.loading = null;
        }
        /**
        Start loading the the language. Will return a promise that
        resolves to a [`LanguageSupport`](https://codemirror.net/6/docs/ref/#language.LanguageSupport)
        object when the language successfully loads.
        */
        load() {
            return this.loading || (this.loading = this.loadFunc().then(support => this.support = support, err => { this.loading = null; throw err; }));
        }
        /**
        Create a language description.
        */
        static of(spec) {
            return new LanguageDescription(spec.name, (spec.alias || []).concat(spec.name).map(s => s.toLowerCase()), spec.extensions || [], spec.filename, spec.load);
        }
        /**
        Look for a language in the given array of descriptions that
        matches the filename. Will first match
        [`filename`](https://codemirror.net/6/docs/ref/#language.LanguageDescription.filename) patterns,
        and then [extensions](https://codemirror.net/6/docs/ref/#language.LanguageDescription.extensions),
        and return the first language that matches.
        */
        static matchFilename(descs, filename) {
            for (let d of descs)
                if (d.filename && d.filename.test(filename))
                    return d;
            let ext = /\.([^.]+)$/.exec(filename);
            if (ext)
                for (let d of descs)
                    if (d.extensions.indexOf(ext[1]) > -1)
                        return d;
            return null;
        }
        /**
        Look for a language whose name or alias matches the the given
        name (case-insensitively). If `fuzzy` is true, and no direct
        matchs is found, this'll also search for a language whose name
        or alias occurs in the string (for names shorter than three
        characters, only when surrounded by non-word characters).
        */
        static matchLanguageName(descs, name, fuzzy = true) {
            name = name.toLowerCase();
            for (let d of descs)
                if (d.alias.some(a => a == name))
                    return d;
            if (fuzzy)
                for (let d of descs)
                    for (let a of d.alias) {
                        let found = name.indexOf(a);
                        if (found > -1 && (a.length > 2 || !/\w/.test(name[found - 1]) && !/\w/.test(name[found + a.length])))
                            return d;
                    }
            return null;
        }
    }

    /**
    Facet that defines a way to provide a function that computes the
    appropriate indentation depth at the start of a given line, or
    `null` to indicate no appropriate indentation could be determined.
    */
    const indentService = /*@__PURE__*/Facet.define();
    /**
    Facet for overriding the unit by which indentation happens.
    Should be a string consisting either entirely of spaces or
    entirely of tabs. When not set, this defaults to 2 spaces.
    */
    const indentUnit = /*@__PURE__*/Facet.define({
        combine: values => {
            if (!values.length)
                return "  ";
            if (!/^(?: +|\t+)$/.test(values[0]))
                throw new Error("Invalid indent unit: " + JSON.stringify(values[0]));
            return values[0];
        }
    });
    /**
    Return the _column width_ of an indent unit in the state.
    Determined by the [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit)
    facet, and [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) when that
    contains tabs.
    */
    function getIndentUnit(state) {
        let unit = state.facet(indentUnit);
        return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;
    }
    /**
    Create an indentation string that covers columns 0 to `cols`.
    Will use tabs for as much of the columns as possible when the
    [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit) facet contains
    tabs.
    */
    function indentString(state, cols) {
        let result = "", ts = state.tabSize;
        if (state.facet(indentUnit).charCodeAt(0) == 9)
            while (cols >= ts) {
                result += "\t";
                cols -= ts;
            }
        for (let i = 0; i < cols; i++)
            result += " ";
        return result;
    }
    /**
    Get the indentation at the given position. Will first consult any
    [indent services](https://codemirror.net/6/docs/ref/#language.indentService) that are registered,
    and if none of those return an indentation, this will check the
    syntax tree for the [indent node prop](https://codemirror.net/6/docs/ref/#language.indentNodeProp)
    and use that if found. Returns a number when an indentation could
    be determined, and null otherwise.
    */
    function getIndentation(context, pos) {
        if (context instanceof EditorState)
            context = new IndentContext(context);
        for (let service of context.state.facet(indentService)) {
            let result = service(context, pos);
            if (result != null)
                return result;
        }
        let tree = syntaxTree(context.state);
        return tree ? syntaxIndentation(context, tree, pos) : null;
    }
    /**
    Indentation contexts are used when calling [indentation
    services](https://codemirror.net/6/docs/ref/#language.indentService). They provide helper utilities
    useful in indentation logic, and can selectively override the
    indentation reported for some lines.
    */
    class IndentContext {
        /**
        Create an indent context.
        */
        constructor(
        /**
        The editor state.
        */
        state, 
        /**
        @internal
        */
        options = {}) {
            this.state = state;
            this.options = options;
            this.unit = getIndentUnit(state);
        }
        /**
        Get a description of the line at the given position, taking
        [simulated line
        breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
        into account. If there is such a break at `pos`, the `bias`
        argument determines whether the part of the line line before or
        after the break is used.
        */
        lineAt(pos, bias = 1) {
            let line = this.state.doc.lineAt(pos);
            let { simulateBreak } = this.options;
            if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {
                if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos)
                    return { text: line.text.slice(simulateBreak - line.from), from: simulateBreak };
                else
                    return { text: line.text.slice(0, simulateBreak - line.from), from: line.from };
            }
            return line;
        }
        /**
        Get the text directly after `pos`, either the entire line
        or the next 100 characters, whichever is shorter.
        */
        textAfterPos(pos, bias = 1) {
            if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak)
                return "";
            let { text, from } = this.lineAt(pos, bias);
            return text.slice(pos - from, Math.min(text.length, pos + 100 - from));
        }
        /**
        Find the column for the given position.
        */
        column(pos, bias = 1) {
            let { text, from } = this.lineAt(pos, bias);
            let result = this.countColumn(text, pos - from);
            let override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;
            if (override > -1)
                result += override - this.countColumn(text, text.search(/\S|$/));
            return result;
        }
        /**
        Find the column position (taking tabs into account) of the given
        position in the given string.
        */
        countColumn(line, pos = line.length) {
            return countColumn(line, this.state.tabSize, pos);
        }
        /**
        Find the indentation column of the line at the given point.
        */
        lineIndent(pos, bias = 1) {
            let { text, from } = this.lineAt(pos, bias);
            let override = this.options.overrideIndentation;
            if (override) {
                let overriden = override(from);
                if (overriden > -1)
                    return overriden;
            }
            return this.countColumn(text, text.search(/\S|$/));
        }
        /**
        Returns the [simulated line
        break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
        for this context, if any.
        */
        get simulatedBreak() {
            return this.options.simulateBreak || null;
        }
    }
    /**
    A syntax tree node prop used to associate indentation strategies
    with node types. Such a strategy is a function from an indentation
    context to a column number or null, where null indicates that no
    definitive indentation can be determined.
    */
    const indentNodeProp = /*@__PURE__*/new NodeProp();
    // Compute the indentation for a given position from the syntax tree.
    function syntaxIndentation(cx, ast, pos) {
        return indentFrom(ast.resolveInner(pos).enterUnfinishedNodesBefore(pos), pos, cx);
    }
    function ignoreClosed(cx) {
        return cx.pos == cx.options.simulateBreak && cx.options.simulateDoubleBreak;
    }
    function indentStrategy(tree) {
        let strategy = tree.type.prop(indentNodeProp);
        if (strategy)
            return strategy;
        let first = tree.firstChild, close;
        if (first && (close = first.type.prop(NodeProp.closedBy))) {
            let last = tree.lastChild, closed = last && close.indexOf(last.name) > -1;
            return cx => delimitedStrategy(cx, true, 1, undefined, closed && !ignoreClosed(cx) ? last.from : undefined);
        }
        return tree.parent == null ? topIndent$1 : null;
    }
    function indentFrom(node, pos, base) {
        for (; node; node = node.parent) {
            let strategy = indentStrategy(node);
            if (strategy)
                return strategy(new TreeIndentContext(base, pos, node));
        }
        return null;
    }
    function topIndent$1() { return 0; }
    /**
    Objects of this type provide context information and helper
    methods to indentation functions.
    */
    class TreeIndentContext extends IndentContext {
        /**
        @internal
        */
        constructor(base, 
        /**
        The position at which indentation is being computed.
        */
        pos, 
        /**
        The syntax tree node to which the indentation strategy
        applies.
        */
        node) {
            super(base.state, base.options);
            this.base = base;
            this.pos = pos;
            this.node = node;
        }
        /**
        Get the text directly after `this.pos`, either the entire line
        or the next 100 characters, whichever is shorter.
        */
        get textAfter() {
            return this.textAfterPos(this.pos);
        }
        /**
        Get the indentation at the reference line for `this.node`, which
        is the line on which it starts, unless there is a node that is
        _not_ a parent of this node covering the start of that line. If
        so, the line at the start of that node is tried, again skipping
        on if it is covered by another such node.
        */
        get baseIndent() {
            let line = this.state.doc.lineAt(this.node.from);
            // Skip line starts that are covered by a sibling (or cousin, etc)
            for (;;) {
                let atBreak = this.node.resolve(line.from);
                while (atBreak.parent && atBreak.parent.from == atBreak.from)
                    atBreak = atBreak.parent;
                if (isParent(atBreak, this.node))
                    break;
                line = this.state.doc.lineAt(atBreak.from);
            }
            return this.lineIndent(line.from);
        }
        /**
        Continue looking for indentations in the node's parent nodes,
        and return the result of that.
        */
        continue() {
            let parent = this.node.parent;
            return parent ? indentFrom(parent, this.pos, this.base) : 0;
        }
    }
    function isParent(parent, of) {
        for (let cur = of; cur; cur = cur.parent)
            if (parent == cur)
                return true;
        return false;
    }
    // Check whether a delimited node is aligned (meaning there are
    // non-skipped nodes on the same line as the opening delimiter). And
    // if so, return the opening token.
    function bracketedAligned(context) {
        let tree = context.node;
        let openToken = tree.childAfter(tree.from), last = tree.lastChild;
        if (!openToken)
            return null;
        let sim = context.options.simulateBreak;
        let openLine = context.state.doc.lineAt(openToken.from);
        let lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);
        for (let pos = openToken.to;;) {
            let next = tree.childAfter(pos);
            if (!next || next == last)
                return null;
            if (!next.type.isSkipped)
                return next.from < lineEnd ? openToken : null;
            pos = next.to;
        }
    }
    /**
    An indentation strategy for delimited (usually bracketed) nodes.
    Will, by default, indent one unit more than the parent's base
    indent unless the line starts with a closing token. When `align`
    is true and there are non-skipped nodes on the node's opening
    line, the content of the node will be aligned with the end of the
    opening node, like this:

        foo(bar,
            baz)
    */
    function delimitedIndent({ closing, align = true, units = 1 }) {
        return (context) => delimitedStrategy(context, align, units, closing);
    }
    function delimitedStrategy(context, align, units, closing, closedAt) {
        let after = context.textAfter, space = after.match(/^\s*/)[0].length;
        let closed = closing && after.slice(space, space + closing.length) == closing || closedAt == context.pos + space;
        let aligned = align ? bracketedAligned(context) : null;
        if (aligned)
            return closed ? context.column(aligned.from) : context.column(aligned.to);
        return context.baseIndent + (closed ? 0 : context.unit * units);
    }
    /**
    An indentation strategy that aligns a node's content to its base
    indentation.
    */
    const flatIndent = (context) => context.baseIndent;
    /**
    Creates an indentation strategy that, by default, indents
    continued lines one unit more than the node's base indentation.
    You can provide `except` to prevent indentation of lines that
    match a pattern (for example `/^else\b/` in `if`/`else`
    constructs), and you can change the amount of units used with the
    `units` option.
    */
    function continuedIndent({ except, units = 1 } = {}) {
        return (context) => {
            let matchExcept = except && except.test(context.textAfter);
            return context.baseIndent + (matchExcept ? 0 : units * context.unit);
        };
    }
    const DontIndentBeyond = 200;
    /**
    Enables reindentation on input. When a language defines an
    `indentOnInput` field in its [language
    data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt), which must hold a regular
    expression, the line at the cursor will be reindented whenever new
    text is typed and the input from the start of the line up to the
    cursor matches that regexp.

    To avoid unneccesary reindents, it is recommended to start the
    regexp with `^` (usually followed by `\s*`), and end it with `$`.
    For example, `/^\s*\}$/` will reindent when a closing brace is
    added at the start of a line.
    */
    function indentOnInput() {
        return EditorState.transactionFilter.of(tr => {
            if (!tr.docChanged || !tr.isUserEvent("input.type"))
                return tr;
            let rules = tr.startState.languageDataAt("indentOnInput", tr.startState.selection.main.head);
            if (!rules.length)
                return tr;
            let doc = tr.newDoc, { head } = tr.newSelection.main, line = doc.lineAt(head);
            if (head > line.from + DontIndentBeyond)
                return tr;
            let lineStart = doc.sliceString(line.from, head);
            if (!rules.some(r => r.test(lineStart)))
                return tr;
            let { state } = tr, last = -1, changes = [];
            for (let { head } of state.selection.ranges) {
                let line = state.doc.lineAt(head);
                if (line.from == last)
                    continue;
                last = line.from;
                let indent = getIndentation(state, line.from);
                if (indent == null)
                    continue;
                let cur = /^\s*/.exec(line.text)[0];
                let norm = indentString(state, indent);
                if (cur != norm)
                    changes.push({ from: line.from, to: line.from + cur.length, insert: norm });
            }
            return changes.length ? [tr, { changes, sequential: true }] : tr;
        });
    }

    /**
    A facet that registers a code folding service. When called with
    the extent of a line, such a function should return a foldable
    range that starts on that line (but continues beyond it), if one
    can be found.
    */
    const foldService = /*@__PURE__*/Facet.define();
    /**
    This node prop is used to associate folding information with
    syntax node types. Given a syntax node, it should check whether
    that tree is foldable and return the range that can be collapsed
    when it is.
    */
    const foldNodeProp = /*@__PURE__*/new NodeProp();
    /**
    [Fold](https://codemirror.net/6/docs/ref/#language.foldNodeProp) function that folds everything but
    the first and the last child of a syntax node. Useful for nodes
    that start and end with delimiters.
    */
    function foldInside$1(node) {
        let first = node.firstChild, last = node.lastChild;
        return first && first.to < last.from ? { from: first.to, to: last.type.isError ? node.to : last.from } : null;
    }
    function syntaxFolding(state, start, end) {
        let tree = syntaxTree(state);
        if (tree.length == 0)
            return null;
        let inner = tree.resolveInner(end);
        let found = null;
        for (let cur = inner; cur; cur = cur.parent) {
            if (cur.to <= end || cur.from > end)
                continue;
            if (found && cur.from < start)
                break;
            let prop = cur.type.prop(foldNodeProp);
            if (prop) {
                let value = prop(cur, state);
                if (value && value.from <= end && value.from >= start && value.to > end)
                    found = value;
            }
        }
        return found;
    }
    /**
    Check whether the given line is foldable. First asks any fold
    services registered through
    [`foldService`](https://codemirror.net/6/docs/ref/#language.foldService), and if none of them return
    a result, tries to query the [fold node
    prop](https://codemirror.net/6/docs/ref/#language.foldNodeProp) of syntax nodes that cover the end
    of the line.
    */
    function foldable(state, lineStart, lineEnd) {
        for (let service of state.facet(foldService)) {
            let result = service(state, lineStart, lineEnd);
            if (result)
                return result;
        }
        return syntaxFolding(state, lineStart, lineEnd);
    }

    const baseTheme$3 = /*@__PURE__*/EditorView.baseTheme({
        ".cm-matchingBracket": { color: "#0b0" },
        ".cm-nonmatchingBracket": { color: "#a22" }
    });
    const DefaultScanDist = 10000, DefaultBrackets = "()[]{}";
    const bracketMatchingConfig = /*@__PURE__*/Facet.define({
        combine(configs) {
            return combineConfig(configs, {
                afterCursor: true,
                brackets: DefaultBrackets,
                maxScanDistance: DefaultScanDist
            });
        }
    });
    const matchingMark = /*@__PURE__*/Decoration.mark({ class: "cm-matchingBracket" }), nonmatchingMark = /*@__PURE__*/Decoration.mark({ class: "cm-nonmatchingBracket" });
    const bracketMatchingState = /*@__PURE__*/StateField.define({
        create() { return Decoration.none; },
        update(deco, tr) {
            if (!tr.docChanged && !tr.selection)
                return deco;
            let decorations = [];
            let config = tr.state.facet(bracketMatchingConfig);
            for (let range of tr.state.selection.ranges) {
                if (!range.empty)
                    continue;
                let match = matchBrackets(tr.state, range.head, -1, config)
                    || (range.head > 0 && matchBrackets(tr.state, range.head - 1, 1, config))
                    || (config.afterCursor &&
                        (matchBrackets(tr.state, range.head, 1, config) ||
                            (range.head < tr.state.doc.length && matchBrackets(tr.state, range.head + 1, -1, config))));
                if (!match)
                    continue;
                let mark = match.matched ? matchingMark : nonmatchingMark;
                decorations.push(mark.range(match.start.from, match.start.to));
                if (match.end)
                    decorations.push(mark.range(match.end.from, match.end.to));
            }
            return Decoration.set(decorations, true);
        },
        provide: f => EditorView.decorations.from(f)
    });
    const bracketMatchingUnique = [
        bracketMatchingState,
        baseTheme$3
    ];
    /**
    Create an extension that enables bracket matching. Whenever the
    cursor is next to a bracket, that bracket and the one it matches
    are highlighted. Or, when no matching bracket is found, another
    highlighting style is used to indicate this.
    */
    function bracketMatching(config = {}) {
        return [bracketMatchingConfig.of(config), bracketMatchingUnique];
    }
    function matchingNodes(node, dir, brackets) {
        let byProp = node.prop(dir < 0 ? NodeProp.openedBy : NodeProp.closedBy);
        if (byProp)
            return byProp;
        if (node.name.length == 1) {
            let index = brackets.indexOf(node.name);
            if (index > -1 && index % 2 == (dir < 0 ? 1 : 0))
                return [brackets[index + dir]];
        }
        return null;
    }
    /**
    Find the matching bracket for the token at `pos`, scanning
    direction `dir`. Only the `brackets` and `maxScanDistance`
    properties are used from `config`, if given. Returns null if no
    bracket was found at `pos`, or a match result otherwise.
    */
    function matchBrackets(state, pos, dir, config = {}) {
        let maxScanDistance = config.maxScanDistance || DefaultScanDist, brackets = config.brackets || DefaultBrackets;
        let tree = syntaxTree(state), sub = tree.resolve(pos, dir), matches;
        if (matches = matchingNodes(sub.type, dir, brackets))
            return matchMarkedBrackets(state, pos, dir, sub, matches, brackets);
        else
            return matchPlainBrackets(state, pos, dir, tree, sub.type, maxScanDistance, brackets);
    }
    function matchMarkedBrackets(_state, _pos, dir, token, matching, brackets) {
        let parent = token.parent, firstToken = { from: token.from, to: token.to };
        let depth = 0, cursor = parent === null || parent === void 0 ? void 0 : parent.cursor;
        if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to)))
            do {
                if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {
                    if (depth == 0 && matching.indexOf(cursor.type.name) > -1) {
                        return { start: firstToken, end: { from: cursor.from, to: cursor.to }, matched: true };
                    }
                    else if (matchingNodes(cursor.type, dir, brackets)) {
                        depth++;
                    }
                    else if (matchingNodes(cursor.type, -dir, brackets)) {
                        depth--;
                        if (depth == 0)
                            return { start: firstToken, end: { from: cursor.from, to: cursor.to }, matched: false };
                    }
                }
            } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());
        return { start: firstToken, matched: false };
    }
    function matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {
        let startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);
        let bracket = brackets.indexOf(startCh);
        if (bracket < 0 || (bracket % 2 == 0) != (dir > 0))
            return null;
        let startToken = { from: dir < 0 ? pos - 1 : pos, to: dir > 0 ? pos + 1 : pos };
        let iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0), depth = 0;
        for (let distance = 0; !(iter.next()).done && distance <= maxScanDistance;) {
            let text = iter.value;
            if (dir < 0)
                distance += text.length;
            let basePos = pos + distance * dir;
            for (let pos = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; pos != end; pos += dir) {
                let found = brackets.indexOf(text[pos]);
                if (found < 0 || tree.resolve(basePos + pos, 1).type != tokenType)
                    continue;
                if ((found % 2 == 0) == (dir > 0)) {
                    depth++;
                }
                else if (depth == 1) { // Closing
                    return { start: startToken, end: { from: basePos + pos, to: basePos + pos + 1 }, matched: (found >> 1) == (bracket >> 1) };
                }
                else {
                    depth--;
                }
            }
            if (dir > 0)
                distance += text.length;
        }
        return iter.done ? { start: startToken, matched: false } : null;
    }

    const defaults$4 = {
        brackets: ["(", "[", "{", "'", '"'],
        before: ")]}'\":;>"
    };
    const closeBracketEffect = /*@__PURE__*/StateEffect.define({
        map(value, mapping) {
            let mapped = mapping.mapPos(value, -1, MapMode.TrackAfter);
            return mapped == null ? undefined : mapped;
        }
    });
    const skipBracketEffect = /*@__PURE__*/StateEffect.define({
        map(value, mapping) { return mapping.mapPos(value); }
    });
    const closedBracket = /*@__PURE__*/new class extends RangeValue {
    };
    closedBracket.startSide = 1;
    closedBracket.endSide = -1;
    const bracketState = /*@__PURE__*/StateField.define({
        create() { return RangeSet.empty; },
        update(value, tr) {
            if (tr.selection) {
                let lineStart = tr.state.doc.lineAt(tr.selection.main.head).from;
                let prevLineStart = tr.startState.doc.lineAt(tr.startState.selection.main.head).from;
                if (lineStart != tr.changes.mapPos(prevLineStart, -1))
                    value = RangeSet.empty;
            }
            value = value.map(tr.changes);
            for (let effect of tr.effects) {
                if (effect.is(closeBracketEffect))
                    value = value.update({ add: [closedBracket.range(effect.value, effect.value + 1)] });
                else if (effect.is(skipBracketEffect))
                    value = value.update({ filter: from => from != effect.value });
            }
            return value;
        }
    });
    /**
    Extension to enable bracket-closing behavior. When a closeable
    bracket is typed, its closing bracket is immediately inserted
    after the cursor. When closing a bracket directly in front of a
    closing bracket inserted by the extension, the cursor moves over
    that bracket.
    */
    function closeBrackets() {
        return [EditorView.inputHandler.of(handleInput), bracketState];
    }
    const definedClosing = "()[]{}<>";
    function closing$2(ch) {
        for (let i = 0; i < definedClosing.length; i += 2)
            if (definedClosing.charCodeAt(i) == ch)
                return definedClosing.charAt(i + 1);
        return fromCodePoint(ch < 128 ? ch : ch + 1);
    }
    function config(state, pos) {
        return state.languageDataAt("closeBrackets", pos)[0] || defaults$4;
    }
    function handleInput(view, from, to, insert) {
        if (view.composing)
            return false;
        let sel = view.state.selection.main;
        if (insert.length > 2 || insert.length == 2 && codePointSize(codePointAt(insert, 0)) == 1 ||
            from != sel.from || to != sel.to)
            return false;
        let tr = insertBracket(view.state, insert);
        if (!tr)
            return false;
        view.dispatch(tr);
        return true;
    }
    /**
    Command that implements deleting a pair of matching brackets when
    the cursor is between them.
    */
    const deleteBracketPair = ({ state, dispatch }) => {
        let conf = config(state, state.selection.main.head);
        let tokens = conf.brackets || defaults$4.brackets;
        let dont = null, changes = state.changeByRange(range => {
            if (range.empty) {
                let before = prevChar(state.doc, range.head);
                for (let token of tokens) {
                    if (token == before && nextChar(state.doc, range.head) == closing$2(codePointAt(token, 0)))
                        return { changes: { from: range.head - token.length, to: range.head + token.length },
                            range: EditorSelection.cursor(range.head - token.length),
                            userEvent: "delete.backward" };
                }
            }
            return { range: dont = range };
        });
        if (!dont)
            dispatch(state.update(changes, { scrollIntoView: true }));
        return !dont;
    };
    /**
    Close-brackets related key bindings. Binds Backspace to
    [`deleteBracketPair`](https://codemirror.net/6/docs/ref/#closebrackets.deleteBracketPair).
    */
    const closeBracketsKeymap = [
        { key: "Backspace", run: deleteBracketPair }
    ];
    /**
    Implements the extension's behavior on text insertion. If the
    given string counts as a bracket in the language around the
    selection, and replacing the selection with it requires custom
    behavior (inserting a closing version or skipping past a
    previously-closed bracket), this function returns a transaction
    representing that custom behavior. (You only need this if you want
    to programmatically insert brackets—the
    [`closeBrackets`](https://codemirror.net/6/docs/ref/#closebrackets.closeBrackets) extension will
    take care of running this for user input.)
    */
    function insertBracket(state, bracket) {
        let conf = config(state, state.selection.main.head);
        let tokens = conf.brackets || defaults$4.brackets;
        for (let tok of tokens) {
            let closed = closing$2(codePointAt(tok, 0));
            if (bracket == tok)
                return closed == tok ? handleSame(state, tok, tokens.indexOf(tok + tok + tok) > -1)
                    : handleOpen(state, tok, closed, conf.before || defaults$4.before);
            if (bracket == closed && closedBracketAt(state, state.selection.main.from))
                return handleClose(state, tok, closed);
        }
        return null;
    }
    function closedBracketAt(state, pos) {
        let found = false;
        state.field(bracketState).between(0, state.doc.length, from => {
            if (from == pos)
                found = true;
        });
        return found;
    }
    function nextChar(doc, pos) {
        let next = doc.sliceString(pos, pos + 2);
        return next.slice(0, codePointSize(codePointAt(next, 0)));
    }
    function prevChar(doc, pos) {
        let prev = doc.sliceString(pos - 2, pos);
        return codePointSize(codePointAt(prev, 0)) == prev.length ? prev : prev.slice(1);
    }
    function handleOpen(state, open, close, closeBefore) {
        let dont = null, changes = state.changeByRange(range => {
            if (!range.empty)
                return { changes: [{ insert: open, from: range.from }, { insert: close, from: range.to }],
                    effects: closeBracketEffect.of(range.to + open.length),
                    range: EditorSelection.range(range.anchor + open.length, range.head + open.length) };
            let next = nextChar(state.doc, range.head);
            if (!next || /\s/.test(next) || closeBefore.indexOf(next) > -1)
                return { changes: { insert: open + close, from: range.head },
                    effects: closeBracketEffect.of(range.head + open.length),
                    range: EditorSelection.cursor(range.head + open.length) };
            return { range: dont = range };
        });
        return dont ? null : state.update(changes, {
            scrollIntoView: true,
            userEvent: "input.type"
        });
    }
    function handleClose(state, _open, close) {
        let dont = null, moved = state.selection.ranges.map(range => {
            if (range.empty && nextChar(state.doc, range.head) == close)
                return EditorSelection.cursor(range.head + close.length);
            return dont = range;
        });
        return dont ? null : state.update({
            selection: EditorSelection.create(moved, state.selection.mainIndex),
            scrollIntoView: true,
            effects: state.selection.ranges.map(({ from }) => skipBracketEffect.of(from))
        });
    }
    // Handles cases where the open and close token are the same, and
    // possibly triple quotes (as in `"""abc"""`-style quoting).
    function handleSame(state, token, allowTriple) {
        let dont = null, changes = state.changeByRange(range => {
            if (!range.empty)
                return { changes: [{ insert: token, from: range.from }, { insert: token, from: range.to }],
                    effects: closeBracketEffect.of(range.to + token.length),
                    range: EditorSelection.range(range.anchor + token.length, range.head + token.length) };
            let pos = range.head, next = nextChar(state.doc, pos);
            if (next == token) {
                if (nodeStart$1(state, pos)) {
                    return { changes: { insert: token + token, from: pos },
                        effects: closeBracketEffect.of(pos + token.length),
                        range: EditorSelection.cursor(pos + token.length) };
                }
                else if (closedBracketAt(state, pos)) {
                    let isTriple = allowTriple && state.sliceDoc(pos, pos + token.length * 3) == token + token + token;
                    return { range: EditorSelection.cursor(pos + token.length * (isTriple ? 3 : 1)),
                        effects: skipBracketEffect.of(pos) };
                }
            }
            else if (allowTriple && state.sliceDoc(pos - 2 * token.length, pos) == token + token &&
                nodeStart$1(state, pos - 2 * token.length)) {
                return { changes: { insert: token + token + token + token, from: pos },
                    effects: closeBracketEffect.of(pos + token.length),
                    range: EditorSelection.cursor(pos + token.length) };
            }
            else if (state.charCategorizer(pos)(next) != CharCategory.Word) {
                let prev = state.sliceDoc(pos - 1, pos);
                if (prev != token && state.charCategorizer(pos)(prev) != CharCategory.Word)
                    return { changes: { insert: token + token, from: pos },
                        effects: closeBracketEffect.of(pos + token.length),
                        range: EditorSelection.cursor(pos + token.length) };
            }
            return { range: dont = range };
        });
        return dont ? null : state.update(changes, {
            scrollIntoView: true,
            userEvent: "input.type"
        });
    }
    function nodeStart$1(state, pos) {
        let tree = syntaxTree(state).resolveInner(pos + 1);
        return tree.parent && tree.from == pos;
    }

    class CompositeBlock {
        constructor(type, 
        // Used for indentation in list items, markup character in lists
        value, from, hash, end, children, positions) {
            this.type = type;
            this.value = value;
            this.from = from;
            this.hash = hash;
            this.end = end;
            this.children = children;
            this.positions = positions;
            this.hashProp = [[NodeProp.contextHash, hash]];
        }
        static create(type, value, from, parentHash, end) {
            let hash = (parentHash + (parentHash << 8) + type + (value << 4)) | 0;
            return new CompositeBlock(type, value, from, hash, end, [], []);
        }
        addChild(child, pos) {
            if (child.prop(NodeProp.contextHash) != this.hash)
                child = new Tree(child.type, child.children, child.positions, child.length, this.hashProp);
            this.children.push(child);
            this.positions.push(pos);
        }
        toTree(nodeSet, end = this.end) {
            let last = this.children.length - 1;
            if (last >= 0)
                end = Math.max(end, this.positions[last] + this.children[last].length + this.from);
            let tree = new Tree(nodeSet.types[this.type], this.children, this.positions, end - this.from).balance({
                makeTree: (children, positions, length) => new Tree(NodeType.none, children, positions, length, this.hashProp)
            });
            return tree;
        }
    }
    var Type$1;
    (function (Type) {
        Type[Type["Document"] = 1] = "Document";
        Type[Type["CodeBlock"] = 2] = "CodeBlock";
        Type[Type["FencedCode"] = 3] = "FencedCode";
        Type[Type["Blockquote"] = 4] = "Blockquote";
        Type[Type["HorizontalRule"] = 5] = "HorizontalRule";
        Type[Type["BulletList"] = 6] = "BulletList";
        Type[Type["OrderedList"] = 7] = "OrderedList";
        Type[Type["ListItem"] = 8] = "ListItem";
        Type[Type["ATXHeading1"] = 9] = "ATXHeading1";
        Type[Type["ATXHeading2"] = 10] = "ATXHeading2";
        Type[Type["ATXHeading3"] = 11] = "ATXHeading3";
        Type[Type["ATXHeading4"] = 12] = "ATXHeading4";
        Type[Type["ATXHeading5"] = 13] = "ATXHeading5";
        Type[Type["ATXHeading6"] = 14] = "ATXHeading6";
        Type[Type["SetextHeading1"] = 15] = "SetextHeading1";
        Type[Type["SetextHeading2"] = 16] = "SetextHeading2";
        Type[Type["HTMLBlock"] = 17] = "HTMLBlock";
        Type[Type["LinkReference"] = 18] = "LinkReference";
        Type[Type["Paragraph"] = 19] = "Paragraph";
        Type[Type["CommentBlock"] = 20] = "CommentBlock";
        Type[Type["ProcessingInstructionBlock"] = 21] = "ProcessingInstructionBlock";
        // Inline
        Type[Type["Escape"] = 22] = "Escape";
        Type[Type["Entity"] = 23] = "Entity";
        Type[Type["HardBreak"] = 24] = "HardBreak";
        Type[Type["Emphasis"] = 25] = "Emphasis";
        Type[Type["StrongEmphasis"] = 26] = "StrongEmphasis";
        Type[Type["Link"] = 27] = "Link";
        Type[Type["Image"] = 28] = "Image";
        Type[Type["InlineCode"] = 29] = "InlineCode";
        Type[Type["HTMLTag"] = 30] = "HTMLTag";
        Type[Type["Comment"] = 31] = "Comment";
        Type[Type["ProcessingInstruction"] = 32] = "ProcessingInstruction";
        Type[Type["URL"] = 33] = "URL";
        // Smaller tokens
        Type[Type["HeaderMark"] = 34] = "HeaderMark";
        Type[Type["QuoteMark"] = 35] = "QuoteMark";
        Type[Type["ListMark"] = 36] = "ListMark";
        Type[Type["LinkMark"] = 37] = "LinkMark";
        Type[Type["EmphasisMark"] = 38] = "EmphasisMark";
        Type[Type["CodeMark"] = 39] = "CodeMark";
        Type[Type["CodeText"] = 40] = "CodeText";
        Type[Type["CodeInfo"] = 41] = "CodeInfo";
        Type[Type["LinkTitle"] = 42] = "LinkTitle";
        Type[Type["LinkLabel"] = 43] = "LinkLabel";
    })(Type$1 || (Type$1 = {}));
    /// Data structure used to accumulate a block's content during [leaf
    /// block parsing](#BlockParser.leaf).
    class LeafBlock {
        /// @internal
        constructor(
        /// The start position of the block.
        start, 
        /// The block's text content.
        content) {
            this.start = start;
            this.content = content;
            /// @internal
            this.marks = [];
            /// @internal
            this.parsers = [];
        }
    }
    /// Data structure used during block-level per-line parsing.
    class Line {
        constructor() {
            /// The line's full text.
            this.text = "";
            /// The base indent provided by the composite contexts (that have
            /// been handled so far).
            this.baseIndent = 0;
            /// The string position corresponding to the base indent.
            this.basePos = 0;
            /// The number of contexts handled @internal
            this.depth = 0;
            /// Any markers (i.e. block quote markers) parsed for the contexts. @internal
            this.markers = [];
            /// The position of the next non-whitespace character beyond any
            /// list, blockquote, or other composite block markers.
            this.pos = 0;
            /// The column of the next non-whitespace character.
            this.indent = 0;
            /// The character code of the character after `pos`.
            this.next = -1;
        }
        /// @internal
        forward() {
            if (this.basePos > this.pos)
                this.forwardInner();
        }
        /// @internal
        forwardInner() {
            let newPos = this.skipSpace(this.basePos);
            this.indent = this.countIndent(newPos, this.pos, this.indent);
            this.pos = newPos;
            this.next = newPos == this.text.length ? -1 : this.text.charCodeAt(newPos);
        }
        /// Skip whitespace after the given position, return the position of
        /// the next non-space character or the end of the line if there's
        /// only space after `from`.
        skipSpace(from) { return skipSpace(this.text, from); }
        /// @internal
        reset(text) {
            this.text = text;
            this.baseIndent = this.basePos = this.pos = this.indent = 0;
            this.forwardInner();
            this.depth = 1;
            while (this.markers.length)
                this.markers.pop();
        }
        /// Move the line's base position forward to the given position.
        /// This should only be called by composite [block
        /// parsers](#BlockParser.parse) or [markup skipping
        /// functions](#NodeSpec.composite).
        moveBase(to) {
            this.basePos = to;
            this.baseIndent = this.countIndent(to, this.pos, this.indent);
        }
        /// Move the line's base position forward to the given _column_.
        moveBaseColumn(indent) {
            this.baseIndent = indent;
            this.basePos = this.findColumn(indent);
        }
        /// Store a composite-block-level marker. Should be called from
        /// [markup skipping functions](#NodeSpec.composite) when they
        /// consume any non-whitespace characters.
        addMarker(elt) {
            this.markers.push(elt);
        }
        /// Find the column position at `to`, optionally starting at a given
        /// position and column.
        countIndent(to, from = 0, indent = 0) {
            for (let i = from; i < to; i++)
                indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;
            return indent;
        }
        /// Find the position corresponding to the given column.
        findColumn(goal) {
            let i = 0;
            for (let indent = 0; i < this.text.length && indent < goal; i++)
                indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;
            return i;
        }
        /// @internal
        scrub() {
            if (!this.baseIndent)
                return this.text;
            let result = "";
            for (let i = 0; i < this.basePos; i++)
                result += " ";
            return result + this.text.slice(this.basePos);
        }
    }
    function skipForList(bl, cx, line) {
        if (line.pos == line.text.length ||
            (bl != cx.block && line.indent >= cx.stack[line.depth + 1].value + line.baseIndent))
            return true;
        if (line.indent >= line.baseIndent + 4)
            return false;
        let size = (bl.type == Type$1.OrderedList ? isOrderedList : isBulletList)(line, cx, false);
        return size > 0 &&
            (bl.type != Type$1.BulletList || isHorizontalRule(line, cx, false) < 0) &&
            line.text.charCodeAt(line.pos + size - 1) == bl.value;
    }
    const DefaultSkipMarkup = {
        [Type$1.Blockquote](bl, cx, line) {
            if (line.next != 62 /* '>' */)
                return false;
            line.markers.push(elt(Type$1.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1));
            line.moveBase(line.pos + (space$3(line.text.charCodeAt(line.pos + 1)) ? 2 : 1));
            bl.end = cx.lineStart + line.text.length;
            return true;
        },
        [Type$1.ListItem](bl, _cx, line) {
            if (line.indent < line.baseIndent + bl.value && line.next > -1)
                return false;
            line.moveBaseColumn(line.baseIndent + bl.value);
            return true;
        },
        [Type$1.OrderedList]: skipForList,
        [Type$1.BulletList]: skipForList,
        [Type$1.Document]() { return true; }
    };
    function space$3(ch) { return ch == 32 || ch == 9 || ch == 10 || ch == 13; }
    function skipSpace(line, i = 0) {
        while (i < line.length && space$3(line.charCodeAt(i)))
            i++;
        return i;
    }
    function skipSpaceBack(line, i, to) {
        while (i > to && space$3(line.charCodeAt(i - 1)))
            i--;
        return i;
    }
    function isFencedCode(line) {
        if (line.next != 96 && line.next != 126 /* '`~' */)
            return -1;
        let pos = line.pos + 1;
        while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)
            pos++;
        if (pos < line.pos + 3)
            return -1;
        if (line.next == 96)
            for (let i = pos; i < line.text.length; i++)
                if (line.text.charCodeAt(i) == 96)
                    return -1;
        return pos;
    }
    function isBlockquote(line) {
        return line.next != 62 /* '>' */ ? -1 : line.text.charCodeAt(line.pos + 1) == 32 ? 2 : 1;
    }
    function isHorizontalRule(line, cx, breaking) {
        if (line.next != 42 && line.next != 45 && line.next != 95 /* '_-*' */)
            return -1;
        let count = 1;
        for (let pos = line.pos + 1; pos < line.text.length; pos++) {
            let ch = line.text.charCodeAt(pos);
            if (ch == line.next)
                count++;
            else if (!space$3(ch))
                return -1;
        }
        // Setext headers take precedence
        if (breaking && line.next == 45 && isSetextUnderline(line) > -1 && line.depth == cx.stack.length)
            return -1;
        return count < 3 ? -1 : 1;
    }
    function inList$1(cx, type) {
        return cx.block.type == type ||
            cx.stack.length > 1 && cx.stack[cx.stack.length - 2].type == type;
    }
    function isBulletList(line, cx, breaking) {
        return (line.next == 45 || line.next == 43 || line.next == 42 /* '-+*' */) &&
            (line.pos == line.text.length - 1 || space$3(line.text.charCodeAt(line.pos + 1))) &&
            (!breaking || inList$1(cx, Type$1.BulletList) || line.skipSpace(line.pos + 2) < line.text.length) ? 1 : -1;
    }
    function isOrderedList(line, cx, breaking) {
        let pos = line.pos, next = line.next;
        for (;;) {
            if (next >= 48 && next <= 57 /* '0-9' */)
                pos++;
            else
                break;
            if (pos == line.text.length)
                return -1;
            next = line.text.charCodeAt(pos);
        }
        if (pos == line.pos || pos > line.pos + 9 ||
            (next != 46 && next != 41 /* '.)' */) ||
            (pos < line.text.length - 1 && !space$3(line.text.charCodeAt(pos + 1))) ||
            breaking && !inList$1(cx, Type$1.OrderedList) &&
                (line.skipSpace(pos + 1) == line.text.length || pos > line.pos + 1 || line.next != 49 /* '1' */))
            return -1;
        return pos + 1 - line.pos;
    }
    function isAtxHeading(line) {
        if (line.next != 35 /* '#' */)
            return -1;
        let pos = line.pos + 1;
        while (pos < line.text.length && line.text.charCodeAt(pos) == 35)
            pos++;
        if (pos < line.text.length && line.text.charCodeAt(pos) != 32)
            return -1;
        let size = pos - line.pos;
        return size > 6 ? -1 : size;
    }
    function isSetextUnderline(line) {
        if (line.next != 45 && line.next != 61 /* '-=' */ || line.indent >= line.baseIndent + 4)
            return -1;
        let pos = line.pos + 1;
        while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)
            pos++;
        let end = pos;
        while (pos < line.text.length && space$3(line.text.charCodeAt(pos)))
            pos++;
        return pos == line.text.length ? end : -1;
    }
    const EmptyLine = /^[ \t]*$/, CommentEnd = /-->/, ProcessingEnd = /\?>/;
    const HTMLBlockStyle = [
        [/^<(?:script|pre|style)(?:\s|>|$)/i, /<\/(?:script|pre|style)>/i],
        [/^\s*<!--/, CommentEnd],
        [/^\s*<\?/, ProcessingEnd],
        [/^\s*<![A-Z]/, />/],
        [/^\s*<!\[CDATA\[/, /\]\]>/],
        [/^\s*<\/?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\s|\/?>|$)/i, EmptyLine],
        [/^\s*(?:<\/[a-z][\w-]*\s*>|<[a-z][\w-]*(\s+[a-z:_][\w-.]*(?:\s*=\s*(?:[^\s"'=<>`]+|'[^']*'|"[^"]*"))?)*\s*>)\s*$/i, EmptyLine]
    ];
    function isHTMLBlock(line, _cx, breaking) {
        if (line.next != 60 /* '<' */)
            return -1;
        let rest = line.text.slice(line.pos);
        for (let i = 0, e = HTMLBlockStyle.length - (breaking ? 1 : 0); i < e; i++)
            if (HTMLBlockStyle[i][0].test(rest))
                return i;
        return -1;
    }
    function getListIndent(line, pos) {
        let indentAfter = line.countIndent(pos, line.pos, line.indent);
        let indented = line.countIndent(line.skipSpace(pos), pos, indentAfter);
        return indented >= indentAfter + 5 ? indentAfter + 1 : indented;
    }
    function addCodeText(marks, from, to) {
        let last = marks.length - 1;
        if (last >= 0 && marks[last].to == from && marks[last].type == Type$1.CodeText)
            marks[last].to = to;
        else
            marks.push(elt(Type$1.CodeText, from, to));
    }
    // Rules for parsing blocks. A return value of false means the rule
    // doesn't apply here, true means it does. When true is returned and
    // `p.line` has been updated, the rule is assumed to have consumed a
    // leaf block. Otherwise, it is assumed to have opened a context.
    const DefaultBlockParsers = {
        LinkReference: undefined,
        IndentedCode(cx, line) {
            let base = line.baseIndent + 4;
            if (line.indent < base)
                return false;
            let start = line.findColumn(base);
            let from = cx.lineStart + start, to = cx.lineStart + line.text.length;
            let marks = [], pendingMarks = [];
            addCodeText(marks, from, to);
            while (cx.nextLine() && line.depth >= cx.stack.length) {
                if (line.pos == line.text.length) { // Empty
                    addCodeText(pendingMarks, cx.lineStart - 1, cx.lineStart);
                    for (let m of line.markers)
                        pendingMarks.push(m);
                }
                else if (line.indent < base) {
                    break;
                }
                else {
                    if (pendingMarks.length) {
                        for (let m of pendingMarks) {
                            if (m.type == Type$1.CodeText)
                                addCodeText(marks, m.from, m.to);
                            else
                                marks.push(m);
                        }
                        pendingMarks = [];
                    }
                    addCodeText(marks, cx.lineStart - 1, cx.lineStart);
                    for (let m of line.markers)
                        marks.push(m);
                    to = cx.lineStart + line.text.length;
                    let codeStart = cx.lineStart + line.findColumn(line.baseIndent + 4);
                    if (codeStart < to)
                        addCodeText(marks, codeStart, to);
                }
            }
            if (pendingMarks.length) {
                pendingMarks = pendingMarks.filter(m => m.type != Type$1.CodeText);
                if (pendingMarks.length)
                    line.markers = pendingMarks.concat(line.markers);
            }
            cx.addNode(cx.buffer.writeElements(marks, -from).finish(Type$1.CodeBlock, to - from), from);
            return true;
        },
        FencedCode(cx, line) {
            let fenceEnd = isFencedCode(line);
            if (fenceEnd < 0)
                return false;
            let from = cx.lineStart + line.pos, ch = line.next, len = fenceEnd - line.pos;
            let infoFrom = line.skipSpace(fenceEnd), infoTo = skipSpaceBack(line.text, line.text.length, infoFrom);
            let marks = [elt(Type$1.CodeMark, from, from + len)];
            if (infoFrom < infoTo)
                marks.push(elt(Type$1.CodeInfo, cx.lineStart + infoFrom, cx.lineStart + infoTo));
            for (let first = true; cx.nextLine() && line.depth >= cx.stack.length; first = false) {
                let i = line.pos;
                if (line.indent - line.baseIndent < 4)
                    while (i < line.text.length && line.text.charCodeAt(i) == ch)
                        i++;
                if (i - line.pos >= len && line.skipSpace(i) == line.text.length) {
                    for (let m of line.markers)
                        marks.push(m);
                    marks.push(elt(Type$1.CodeMark, cx.lineStart + line.pos, cx.lineStart + i));
                    cx.nextLine();
                    break;
                }
                else {
                    if (!first)
                        addCodeText(marks, cx.lineStart - 1, cx.lineStart);
                    for (let m of line.markers)
                        marks.push(m);
                    let textStart = cx.lineStart + line.basePos, textEnd = cx.lineStart + line.text.length;
                    if (textStart < textEnd)
                        addCodeText(marks, textStart, textEnd);
                }
            }
            cx.addNode(cx.buffer.writeElements(marks, -from)
                .finish(Type$1.FencedCode, cx.prevLineEnd() - from), from);
            return true;
        },
        Blockquote(cx, line) {
            let size = isBlockquote(line);
            if (size < 0)
                return false;
            cx.startContext(Type$1.Blockquote, line.pos);
            cx.addNode(Type$1.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1);
            line.moveBase(line.pos + size);
            return null;
        },
        HorizontalRule(cx, line) {
            if (isHorizontalRule(line, cx, false) < 0)
                return false;
            let from = cx.lineStart + line.pos;
            cx.nextLine();
            cx.addNode(Type$1.HorizontalRule, from);
            return true;
        },
        BulletList(cx, line) {
            let size = isBulletList(line, cx, false);
            if (size < 0)
                return false;
            if (cx.block.type != Type$1.BulletList)
                cx.startContext(Type$1.BulletList, line.basePos, line.next);
            let newBase = getListIndent(line, line.pos + 1);
            cx.startContext(Type$1.ListItem, line.basePos, newBase - line.baseIndent);
            cx.addNode(Type$1.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);
            line.moveBaseColumn(newBase);
            return null;
        },
        OrderedList(cx, line) {
            let size = isOrderedList(line, cx, false);
            if (size < 0)
                return false;
            if (cx.block.type != Type$1.OrderedList)
                cx.startContext(Type$1.OrderedList, line.basePos, line.text.charCodeAt(line.pos + size - 1));
            let newBase = getListIndent(line, line.pos + size);
            cx.startContext(Type$1.ListItem, line.basePos, newBase - line.baseIndent);
            cx.addNode(Type$1.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);
            line.moveBaseColumn(newBase);
            return null;
        },
        ATXHeading(cx, line) {
            let size = isAtxHeading(line);
            if (size < 0)
                return false;
            let off = line.pos, from = cx.lineStart + off;
            let endOfSpace = skipSpaceBack(line.text, line.text.length, off), after = endOfSpace;
            while (after > off && line.text.charCodeAt(after - 1) == line.next)
                after--;
            if (after == endOfSpace || after == off || !space$3(line.text.charCodeAt(after - 1)))
                after = line.text.length;
            let buf = cx.buffer
                .write(Type$1.HeaderMark, 0, size)
                .writeElements(cx.parser.parseInline(line.text.slice(off + size + 1, after), from + size + 1), -from);
            if (after < line.text.length)
                buf.write(Type$1.HeaderMark, after - off, endOfSpace - off);
            let node = buf.finish(Type$1.ATXHeading1 - 1 + size, line.text.length - off);
            cx.nextLine();
            cx.addNode(node, from);
            return true;
        },
        HTMLBlock(cx, line) {
            let type = isHTMLBlock(line, cx, false);
            if (type < 0)
                return false;
            let from = cx.lineStart + line.pos, end = HTMLBlockStyle[type][1];
            let marks = [], trailing = end != EmptyLine;
            while (!end.test(line.text) && cx.nextLine()) {
                if (line.depth < cx.stack.length) {
                    trailing = false;
                    break;
                }
                for (let m of line.markers)
                    marks.push(m);
            }
            if (trailing)
                cx.nextLine();
            let nodeType = end == CommentEnd ? Type$1.CommentBlock : end == ProcessingEnd ? Type$1.ProcessingInstructionBlock : Type$1.HTMLBlock;
            let to = cx.prevLineEnd();
            cx.addNode(cx.buffer.writeElements(marks, -from).finish(nodeType, to - from), from);
            return true;
        },
        SetextHeading: undefined // Specifies relative precedence for block-continue function
    };
    // This implements a state machine that incrementally parses link references. At each
    // next line, it looks ahead to see if the line continues the reference or not. If it
    // doesn't and a valid link is available ending before that line, it finishes that.
    // Similarly, on `finish` (when the leaf is terminated by external circumstances), it
    // creates a link reference if there's a valid reference up to the current point.
    class LinkReferenceParser {
        constructor(leaf) {
            this.stage = 0 /* Start */;
            this.elts = [];
            this.pos = 0;
            this.start = leaf.start;
            this.advance(leaf.content);
        }
        nextLine(cx, line, leaf) {
            if (this.stage == -1 /* Failed */)
                return false;
            let content = leaf.content + "\n" + line.scrub();
            let finish = this.advance(content);
            if (finish > -1 && finish < content.length)
                return this.complete(cx, leaf, finish);
            return false;
        }
        finish(cx, leaf) {
            if ((this.stage == 2 /* Link */ || this.stage == 3 /* Title */) && skipSpace(leaf.content, this.pos) == leaf.content.length)
                return this.complete(cx, leaf, leaf.content.length);
            return false;
        }
        complete(cx, leaf, len) {
            cx.addLeafElement(leaf, elt(Type$1.LinkReference, this.start, this.start + len, this.elts));
            return true;
        }
        nextStage(elt) {
            if (elt) {
                this.pos = elt.to - this.start;
                this.elts.push(elt);
                this.stage++;
                return true;
            }
            if (elt === false)
                this.stage = -1 /* Failed */;
            return false;
        }
        advance(content) {
            for (;;) {
                if (this.stage == -1 /* Failed */) {
                    return -1;
                }
                else if (this.stage == 0 /* Start */) {
                    if (!this.nextStage(parseLinkLabel(content, this.pos, this.start, true)))
                        return -1;
                    if (content.charCodeAt(this.pos) != 58 /* ':' */)
                        return this.stage = -1 /* Failed */;
                    this.elts.push(elt(Type$1.LinkMark, this.pos + this.start, this.pos + this.start + 1));
                    this.pos++;
                }
                else if (this.stage == 1 /* Label */) {
                    if (!this.nextStage(parseURL(content, skipSpace(content, this.pos), this.start)))
                        return -1;
                }
                else if (this.stage == 2 /* Link */) {
                    let skip = skipSpace(content, this.pos), end = 0;
                    if (skip > this.pos) {
                        let title = parseLinkTitle(content, skip, this.start);
                        if (title) {
                            let titleEnd = lineEnd(content, title.to - this.start);
                            if (titleEnd > 0) {
                                this.nextStage(title);
                                end = titleEnd;
                            }
                        }
                    }
                    if (!end)
                        end = lineEnd(content, this.pos);
                    return end > 0 && end < content.length ? end : -1;
                }
                else { // RefStage.Title
                    return lineEnd(content, this.pos);
                }
            }
        }
    }
    function lineEnd(text, pos) {
        for (; pos < text.length; pos++) {
            let next = text.charCodeAt(pos);
            if (next == 10)
                break;
            if (!space$3(next))
                return -1;
        }
        return pos;
    }
    class SetextHeadingParser {
        nextLine(cx, line, leaf) {
            let underline = line.depth < cx.stack.length ? -1 : isSetextUnderline(line);
            let next = line.next;
            if (underline < 0)
                return false;
            let underlineMark = elt(Type$1.HeaderMark, cx.lineStart + line.pos, cx.lineStart + underline);
            cx.nextLine();
            cx.addLeafElement(leaf, elt(next == 61 ? Type$1.SetextHeading1 : Type$1.SetextHeading2, leaf.start, cx.prevLineEnd(), [
                ...cx.parser.parseInline(leaf.content, leaf.start),
                underlineMark
            ]));
            return true;
        }
        finish() {
            return false;
        }
    }
    const DefaultLeafBlocks = {
        LinkReference(_, leaf) { return leaf.content.charCodeAt(0) == 91 /* '[' */ ? new LinkReferenceParser(leaf) : null; },
        SetextHeading() { return new SetextHeadingParser; }
    };
    const DefaultEndLeaf = [
        (_, line) => isAtxHeading(line) >= 0,
        (_, line) => isFencedCode(line) >= 0,
        (_, line) => isBlockquote(line) >= 0,
        (p, line) => isBulletList(line, p, true) >= 0,
        (p, line) => isOrderedList(line, p, true) >= 0,
        (p, line) => isHorizontalRule(line, p, true) >= 0,
        (p, line) => isHTMLBlock(line, p, true) >= 0
    ];
    /// Block-level parsing functions get access to this context object.
    class BlockContext {
        /// @internal
        constructor(
        /// The parser configuration used.
        parser, 
        /// @internal
        input, fragments, 
        /// @internal
        ranges) {
            this.parser = parser;
            this.input = input;
            this.ranges = ranges;
            this.line = new Line();
            this.atEnd = false;
            /// @internal
            this.dontInject = new Set;
            this.stoppedAt = null;
            /// The range index that absoluteLineStart points into @internal
            this.rangeI = 0;
            this.to = ranges[ranges.length - 1].to;
            this.lineStart = this.absoluteLineStart = this.absoluteLineEnd = ranges[0].from;
            this.block = CompositeBlock.create(Type$1.Document, 0, this.lineStart, 0, 0);
            this.stack = [this.block];
            this.fragments = fragments.length ? new FragmentCursor$1(fragments, input) : null;
            this.readLine();
        }
        get parsedPos() {
            return this.absoluteLineStart;
        }
        advance() {
            if (this.stoppedAt != null && this.absoluteLineStart > this.stoppedAt)
                return this.finish();
            let { line } = this;
            for (;;) {
                while (line.depth < this.stack.length)
                    this.finishContext();
                for (let mark of line.markers)
                    this.addNode(mark.type, mark.from, mark.to);
                if (line.pos < line.text.length)
                    break;
                // Empty line
                if (!this.nextLine())
                    return this.finish();
            }
            if (this.fragments && this.reuseFragment(line.basePos))
                return null;
            start: for (;;) {
                for (let type of this.parser.blockParsers)
                    if (type) {
                        let result = type(this, line);
                        if (result != false) {
                            if (result == true)
                                return null;
                            line.forward();
                            continue start;
                        }
                    }
                break;
            }
            let leaf = new LeafBlock(this.lineStart + line.pos, line.text.slice(line.pos));
            for (let parse of this.parser.leafBlockParsers)
                if (parse) {
                    let parser = parse(this, leaf);
                    if (parser)
                        leaf.parsers.push(parser);
                }
            lines: while (this.nextLine()) {
                if (line.pos == line.text.length)
                    break;
                if (line.indent < line.baseIndent + 4) {
                    for (let stop of parser$a.endLeafBlock)
                        if (stop(this, line))
                            break lines;
                }
                for (let parser of leaf.parsers)
                    if (parser.nextLine(this, line, leaf))
                        return null;
                leaf.content += "\n" + line.scrub();
                for (let m of line.markers)
                    leaf.marks.push(m);
            }
            this.finishLeaf(leaf);
            return null;
        }
        stopAt(pos) {
            if (this.stoppedAt != null && this.stoppedAt < pos)
                throw new RangeError("Can't move stoppedAt forward");
            this.stoppedAt = pos;
        }
        reuseFragment(start) {
            if (!this.fragments.moveTo(this.absoluteLineStart + start, this.absoluteLineStart) ||
                !this.fragments.matches(this.block.hash))
                return false;
            let taken = this.fragments.takeNodes(this);
            if (!taken)
                return false;
            let withoutGaps = taken, end = this.absoluteLineStart + taken;
            for (let i = 1; i < this.ranges.length; i++) {
                let gapFrom = this.ranges[i - 1].to, gapTo = this.ranges[i].from;
                if (gapFrom >= this.lineStart && gapTo < end)
                    withoutGaps -= gapTo - gapFrom;
            }
            this.lineStart += withoutGaps;
            this.absoluteLineStart += taken;
            this.moveRangeI();
            if (this.absoluteLineStart < this.to) {
                this.lineStart++;
                this.absoluteLineStart++;
                this.readLine();
            }
            else {
                this.atEnd = true;
                this.readLine();
            }
            return true;
        }
        /// Move to the next input line. This should only be called by
        /// (non-composite) [block parsers](#BlockParser.parse) that consume
        /// the line directly, or leaf block parser
        /// [`nextLine`](#LeafBlockParser.nextLine) methods when they
        /// consume the current line (and return true).
        nextLine() {
            this.lineStart += this.line.text.length;
            if (this.absoluteLineEnd >= this.to) {
                this.absoluteLineStart = this.absoluteLineEnd;
                this.atEnd = true;
                this.readLine();
                return false;
            }
            else {
                this.lineStart++;
                this.absoluteLineStart = this.absoluteLineEnd + 1;
                this.moveRangeI();
                this.readLine();
                return true;
            }
        }
        moveRangeI() {
            while (this.rangeI < this.ranges.length - 1 && this.absoluteLineStart >= this.ranges[this.rangeI].to)
                this.rangeI++;
        }
        /// @internal
        readLine() {
            let { line } = this, text, end = this.absoluteLineStart;
            if (this.atEnd) {
                text = "";
            }
            else {
                text = this.lineChunkAt(end);
                end += text.length;
                if (this.ranges.length > 1) {
                    let textOffset = this.absoluteLineStart, rangeI = this.rangeI;
                    while (this.ranges[rangeI].to < end) {
                        rangeI++;
                        let nextFrom = this.ranges[rangeI].from;
                        let after = this.lineChunkAt(nextFrom);
                        end = nextFrom + after.length;
                        text = text.slice(0, this.ranges[rangeI - 1].to - textOffset) + after;
                        textOffset = end - text.length;
                    }
                }
            }
            this.absoluteLineEnd = end;
            line.reset(text);
            for (; line.depth < this.stack.length; line.depth++) {
                let cx = this.stack[line.depth], handler = this.parser.skipContextMarkup[cx.type];
                if (!handler)
                    throw new Error("Unhandled block context " + Type$1[cx.type]);
                if (!handler(cx, this, line))
                    break;
                line.forward();
            }
        }
        lineChunkAt(pos) {
            let next = this.input.chunk(pos), text;
            if (!this.input.lineChunks) {
                let eol = next.indexOf("\n");
                text = eol < 0 ? next : next.slice(0, eol);
            }
            else {
                text = next == "\n" ? "" : next;
            }
            return pos + text.length > this.to ? text.slice(0, this.to - pos) : text;
        }
        /// The end position of the previous line.
        prevLineEnd() { return this.atEnd ? this.lineStart : this.lineStart - 1; }
        /// @internal
        startContext(type, start, value = 0) {
            this.block = CompositeBlock.create(type, value, this.lineStart + start, this.block.hash, this.lineStart + this.line.text.length);
            this.stack.push(this.block);
        }
        /// Start a composite block. Should only be called from [block
        /// parser functions](#BlockParser.parse) that return null.
        startComposite(type, start, value = 0) {
            this.startContext(this.parser.getNodeType(type), start, value);
        }
        /// @internal
        addNode(block, from, to) {
            if (typeof block == "number")
                block = new Tree(this.parser.nodeSet.types[block], none$1, none$1, (to !== null && to !== void 0 ? to : this.prevLineEnd()) - from);
            this.block.addChild(block, from - this.block.from);
        }
        /// Add a block element. Can be called by [block
        /// parsers](#BlockParser.parse).
        addElement(elt) {
            this.block.addChild(elt.toTree(this.parser.nodeSet), elt.from - this.block.from);
        }
        /// Add a block element from a [leaf parser](#LeafBlockParser). This
        /// makes sure any extra composite block markup (such as blockquote
        /// markers) inside the block are also added to the syntax tree.
        addLeafElement(leaf, elt) {
            this.addNode(this.buffer
                .writeElements(injectMarks(elt.children, leaf.marks), -elt.from)
                .finish(elt.type, elt.to - elt.from), elt.from);
        }
        /// @internal
        finishContext() {
            let cx = this.stack.pop();
            let top = this.stack[this.stack.length - 1];
            top.addChild(cx.toTree(this.parser.nodeSet), cx.from - top.from);
            this.block = top;
        }
        finish() {
            while (this.stack.length > 1)
                this.finishContext();
            return this.addGaps(this.block.toTree(this.parser.nodeSet, this.lineStart));
        }
        addGaps(tree) {
            return this.ranges.length > 1 ? injectGaps(this.ranges, 0, tree.topNode, this.ranges[0].from, this.dontInject) : tree;
        }
        /// @internal
        finishLeaf(leaf) {
            for (let parser of leaf.parsers)
                if (parser.finish(this, leaf))
                    return;
            let inline = injectMarks(this.parser.parseInline(leaf.content, leaf.start), leaf.marks);
            this.addNode(this.buffer
                .writeElements(inline, -leaf.start)
                .finish(Type$1.Paragraph, leaf.content.length), leaf.start);
        }
        elt(type, from, to, children) {
            if (typeof type == "string")
                return elt(this.parser.getNodeType(type), from, to, children);
            return new TreeElement(type, from);
        }
        /// @internal
        get buffer() { return new Buffer(this.parser.nodeSet); }
    }
    function injectGaps(ranges, rangeI, tree, offset, dont) {
        if (dont.has(tree.tree))
            return tree.tree;
        let rangeEnd = ranges[rangeI].to;
        let children = [], positions = [], start = tree.from + offset;
        function movePastNext(upto, inclusive) {
            while (inclusive ? upto >= rangeEnd : upto > rangeEnd) {
                let size = ranges[rangeI + 1].from - rangeEnd;
                offset += size;
                upto += size;
                rangeI++;
                rangeEnd = ranges[rangeI].to;
            }
        }
        for (let ch = tree.firstChild; ch; ch = ch.nextSibling) {
            movePastNext(ch.from + offset, true);
            let from = ch.from + offset, node;
            if (ch.to + offset > rangeEnd) {
                node = injectGaps(ranges, rangeI, ch, offset, dont);
                movePastNext(ch.to + offset, false);
            }
            else {
                node = ch.toTree();
            }
            children.push(node);
            positions.push(from - start);
        }
        movePastNext(tree.to + offset, false);
        return new Tree(tree.type, children, positions, tree.to + offset - start, tree.tree ? tree.tree.propValues : undefined);
    }
    /// A Markdown parser configuration.
    class MarkdownParser extends Parser {
        /// @internal
        constructor(
        /// The parser's syntax [node
        /// types](https://lezer.codemirror.net/docs/ref/#common.NodeSet).
        nodeSet, 
        /// @internal
        blockParsers, 
        /// @internal
        leafBlockParsers, 
        /// @internal
        blockNames, 
        /// @internal
        endLeafBlock, 
        /// @internal
        skipContextMarkup, 
        /// @internal
        inlineParsers, 
        /// @internal
        inlineNames, 
        /// @internal
        wrappers) {
            super();
            this.nodeSet = nodeSet;
            this.blockParsers = blockParsers;
            this.leafBlockParsers = leafBlockParsers;
            this.blockNames = blockNames;
            this.endLeafBlock = endLeafBlock;
            this.skipContextMarkup = skipContextMarkup;
            this.inlineParsers = inlineParsers;
            this.inlineNames = inlineNames;
            this.wrappers = wrappers;
            /// @internal
            this.nodeTypes = Object.create(null);
            for (let t of nodeSet.types)
                this.nodeTypes[t.name] = t.id;
        }
        createParse(input, fragments, ranges) {
            let parse = new BlockContext(this, input, fragments, ranges);
            for (let w of this.wrappers)
                parse = w(parse, input, fragments, ranges);
            return parse;
        }
        /// Reconfigure the parser.
        configure(spec) {
            let config = resolveConfig(spec);
            if (!config)
                return this;
            let { nodeSet, skipContextMarkup } = this;
            let blockParsers = this.blockParsers.slice(), leafBlockParsers = this.leafBlockParsers.slice(), blockNames = this.blockNames.slice(), inlineParsers = this.inlineParsers.slice(), inlineNames = this.inlineNames.slice(), endLeafBlock = this.endLeafBlock.slice(), wrappers = this.wrappers;
            if (nonEmpty(config.defineNodes)) {
                skipContextMarkup = Object.assign({}, skipContextMarkup);
                let nodeTypes = nodeSet.types.slice();
                for (let s of config.defineNodes) {
                    let { name, block, composite } = typeof s == "string" ? { name: s } : s;
                    if (nodeTypes.some(t => t.name == name))
                        continue;
                    if (composite)
                        skipContextMarkup[nodeTypes.length] =
                            (bl, cx, line) => composite(cx, line, bl.value);
                    let id = nodeTypes.length;
                    let group = composite ? ["Block", "BlockContext"] : !block ? undefined
                        : id >= Type$1.ATXHeading1 && id <= Type$1.SetextHeading2 ? ["Block", "LeafBlock", "Heading"] : ["Block", "LeafBlock"];
                    nodeTypes.push(NodeType.define({
                        id,
                        name,
                        props: group && [[NodeProp.group, group]]
                    }));
                }
                nodeSet = new NodeSet(nodeTypes);
            }
            if (nonEmpty(config.props))
                nodeSet = nodeSet.extend(...config.props);
            if (nonEmpty(config.remove)) {
                for (let rm of config.remove) {
                    let block = this.blockNames.indexOf(rm), inline = this.inlineNames.indexOf(rm);
                    if (block > -1)
                        blockParsers[block] = leafBlockParsers[block] = undefined;
                    if (inline > -1)
                        inlineParsers[inline] = undefined;
                }
            }
            if (nonEmpty(config.parseBlock)) {
                for (let spec of config.parseBlock) {
                    let found = blockNames.indexOf(spec.name);
                    if (found > -1) {
                        blockParsers[found] = spec.parse;
                        leafBlockParsers[found] = spec.leaf;
                    }
                    else {
                        let pos = spec.before ? findName(blockNames, spec.before)
                            : spec.after ? findName(blockNames, spec.after) + 1 : blockNames.length - 1;
                        blockParsers.splice(pos, 0, spec.parse);
                        leafBlockParsers.splice(pos, 0, spec.leaf);
                        blockNames.splice(pos, 0, spec.name);
                    }
                    if (spec.endLeaf)
                        endLeafBlock.push(spec.endLeaf);
                }
            }
            if (nonEmpty(config.parseInline)) {
                for (let spec of config.parseInline) {
                    let found = inlineNames.indexOf(spec.name);
                    if (found > -1) {
                        inlineParsers[found] = spec.parse;
                    }
                    else {
                        let pos = spec.before ? findName(inlineNames, spec.before)
                            : spec.after ? findName(inlineNames, spec.after) + 1 : inlineNames.length - 1;
                        inlineParsers.splice(pos, 0, spec.parse);
                        inlineNames.splice(pos, 0, spec.name);
                    }
                }
            }
            if (config.wrap)
                wrappers = wrappers.concat(config.wrap);
            return new MarkdownParser(nodeSet, blockParsers, leafBlockParsers, blockNames, endLeafBlock, skipContextMarkup, inlineParsers, inlineNames, wrappers);
        }
        /// @internal
        getNodeType(name) {
            let found = this.nodeTypes[name];
            if (found == null)
                throw new RangeError(`Unknown node type '${name}'`);
            return found;
        }
        /// Parse the given piece of inline text at the given offset,
        /// returning an array of [`Element`](#Element) objects representing
        /// the inline content.
        parseInline(text, offset) {
            let cx = new InlineContext(this, text, offset);
            outer: for (let pos = offset; pos < cx.end;) {
                let next = cx.char(pos);
                for (let token of this.inlineParsers)
                    if (token) {
                        let result = token(cx, next, pos);
                        if (result >= 0) {
                            pos = result;
                            continue outer;
                        }
                    }
                pos++;
            }
            return cx.resolveMarkers(0);
        }
    }
    function nonEmpty(a) {
        return a != null && a.length > 0;
    }
    function resolveConfig(spec) {
        if (!Array.isArray(spec))
            return spec;
        if (spec.length == 0)
            return null;
        let conf = resolveConfig(spec[0]);
        if (spec.length == 1)
            return conf;
        let rest = resolveConfig(spec.slice(1));
        if (!rest || !conf)
            return conf || rest;
        let conc = (a, b) => (a || none$1).concat(b || none$1);
        return { props: conc(conf.props, rest.props),
            defineNodes: conc(conf.defineNodes, rest.defineNodes),
            parseBlock: conc(conf.parseBlock, rest.parseBlock),
            parseInline: conc(conf.parseInline, rest.parseInline),
            remove: conc(conf.remove, rest.remove) };
    }
    function findName(names, name) {
        let found = names.indexOf(name);
        if (found < 0)
            throw new RangeError(`Position specified relative to unknown parser ${name}`);
        return found;
    }
    let nodeTypes = [NodeType.none];
    for (let i = 1, name; name = Type$1[i]; i++) {
        nodeTypes[i] = NodeType.define({
            id: i,
            name,
            props: i >= Type$1.Escape ? [] : [[NodeProp.group, i in DefaultSkipMarkup ? ["Block", "BlockContext"] : ["Block", "LeafBlock"]]]
        });
    }
    const none$1 = [];
    class Buffer {
        constructor(nodeSet) {
            this.nodeSet = nodeSet;
            this.content = [];
            this.nodes = [];
        }
        write(type, from, to, children = 0) {
            this.content.push(type, from, to, 4 + children * 4);
            return this;
        }
        writeElements(elts, offset = 0) {
            for (let e of elts)
                e.writeTo(this, offset);
            return this;
        }
        finish(type, length) {
            return Tree.build({
                buffer: this.content,
                nodeSet: this.nodeSet,
                reused: this.nodes,
                topID: type,
                length
            });
        }
    }
    /// Elements are used to compose syntax nodes during parsing.
    class Element$3 {
        /// @internal
        constructor(
        /// The node's
        /// [id](https://lezer.codemirror.net/docs/ref/#common.NodeType.id).
        type, 
        /// The start of the node, as an offset from the start of the document.
        from, 
        /// The end of the node.
        to, 
        /// The node's child nodes @internal
        children = none$1) {
            this.type = type;
            this.from = from;
            this.to = to;
            this.children = children;
        }
        /// @internal
        writeTo(buf, offset) {
            let startOff = buf.content.length;
            buf.writeElements(this.children, offset);
            buf.content.push(this.type, this.from + offset, this.to + offset, buf.content.length + 4 - startOff);
        }
        /// @internal
        toTree(nodeSet) {
            return new Buffer(nodeSet).writeElements(this.children, -this.from).finish(this.type, this.to - this.from);
        }
    }
    class TreeElement {
        constructor(tree, from) {
            this.tree = tree;
            this.from = from;
        }
        get to() { return this.from + this.tree.length; }
        get type() { return this.tree.type.id; }
        get children() { return none$1; }
        writeTo(buf, offset) {
            buf.nodes.push(this.tree);
            buf.content.push(buf.nodes.length - 1, this.from + offset, this.to + offset, -1);
        }
        toTree() { return this.tree; }
    }
    function elt(type, from, to, children) {
        return new Element$3(type, from, to, children);
    }
    const EmphasisUnderscore = { resolve: "Emphasis", mark: "EmphasisMark" };
    const EmphasisAsterisk = { resolve: "Emphasis", mark: "EmphasisMark" };
    const LinkStart = {}, ImageStart = {};
    class InlineDelimiter {
        constructor(type, from, to, side) {
            this.type = type;
            this.from = from;
            this.to = to;
            this.side = side;
        }
    }
    const Escapable = "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
    let Punctuation$1 = /[!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~\xA1\u2010-\u2027]/;
    try {
        Punctuation$1 = /[\p{Pc}|\p{Pd}|\p{Pe}|\p{Pf}|\p{Pi}|\p{Po}|\p{Ps}]/u;
    }
    catch (_) { }
    const DefaultInline = {
        Escape(cx, next, start) {
            if (next != 92 /* '\\' */ || start == cx.end - 1)
                return -1;
            let escaped = cx.char(start + 1);
            for (let i = 0; i < Escapable.length; i++)
                if (Escapable.charCodeAt(i) == escaped)
                    return cx.append(elt(Type$1.Escape, start, start + 2));
            return -1;
        },
        Entity(cx, next, start) {
            if (next != 38 /* '&' */)
                return -1;
            let m = /^(?:#\d+|#x[a-f\d]+|\w+);/i.exec(cx.slice(start + 1, start + 31));
            return m ? cx.append(elt(Type$1.Entity, start, start + 1 + m[0].length)) : -1;
        },
        InlineCode(cx, next, start) {
            if (next != 96 /* '`' */ || start && cx.char(start - 1) == 96)
                return -1;
            let pos = start + 1;
            while (pos < cx.end && cx.char(pos) == 96)
                pos++;
            let size = pos - start, curSize = 0;
            for (; pos < cx.end; pos++) {
                if (cx.char(pos) == 96) {
                    curSize++;
                    if (curSize == size && cx.char(pos + 1) != 96)
                        return cx.append(elt(Type$1.InlineCode, start, pos + 1, [
                            elt(Type$1.CodeMark, start, start + size),
                            elt(Type$1.CodeMark, pos + 1 - size, pos + 1)
                        ]));
                }
                else {
                    curSize = 0;
                }
            }
            return -1;
        },
        HTMLTag(cx, next, start) {
            if (next != 60 /* '<' */ || start == cx.end - 1)
                return -1;
            let after = cx.slice(start + 1, cx.end);
            let url = /^(?:[a-z][-\w+.]+:[^\s>]+|[a-z\d.!#$%&'*+/=?^_`{|}~-]+@[a-z\d](?:[a-z\d-]{0,61}[a-z\d])?(?:\.[a-z\d](?:[a-z\d-]{0,61}[a-z\d])?)*)>/i.exec(after);
            if (url)
                return cx.append(elt(Type$1.URL, start, start + 1 + url[0].length));
            let comment = /^!--[^>](?:-[^-]|[^-])*?-->/i.exec(after);
            if (comment)
                return cx.append(elt(Type$1.Comment, start, start + 1 + comment[0].length));
            let procInst = /^\?[^]*?\?>/.exec(after);
            if (procInst)
                return cx.append(elt(Type$1.ProcessingInstruction, start, start + 1 + procInst[0].length));
            let m = /^(?:![A-Z][^]*?>|!\[CDATA\[[^]*?\]\]>|\/\s*[a-zA-Z][\w-]*\s*>|\s*[a-zA-Z][\w-]*(\s+[a-zA-Z:_][\w-.:]*(?:\s*=\s*(?:[^\s"'=<>`]+|'[^']*'|"[^"]*"))?)*\s*(\/\s*)?>)/.exec(after);
            if (!m)
                return -1;
            return cx.append(elt(Type$1.HTMLTag, start, start + 1 + m[0].length));
        },
        Emphasis(cx, next, start) {
            if (next != 95 && next != 42)
                return -1;
            let pos = start + 1;
            while (cx.char(pos) == next)
                pos++;
            let before = cx.slice(start - 1, start), after = cx.slice(pos, pos + 1);
            let pBefore = Punctuation$1.test(before), pAfter = Punctuation$1.test(after);
            let sBefore = /\s|^$/.test(before), sAfter = /\s|^$/.test(after);
            let leftFlanking = !sAfter && (!pAfter || sBefore || pBefore);
            let rightFlanking = !sBefore && (!pBefore || sAfter || pAfter);
            let canOpen = leftFlanking && (next == 42 || !rightFlanking || pBefore);
            let canClose = rightFlanking && (next == 42 || !leftFlanking || pAfter);
            return cx.append(new InlineDelimiter(next == 95 ? EmphasisUnderscore : EmphasisAsterisk, start, pos, (canOpen ? 1 /* Open */ : 0) | (canClose ? 2 /* Close */ : 0)));
        },
        HardBreak(cx, next, start) {
            if (next == 92 /* '\\' */ && cx.char(start + 1) == 10 /* '\n' */)
                return cx.append(elt(Type$1.HardBreak, start, start + 2));
            if (next == 32) {
                let pos = start + 1;
                while (cx.char(pos) == 32)
                    pos++;
                if (cx.char(pos) == 10 && pos >= start + 2)
                    return cx.append(elt(Type$1.HardBreak, start, pos + 1));
            }
            return -1;
        },
        Link(cx, next, start) {
            return next == 91 /* '[' */ ? cx.append(new InlineDelimiter(LinkStart, start, start + 1, 1 /* Open */)) : -1;
        },
        Image(cx, next, start) {
            return next == 33 /* '!' */ && cx.char(start + 1) == 91 /* '[' */
                ? cx.append(new InlineDelimiter(ImageStart, start, start + 2, 1 /* Open */)) : -1;
        },
        LinkEnd(cx, next, start) {
            if (next != 93 /* ']' */)
                return -1;
            // Scanning back to the next link/image start marker
            for (let i = cx.parts.length - 1; i >= 0; i--) {
                let part = cx.parts[i];
                if (part instanceof InlineDelimiter && (part.type == LinkStart || part.type == ImageStart)) {
                    // If this one has been set invalid (because it would produce
                    // a nested link) or there's no valid link here ignore both.
                    if (!part.side || cx.skipSpace(part.to) == start && !/[(\[]/.test(cx.slice(start + 1, start + 2))) {
                        cx.parts[i] = null;
                        return -1;
                    }
                    // Finish the content and replace the entire range in
                    // this.parts with the link/image node.
                    let content = cx.takeContent(i);
                    let link = cx.parts[i] = finishLink(cx, content, part.type == LinkStart ? Type$1.Link : Type$1.Image, part.from, start + 1);
                    // Set any open-link markers before this link to invalid.
                    if (part.type == LinkStart)
                        for (let j = 0; j < i; j++) {
                            let p = cx.parts[j];
                            if (p instanceof InlineDelimiter && p.type == LinkStart)
                                p.side = 0;
                        }
                    return link.to;
                }
            }
            return -1;
        }
    };
    function finishLink(cx, content, type, start, startPos) {
        let { text } = cx, next = cx.char(startPos), endPos = startPos;
        content.unshift(elt(Type$1.LinkMark, start, start + (type == Type$1.Image ? 2 : 1)));
        content.push(elt(Type$1.LinkMark, startPos - 1, startPos));
        if (next == 40 /* '(' */) {
            let pos = cx.skipSpace(startPos + 1);
            let dest = parseURL(text, pos - cx.offset, cx.offset), title;
            if (dest) {
                pos = cx.skipSpace(dest.to);
                title = parseLinkTitle(text, pos - cx.offset, cx.offset);
                if (title)
                    pos = cx.skipSpace(title.to);
            }
            if (cx.char(pos) == 41 /* ')' */) {
                content.push(elt(Type$1.LinkMark, startPos, startPos + 1));
                endPos = pos + 1;
                if (dest)
                    content.push(dest);
                if (title)
                    content.push(title);
                content.push(elt(Type$1.LinkMark, pos, endPos));
            }
        }
        else if (next == 91 /* '[' */) {
            let label = parseLinkLabel(text, startPos - cx.offset, cx.offset, false);
            if (label) {
                content.push(label);
                endPos = label.to;
            }
        }
        return elt(type, start, endPos, content);
    }
    // These return `null` when falling off the end of the input, `false`
    // when parsing fails otherwise (for use in the incremental link
    // reference parser).
    function parseURL(text, start, offset) {
        let next = text.charCodeAt(start);
        if (next == 60 /* '<' */) {
            for (let pos = start + 1; pos < text.length; pos++) {
                let ch = text.charCodeAt(pos);
                if (ch == 62 /* '>' */)
                    return elt(Type$1.URL, start + offset, pos + 1 + offset);
                if (ch == 60 || ch == 10 /* '<\n' */)
                    return false;
            }
            return null;
        }
        else {
            let depth = 0, pos = start;
            for (let escaped = false; pos < text.length; pos++) {
                let ch = text.charCodeAt(pos);
                if (space$3(ch)) {
                    break;
                }
                else if (escaped) {
                    escaped = false;
                }
                else if (ch == 40 /* '(' */) {
                    depth++;
                }
                else if (ch == 41 /* ')' */) {
                    if (!depth)
                        break;
                    depth--;
                }
                else if (ch == 92 /* '\\' */) {
                    escaped = true;
                }
            }
            return pos > start ? elt(Type$1.URL, start + offset, pos + offset) : pos == text.length ? null : false;
        }
    }
    function parseLinkTitle(text, start, offset) {
        let next = text.charCodeAt(start);
        if (next != 39 && next != 34 && next != 40 /* '"\'(' */)
            return false;
        let end = next == 40 ? 41 : next;
        for (let pos = start + 1, escaped = false; pos < text.length; pos++) {
            let ch = text.charCodeAt(pos);
            if (escaped)
                escaped = false;
            else if (ch == end)
                return elt(Type$1.LinkTitle, start + offset, pos + 1 + offset);
            else if (ch == 92 /* '\\' */)
                escaped = true;
        }
        return null;
    }
    function parseLinkLabel(text, start, offset, requireNonWS) {
        for (let escaped = false, pos = start + 1, end = Math.min(text.length, pos + 999); pos < end; pos++) {
            let ch = text.charCodeAt(pos);
            if (escaped)
                escaped = false;
            else if (ch == 93 /* ']' */)
                return requireNonWS ? false : elt(Type$1.LinkLabel, start + offset, pos + 1 + offset);
            else {
                if (requireNonWS && !space$3(ch))
                    requireNonWS = false;
                if (ch == 91 /* '[' */)
                    return false;
                else if (ch == 92 /* '\\' */)
                    escaped = true;
            }
        }
        return null;
    }
    /// Inline parsing functions get access to this context, and use it to
    /// read the content and emit syntax nodes.
    class InlineContext {
        /// @internal
        constructor(
        /// The parser that is being used.
        parser, 
        /// The text of this inline section.
        text, 
        /// The starting offset of the section in the document.
        offset) {
            this.parser = parser;
            this.text = text;
            this.offset = offset;
            /// @internal
            this.parts = [];
        }
        /// Get the character code at the given (document-relative)
        /// position.
        char(pos) { return pos >= this.end ? -1 : this.text.charCodeAt(pos - this.offset); }
        /// The position of the end of this inline section.
        get end() { return this.offset + this.text.length; }
        /// Get a substring of this inline section. Again uses
        /// document-relative positions.
        slice(from, to) { return this.text.slice(from - this.offset, to - this.offset); }
        /// @internal
        append(elt) {
            this.parts.push(elt);
            return elt.to;
        }
        /// Add a [delimiter](#DelimiterType) at this given position. `open`
        /// and `close` indicate whether this delimiter is opening, closing,
        /// or both. Returns the end of the delimiter, for convenient
        /// returning from [parse functions](#InlineParser.parse).
        addDelimiter(type, from, to, open, close) {
            return this.append(new InlineDelimiter(type, from, to, (open ? 1 /* Open */ : 0) | (close ? 2 /* Close */ : 0)));
        }
        /// Add an inline element. Returns the end of the element.
        addElement(elt) {
            return this.append(elt);
        }
        /// @internal
        resolveMarkers(from) {
            for (let i = from; i < this.parts.length; i++) {
                let close = this.parts[i];
                if (!(close instanceof InlineDelimiter && close.type.resolve && (close.side & 2 /* Close */)))
                    continue;
                let emp = close.type == EmphasisUnderscore || close.type == EmphasisAsterisk;
                let closeSize = close.to - close.from;
                let open, j = i - 1;
                for (; j >= from; j--) {
                    let part = this.parts[j];
                    if (!(part instanceof InlineDelimiter && (part.side & 1 /* Open */) && part.type == close.type) ||
                        emp && ((close.side & 1 /* Open */) || (part.side & 2 /* Close */)) &&
                            (part.to - part.from + closeSize) % 3 == 0 && ((part.to - part.from) % 3 || closeSize % 3))
                        continue;
                    open = part;
                    break;
                }
                if (!open)
                    continue;
                let type = close.type.resolve, content = [];
                let start = open.from, end = close.to;
                if (emp) {
                    let size = Math.min(2, open.to - open.from, closeSize);
                    start = open.to - size;
                    end = close.from + size;
                    type = size == 1 ? "Emphasis" : "StrongEmphasis";
                }
                if (open.type.mark)
                    content.push(this.elt(open.type.mark, start, open.to));
                for (let k = j + 1; k < i; k++) {
                    if (this.parts[k] instanceof Element$3)
                        content.push(this.parts[k]);
                    this.parts[k] = null;
                }
                if (close.type.mark)
                    content.push(this.elt(close.type.mark, close.from, end));
                let element = this.elt(type, start, end, content);
                this.parts[j] = emp && open.from != start ? new InlineDelimiter(open.type, open.from, start, open.side) : null;
                let keep = this.parts[i] = emp && close.to != end ? new InlineDelimiter(close.type, end, close.to, close.side) : null;
                if (keep)
                    this.parts.splice(i, 0, element);
                else
                    this.parts[i] = element;
            }
            let result = [];
            for (let i = from; i < this.parts.length; i++) {
                let part = this.parts[i];
                if (part instanceof Element$3)
                    result.push(part);
            }
            return result;
        }
        /// Find an opening delimiter of the given type. Returns `null` if
        /// no delimiter is found, or an index that can be passed to
        /// [`takeContent`](#InlineContext.takeContent) otherwise.
        findOpeningDelimiter(type) {
            for (let i = this.parts.length - 1; i >= 0; i--) {
                let part = this.parts[i];
                if (part instanceof InlineDelimiter && part.type == type)
                    return i;
            }
            return null;
        }
        /// Remove all inline elements and delimiters starting from the
        /// given index (which you should get from
        /// [`findOpeningDelimiter`](#InlineContext.findOpeningDelimiter),
        /// resolve delimiters inside of them, and return them as an array
        /// of elements.
        takeContent(startIndex) {
            let content = this.resolveMarkers(startIndex);
            this.parts.length = startIndex;
            return content;
        }
        /// Skip space after the given (document) position, returning either
        /// the position of the next non-space character or the end of the
        /// section.
        skipSpace(from) { return skipSpace(this.text, from - this.offset) + this.offset; }
        elt(type, from, to, children) {
            if (typeof type == "string")
                return elt(this.parser.getNodeType(type), from, to, children);
            return new TreeElement(type, from);
        }
    }
    function injectMarks(elements, marks) {
        if (!marks.length)
            return elements;
        if (!elements.length)
            return marks;
        let elts = elements.slice(), eI = 0;
        for (let mark of marks) {
            while (eI < elts.length && elts[eI].to < mark.to)
                eI++;
            if (eI < elts.length && elts[eI].from < mark.from) {
                let e = elts[eI];
                if (e instanceof Element$3)
                    elts[eI] = new Element$3(e.type, e.from, e.to, injectMarks(e.children, [mark]));
            }
            else {
                elts.splice(eI++, 0, mark);
            }
        }
        return elts;
    }
    // These are blocks that can span blank lines, and should thus only be
    // reused if their next sibling is also being reused.
    const NotLast = [Type$1.CodeBlock, Type$1.ListItem, Type$1.OrderedList, Type$1.BulletList];
    class FragmentCursor$1 {
        constructor(fragments, input) {
            this.fragments = fragments;
            this.input = input;
            // Index into fragment array
            this.i = 0;
            // Active fragment
            this.fragment = null;
            this.fragmentEnd = -1;
            // Cursor into the current fragment, if any. When `moveTo` returns
            // true, this points at the first block after `pos`.
            this.cursor = null;
            if (fragments.length)
                this.fragment = fragments[this.i++];
        }
        nextFragment() {
            this.fragment = this.i < this.fragments.length ? this.fragments[this.i++] : null;
            this.cursor = null;
            this.fragmentEnd = -1;
        }
        moveTo(pos, lineStart) {
            while (this.fragment && this.fragment.to <= pos)
                this.nextFragment();
            if (!this.fragment || this.fragment.from > (pos ? pos - 1 : 0))
                return false;
            if (this.fragmentEnd < 0) {
                let end = this.fragment.to;
                while (end > 0 && this.input.read(end - 1, end) != "\n")
                    end--;
                this.fragmentEnd = end ? end - 1 : 0;
            }
            let c = this.cursor;
            if (!c) {
                c = this.cursor = this.fragment.tree.cursor();
                c.firstChild();
            }
            let rPos = pos + this.fragment.offset;
            while (c.to <= rPos)
                if (!c.parent())
                    return false;
            for (;;) {
                if (c.from >= rPos)
                    return this.fragment.from <= lineStart;
                if (!c.childAfter(rPos))
                    return false;
            }
        }
        matches(hash) {
            let tree = this.cursor.tree;
            return tree && tree.prop(NodeProp.contextHash) == hash;
        }
        takeNodes(cx) {
            let cur = this.cursor, off = this.fragment.offset;
            let start = cx.absoluteLineStart, end = start, blockI = cx.block.children.length;
            let prevEnd = end, prevI = blockI;
            for (;;) {
                if (cur.to - off >= this.fragmentEnd) {
                    if (cur.type.isAnonymous && cur.firstChild())
                        continue;
                    break;
                }
                cx.dontInject.add(cur.tree);
                cx.addNode(cur.tree, cur.from - off);
                // Taken content must always end in a block, because incremental
                // parsing happens on block boundaries. Never stop directly
                // after an indented code block, since those can continue after
                // any number of blank lines.
                if (cur.type.is("Block")) {
                    if (NotLast.indexOf(cur.type.id) < 0) {
                        end = cur.to - off;
                        blockI = cx.block.children.length;
                    }
                    else {
                        end = prevEnd;
                        blockI = prevI;
                        prevEnd = cur.to - off;
                        prevI = cx.block.children.length;
                    }
                }
                if (!cur.nextSibling())
                    break;
            }
            while (cx.block.children.length > blockI) {
                cx.block.children.pop();
                cx.block.positions.pop();
            }
            return end - start;
        }
    }
    /// The default CommonMark parser.
    const parser$a = new MarkdownParser(new NodeSet(nodeTypes), Object.keys(DefaultBlockParsers).map(n => DefaultBlockParsers[n]), Object.keys(DefaultBlockParsers).map(n => DefaultLeafBlocks[n]), Object.keys(DefaultBlockParsers), DefaultEndLeaf, DefaultSkipMarkup, Object.keys(DefaultInline).map(n => DefaultInline[n]), Object.keys(DefaultInline), []);

    function leftOverSpace(node, from, to) {
        let ranges = [];
        for (let n = node.firstChild, pos = from;; n = n.nextSibling) {
            let nextPos = n ? n.from : to;
            if (nextPos > pos)
                ranges.push({ from: pos, to: nextPos });
            if (!n)
                break;
            pos = n.to;
        }
        return ranges;
    }
    /// Create a Markdown extension to enable nested parsing on code
    /// blocks and/or embedded HTML.
    function parseCode(config) {
        let { codeParser, htmlParser } = config;
        let wrap = parseMixed((node, input) => {
            let id = node.type.id;
            if (codeParser && (id == Type$1.CodeBlock || id == Type$1.FencedCode)) {
                let info = "";
                if (id = Type$1.FencedCode) {
                    let infoNode = node.node.getChild(Type$1.CodeInfo);
                    if (infoNode)
                        info = input.read(infoNode.from, infoNode.to);
                }
                let parser = codeParser(info);
                if (parser)
                    return { parser, overlay: node => node.type.id == Type$1.CodeText };
            }
            else if (htmlParser && (id == Type$1.HTMLBlock || id == Type$1.HTMLTag)) {
                return { parser: htmlParser, overlay: leftOverSpace(node.node, node.from, node.to) };
            }
            return null;
        });
        return { wrap };
    }

    const StrikethroughDelim = { resolve: "Strikethrough", mark: "StrikethroughMark" };
    /// An extension that implements
    /// [GFM-style](https://github.github.com/gfm/#strikethrough-extension-)
    /// Strikethrough syntax using `~~` delimiters.
    const Strikethrough = {
        defineNodes: ["Strikethrough", "StrikethroughMark"],
        parseInline: [{
                name: "Strikethrough",
                parse(cx, next, pos) {
                    if (next != 126 /* '~' */ || cx.char(pos + 1) != 126)
                        return -1;
                    return cx.addDelimiter(StrikethroughDelim, pos, pos + 2, true, true);
                },
                after: "Emphasis"
            }]
    };
    function parseRow(cx, line, startI = 0, elts, offset = 0) {
        let count = 0, first = true, cellStart = -1, cellEnd = -1, esc = false;
        let parseCell = () => {
            elts.push(cx.elt("TableCell", offset + cellStart, offset + cellEnd, cx.parser.parseInline(line.slice(cellStart, cellEnd), offset + cellStart)));
        };
        for (let i = startI; i < line.length; i++) {
            let next = line.charCodeAt(i);
            if (next == 124 /* '|' */ && !esc) {
                if (!first || cellStart > -1)
                    count++;
                first = false;
                if (elts) {
                    if (cellStart > -1)
                        parseCell();
                    elts.push(cx.elt("TableDelimiter", i + offset, i + offset + 1));
                }
                cellStart = cellEnd = -1;
            }
            else if (esc || next != 32 && next != 9) {
                if (cellStart < 0)
                    cellStart = i;
                cellEnd = i + 1;
            }
            esc = !esc && next == 92;
        }
        if (cellStart > -1) {
            count++;
            if (elts)
                parseCell();
        }
        return count;
    }
    function hasPipe(str, start) {
        for (let i = start; i < str.length; i++) {
            let next = str.charCodeAt(i);
            if (next == 124 /* '|' */)
                return true;
            if (next == 92 /* '\\' */)
                i++;
        }
        return false;
    }
    class TableParser {
        constructor() {
            // Null means we haven't seen the second line yet, false means this
            // isn't a table, and an array means this is a table and we've
            // parsed the given rows so far.
            this.rows = null;
        }
        nextLine(cx, line, leaf) {
            if (this.rows == null) { // Second line
                this.rows = false;
                let lineText;
                if ((line.next == 45 || line.next == 58 || line.next == 124 /* '-:|' */) &&
                    /^\|?(\s*:?-+:?\s*\|)+(\s*:?-+:?\s*)?$/.test(lineText = line.text.slice(line.pos))) {
                    let firstRow = [], firstCount = parseRow(cx, leaf.content, 0, firstRow, leaf.start);
                    if (firstCount == parseRow(cx, lineText, line.pos))
                        this.rows = [cx.elt("TableHeader", leaf.start, leaf.start + leaf.content.length, firstRow),
                            cx.elt("TableDelimiter", cx.lineStart + line.pos, cx.lineStart + line.text.length)];
                }
            }
            else if (this.rows) { // Line after the second
                let content = [];
                parseRow(cx, line.text, line.pos, content, cx.lineStart);
                this.rows.push(cx.elt("TableRow", cx.lineStart + line.pos, cx.lineStart + line.text.length, content));
            }
            return false;
        }
        finish(cx, leaf) {
            if (this.rows) {
                this.emit(cx, leaf);
                return true;
            }
            return false;
        }
        emit(cx, leaf) {
            cx.addLeafElement(leaf, cx.elt("Table", leaf.start, leaf.start + leaf.content.length, this.rows));
        }
    }
    /// This extension provides
    /// [GFM-style](https://github.github.com/gfm/#tables-extension-)
    /// tables, using syntax like this:
    ///
    /// ```
    /// | head 1 | head 2 |
    /// | ---    | ---    |
    /// | cell 1 | cell 2 |
    /// ```
    const Table = {
        defineNodes: [
            { name: "Table", block: true },
            "TableHeader",
            "TableRow",
            "TableCell",
            "TableDelimiter"
        ],
        parseBlock: [{
                name: "Table",
                leaf(_, leaf) { return hasPipe(leaf.content, 0) ? new TableParser : null; },
                before: "SetextHeading"
            }]
    };
    class TaskParser {
        nextLine() { return false; }
        finish(cx, leaf) {
            cx.addLeafElement(leaf, cx.elt("Task", leaf.start, leaf.start + leaf.content.length, [
                cx.elt("TaskMarker", leaf.start, leaf.start + 3),
                ...cx.parser.parseInline(leaf.content.slice(3), leaf.start + 3)
            ]));
            return true;
        }
    }
    /// Extension providing
    /// [GFM-style](https://github.github.com/gfm/#task-list-items-extension-)
    /// task list items, where list items can be prefixed with `[ ]` or
    /// `[x]` to add a checkbox.
    const TaskList = {
        defineNodes: [
            { name: "Task", block: true },
            "TaskMarker"
        ],
        parseBlock: [{
                name: "TaskList",
                leaf(cx, leaf) {
                    return /^\[[ xX]\]/.test(leaf.content) && cx.parser.nodeSet.types[cx.block.type].name == "ListItem" ? new TaskParser : null;
                },
                after: "SetextHeading"
            }]
    };
    /// Extension bundle containing [`Table`](#Table),
    /// [`TaskList`](#TaskList) and [`Strikethrough`](#Strikethrough).
    const GFM = [Table, TaskList, Strikethrough];
    function parseSubSuper(ch, node, mark) {
        return (cx, next, pos) => {
            if (next != ch || cx.char(pos + 1) == ch)
                return -1;
            let elts = [cx.elt(mark, pos, pos + 1)];
            for (let i = pos + 1; i < cx.end; i++) {
                let next = cx.char(i);
                if (next == ch)
                    return cx.addElement(cx.elt(node, pos, i + 1, elts.concat(cx.elt(mark, i, i + 1))));
                if (next == 92 /* '\\' */)
                    elts.push(cx.elt("Escape", i, i++ + 2));
                if (space$3(next))
                    break;
            }
            return -1;
        };
    }
    /// Extension providing
    /// [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)
    /// superscript using `^` markers.
    const Superscript = {
        defineNodes: ["Superscript", "SuperscriptMark"],
        parseInline: [{
                name: "Superscript",
                parse: parseSubSuper(94 /* '^' */, "Superscript", "SuperscriptMark")
            }]
    };
    /// Extension providing
    /// [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)
    /// subscript using `~` markers.
    const Subscript = {
        defineNodes: ["Subscript", "SubscriptMark"],
        parseInline: [{
                name: "Subscript",
                parse: parseSubSuper(126 /* '~' */, "Subscript", "SubscriptMark")
            }]
    };
    /// Extension that parses two colons with only letters, underscores,
    /// and numbers between them as `Emoji` nodes.
    const Emoji = {
        defineNodes: ["Emoji"],
        parseInline: [{
                name: "Emoji",
                parse(cx, next, pos) {
                    let match;
                    if (next != 58 /* ':' */ || !(match = /^[a-zA-Z_0-9]+:/.exec(cx.slice(pos + 1, cx.end))))
                        return -1;
                    return cx.addElement(cx.elt("Emoji", pos, pos + 1 + match[0].length));
                }
            }]
    };

    /// A parse stack. These are used internally by the parser to track
    /// parsing progress. They also provide some properties and methods
    /// that external code such as a tokenizer can use to get information
    /// about the parse state.
    class Stack {
        /// @internal
        constructor(
        /// The parse that this stack is part of @internal
        p, 
        /// Holds state, pos, value stack pos (15 bits array index, 15 bits
        /// buffer index) triplets for all but the top state
        /// @internal
        stack, 
        /// The current parse state @internal
        state, 
        // The position at which the next reduce should take place. This
        // can be less than `this.pos` when skipped expressions have been
        // added to the stack (which should be moved outside of the next
        // reduction)
        /// @internal
        reducePos, 
        /// The input position up to which this stack has parsed.
        pos, 
        /// The dynamic score of the stack, including dynamic precedence
        /// and error-recovery penalties
        /// @internal
        score, 
        // The output buffer. Holds (type, start, end, size) quads
        // representing nodes created by the parser, where `size` is
        // amount of buffer array entries covered by this node.
        /// @internal
        buffer, 
        // The base offset of the buffer. When stacks are split, the split
        // instance shared the buffer history with its parent up to
        // `bufferBase`, which is the absolute offset (including the
        // offset of previous splits) into the buffer at which this stack
        // starts writing.
        /// @internal
        bufferBase, 
        /// @internal
        curContext, 
        /// @internal
        lookAhead = 0, 
        // A parent stack from which this was split off, if any. This is
        // set up so that it always points to a stack that has some
        // additional buffer content, never to a stack with an equal
        // `bufferBase`.
        /// @internal
        parent) {
            this.p = p;
            this.stack = stack;
            this.state = state;
            this.reducePos = reducePos;
            this.pos = pos;
            this.score = score;
            this.buffer = buffer;
            this.bufferBase = bufferBase;
            this.curContext = curContext;
            this.lookAhead = lookAhead;
            this.parent = parent;
        }
        /// @internal
        toString() {
            return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? "!" + this.score : ""}`;
        }
        // Start an empty stack
        /// @internal
        static start(p, state, pos = 0) {
            let cx = p.parser.context;
            return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);
        }
        /// The stack's current [context](#lr.ContextTracker) value, if
        /// any. Its type will depend on the context tracker's type
        /// parameter, or it will be `null` if there is no context
        /// tracker.
        get context() { return this.curContext ? this.curContext.context : null; }
        // Push a state onto the stack, tracking its start position as well
        // as the buffer base at that point.
        /// @internal
        pushState(state, start) {
            this.stack.push(this.state, start, this.bufferBase + this.buffer.length);
            this.state = state;
        }
        // Apply a reduce action
        /// @internal
        reduce(action) {
            let depth = action >> 19 /* ReduceDepthShift */, type = action & 65535 /* ValueMask */;
            let { parser } = this.p;
            let dPrec = parser.dynamicPrecedence(type);
            if (dPrec)
                this.score += dPrec;
            if (depth == 0) {
                // Zero-depth reductions are a special case—they add stuff to
                // the stack without popping anything off.
                if (type < parser.minRepeatTerm)
                    this.storeNode(type, this.reducePos, this.reducePos, 4, true);
                this.pushState(parser.getGoto(this.state, type, true), this.reducePos);
                this.reduceContext(type, this.reducePos);
                return;
            }
            // Find the base index into `this.stack`, content after which will
            // be dropped. Note that with `StayFlag` reductions we need to
            // consume two extra frames (the dummy parent node for the skipped
            // expression and the state that we'll be staying in, which should
            // be moved to `this.state`).
            let base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* StayFlag */ ? 6 : 0);
            let start = this.stack[base - 2];
            let bufferBase = this.stack[base - 1], count = this.bufferBase + this.buffer.length - bufferBase;
            // Store normal terms or `R -> R R` repeat reductions
            if (type < parser.minRepeatTerm || (action & 131072 /* RepeatFlag */)) {
                let pos = parser.stateFlag(this.state, 1 /* Skipped */) ? this.pos : this.reducePos;
                this.storeNode(type, start, pos, count + 4, true);
            }
            if (action & 262144 /* StayFlag */) {
                this.state = this.stack[base];
            }
            else {
                let baseStateID = this.stack[base - 3];
                this.state = parser.getGoto(baseStateID, type, true);
            }
            while (this.stack.length > base)
                this.stack.pop();
            this.reduceContext(type, start);
        }
        // Shift a value into the buffer
        /// @internal
        storeNode(term, start, end, size = 4, isReduce = false) {
            if (term == 0 /* Err */) { // Try to omit/merge adjacent error nodes
                let cur = this, top = this.buffer.length;
                if (top == 0 && cur.parent) {
                    top = cur.bufferBase - cur.parent.bufferBase;
                    cur = cur.parent;
                }
                if (top > 0 && cur.buffer[top - 4] == 0 /* Err */ && cur.buffer[top - 1] > -1) {
                    if (start == end)
                        return;
                    if (cur.buffer[top - 2] >= start) {
                        cur.buffer[top - 2] = end;
                        return;
                    }
                }
            }
            if (!isReduce || this.pos == end) { // Simple case, just append
                this.buffer.push(term, start, end, size);
            }
            else { // There may be skipped nodes that have to be moved forward
                let index = this.buffer.length;
                if (index > 0 && this.buffer[index - 4] != 0 /* Err */)
                    while (index > 0 && this.buffer[index - 2] > end) {
                        // Move this record forward
                        this.buffer[index] = this.buffer[index - 4];
                        this.buffer[index + 1] = this.buffer[index - 3];
                        this.buffer[index + 2] = this.buffer[index - 2];
                        this.buffer[index + 3] = this.buffer[index - 1];
                        index -= 4;
                        if (size > 4)
                            size -= 4;
                    }
                this.buffer[index] = term;
                this.buffer[index + 1] = start;
                this.buffer[index + 2] = end;
                this.buffer[index + 3] = size;
            }
        }
        // Apply a shift action
        /// @internal
        shift(action, next, nextEnd) {
            let start = this.pos;
            if (action & 131072 /* GotoFlag */) {
                this.pushState(action & 65535 /* ValueMask */, this.pos);
            }
            else if ((action & 262144 /* StayFlag */) == 0) { // Regular shift
                let nextState = action, { parser } = this.p;
                if (nextEnd > this.pos || next <= parser.maxNode) {
                    this.pos = nextEnd;
                    if (!parser.stateFlag(nextState, 1 /* Skipped */))
                        this.reducePos = nextEnd;
                }
                this.pushState(nextState, start);
                this.shiftContext(next, start);
                if (next <= parser.maxNode)
                    this.buffer.push(next, start, nextEnd, 4);
            }
            else { // Shift-and-stay, which means this is a skipped token
                this.pos = nextEnd;
                this.shiftContext(next, start);
                if (next <= this.p.parser.maxNode)
                    this.buffer.push(next, start, nextEnd, 4);
            }
        }
        // Apply an action
        /// @internal
        apply(action, next, nextEnd) {
            if (action & 65536 /* ReduceFlag */)
                this.reduce(action);
            else
                this.shift(action, next, nextEnd);
        }
        // Add a prebuilt (reused) node into the buffer. @internal
        useNode(value, next) {
            let index = this.p.reused.length - 1;
            if (index < 0 || this.p.reused[index] != value) {
                this.p.reused.push(value);
                index++;
            }
            let start = this.pos;
            this.reducePos = this.pos = start + value.length;
            this.pushState(next, start);
            this.buffer.push(index, start, this.reducePos, -1 /* size == -1 means this is a reused value */);
            if (this.curContext)
                this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));
        }
        // Split the stack. Due to the buffer sharing and the fact
        // that `this.stack` tends to stay quite shallow, this isn't very
        // expensive.
        /// @internal
        split() {
            let parent = this;
            let off = parent.buffer.length;
            // Because the top of the buffer (after this.pos) may be mutated
            // to reorder reductions and skipped tokens, and shared buffers
            // should be immutable, this copies any outstanding skipped tokens
            // to the new buffer, and puts the base pointer before them.
            while (off > 0 && parent.buffer[off - 2] > parent.reducePos)
                off -= 4;
            let buffer = parent.buffer.slice(off), base = parent.bufferBase + off;
            // Make sure parent points to an actual parent with content, if there is such a parent.
            while (parent && base == parent.bufferBase)
                parent = parent.parent;
            return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);
        }
        // Try to recover from an error by 'deleting' (ignoring) one token.
        /// @internal
        recoverByDelete(next, nextEnd) {
            let isNode = next <= this.p.parser.maxNode;
            if (isNode)
                this.storeNode(next, this.pos, nextEnd, 4);
            this.storeNode(0 /* Err */, this.pos, nextEnd, isNode ? 8 : 4);
            this.pos = this.reducePos = nextEnd;
            this.score -= 190 /* Delete */;
        }
        /// Check if the given term would be able to be shifted (optionally
        /// after some reductions) on this stack. This can be useful for
        /// external tokenizers that want to make sure they only provide a
        /// given token when it applies.
        canShift(term) {
            for (let sim = new SimulatedStack(this);;) {
                let action = this.p.parser.stateSlot(sim.state, 4 /* DefaultReduce */) || this.p.parser.hasAction(sim.state, term);
                if ((action & 65536 /* ReduceFlag */) == 0)
                    return true;
                if (action == 0)
                    return false;
                sim.reduce(action);
            }
        }
        // Apply up to Recover.MaxNext recovery actions that conceptually
        // inserts some missing token or rule.
        /// @internal
        recoverByInsert(next) {
            if (this.stack.length >= 300 /* MaxInsertStackDepth */)
                return [];
            let nextStates = this.p.parser.nextStates(this.state);
            if (nextStates.length > 4 /* MaxNext */ << 1 || this.stack.length >= 120 /* DampenInsertStackDepth */) {
                let best = [];
                for (let i = 0, s; i < nextStates.length; i += 2) {
                    if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))
                        best.push(nextStates[i], s);
                }
                if (this.stack.length < 120 /* DampenInsertStackDepth */)
                    for (let i = 0; best.length < 4 /* MaxNext */ << 1 && i < nextStates.length; i += 2) {
                        let s = nextStates[i + 1];
                        if (!best.some((v, i) => (i & 1) && v == s))
                            best.push(nextStates[i], s);
                    }
                nextStates = best;
            }
            let result = [];
            for (let i = 0; i < nextStates.length && result.length < 4 /* MaxNext */; i += 2) {
                let s = nextStates[i + 1];
                if (s == this.state)
                    continue;
                let stack = this.split();
                stack.storeNode(0 /* Err */, stack.pos, stack.pos, 4, true);
                stack.pushState(s, this.pos);
                stack.shiftContext(nextStates[i], this.pos);
                stack.score -= 200 /* Insert */;
                result.push(stack);
            }
            return result;
        }
        // Force a reduce, if possible. Return false if that can't
        // be done.
        /// @internal
        forceReduce() {
            let reduce = this.p.parser.stateSlot(this.state, 5 /* ForcedReduce */);
            if ((reduce & 65536 /* ReduceFlag */) == 0)
                return false;
            if (!this.p.parser.validAction(this.state, reduce)) {
                this.storeNode(0 /* Err */, this.reducePos, this.reducePos, 4, true);
                this.score -= 100 /* Reduce */;
            }
            this.reduce(reduce);
            return true;
        }
        /// @internal
        forceAll() {
            while (!this.p.parser.stateFlag(this.state, 2 /* Accepting */) && this.forceReduce()) { }
            return this;
        }
        /// Check whether this state has no further actions (assumed to be a direct descendant of the
        /// top state, since any other states must be able to continue
        /// somehow). @internal
        get deadEnd() {
            if (this.stack.length != 3)
                return false;
            let { parser } = this.p;
            return parser.data[parser.stateSlot(this.state, 1 /* Actions */)] == 65535 /* End */ &&
                !parser.stateSlot(this.state, 4 /* DefaultReduce */);
        }
        /// Restart the stack (put it back in its start state). Only safe
        /// when this.stack.length == 3 (state is directly below the top
        /// state). @internal
        restart() {
            this.state = this.stack[0];
            this.stack.length = 0;
        }
        /// @internal
        sameState(other) {
            if (this.state != other.state || this.stack.length != other.stack.length)
                return false;
            for (let i = 0; i < this.stack.length; i += 3)
                if (this.stack[i] != other.stack[i])
                    return false;
            return true;
        }
        /// Get the parser used by this stack.
        get parser() { return this.p.parser; }
        /// Test whether a given dialect (by numeric ID, as exported from
        /// the terms file) is enabled.
        dialectEnabled(dialectID) { return this.p.parser.dialect.flags[dialectID]; }
        shiftContext(term, start) {
            if (this.curContext)
                this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));
        }
        reduceContext(term, start) {
            if (this.curContext)
                this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));
        }
        /// @internal
        emitContext() {
            let last = this.buffer.length - 1;
            if (last < 0 || this.buffer[last] != -3)
                this.buffer.push(this.curContext.hash, this.reducePos, this.reducePos, -3);
        }
        /// @internal
        emitLookAhead() {
            let last = this.buffer.length - 1;
            if (last < 0 || this.buffer[last] != -4)
                this.buffer.push(this.lookAhead, this.reducePos, this.reducePos, -4);
        }
        updateContext(context) {
            if (context != this.curContext.context) {
                let newCx = new StackContext(this.curContext.tracker, context);
                if (newCx.hash != this.curContext.hash)
                    this.emitContext();
                this.curContext = newCx;
            }
        }
        /// @internal
        setLookAhead(lookAhead) {
            if (lookAhead > this.lookAhead) {
                this.emitLookAhead();
                this.lookAhead = lookAhead;
            }
        }
        /// @internal
        close() {
            if (this.curContext && this.curContext.tracker.strict)
                this.emitContext();
            if (this.lookAhead > 0)
                this.emitLookAhead();
        }
    }
    class StackContext {
        constructor(tracker, context) {
            this.tracker = tracker;
            this.context = context;
            this.hash = tracker.strict ? tracker.hash(context) : 0;
        }
    }
    var Recover;
    (function (Recover) {
        Recover[Recover["Insert"] = 200] = "Insert";
        Recover[Recover["Delete"] = 190] = "Delete";
        Recover[Recover["Reduce"] = 100] = "Reduce";
        Recover[Recover["MaxNext"] = 4] = "MaxNext";
        Recover[Recover["MaxInsertStackDepth"] = 300] = "MaxInsertStackDepth";
        Recover[Recover["DampenInsertStackDepth"] = 120] = "DampenInsertStackDepth";
    })(Recover || (Recover = {}));
    // Used to cheaply run some reductions to scan ahead without mutating
    // an entire stack
    class SimulatedStack {
        constructor(start) {
            this.start = start;
            this.state = start.state;
            this.stack = start.stack;
            this.base = this.stack.length;
        }
        reduce(action) {
            let term = action & 65535 /* ValueMask */, depth = action >> 19 /* ReduceDepthShift */;
            if (depth == 0) {
                if (this.stack == this.start.stack)
                    this.stack = this.stack.slice();
                this.stack.push(this.state, 0, 0);
                this.base += 3;
            }
            else {
                this.base -= (depth - 1) * 3;
            }
            let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);
            this.state = goto;
        }
    }
    // This is given to `Tree.build` to build a buffer, and encapsulates
    // the parent-stack-walking necessary to read the nodes.
    class StackBufferCursor {
        constructor(stack, pos, index) {
            this.stack = stack;
            this.pos = pos;
            this.index = index;
            this.buffer = stack.buffer;
            if (this.index == 0)
                this.maybeNext();
        }
        static create(stack, pos = stack.bufferBase + stack.buffer.length) {
            return new StackBufferCursor(stack, pos, pos - stack.bufferBase);
        }
        maybeNext() {
            let next = this.stack.parent;
            if (next != null) {
                this.index = this.stack.bufferBase - next.bufferBase;
                this.stack = next;
                this.buffer = next.buffer;
            }
        }
        get id() { return this.buffer[this.index - 4]; }
        get start() { return this.buffer[this.index - 3]; }
        get end() { return this.buffer[this.index - 2]; }
        get size() { return this.buffer[this.index - 1]; }
        next() {
            this.index -= 4;
            this.pos -= 4;
            if (this.index == 0)
                this.maybeNext();
        }
        fork() {
            return new StackBufferCursor(this.stack, this.pos, this.index);
        }
    }

    class CachedToken {
        constructor() {
            this.start = -1;
            this.value = -1;
            this.end = -1;
            this.extended = -1;
            this.lookAhead = 0;
            this.mask = 0;
            this.context = 0;
        }
    }
    const nullToken = new CachedToken;
    /// [Tokenizers](#lr.ExternalTokenizer) interact with the input
    /// through this interface. It presents the input as a stream of
    /// characters, tracking lookahead and hiding the complexity of
    /// [ranges](#common.Parser.parse^ranges) from tokenizer code.
    class InputStream {
        /// @internal
        constructor(
        /// @internal
        input, 
        /// @internal
        ranges) {
            this.input = input;
            this.ranges = ranges;
            /// @internal
            this.chunk = "";
            /// @internal
            this.chunkOff = 0;
            /// Backup chunk
            this.chunk2 = "";
            this.chunk2Pos = 0;
            /// The character code of the next code unit in the input, or -1
            /// when the stream is at the end of the input.
            this.next = -1;
            /// @internal
            this.token = nullToken;
            this.rangeIndex = 0;
            this.pos = this.chunkPos = ranges[0].from;
            this.range = ranges[0];
            this.end = ranges[ranges.length - 1].to;
            this.readNext();
        }
        resolveOffset(offset, assoc) {
            let range = this.range, index = this.rangeIndex;
            let pos = this.pos + offset;
            while (pos < range.from) {
                if (!index)
                    return null;
                let next = this.ranges[--index];
                pos -= range.from - next.to;
                range = next;
            }
            while (assoc < 0 ? pos > range.to : pos >= range.to) {
                if (index == this.ranges.length - 1)
                    return null;
                let next = this.ranges[++index];
                pos += next.from - range.to;
                range = next;
            }
            return pos;
        }
        /// Look at a code unit near the stream position. `.peek(0)` equals
        /// `.next`, `.peek(-1)` gives you the previous character, and so
        /// on.
        ///
        /// Note that looking around during tokenizing creates dependencies
        /// on potentially far-away content, which may reduce the
        /// effectiveness incremental parsing—when looking forward—or even
        /// cause invalid reparses when looking backward more than 25 code
        /// units, since the library does not track lookbehind.
        peek(offset) {
            let idx = this.chunkOff + offset, pos, result;
            if (idx >= 0 && idx < this.chunk.length) {
                pos = this.pos + offset;
                result = this.chunk.charCodeAt(idx);
            }
            else {
                let resolved = this.resolveOffset(offset, 1);
                if (resolved == null)
                    return -1;
                pos = resolved;
                if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {
                    result = this.chunk2.charCodeAt(pos - this.chunk2Pos);
                }
                else {
                    let i = this.rangeIndex, range = this.range;
                    while (range.to <= pos)
                        range = this.ranges[++i];
                    this.chunk2 = this.input.chunk(this.chunk2Pos = pos);
                    if (pos + this.chunk2.length > range.to)
                        this.chunk2 = this.chunk2.slice(0, range.to - pos);
                    result = this.chunk2.charCodeAt(0);
                }
            }
            if (pos > this.token.lookAhead)
                this.token.lookAhead = pos;
            return result;
        }
        /// Accept a token. By default, the end of the token is set to the
        /// current stream position, but you can pass an offset (relative to
        /// the stream position) to change that.
        acceptToken(token, endOffset = 0) {
            let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;
            if (end == null || end < this.token.start)
                throw new RangeError("Token end out of bounds");
            this.token.value = token;
            this.token.end = end;
        }
        getChunk() {
            if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {
                let { chunk, chunkPos } = this;
                this.chunk = this.chunk2;
                this.chunkPos = this.chunk2Pos;
                this.chunk2 = chunk;
                this.chunk2Pos = chunkPos;
                this.chunkOff = this.pos - this.chunkPos;
            }
            else {
                this.chunk2 = this.chunk;
                this.chunk2Pos = this.chunkPos;
                let nextChunk = this.input.chunk(this.pos);
                let end = this.pos + nextChunk.length;
                this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;
                this.chunkPos = this.pos;
                this.chunkOff = 0;
            }
        }
        readNext() {
            if (this.chunkOff >= this.chunk.length) {
                this.getChunk();
                if (this.chunkOff == this.chunk.length)
                    return this.next = -1;
            }
            return this.next = this.chunk.charCodeAt(this.chunkOff);
        }
        /// Move the stream forward N (defaults to 1) code units. Returns
        /// the new value of [`next`](#lr.InputStream.next).
        advance(n = 1) {
            this.chunkOff += n;
            while (this.pos + n >= this.range.to) {
                if (this.rangeIndex == this.ranges.length - 1)
                    return this.setDone();
                n -= this.range.to - this.pos;
                this.range = this.ranges[++this.rangeIndex];
                this.pos = this.range.from;
            }
            this.pos += n;
            if (this.pos > this.token.lookAhead)
                this.token.lookAhead = this.pos;
            return this.readNext();
        }
        setDone() {
            this.pos = this.chunkPos = this.end;
            this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];
            this.chunk = "";
            return this.next = -1;
        }
        /// @internal
        reset(pos, token) {
            if (token) {
                this.token = token;
                token.start = token.lookAhead = pos;
                token.value = token.extended = -1;
            }
            else {
                this.token = nullToken;
            }
            if (this.pos != pos) {
                this.pos = pos;
                if (pos == this.end) {
                    this.setDone();
                    return this;
                }
                while (pos < this.range.from)
                    this.range = this.ranges[--this.rangeIndex];
                while (pos >= this.range.to)
                    this.range = this.ranges[++this.rangeIndex];
                if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {
                    this.chunkOff = pos - this.chunkPos;
                }
                else {
                    this.chunk = "";
                    this.chunkOff = 0;
                }
                this.readNext();
            }
            return this;
        }
        /// @internal
        read(from, to) {
            if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length)
                return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);
            if (from >= this.range.from && to <= this.range.to)
                return this.input.read(from, to);
            let result = "";
            for (let r of this.ranges) {
                if (r.from >= to)
                    break;
                if (r.to > from)
                    result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));
            }
            return result;
        }
    }
    /// @internal
    class TokenGroup {
        constructor(data, id) {
            this.data = data;
            this.id = id;
        }
        token(input, stack) { readToken$3(this.data, input, stack, this.id); }
    }
    TokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
    /// `@external tokens` declarations in the grammar should resolve to
    /// an instance of this class.
    class ExternalTokenizer {
        /// Create a tokenizer. The first argument is the function that,
        /// given an input stream, scans for the types of tokens it
        /// recognizes at the stream's position, and calls
        /// [`acceptToken`](#lr.InputStream.acceptToken) when it finds
        /// one.
        constructor(
        /// @internal
        token, options = {}) {
            this.token = token;
            this.contextual = !!options.contextual;
            this.fallback = !!options.fallback;
            this.extend = !!options.extend;
        }
    }
    // Tokenizer data is stored a big uint16 array containing, for each
    // state:
    //
    //  - A group bitmask, indicating what token groups are reachable from
    //    this state, so that paths that can only lead to tokens not in
    //    any of the current groups can be cut off early.
    //
    //  - The position of the end of the state's sequence of accepting
    //    tokens
    //
    //  - The number of outgoing edges for the state
    //
    //  - The accepting tokens, as (token id, group mask) pairs
    //
    //  - The outgoing edges, as (start character, end character, state
    //    index) triples, with end character being exclusive
    //
    // This function interprets that data, running through a stream as
    // long as new states with the a matching group mask can be reached,
    // and updating `token` when it matches a token.
    function readToken$3(data, input, stack, group) {
        let state = 0, groupMask = 1 << group, { parser } = stack.p, { dialect } = parser;
        scan: for (;;) {
            if ((groupMask & data[state]) == 0)
                break;
            let accEnd = data[state + 1];
            // Check whether this state can lead to a token in the current group
            // Accept tokens in this state, possibly overwriting
            // lower-precedence / shorter tokens
            for (let i = state + 3; i < accEnd; i += 2)
                if ((data[i + 1] & groupMask) > 0) {
                    let term = data[i];
                    if (dialect.allows(term) &&
                        (input.token.value == -1 || input.token.value == term || parser.overrides(term, input.token.value))) {
                        input.acceptToken(term);
                        break;
                    }
                }
            // Do a binary search on the state's edges
            for (let next = input.next, low = 0, high = data[state + 2]; low < high;) {
                let mid = (low + high) >> 1;
                let index = accEnd + mid + (mid << 1);
                let from = data[index], to = data[index + 1];
                if (next < from)
                    high = mid;
                else if (next >= to)
                    low = mid + 1;
                else {
                    state = data[index + 2];
                    input.advance();
                    continue scan;
                }
            }
            break;
        }
    }

    // See lezer-generator/src/encode.ts for comments about the encoding
    // used here
    function decodeArray(input, Type = Uint16Array) {
        if (typeof input != "string")
            return input;
        let array = null;
        for (let pos = 0, out = 0; pos < input.length;) {
            let value = 0;
            for (;;) {
                let next = input.charCodeAt(pos++), stop = false;
                if (next == 126 /* BigValCode */) {
                    value = 65535 /* BigVal */;
                    break;
                }
                if (next >= 92 /* Gap2 */)
                    next--;
                if (next >= 34 /* Gap1 */)
                    next--;
                let digit = next - 32 /* Start */;
                if (digit >= 46 /* Base */) {
                    digit -= 46 /* Base */;
                    stop = true;
                }
                value += digit;
                if (stop)
                    break;
                value *= 46 /* Base */;
            }
            if (array)
                array[out++] = value;
            else
                array = new Type(value);
        }
        return array;
    }

    // FIXME find some way to reduce recovery work done when the input
    // doesn't match the grammar at all.
    // Environment variable used to control console output
    const verbose = typeof process != "undefined" && /\bparse\b/.test(process.env.LOG);
    let stackIDs = null;
    var Safety;
    (function (Safety) {
        Safety[Safety["Margin"] = 25] = "Margin";
    })(Safety || (Safety = {}));
    function cutAt(tree, pos, side) {
        let cursor = tree.fullCursor();
        cursor.moveTo(pos);
        for (;;) {
            if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))
                for (;;) {
                    if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)
                        return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25 /* Margin */))
                            : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25 /* Margin */));
                    if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())
                        break;
                    if (!cursor.parent())
                        return side < 0 ? 0 : tree.length;
                }
        }
    }
    class FragmentCursor {
        constructor(fragments, nodeSet) {
            this.fragments = fragments;
            this.nodeSet = nodeSet;
            this.i = 0;
            this.fragment = null;
            this.safeFrom = -1;
            this.safeTo = -1;
            this.trees = [];
            this.start = [];
            this.index = [];
            this.nextFragment();
        }
        nextFragment() {
            let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];
            if (fr) {
                this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;
                this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;
                while (this.trees.length) {
                    this.trees.pop();
                    this.start.pop();
                    this.index.pop();
                }
                this.trees.push(fr.tree);
                this.start.push(-fr.offset);
                this.index.push(0);
                this.nextStart = this.safeFrom;
            }
            else {
                this.nextStart = 1e9;
            }
        }
        // `pos` must be >= any previously given `pos` for this cursor
        nodeAt(pos) {
            if (pos < this.nextStart)
                return null;
            while (this.fragment && this.safeTo <= pos)
                this.nextFragment();
            if (!this.fragment)
                return null;
            for (;;) {
                let last = this.trees.length - 1;
                if (last < 0) { // End of tree
                    this.nextFragment();
                    return null;
                }
                let top = this.trees[last], index = this.index[last];
                if (index == top.children.length) {
                    this.trees.pop();
                    this.start.pop();
                    this.index.pop();
                    continue;
                }
                let next = top.children[index];
                let start = this.start[last] + top.positions[index];
                if (start > pos) {
                    this.nextStart = start;
                    return null;
                }
                if (next instanceof Tree) {
                    if (start == pos) {
                        if (start < this.safeFrom)
                            return null;
                        let end = start + next.length;
                        if (end <= this.safeTo) {
                            let lookAhead = next.prop(NodeProp.lookAhead);
                            if (!lookAhead || end + lookAhead < this.fragment.to)
                                return next;
                        }
                    }
                    this.index[last]++;
                    if (start + next.length >= Math.max(this.safeFrom, pos)) { // Enter this node
                        this.trees.push(next);
                        this.start.push(start);
                        this.index.push(0);
                    }
                }
                else {
                    this.index[last]++;
                    this.nextStart = start + next.length;
                }
            }
        }
    }
    class TokenCache {
        constructor(parser, stream) {
            this.stream = stream;
            this.tokens = [];
            this.mainToken = null;
            this.actions = [];
            this.tokens = parser.tokenizers.map(_ => new CachedToken);
        }
        getActions(stack) {
            let actionIndex = 0;
            let main = null;
            let { parser } = stack.p, { tokenizers } = parser;
            let mask = parser.stateSlot(stack.state, 3 /* TokenizerMask */);
            let context = stack.curContext ? stack.curContext.hash : 0;
            let lookAhead = 0;
            for (let i = 0; i < tokenizers.length; i++) {
                if (((1 << i) & mask) == 0)
                    continue;
                let tokenizer = tokenizers[i], token = this.tokens[i];
                if (main && !tokenizer.fallback)
                    continue;
                if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {
                    this.updateCachedToken(token, tokenizer, stack);
                    token.mask = mask;
                    token.context = context;
                }
                if (token.lookAhead > token.end + 25 /* Margin */)
                    lookAhead = Math.max(token.lookAhead, lookAhead);
                if (token.value != 0 /* Err */) {
                    let startIndex = actionIndex;
                    if (token.extended > -1)
                        actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);
                    actionIndex = this.addActions(stack, token.value, token.end, actionIndex);
                    if (!tokenizer.extend) {
                        main = token;
                        if (actionIndex > startIndex)
                            break;
                    }
                }
            }
            while (this.actions.length > actionIndex)
                this.actions.pop();
            if (lookAhead)
                stack.setLookAhead(lookAhead);
            if (!main && stack.pos == this.stream.end) {
                main = new CachedToken;
                main.value = stack.p.parser.eofTerm;
                main.start = main.end = stack.pos;
                actionIndex = this.addActions(stack, main.value, main.end, actionIndex);
            }
            this.mainToken = main;
            return this.actions;
        }
        getMainToken(stack) {
            if (this.mainToken)
                return this.mainToken;
            let main = new CachedToken, { pos, p } = stack;
            main.start = pos;
            main.end = Math.min(pos + 1, p.stream.end);
            main.value = pos == p.stream.end ? p.parser.eofTerm : 0 /* Err */;
            return main;
        }
        updateCachedToken(token, tokenizer, stack) {
            tokenizer.token(this.stream.reset(stack.pos, token), stack);
            if (token.value > -1) {
                let { parser } = stack.p;
                for (let i = 0; i < parser.specialized.length; i++)
                    if (parser.specialized[i] == token.value) {
                        let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);
                        if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {
                            if ((result & 1) == 0 /* Specialize */)
                                token.value = result >> 1;
                            else
                                token.extended = result >> 1;
                            break;
                        }
                    }
            }
            else {
                token.value = 0 /* Err */;
                token.end = Math.min(stack.p.stream.end, stack.pos + 1);
            }
        }
        putAction(action, token, end, index) {
            // Don't add duplicate actions
            for (let i = 0; i < index; i += 3)
                if (this.actions[i] == action)
                    return index;
            this.actions[index++] = action;
            this.actions[index++] = token;
            this.actions[index++] = end;
            return index;
        }
        addActions(stack, token, end, index) {
            let { state } = stack, { parser } = stack.p, { data } = parser;
            for (let set = 0; set < 2; set++) {
                for (let i = parser.stateSlot(state, set ? 2 /* Skip */ : 1 /* Actions */);; i += 3) {
                    if (data[i] == 65535 /* End */) {
                        if (data[i + 1] == 1 /* Next */) {
                            i = pair(data, i + 2);
                        }
                        else {
                            if (index == 0 && data[i + 1] == 2 /* Other */)
                                index = this.putAction(pair(data, i + 1), token, end, index);
                            break;
                        }
                    }
                    if (data[i] == token)
                        index = this.putAction(pair(data, i + 1), token, end, index);
                }
            }
            return index;
        }
    }
    var Rec;
    (function (Rec) {
        Rec[Rec["Distance"] = 5] = "Distance";
        Rec[Rec["MaxRemainingPerStep"] = 3] = "MaxRemainingPerStep";
        Rec[Rec["MinBufferLengthPrune"] = 200] = "MinBufferLengthPrune";
        Rec[Rec["ForceReduceLimit"] = 10] = "ForceReduceLimit";
    })(Rec || (Rec = {}));
    class Parse$1 {
        constructor(parser, input, fragments, ranges) {
            this.parser = parser;
            this.input = input;
            this.ranges = ranges;
            this.recovering = 0;
            this.nextStackID = 0x2654;
            this.minStackPos = 0;
            this.reused = [];
            this.stoppedAt = null;
            this.stream = new InputStream(input, ranges);
            this.tokens = new TokenCache(parser, this.stream);
            this.topTerm = parser.top[1];
            let { from } = ranges[0];
            this.stacks = [Stack.start(this, parser.top[0], from)];
            this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4
                ? new FragmentCursor(fragments, parser.nodeSet) : null;
        }
        get parsedPos() {
            return this.minStackPos;
        }
        // Move the parser forward. This will process all parse stacks at
        // `this.pos` and try to advance them to a further position. If no
        // stack for such a position is found, it'll start error-recovery.
        //
        // When the parse is finished, this will return a syntax tree. When
        // not, it returns `null`.
        advance() {
            let stacks = this.stacks, pos = this.minStackPos;
            // This will hold stacks beyond `pos`.
            let newStacks = this.stacks = [];
            let stopped, stoppedTokens;
            // Keep advancing any stacks at `pos` until they either move
            // forward or can't be advanced. Gather stacks that can't be
            // advanced further in `stopped`.
            for (let i = 0; i < stacks.length; i++) {
                let stack = stacks[i];
                for (;;) {
                    this.tokens.mainToken = null;
                    if (stack.pos > pos) {
                        newStacks.push(stack);
                    }
                    else if (this.advanceStack(stack, newStacks, stacks)) {
                        continue;
                    }
                    else {
                        if (!stopped) {
                            stopped = [];
                            stoppedTokens = [];
                        }
                        stopped.push(stack);
                        let tok = this.tokens.getMainToken(stack);
                        stoppedTokens.push(tok.value, tok.end);
                    }
                    break;
                }
            }
            if (!newStacks.length) {
                let finished = stopped && findFinished(stopped);
                if (finished)
                    return this.stackToTree(finished);
                if (this.parser.strict) {
                    if (verbose && stopped)
                        console.log("Stuck with token " + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : "none"));
                    throw new SyntaxError("No parse at " + pos);
                }
                if (!this.recovering)
                    this.recovering = 5 /* Distance */;
            }
            if (this.recovering && stopped) {
                let finished = this.runRecovery(stopped, stoppedTokens, newStacks);
                if (finished)
                    return this.stackToTree(finished.forceAll());
            }
            if (this.recovering) {
                let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* MaxRemainingPerStep */;
                if (newStacks.length > maxRemaining) {
                    newStacks.sort((a, b) => b.score - a.score);
                    while (newStacks.length > maxRemaining)
                        newStacks.pop();
                }
                if (newStacks.some(s => s.reducePos > pos))
                    this.recovering--;
            }
            else if (newStacks.length > 1) {
                // Prune stacks that are in the same state, or that have been
                // running without splitting for a while, to avoid getting stuck
                // with multiple successful stacks running endlessly on.
                outer: for (let i = 0; i < newStacks.length - 1; i++) {
                    let stack = newStacks[i];
                    for (let j = i + 1; j < newStacks.length; j++) {
                        let other = newStacks[j];
                        if (stack.sameState(other) ||
                            stack.buffer.length > 200 /* MinBufferLengthPrune */ && other.buffer.length > 200 /* MinBufferLengthPrune */) {
                            if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {
                                newStacks.splice(j--, 1);
                            }
                            else {
                                newStacks.splice(i--, 1);
                                continue outer;
                            }
                        }
                    }
                }
            }
            this.minStackPos = newStacks[0].pos;
            for (let i = 1; i < newStacks.length; i++)
                if (newStacks[i].pos < this.minStackPos)
                    this.minStackPos = newStacks[i].pos;
            return null;
        }
        stopAt(pos) {
            if (this.stoppedAt != null && this.stoppedAt < pos)
                throw new RangeError("Can't move stoppedAt forward");
            this.stoppedAt = pos;
        }
        // Returns an updated version of the given stack, or null if the
        // stack can't advance normally. When `split` and `stacks` are
        // given, stacks split off by ambiguous operations will be pushed to
        // `split`, or added to `stacks` if they move `pos` forward.
        advanceStack(stack, stacks, split) {
            let start = stack.pos, { parser } = this;
            let base = verbose ? this.stackID(stack) + " -> " : "";
            if (this.stoppedAt != null && start > this.stoppedAt)
                return stack.forceReduce() ? stack : null;
            if (this.fragments) {
                let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;
                for (let cached = this.fragments.nodeAt(start); cached;) {
                    let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;
                    if (match > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {
                        stack.useNode(cached, match);
                        if (verbose)
                            console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);
                        return true;
                    }
                    if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)
                        break;
                    let inner = cached.children[0];
                    if (inner instanceof Tree && cached.positions[0] == 0)
                        cached = inner;
                    else
                        break;
                }
            }
            let defaultReduce = parser.stateSlot(stack.state, 4 /* DefaultReduce */);
            if (defaultReduce > 0) {
                stack.reduce(defaultReduce);
                if (verbose)
                    console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535 /* ValueMask */)})`);
                return true;
            }
            let actions = this.tokens.getActions(stack);
            for (let i = 0; i < actions.length;) {
                let action = actions[i++], term = actions[i++], end = actions[i++];
                let last = i == actions.length || !split;
                let localStack = last ? stack : stack.split();
                localStack.apply(action, term, end);
                if (verbose)
                    console.log(base + this.stackID(localStack) + ` (via ${(action & 65536 /* ReduceFlag */) == 0 ? "shift"
                    : `reduce of ${parser.getName(action & 65535 /* ValueMask */)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? "" : ", split"})`);
                if (last)
                    return true;
                else if (localStack.pos > start)
                    stacks.push(localStack);
                else
                    split.push(localStack);
            }
            return false;
        }
        // Advance a given stack forward as far as it will go. Returns the
        // (possibly updated) stack if it got stuck, or null if it moved
        // forward and was given to `pushStackDedup`.
        advanceFully(stack, newStacks) {
            let pos = stack.pos;
            for (;;) {
                if (!this.advanceStack(stack, null, null))
                    return false;
                if (stack.pos > pos) {
                    pushStackDedup(stack, newStacks);
                    return true;
                }
            }
        }
        runRecovery(stacks, tokens, newStacks) {
            let finished = null, restarted = false;
            for (let i = 0; i < stacks.length; i++) {
                let stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];
                let base = verbose ? this.stackID(stack) + " -> " : "";
                if (stack.deadEnd) {
                    if (restarted)
                        continue;
                    restarted = true;
                    stack.restart();
                    if (verbose)
                        console.log(base + this.stackID(stack) + " (restarted)");
                    let done = this.advanceFully(stack, newStacks);
                    if (done)
                        continue;
                }
                let force = stack.split(), forceBase = base;
                for (let j = 0; force.forceReduce() && j < 10 /* ForceReduceLimit */; j++) {
                    if (verbose)
                        console.log(forceBase + this.stackID(force) + " (via force-reduce)");
                    let done = this.advanceFully(force, newStacks);
                    if (done)
                        break;
                    if (verbose)
                        forceBase = this.stackID(force) + " -> ";
                }
                for (let insert of stack.recoverByInsert(token)) {
                    if (verbose)
                        console.log(base + this.stackID(insert) + " (via recover-insert)");
                    this.advanceFully(insert, newStacks);
                }
                if (this.stream.end > stack.pos) {
                    if (tokenEnd == stack.pos) {
                        tokenEnd++;
                        token = 0 /* Err */;
                    }
                    stack.recoverByDelete(token, tokenEnd);
                    if (verbose)
                        console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);
                    pushStackDedup(stack, newStacks);
                }
                else if (!finished || finished.score < stack.score) {
                    finished = stack;
                }
            }
            return finished;
        }
        // Convert the stack's buffer to a syntax tree.
        stackToTree(stack) {
            stack.close();
            return Tree.build({ buffer: StackBufferCursor.create(stack),
                nodeSet: this.parser.nodeSet,
                topID: this.topTerm,
                maxBufferLength: this.parser.bufferLength,
                reused: this.reused,
                start: this.ranges[0].from,
                length: stack.pos - this.ranges[0].from,
                minRepeatType: this.parser.minRepeatTerm });
        }
        stackID(stack) {
            let id = (stackIDs || (stackIDs = new WeakMap)).get(stack);
            if (!id)
                stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));
            return id + stack;
        }
    }
    function pushStackDedup(stack, newStacks) {
        for (let i = 0; i < newStacks.length; i++) {
            let other = newStacks[i];
            if (other.pos == stack.pos && other.sameState(stack)) {
                if (newStacks[i].score < stack.score)
                    newStacks[i] = stack;
                return;
            }
        }
        newStacks.push(stack);
    }
    class Dialect {
        constructor(source, flags, disabled) {
            this.source = source;
            this.flags = flags;
            this.disabled = disabled;
        }
        allows(term) { return !this.disabled || this.disabled[term] == 0; }
    }
    const id = x => x;
    /// Context trackers are used to track stateful context (such as
    /// indentation in the Python grammar, or parent elements in the XML
    /// grammar) needed by external tokenizers. You declare them in a
    /// grammar file as `@context exportName from "module"`.
    ///
    /// Context values should be immutable, and can be updated (replaced)
    /// on shift or reduce actions.
    ///
    /// The export used in a `@context` declaration should be of this
    /// type.
    class ContextTracker {
        /// Define a context tracker.
        constructor(spec) {
            this.start = spec.start;
            this.shift = spec.shift || id;
            this.reduce = spec.reduce || id;
            this.reuse = spec.reuse || id;
            this.hash = spec.hash || (() => 0);
            this.strict = spec.strict !== false;
        }
    }
    /// A parser holds the parse tables for a given grammar, as generated
    /// by `lezer-generator`.
    class LRParser extends Parser {
        /// @internal
        constructor(spec) {
            super();
            /// @internal
            this.wrappers = [];
            if (spec.version != 13 /* Version */)
                throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${13 /* Version */})`);
            let nodeNames = spec.nodeNames.split(" ");
            this.minRepeatTerm = nodeNames.length;
            for (let i = 0; i < spec.repeatNodeCount; i++)
                nodeNames.push("");
            let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);
            let nodeProps = [];
            for (let i = 0; i < nodeNames.length; i++)
                nodeProps.push([]);
            function setProp(nodeID, prop, value) {
                nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);
            }
            if (spec.nodeProps)
                for (let propSpec of spec.nodeProps) {
                    let prop = propSpec[0];
                    for (let i = 1; i < propSpec.length;) {
                        let next = propSpec[i++];
                        if (next >= 0) {
                            setProp(next, prop, propSpec[i++]);
                        }
                        else {
                            let value = propSpec[i + -next];
                            for (let j = -next; j > 0; j--)
                                setProp(propSpec[i++], prop, value);
                            i++;
                        }
                    }
                }
            this.nodeSet = new NodeSet(nodeNames.map((name, i) => NodeType.define({
                name: i >= this.minRepeatTerm ? undefined : name,
                id: i,
                props: nodeProps[i],
                top: topTerms.indexOf(i) > -1,
                error: i == 0,
                skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1
            })));
            this.strict = false;
            this.bufferLength = DefaultBufferLength;
            let tokenArray = decodeArray(spec.tokenData);
            this.context = spec.context;
            this.specialized = new Uint16Array(spec.specialized ? spec.specialized.length : 0);
            this.specializers = [];
            if (spec.specialized)
                for (let i = 0; i < spec.specialized.length; i++) {
                    this.specialized[i] = spec.specialized[i].term;
                    this.specializers[i] = spec.specialized[i].get;
                }
            this.states = decodeArray(spec.states, Uint32Array);
            this.data = decodeArray(spec.stateData);
            this.goto = decodeArray(spec.goto);
            this.maxTerm = spec.maxTerm;
            this.tokenizers = spec.tokenizers.map(value => typeof value == "number" ? new TokenGroup(tokenArray, value) : value);
            this.topRules = spec.topRules;
            this.dialects = spec.dialects || {};
            this.dynamicPrecedences = spec.dynamicPrecedences || null;
            this.tokenPrecTable = spec.tokenPrec;
            this.termNames = spec.termNames || null;
            this.maxNode = this.nodeSet.types.length - 1;
            this.dialect = this.parseDialect();
            this.top = this.topRules[Object.keys(this.topRules)[0]];
        }
        createParse(input, fragments, ranges) {
            let parse = new Parse$1(this, input, fragments, ranges);
            for (let w of this.wrappers)
                parse = w(parse, input, fragments, ranges);
            return parse;
        }
        /// Get a goto table entry @internal
        getGoto(state, term, loose = false) {
            let table = this.goto;
            if (term >= table[0])
                return -1;
            for (let pos = table[term + 1];;) {
                let groupTag = table[pos++], last = groupTag & 1;
                let target = table[pos++];
                if (last && loose)
                    return target;
                for (let end = pos + (groupTag >> 1); pos < end; pos++)
                    if (table[pos] == state)
                        return target;
                if (last)
                    return -1;
            }
        }
        /// Check if this state has an action for a given terminal @internal
        hasAction(state, terminal) {
            let data = this.data;
            for (let set = 0; set < 2; set++) {
                for (let i = this.stateSlot(state, set ? 2 /* Skip */ : 1 /* Actions */), next;; i += 3) {
                    if ((next = data[i]) == 65535 /* End */) {
                        if (data[i + 1] == 1 /* Next */)
                            next = data[i = pair(data, i + 2)];
                        else if (data[i + 1] == 2 /* Other */)
                            return pair(data, i + 2);
                        else
                            break;
                    }
                    if (next == terminal || next == 0 /* Err */)
                        return pair(data, i + 1);
                }
            }
            return 0;
        }
        /// @internal
        stateSlot(state, slot) {
            return this.states[(state * 6 /* Size */) + slot];
        }
        /// @internal
        stateFlag(state, flag) {
            return (this.stateSlot(state, 0 /* Flags */) & flag) > 0;
        }
        /// @internal
        validAction(state, action) {
            if (action == this.stateSlot(state, 4 /* DefaultReduce */))
                return true;
            for (let i = this.stateSlot(state, 1 /* Actions */);; i += 3) {
                if (this.data[i] == 65535 /* End */) {
                    if (this.data[i + 1] == 1 /* Next */)
                        i = pair(this.data, i + 2);
                    else
                        return false;
                }
                if (action == pair(this.data, i + 1))
                    return true;
            }
        }
        /// Get the states that can follow this one through shift actions or
        /// goto jumps. @internal
        nextStates(state) {
            let result = [];
            for (let i = this.stateSlot(state, 1 /* Actions */);; i += 3) {
                if (this.data[i] == 65535 /* End */) {
                    if (this.data[i + 1] == 1 /* Next */)
                        i = pair(this.data, i + 2);
                    else
                        break;
                }
                if ((this.data[i + 2] & (65536 /* ReduceFlag */ >> 16)) == 0) {
                    let value = this.data[i + 1];
                    if (!result.some((v, i) => (i & 1) && v == value))
                        result.push(this.data[i], value);
                }
            }
            return result;
        }
        /// @internal
        overrides(token, prev) {
            let iPrev = findOffset(this.data, this.tokenPrecTable, prev);
            return iPrev < 0 || findOffset(this.data, this.tokenPrecTable, token) < iPrev;
        }
        /// Configure the parser. Returns a new parser instance that has the
        /// given settings modified. Settings not provided in `config` are
        /// kept from the original parser.
        configure(config) {
            // Hideous reflection-based kludge to make it easy to create a
            // slightly modified copy of a parser.
            let copy = Object.assign(Object.create(LRParser.prototype), this);
            if (config.props)
                copy.nodeSet = this.nodeSet.extend(...config.props);
            if (config.top) {
                let info = this.topRules[config.top];
                if (!info)
                    throw new RangeError(`Invalid top rule name ${config.top}`);
                copy.top = info;
            }
            if (config.tokenizers)
                copy.tokenizers = this.tokenizers.map(t => {
                    let found = config.tokenizers.find(r => r.from == t);
                    return found ? found.to : t;
                });
            if (config.contextTracker)
                copy.context = config.contextTracker;
            if (config.dialect)
                copy.dialect = this.parseDialect(config.dialect);
            if (config.strict != null)
                copy.strict = config.strict;
            if (config.wrap)
                copy.wrappers = copy.wrappers.concat(config.wrap);
            if (config.bufferLength != null)
                copy.bufferLength = config.bufferLength;
            return copy;
        }
        /// Returns the name associated with a given term. This will only
        /// work for all terms when the parser was generated with the
        /// `--names` option. By default, only the names of tagged terms are
        /// stored.
        getName(term) {
            return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);
        }
        /// The eof term id is always allocated directly after the node
        /// types. @internal
        get eofTerm() { return this.maxNode + 1; }
        /// The type of top node produced by the parser.
        get topNode() { return this.nodeSet.types[this.top[1]]; }
        /// @internal
        dynamicPrecedence(term) {
            let prec = this.dynamicPrecedences;
            return prec == null ? 0 : prec[term] || 0;
        }
        /// @internal
        parseDialect(dialect) {
            let values = Object.keys(this.dialects), flags = values.map(() => false);
            if (dialect)
                for (let part of dialect.split(" ")) {
                    let id = values.indexOf(part);
                    if (id >= 0)
                        flags[id] = true;
                }
            let disabled = null;
            for (let i = 0; i < values.length; i++)
                if (!flags[i]) {
                    for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535 /* End */;)
                        (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;
                }
            return new Dialect(dialect, flags, disabled);
        }
        /// (used by the output of the parser generator) @internal
        static deserialize(spec) {
            return new LRParser(spec);
        }
    }
    function pair(data, off) { return data[off] | (data[off + 1] << 16); }
    function findOffset(data, start, term) {
        for (let i = start, next; (next = data[i]) != 65535 /* End */; i++)
            if (next == term)
                return i - start;
        return -1;
    }
    function findFinished(stacks) {
        let best = null;
        for (let stack of stacks) {
            let stopped = stack.p.stoppedAt;
            if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) &&
                stack.p.parser.stateFlag(stack.state, 2 /* Accepting */) &&
                (!best || best.score < stack.score))
                best = stack;
        }
        return best;
    }

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const scriptText = 53,
      StartCloseScriptTag = 1,
      styleText = 54,
      StartCloseStyleTag = 2,
      textareaText = 55,
      StartCloseTextareaTag = 3,
      StartTag$1 = 4,
      StartScriptTag = 5,
      StartStyleTag = 6,
      StartTextareaTag = 7,
      StartCloseTag$1 = 8,
      NoMatchStartCloseTag = 9,
      MismatchedStartCloseTag = 10,
      missingCloseTag = 56,
      IncompleteCloseTag = 11,
      SelfCloseEndTag = 12,
      commentContent$1$1 = 57,
      Element$2 = 18,
      ScriptText = 27,
      StyleText = 30,
      TextareaText = 33,
      OpenTag$1 = 35,
      Dialect_noMatch = 0;

    /* Hand-written tokenizers for HTML. */

    const selfClosers = {
      area: true, base: true, br: true, col: true, command: true,
      embed: true, frame: true, hr: true, img: true, input: true,
      keygen: true, link: true, meta: true, param: true, source: true,
      track: true, wbr: true, menuitem: true
    };

    const implicitlyClosed = {
      dd: true, li: true, optgroup: true, option: true, p: true,
      rp: true, rt: true, tbody: true, td: true, tfoot: true,
      th: true, tr: true
    };

    const closeOnOpen = {
      dd: {dd: true, dt: true},
      dt: {dd: true, dt: true},
      li: {li: true},
      option: {option: true, optgroup: true},
      optgroup: {optgroup: true},
      p: {
        address: true, article: true, aside: true, blockquote: true, dir: true,
        div: true, dl: true, fieldset: true, footer: true, form: true,
        h1: true, h2: true, h3: true, h4: true, h5: true, h6: true,
        header: true, hgroup: true, hr: true, menu: true, nav: true, ol: true,
        p: true, pre: true, section: true, table: true, ul: true
      },
      rp: {rp: true, rt: true},
      rt: {rp: true, rt: true},
      tbody: {tbody: true, tfoot: true},
      td: {td: true, th: true},
      tfoot: {tbody: true},
      th: {td: true, th: true},
      thead: {tbody: true, tfoot: true},
      tr: {tr: true}
    };

    function nameChar$1(ch) {
      return ch == 45 || ch == 46 || ch == 58 || ch >= 65 && ch <= 90 || ch == 95 || ch >= 97 && ch <= 122 || ch >= 161
    }

    function isSpace$1(ch) {
      return ch == 9 || ch == 10 || ch == 13 || ch == 32
    }

    let cachedName$1 = null, cachedInput$1 = null, cachedPos$1 = 0;
    function tagNameAfter$1(input, offset) {
      let pos = input.pos + offset;
      if (cachedPos$1 == pos && cachedInput$1 == input) return cachedName$1
      let next = input.peek(offset);
      while (isSpace$1(next)) next = input.peek(++offset);
      let name = "";
      for (;;) {
        if (!nameChar$1(next)) break
        name += String.fromCharCode(next);
        next = input.peek(++offset);
      }
      // Undefined to signal there's a <? or <!, null for just missing
      cachedInput$1 = input; cachedPos$1 = pos;
      return cachedName$1 = name || (next == question || next == bang ? undefined : null)
    }

    const lessThan = 60, greaterThan = 62, slash$1 = 47, question = 63, bang = 33;

    function ElementContext$1(name, parent) {
      this.name = name;
      this.parent = parent;
      this.hash = parent ? parent.hash : 0;
      for (let i = 0; i < name.length; i++) this.hash += (this.hash << 4) + name.charCodeAt(i) + (name.charCodeAt(i) << 8);
    }

    const startTagTerms = [StartTag$1, StartScriptTag, StartStyleTag, StartTextareaTag];

    const elementContext$1 = new ContextTracker({
      start: null,
      shift(context, term, stack, input) {
        return startTagTerms.indexOf(term) > -1 ? new ElementContext$1(tagNameAfter$1(input, 1) || "", context) : context
      },
      reduce(context, term) {
        return term == Element$2 && context ? context.parent : context
      },
      reuse(context, node, stack, input) {
        let type = node.type.id;
        return type == StartTag$1 || type == OpenTag$1
          ? new ElementContext$1(tagNameAfter$1(input, 1) || "", context) : context
      },
      hash(context) { return context ? context.hash : 0 },
      strict: false
    });

    const tagStart = new ExternalTokenizer((input, stack) => {
      if (input.next != lessThan) {
        // End of file, close any open tags
        if (input.next < 0 && stack.context) input.acceptToken(missingCloseTag);
        return
      }
      input.advance();
      let close = input.next == slash$1;
      if (close) input.advance();
      let name = tagNameAfter$1(input, 0);
      if (name === undefined) return
      if (!name) return input.acceptToken(close ? IncompleteCloseTag : StartTag$1)

      let parent = stack.context ? stack.context.name : null;
      if (close) {
        if (name == parent) return input.acceptToken(StartCloseTag$1)
        if (parent && implicitlyClosed[parent]) return input.acceptToken(missingCloseTag, -2)
        if (stack.dialectEnabled(Dialect_noMatch)) return input.acceptToken(NoMatchStartCloseTag)
        for (let cx = stack.context; cx; cx = cx.parent) if (cx.name == name) return
        input.acceptToken(MismatchedStartCloseTag);
      } else {
        if (name == "script") return input.acceptToken(StartScriptTag)
        if (name == "style") return input.acceptToken(StartStyleTag)
        if (name == "textarea") return input.acceptToken(StartTextareaTag)
        if (parent && closeOnOpen[parent] && closeOnOpen[parent][name]) input.acceptToken(missingCloseTag, -1);
        else input.acceptToken(StartTag$1);
      }
    }, {contextual: true});

    const selfClosed = new ExternalTokenizer((input, stack) => {
      let size = 1;
      if (input.next == slash$1) {
        if (input.peek(1) != greaterThan) return
        size = 2;
      } else if (input.next != greaterThan) {
        return
      }
      if (stack.context && selfClosers[stack.context.name]) input.acceptToken(SelfCloseEndTag, size);
    });

    const commentContent$2 = new ExternalTokenizer(input => {
      for (let endPos = 0, i = 0;; i++) {
        if (input.next < 0) {
          if (i) input.acceptToken(commentContent$1$1);
          break
        }
        if (input.next == "-->".charCodeAt(endPos)) {
          endPos++;
          if (endPos == 3) {
            if (i > 3) input.acceptToken(commentContent$1$1, -2);
            break
          }
        } else {
          endPos = 0;
        }
        input.advance();
      }
    });

    function contentTokenizer(tag, textToken, endToken) {
      let lastState = 2 + tag.length;
      return new ExternalTokenizer(input => {
        // state means:
        // - 0 nothing matched
        // - 1 '<' matched
        // - 2 '</' + possibly whitespace matched
        // - 3-(1+tag.length) part of the tag matched
        // - lastState whole tag + possibly whitespace matched
        for (let state = 0, matchedLen = 0, i = 0;; i++) {
          if (input.next < 0) {
            if (i) input.acceptToken(textToken);
            break
          }
          if (state == 0 && input.next == lessThan ||
              state == 1 && input.next == slash$1 ||
              state >= 2 && state < lastState && input.next == tag.charCodeAt(state - 2)) {
            state++;
            matchedLen++;
          } else if ((state == 2 || state == lastState) && isSpace$1(input.next)) {
            matchedLen++;
          } else if (state == lastState && input.next == greaterThan) {
            if (i > matchedLen)
              input.acceptToken(textToken, -matchedLen);
            else
              input.acceptToken(endToken, -(matchedLen - 2));
            break
          } else if ((input.next == 10 /* '\n' */ || input.next == 13 /* '\r' */) && i) {
            input.acceptToken(textToken, 1);
            break
          } else {
            state = matchedLen = 0;
          }
          input.advance();
        }
      })
    }

    const scriptTokens = contentTokenizer("script", scriptText, StartCloseScriptTag);

    const styleTokens = contentTokenizer("style", styleText, StartCloseStyleTag);

    const textareaTokens = contentTokenizer("textarea", textareaText, StartCloseTextareaTag);

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const parser$9 = LRParser.deserialize({
      version: 13,
      states: ",fOVO!jOOO!TQ#tO'#CoO!YQ#tO'#CyO!_Q#tO'#C|O!dQ#tO'#DPO!iOXO'#CnO!tOYO'#CnO#PO[O'#CnO$YO!jO'#CnOOOW'#Cn'#CnO$aO$fO'#DSO$iQ#tO'#DUO$nQ#tO'#DVOOOW'#Dj'#DjOOOW'#DX'#DXQVO!jOOO$sQ&jO,59ZO${Q&jO,59eO%TQ&jO,59hO%]Q&zO,59kOOOX'#D]'#D]O%hOXO'#CwO%sOXO,59YOOOY'#D^'#D^O%{OYO'#CzO&WOYO,59YOOO['#D_'#D_O&`O[O'#C}O&kO[O,59YOOOW'#D`'#D`O&sO!jO,59YO&zQ#tO'#DQOOOW,59Y,59YOOOp'#Da'#DaO'PO$fO,59nOOOW,59n,59nO'XQ#tO,59pO'^Q#tO,59qOOOW-E7V-E7VO'cQ&zO'#CqOOQ`'#DY'#DYO'qQ&jO1G.uOOOX1G.u1G.uO'yQ&jO1G/POOOY1G/P1G/PO(RQ&jO1G/SOOO[1G/S1G/SO(ZQ&zO1G/VOOOW1G/V1G/VOOOW1G/X1G/XOOOX-E7Z-E7ZO(fQ#tO'#CxOOOW1G.t1G.tOOOY-E7[-E7[O(kQ#tO'#C{OOO[-E7]-E7]O(pQ#tO'#DOOOOW-E7^-E7^O(uQ#tO,59lOOOp-E7_-E7_OOOW1G/Y1G/YOOOW1G/[1G/[OOOW1G/]1G/]O(zQ,UO,59]OOQ`-E7W-E7WOOOX7+$a7+$aOOOY7+$k7+$kOOO[7+$n7+$nOOOW7+$q7+$qOOOW7+$s7+$sO)VQ#tO,59dO)[Q#tO,59gO)aQ#tO,59jOOOW1G/W1G/WO)fO7[O'#CtO)tOMhO'#CtOOQ`1G.w1G.wOOOW1G/O1G/OOOOW1G/R1G/ROOOW1G/U1G/UOOOO'#DZ'#DZO*SO7[O,59`OOQ`,59`,59`OOOO'#D['#D[O*bOMhO,59`OOOO-E7X-E7XOOQ`1G.z1G.zOOOO-E7Y-E7Y",
      stateData: "*x~O!]OS~OSSOTPOUQOVROX[OYZOZ]O^]O_]O`]Oa]Ow]Oz^O!cYO~Od`O~OdaO~OdbO~OdcO~O!VdOPkP!YkP~O!WgOQnP!YnP~O!XjORqP!YqP~OSSOTPOUQOVROWoOX[OYZOZ]O^]O_]O`]Oa]Ow]O!cYO~O!YpO~P#[O!ZqO!dsO~OdtO~OduO~OfwOjzO~OfwOj|O~OfwOj!OO~O[!ROfwOj!QO~O!VdOPkX!YkX~OP!TO!Y!UO~O!WgOQnX!YnX~OQ!WO!Y!UO~O!XjORqX!YqX~OR!YO!Y!UO~O!Y!UO~P#[Od![O~O!ZqO!d!^O~Oj!_O~Oj!`O~Og!aOfeXjeX[eX~OfwOj!cO~OfwOj!dO~OfwOj!eO~O[!gOfwOj!fO~Od!hO~Od!iO~Od!jO~Oj!kO~Oi!nO!_!lO!a!mO~Oj!oO~Oj!pO~Oj!qO~O_!rO`!rO!_!tO!`!rO~O_!uO`!uO!a!tO!b!uO~O_!rO`!rO!_!xO!`!rO~O_!uO`!uO!a!xO!b!uO~O`_a!cwz!c~",
      goto: "%i!_PPPPPPPPPPPPPPPPPP!`!fP!lPP!vPP!y!|#P#V#Y#]#c#f#i#o#u!`P!`!`P#{$R$e$k$q$w$}%T%ZPPPPPPPP%aX]OW_nXTOW_nax`abcy{}!PR!n!aRfTR!UfXUOW_nRiUR!UiXVOW_nRlVR!UlXWOW_nQpWR!UnXXOW_nQ_ORv_Qy`Q{aQ}bQ!PcX!by{}!PQ!s!lR!w!sQ!v!mR!y!vQeTR!SeQhUR!VhQkVR!XkQnWR!ZnQrYR!]rS^O_TmWn",
      nodeNames: "⚠ StartCloseTag StartCloseTag StartCloseTag StartTag StartTag StartTag StartTag StartCloseTag StartCloseTag StartCloseTag IncompleteCloseTag SelfCloseEndTag Document Text EntityReference CharacterReference InvalidEntity Element OpenTag TagName Attribute AttributeName Is AttributeValue UnquotedAttributeValue EndTag ScriptText CloseTag OpenTag StyleText CloseTag OpenTag TextareaText CloseTag OpenTag CloseTag SelfClosingTag Comment ProcessingInst MismatchedCloseTag CloseTag DoctypeDecl",
      maxTerm: 66,
      context: elementContext$1,
      nodeProps: [
        [NodeProp.closedBy, -9,1,2,3,5,6,7,8,9,10,"EndTag",4,"EndTag SelfCloseEndTag",-4,19,29,32,35,"CloseTag"],
        [NodeProp.group, -9,11,15,16,17,18,38,39,40,41,"Entity",14,"Entity TextContent",-3,27,30,33,"TextContent Entity"],
        [NodeProp.openedBy, 12,"StartTag",26,"StartTag StartCloseTag",-4,28,31,34,36,"OpenTag"]
      ],
      skippedNodes: [0],
      repeatNodeCount: 9,
      tokenData: "!#b!aR!WOX$kXY)sYZ)sZ]$k]^)s^p$kpq)sqr$krs*zsv$kvw+dwx2yx}$k}!O3f!O!P$k!P!Q7_!Q![$k![!]8u!]!^$k!^!_>b!_!`!!p!`!a8T!a!c$k!c!}8u!}#R$k#R#S8u#S#T$k#T#o8u#o$f$k$f$g&R$g%W$k%W%o8u%o%p$k%p&a8u&a&b$k&b1p8u1p4U$k4U4d8u4d4e$k4e$IS8u$IS$I`$k$I`$Ib8u$Ib$Kh$k$Kh%#t8u%#t&/x$k&/x&Et8u&Et&FV$k&FV;'S8u;'S;:j<t;:j?&r$k?&r?Ah8u?Ah?BY$k?BY?Mn8u?Mn~$k!Z$vc^PiW!``!bpOX$kXZ&RZ]$k]^&R^p$kpq&Rqr$krs&qsv$kvw)Rwx'rx!P$k!P!Q&R!Q!^$k!^!_(k!_!a&R!a$f$k$f$g&R$g~$k!R&[V^P!``!bpOr&Rrs&qsv&Rwx'rx!^&R!^!_(k!_~&Rq&xT^P!bpOv&qwx'Xx!^&q!^!_'g!_~&qP'^R^POv'Xw!^'X!_~'Xp'lQ!bpOv'gx~'ga'yU^P!``Or'rrs'Xsv'rw!^'r!^!_(]!_~'r`(bR!``Or(]sv(]w~(]!Q(rT!``!bpOr(krs'gsv(kwx(]x~(kW)WXiWOX)RZ])R^p)Rqr)Rsw)Rx!P)R!Q!^)R!a$f)R$g~)R!a*O^^P!``!bp!]^OX&RXY)sYZ)sZ]&R]^)s^p&Rpq)sqr&Rrs&qsv&Rwx'rx!^&R!^!_(k!_~&R!Z+TT!_h^P!bpOv&qwx'Xx!^&q!^!_'g!_~&q!Z+kbiWaPOX,sXZ.QZ],s]^.Q^p,sqr,srs.Qst/]tw,swx.Qx!P,s!P!Q.Q!Q!],s!]!^)R!^!a.Q!a$f,s$f$g.Q$g~,s!Z,xbiWOX,sXZ.QZ],s]^.Q^p,sqr,srs.Qst)Rtw,swx.Qx!P,s!P!Q.Q!Q!],s!]!^.i!^!a.Q!a$f,s$f$g.Q$g~,s!R.TTOp.Qqs.Qt!].Q!]!^.d!^~.Q!R.iO_!R!Z.pXiW_!ROX)RZ])R^p)Rqr)Rsw)Rx!P)R!Q!^)R!a$f)R$g~)R!Z/baiWOX0gXZ1qZ]0g]^1q^p0gqr0grs1qsw0gwx1qx!P0g!P!Q1q!Q!]0g!]!^)R!^!a1q!a$f0g$f$g1q$g~0g!Z0laiWOX0gXZ1qZ]0g]^1q^p0gqr0grs1qsw0gwx1qx!P0g!P!Q1q!Q!]0g!]!^2V!^!a1q!a$f0g$f$g1q$g~0g!R1tSOp1qq!]1q!]!^2Q!^~1q!R2VO`!R!Z2^XiW`!ROX)RZ])R^p)Rqr)Rsw)Rx!P)R!Q!^)R!a$f)R$g~)R!Z3SU!ax^P!``Or'rrs'Xsv'rw!^'r!^!_(]!_~'r!]3qe^PiW!``!bpOX$kXZ&RZ]$k]^&R^p$kpq&Rqr$krs&qsv$kvw)Rwx'rx}$k}!O5S!O!P$k!P!Q&R!Q!^$k!^!_(k!_!a&R!a$f$k$f$g&R$g~$k!]5_d^PiW!``!bpOX$kXZ&RZ]$k]^&R^p$kpq&Rqr$krs&qsv$kvw)Rwx'rx!P$k!P!Q&R!Q!^$k!^!_(k!_!`&R!`!a6m!a$f$k$f$g&R$g~$k!T6xV^P!``!bp!dQOr&Rrs&qsv&Rwx'rx!^&R!^!_(k!_~&R!X7hX^P!``!bpOr&Rrs&qsv&Rwx'rx!^&R!^!_(k!_!`&R!`!a8T!a~&R!X8`VjU^P!``!bpOr&Rrs&qsv&Rwx'rx!^&R!^!_(k!_~&R!a9U!YfSdQ^PiW!``!bpOX$kXZ&RZ]$k]^&R^p$kpq&Rqr$krs&qsv$kvw)Rwx'rx}$k}!O8u!O!P8u!P!Q&R!Q![8u![!]8u!]!^$k!^!_(k!_!a&R!a!c$k!c!}8u!}#R$k#R#S8u#S#T$k#T#o8u#o$f$k$f$g&R$g$}$k$}%O8u%O%W$k%W%o8u%o%p$k%p&a8u&a&b$k&b1p8u1p4U8u4U4d8u4d4e$k4e$IS8u$IS$I`$k$I`$Ib8u$Ib$Je$k$Je$Jg8u$Jg$Kh$k$Kh%#t8u%#t&/x$k&/x&Et8u&Et&FV$k&FV;'S8u;'S;:j<t;:j?&r$k?&r?Ah8u?Ah?BY$k?BY?Mn8u?Mn~$k!a=Pe^PiW!``!bpOX$kXZ&RZ]$k]^&R^p$kpq&Rqr$krs&qsv$kvw)Rwx'rx!P$k!P!Q&R!Q!^$k!^!_(k!_!a&R!a$f$k$f$g&R$g;=`$k;=`<%l8u<%l~$k!R>iW!``!bpOq(kqr?Rrs'gsv(kwx(]x!a(k!a!bKj!b~(k!R?YZ!``!bpOr(krs'gsv(kwx(]x}(k}!O?{!O!f(k!f!gAR!g#W(k#W#XGz#X~(k!R@SV!``!bpOr(krs'gsv(kwx(]x}(k}!O@i!O~(k!R@rT!``!bp!cPOr(krs'gsv(kwx(]x~(k!RAYV!``!bpOr(krs'gsv(kwx(]x!q(k!q!rAo!r~(k!RAvV!``!bpOr(krs'gsv(kwx(]x!e(k!e!fB]!f~(k!RBdV!``!bpOr(krs'gsv(kwx(]x!v(k!v!wBy!w~(k!RCQV!``!bpOr(krs'gsv(kwx(]x!{(k!{!|Cg!|~(k!RCnV!``!bpOr(krs'gsv(kwx(]x!r(k!r!sDT!s~(k!RD[V!``!bpOr(krs'gsv(kwx(]x!g(k!g!hDq!h~(k!RDxW!``!bpOrDqrsEbsvDqvwEvwxFfx!`Dq!`!aGb!a~DqqEgT!bpOvEbvxEvx!`Eb!`!aFX!a~EbPEyRO!`Ev!`!aFS!a~EvPFXOzPqF`Q!bpzPOv'gx~'gaFkV!``OrFfrsEvsvFfvwEvw!`Ff!`!aGQ!a~FfaGXR!``zPOr(]sv(]w~(]!RGkT!``!bpzPOr(krs'gsv(kwx(]x~(k!RHRV!``!bpOr(krs'gsv(kwx(]x#c(k#c#dHh#d~(k!RHoV!``!bpOr(krs'gsv(kwx(]x#V(k#V#WIU#W~(k!RI]V!``!bpOr(krs'gsv(kwx(]x#h(k#h#iIr#i~(k!RIyV!``!bpOr(krs'gsv(kwx(]x#m(k#m#nJ`#n~(k!RJgV!``!bpOr(krs'gsv(kwx(]x#d(k#d#eJ|#e~(k!RKTV!``!bpOr(krs'gsv(kwx(]x#X(k#X#YDq#Y~(k!RKqW!``!bpOrKjrsLZsvKjvwLowxNPx!aKj!a!b! g!b~KjqL`T!bpOvLZvxLox!aLZ!a!bM^!b~LZPLrRO!aLo!a!bL{!b~LoPMORO!`Lo!`!aMX!a~LoPM^OwPqMcT!bpOvLZvxLox!`LZ!`!aMr!a~LZqMyQ!bpwPOv'gx~'gaNUV!``OrNPrsLosvNPvwLow!aNP!a!bNk!b~NPaNpV!``OrNPrsLosvNPvwLow!`NP!`!a! V!a~NPa! ^R!``wPOr(]sv(]w~(]!R! nW!``!bpOrKjrsLZsvKjvwLowxNPx!`Kj!`!a!!W!a~Kj!R!!aT!``!bpwPOr(krs'gsv(kwx(]x~(k!V!!{VgS^P!``!bpOr&Rrs&qsv&Rwx'rx!^&R!^!_(k!_~&R",
      tokenizers: [scriptTokens, styleTokens, textareaTokens, tagStart, selfClosed, commentContent$2, 0, 1, 2, 3, 4, 5],
      topRules: {"Document":[0,13]},
      dialects: {noMatch: 0},
      tokenPrec: 446
    });

    function getAttrs(element, input) {
      let attrs = Object.create(null);
      for (let att of element.firstChild.getChildren("Attribute")) {
        let name = att.getChild("AttributeName"), value = att.getChild("AttributeValue") || att.getChild("UnquotedAttributeValue");
        if (name) attrs[input.read(name.from, name.to)] =
          !value ? "" : value.name == "AttributeValue" ? input.read(value.from + 1, value.to - 1) : input.read(value.from, value.to);
      }
      return attrs
    }

    function maybeNest(node, input, tags) {
      let attrs;
      for (let tag of tags) {
        if (!tag.attrs || tag.attrs(attrs || (attrs = getAttrs(node.node.parent, input))))
          return {parser: tag.parser}
      }
      return null
    }

    // tags: {
    //   tag: "script" | "style" | "textarea",
    //   attrs?: ({[attr: string]: string}) => boolean,
    //   parser: Parser
    // }[]
     
    function configureNesting(tags) {
      let script = [], style = [], textarea = [];
      for (let tag of tags) {
        let array = tag.tag == "script" ? script : tag.tag == "style" ? style : tag.tag == "textarea" ? textarea : null;
        if (!array) throw new RangeError("Only script, style, and textarea tags can host nested parsers")
        array.push(tag);
      }
      return parseMixed((node, input) => {
        let id = node.type.id;
        if (id == ScriptText) return maybeNest(node, input, script)
        if (id == StyleText) return maybeNest(node, input, style)
        if (id == TextareaText) return maybeNest(node, input, textarea)
        return null
      })
    }

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const descendantOp = 92,
      Unit = 1,
      callee = 93,
      identifier$3 = 94;

    /* Hand-written tokenizers for CSS tokens that can't be
       expressed by Lezer's built-in tokenizer. */

    const space$2 = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8193, 8194, 8195, 8196, 8197,
                   8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288];
    const colon = 58, parenL = 40, underscore = 95, bracketL = 91, dash = 45, period = 46,
          hash$1 = 35, percent = 37;

    function isAlpha$1(ch) { return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 || ch >= 161 }

    function isDigit$1(ch) { return ch >= 48 && ch <= 57 }

    const identifiers$9 = new ExternalTokenizer(input => {
      for (let inside = false, i = 0;; i++) {
        let {next} = input;
        if (isAlpha$1(next) || next == dash || next == underscore || (inside && isDigit$1(next))) {
          if (!inside && (next != dash || i > 0)) inside = true;
          input.advance();
        } else {
          if (inside)
            input.acceptToken(next == parenL ? callee : identifier$3);
          break
        }
      }
    });

    const descendant = new ExternalTokenizer(input => {
      if (space$2.includes(input.peek(-1))) {
        let {next} = input;
        if (isAlpha$1(next) || next == underscore || next == hash$1 || next == period ||
            next == bracketL || next == colon || next == dash)
          input.acceptToken(descendantOp);
      }
    });

    const unitToken = new ExternalTokenizer(input => {
      if (!space$2.includes(input.peek(-1))) {
        let {next} = input;
        if (next == percent) { input.advance(); input.acceptToken(Unit); }
        if (isAlpha$1(next)) {
          do { input.advance(); } while (isAlpha$1(input.next))
          input.acceptToken(Unit);
        }
      }
    });

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const spec_callee = {__proto__:null,lang:30, "nth-child":30, "nth-last-child":30, "nth-of-type":30, dir:30, url:58, "url-prefix":58, domain:58, regexp:58, selector:132};
    const spec_AtKeyword = {__proto__:null,"@import":112, "@media":136, "@charset":140, "@namespace":144, "@keyframes":150, "@supports":162};
    const spec_identifier$5 = {__proto__:null,not:126, only:126, from:156, to:158};
    const parser$8 = LRParser.deserialize({
      version: 13,
      states: "7WOYQ[OOOOQP'#Cc'#CcOOQP'#Cb'#CbO!ZQ[O'#CeO!}QXO'#C`O#UQ[O'#CgO#aQ[O'#DOO#fQ[O'#DSOOQP'#Eb'#EbO#kQdO'#DdO$SQ[O'#DqO#kQdO'#DsO$eQ[O'#DuO$pQ[O'#DxO$uQ[O'#EOO%TQ[O'#EQOOQS'#Ea'#EaOOQS'#ER'#ERQYQ[OOOOQP'#Cf'#CfOOQP,59P,59PO!ZQ[O,59PO%[Q[O'#EUO%vQWO,58zO&OQ[O,59RO#aQ[O,59jO#fQ[O,59nO%[Q[O,59rO%[Q[O,59tO%[Q[O,59uO'[Q[O'#D_OOQS,58z,58zOOQP'#Cj'#CjOOQO'#C|'#C|OOQP,59R,59RO'cQWO,59RO'hQWO,59ROOQP'#DQ'#DQOOQP,59j,59jOOQO'#DU'#DUO'mQ`O,59nOOQS'#Co'#CoO#kQdO'#CpO'uQvO'#CrO(|QtO,5:OOOQO'#Cw'#CwO'cQWO'#CvO)bQWO'#CxOOQS'#Ee'#EeOOQO'#Dg'#DgO)gQ[O'#DnO)uQWO'#EhO$uQ[O'#DlO*TQWO'#DoOOQO'#Ei'#EiO%yQWO,5:]O*YQpO,5:_OOQS'#Dw'#DwO*bQWO,5:aO*gQ[O,5:aOOQO'#Dz'#DzO*oQWO,5:dO*tQWO,5:jO*|QWO,5:lOOQS-E8P-E8POOQP1G.k1G.kO+pQXO,5:pOOQO-E8S-E8SOOQS1G.f1G.fOOQP1G.m1G.mO'cQWO1G.mO'hQWO1G.mOOQP1G/U1G/UO+}Q`O1G/YO,hQXO1G/^O-OQXO1G/`O-fQXO1G/aO-|QXO'#CcO.qQWO'#D`OOQS,59y,59yO.vQWO,59yO/OQ[O,59yO/VQdO'#CnO/^Q[O'#C}OOQP1G/Y1G/YO#kQdO1G/YO/eQpO,59[OOQS,59^,59^O#kQdO,59`O/mQWO1G/jOOQS,59b,59bO/rQ!bO,59dO/zQWO'#DgO0VQWO,5:SO0[QWO,5:YO$uQ[O,5:UO$uQ[O'#EXO0dQWO,5;SO0oQWO,5:WO%[Q[O,5:ZOOQS1G/w1G/wOOQS1G/y1G/yOOQS1G/{1G/{O1QQWO1G/{O1VQdO'#D{OOQS1G0O1G0OOOQS1G0U1G0UOOQS1G0W1G0WOOQP7+$X7+$XOOQP7+$t7+$tO#kQdO7+$tO#kQdO,59zO1eQ[O'#EWO1oQWO1G/eOOQS1G/e1G/eO1oQWO1G/eO1wQtO'#ESO2iQdO'#EdO2sQWO,59YO2xQXO'#EgO3PQWO,59iO3UQpO7+$tOOQS1G.v1G.vOOQS1G.z1G.zOOQS7+%U7+%UO3^QWO1G/OO#kQdO1G/nOOQO1G/t1G/tOOQO1G/p1G/pO3cQWO,5:sOOQO-E8V-E8VO3qQXO1G/uOOQS7+%g7+%gO3xQYO'#CrO%yQWO'#EYO4QQdO,5:gOOQS,5:g,5:gO4`QpO<<H`O4hQtO1G/fOOQO,5:r,5:rO4{Q[O,5:rOOQO-E8U-E8UOOQS7+%P7+%PO5VQWO7+%POOQS-E8Q-E8QO#kQdO'#ETO5_QWO,5;OOOQT1G.t1G.tO5gQWO,5;ROOQP1G/T1G/TOOQP<<H`<<H`OOQS7+$j7+$jO5oQdO7+%YOOQO7+%a7+%aOOQS,5:t,5:tOOQS-E8W-E8WOOQS1G0R1G0ROOQPAN=zAN=zO5vQtO'#EVO#kQdO'#EVO6nQdO7+%QOOQO7+%Q7+%QOOQO1G0^1G0^OOQS<<Hk<<HkO7OQdO,5:oOOQO-E8R-E8ROOQO<<Ht<<HtO7YQtO,5:qOOQS-E8T-E8TOOQO<<Hl<<Hl",
      stateData: "8W~O#SOSQOS~OTWOWWO[TO]TOsUOwVO!X_O!YXO!fYO!hZO!j[O!m]O!s^O#QPO#VRO~O#QcO~O[hO]hOofOsiOwjO{kO!OmO#OlO#VeO~O!QnO~P!`O_sO#PqO#QpO~O#QuO~O#QwO~OazOe!QOg!QOm!PO#P}O#QyO#Y{O~Oa!SO!a!UO!d!VO#Q!RO!Q#[P~Og![Om!PO#Q!ZO~O#Q!^O~Oa!SO!a!UO!d!VO#Q!RO~O!V#[P~P$SOTWOWWO[TO]TOsUOwVO#QPO#VRO~OofO!QnO~O_!hO#PqO#QpO~OTWOWWO[TO]TOsUOwVO!X_O!YXO!fYO!hZO!j[O!m]O!s^O#Q!oO#VRO~O!P!qO~P&ZOa!tO~Oa!uO~Ou!vOy!wO~OP!yOafXifX!VfX!afX!dfX#QfX`fXefXgfXmfXofX#PfX#YfXufX!PfX!UfX~Oa!SOi!zO!a!UO!d!VO#Q!RO!V#[P~Oa!}O~Oa!SO!a!UO!d!VO#Q#OO~Oo#SO!_#RO!Q#[X!V#[X~Oa#VO~Oi!zO!V#XO~O!V#YO~Og#ZOm!PO~O!Q#[O~O!QnO!_#RO~O!QnO!V#_O~O[hO]hOsiOwjO{kO!OmO#OlO#VeO~Oo!xa!Q!xa`!xa~P+UOu#aOy#bO~O[hO]hOsiOwjO#VeO~Oozi{zi!Ozi!Qzi#Ozi`zi~P,VOo|i{|i!O|i!Q|i#O|i`|i~P,VOo}i{}i!O}i!Q}i#O}i`}i~P,VO[VX[!TX]VXoVXsVXwVX{VX!OVX!QVX#OVX#VVX~O[#cO~O!P#fO!V#dO~O!P#fO~P&ZO`#WP~P#kO`#ZP~P%[O`#nOi!zO~O!V#pO~Og#qOn#qO~O[!]X`!ZX!_!ZX~O[#rO~O`#sO!_#RO~Oo#SO!Q#[a!V#[a~O!_#ROo!`a!Q!`a!V!`a`!`a~O!V#xO~O!P#|O!p#zO!q#zO#Y#yO~O!P!zX!V!zX~P&ZO!P$SO!V#dO~Oi!zO`!vXa!vXe!vXg!vXm!vXo!vX#P!vX#Q!vX#Y!vX~Oo$VO`#WX~P#kO`$XO~O`#ZX~P!`O`$ZO~Oi!zOu$[O~O`$]O~O!_#ROo!{a!Q!{a!V!{a~O`$_O~P+UOP!yO!QfX~O!P$bO!p#zO!q#zO#Y#yO~Oi!zOu$cO~Oi!zOo$eO!U$gO!P!Si!V!Si~P#kO!P!za!V!za~P&ZO!P$iO!V#dO~Oo$VO`#Wa~OofO`#Za~O`$lO~P#kOi!zOa!yXe!yXg!yXm!yXo!yX!P!yX!U!yX!V!yX#P!yX#Q!yX#Y!yX~Oo$eO!U$oO!P!Sq!V!Sq~P#kO`!wao!wa~P#kOi!zOa!yae!yag!yam!yao!ya!P!ya!U!ya!V!ya#P!ya#Q!ya#Y!ya~On#Yi!Oi~",
      goto: "+}#^PPPP#_P#g#uP#g$T#gPP$ZPPP$a$j$jP$|P$jP$j%d%vPPP&`&f#gP&lP#gP&rP#gP#g#gPPP&x'['hPP#_PP'n'n'x'nP'nP'n'nP#_P#_P#_P'{#_P(O(RPP#_P#_(U(d(r(x)S)Y)d)jPPPPPP)p)xP*d*gP+]+`+i]`Obn!s#d$QiWObfklmn!s!u#V#d$QiQObfklmn!s!u#V#d$QQdRR!ceQrTR!ghQ!gsQ!|!OR#`!hq!QXZz!t!w!z#b#c#i#r$O$V$^$e$f$jp!QXZz!t!w!z#b#c#i#r$O$V$^$e$f$jT#z#[#{q!OXZz!t!w!z#b#c#i#r$O$V$^$e$f$jp!QXZz!t!w!z#b#c#i#r$O$V$^$e$f$jQ![[R#Z!]QtTR!ihQ!gtR#`!iQvUR!jiQxVR!kjQoSQ!fgQ#W!XQ#^!`Q#_!aR$`#zQ!rnQ#g!sQ$P#dR$h$QX!pn!s#d$Qa!WY^_|!S!U#R#SR#P!SR!][R!_]R#]!_QbOU!bb!s$QQ!snR$Q#dQ#i!tU$U#i$^$jQ$^#rR$j$VQ$W#iR$k$WQgSS!eg$YR$Y#kQ$f$OR$n$fQ#e!rS$R#e$TR$T#gQ#T!TR#v#TQ#{#[R$a#{]aObn!s#d$Q[SObn!s#d$QQ!dfQ!lkQ!mlQ!nmQ#k!uR#w#VR#j!tQ|XQ!YZQ!xz[#h!t#i#r$V$^$jQ#m!wQ#o!zQ#}#bQ$O#cS$d$O$fR$m$eR#l!uQ!XYQ!a_R!{|U!TY_|Q!`^Q#Q!SQ#U!UQ#t#RR#u#S",
      nodeNames: "⚠ Unit Comment StyleSheet RuleSet UniversalSelector TagSelector TagName NestingSelector ClassSelector ClassName PseudoClassSelector : :: PseudoClassName PseudoClassName ) ( ArgList ValueName ParenthesizedValue ColorLiteral NumberLiteral StringLiteral BinaryExpression BinOp CallExpression Callee CallLiteral CallTag ParenthesizedContent , PseudoClassName ArgList IdSelector # IdName ] AttributeSelector [ AttributeName MatchOp ChildSelector ChildOp DescendantSelector SiblingSelector SiblingOp } { Block Declaration PropertyName Important ; ImportStatement AtKeyword import KeywordQuery FeatureQuery FeatureName BinaryQuery LogicOp UnaryQuery UnaryQueryOp ParenthesizedQuery SelectorQuery callee MediaStatement media CharsetStatement charset NamespaceStatement namespace NamespaceName KeyframesStatement keyframes KeyframeName KeyframeList from to SupportsStatement supports AtRule",
      maxTerm: 105,
      nodeProps: [
        [NodeProp.openedBy, 16,"(",47,"{"],
        [NodeProp.closedBy, 17,")",48,"}"]
      ],
      skippedNodes: [0,2],
      repeatNodeCount: 8,
      tokenData: "Ay~R![OX$wX^%]^p$wpq%]qr(crs+}st,otu2Uuv$wvw2rwx2}xy3jyz3uz{3z{|4_|}8U}!O8a!O!P8x!P!Q9Z!Q![;e![!]<Y!]!^<x!^!_$w!_!`=T!`!a=`!a!b$w!b!c>O!c!}$w!}#O?[#O#P$w#P#Q?g#Q#R2U#R#T$w#T#U?r#U#c$w#c#d@q#d#o$w#o#pAQ#p#q2U#q#rA]#r#sAh#s#y$w#y#z%]#z$f$w$f$g%]$g#BY$w#BY#BZ%]#BZ$IS$w$IS$I_%]$I_$I|$w$I|$JO%]$JO$JT$w$JT$JU%]$JU$KV$w$KV$KW%]$KW&FU$w&FU&FV%]&FV~$wW$zQOy%Qz~%QW%VQnWOy%Qz~%Q~%bf#S~OX%QX^&v^p%Qpq&vqy%Qz#y%Q#y#z&v#z$f%Q$f$g&v$g#BY%Q#BY#BZ&v#BZ$IS%Q$IS$I_&v$I_$I|%Q$I|$JO&v$JO$JT%Q$JT$JU&v$JU$KV%Q$KV$KW&v$KW&FU%Q&FU&FV&v&FV~%Q~&}f#S~nWOX%QX^&v^p%Qpq&vqy%Qz#y%Q#y#z&v#z$f%Q$f$g&v$g#BY%Q#BY#BZ&v#BZ$IS%Q$IS$I_&v$I_$I|%Q$I|$JO&v$JO$JT%Q$JT$JU&v$JU$KV%Q$KV$KW&v$KW&FU%Q&FU&FV&v&FV~%Q^(fSOy%Qz#]%Q#]#^(r#^~%Q^(wSnWOy%Qz#a%Q#a#b)T#b~%Q^)YSnWOy%Qz#d%Q#d#e)f#e~%Q^)kSnWOy%Qz#c%Q#c#d)w#d~%Q^)|SnWOy%Qz#f%Q#f#g*Y#g~%Q^*_SnWOy%Qz#h%Q#h#i*k#i~%Q^*pSnWOy%Qz#T%Q#T#U*|#U~%Q^+RSnWOy%Qz#b%Q#b#c+_#c~%Q^+dSnWOy%Qz#h%Q#h#i+p#i~%Q^+wQ!UUnWOy%Qz~%Q~,QUOY+}Zr+}rs,ds#O+}#O#P,i#P~+}~,iOg~~,lPO~+}_,tWsPOy%Qz!Q%Q!Q![-^![!c%Q!c!i-^!i#T%Q#T#Z-^#Z~%Q^-cWnWOy%Qz!Q%Q!Q![-{![!c%Q!c!i-{!i#T%Q#T#Z-{#Z~%Q^.QWnWOy%Qz!Q%Q!Q![.j![!c%Q!c!i.j!i#T%Q#T#Z.j#Z~%Q^.qWeUnWOy%Qz!Q%Q!Q![/Z![!c%Q!c!i/Z!i#T%Q#T#Z/Z#Z~%Q^/bWeUnWOy%Qz!Q%Q!Q![/z![!c%Q!c!i/z!i#T%Q#T#Z/z#Z~%Q^0PWnWOy%Qz!Q%Q!Q![0i![!c%Q!c!i0i!i#T%Q#T#Z0i#Z~%Q^0pWeUnWOy%Qz!Q%Q!Q![1Y![!c%Q!c!i1Y!i#T%Q#T#Z1Y#Z~%Q^1_WnWOy%Qz!Q%Q!Q![1w![!c%Q!c!i1w!i#T%Q#T#Z1w#Z~%Q^2OQeUnWOy%Qz~%QY2XSOy%Qz!_%Q!_!`2e!`~%QY2lQyQnWOy%Qz~%QX2wQWPOy%Qz~%Q~3QUOY2}Zw2}wx,dx#O2}#O#P3d#P~2}~3gPO~2}_3oQaVOy%Qz~%Q~3zO`~_4RSTPiSOy%Qz!_%Q!_!`2e!`~%Q_4fUiS!OPOy%Qz!O%Q!O!P4x!P!Q%Q!Q![7_![~%Q^4}SnWOy%Qz!Q%Q!Q![5Z![~%Q^5bWnW#YUOy%Qz!Q%Q!Q![5Z![!g%Q!g!h5z!h#X%Q#X#Y5z#Y~%Q^6PWnWOy%Qz{%Q{|6i|}%Q}!O6i!O!Q%Q!Q![6z![~%Q^6nSnWOy%Qz!Q%Q!Q![6z![~%Q^7RSnW#YUOy%Qz!Q%Q!Q![6z![~%Q^7fYnW#YUOy%Qz!O%Q!O!P5Z!P!Q%Q!Q![7_![!g%Q!g!h5z!h#X%Q#X#Y5z#Y~%Q_8ZQoVOy%Qz~%Q^8fUiSOy%Qz!O%Q!O!P4x!P!Q%Q!Q![7_![~%Q_8}S#VPOy%Qz!Q%Q!Q![5Z![~%Q~9`RiSOy%Qz{9i{~%Q~9nSnWOy9iyz9zz{:o{~9i~9}ROz9zz{:W{~9z~:ZTOz9zz{:W{!P9z!P!Q:j!Q~9z~:oOQ~~:tUnWOy9iyz9zz{:o{!P9i!P!Q;W!Q~9i~;_QQ~nWOy%Qz~%Q^;jY#YUOy%Qz!O%Q!O!P5Z!P!Q%Q!Q![7_![!g%Q!g!h5z!h#X%Q#X#Y5z#Y~%QX<_S[POy%Qz![%Q![!]<k!]~%QX<rQ]PnWOy%Qz~%Q_<}Q!VVOy%Qz~%QY=YQyQOy%Qz~%QX=eS{POy%Qz!`%Q!`!a=q!a~%QX=xQ{PnWOy%Qz~%QX>RUOy%Qz!c%Q!c!}>e!}#T%Q#T#o>e#o~%QX>lY!XPnWOy%Qz}%Q}!O>e!O!Q%Q!Q![>e![!c%Q!c!}>e!}#T%Q#T#o>e#o~%QX?aQwPOy%Qz~%Q^?lQuUOy%Qz~%QX?uSOy%Qz#b%Q#b#c@R#c~%QX@WSnWOy%Qz#W%Q#W#X@d#X~%QX@kQ!_PnWOy%Qz~%QX@tSOy%Qz#f%Q#f#g@d#g~%QXAVQ!QPOy%Qz~%Q_AbQ!PVOy%Qz~%QZAmS!OPOy%Qz!_%Q!_!`2e!`~%Q",
      tokenizers: [descendant, unitToken, identifiers$9, 0, 1, 2, 3],
      topRules: {"StyleSheet":[0,3]},
      specialized: [{term: 93, get: value => spec_callee[value] || -1},{term: 55, get: value => spec_AtKeyword[value] || -1},{term: 94, get: value => spec_identifier$5[value] || -1}],
      tokenPrec: 1060
    });

    let nextTagID = 0;
    /**
    Highlighting tags are markers that denote a highlighting category.
    They are [associated](https://codemirror.net/6/docs/ref/#highlight.styleTags) with parts of a syntax
    tree by a language mode, and then mapped to an actual CSS style by
    a [highlight style](https://codemirror.net/6/docs/ref/#highlight.HighlightStyle).

    Because syntax tree node types and highlight styles have to be
    able to talk the same language, CodeMirror uses a mostly _closed_
    [vocabulary](https://codemirror.net/6/docs/ref/#highlight.tags) of syntax tags (as opposed to
    traditional open string-based systems, which make it hard for
    highlighting themes to cover all the tokens produced by the
    various languages).

    It _is_ possible to [define](https://codemirror.net/6/docs/ref/#highlight.Tag^define) your own
    highlighting tags for system-internal use (where you control both
    the language package and the highlighter), but such tags will not
    be picked up by regular highlighters (though you can derive them
    from standard tags to allow highlighters to fall back to those).
    */
    class Tag {
        /**
        @internal
        */
        constructor(
        /**
        The set of tags that match this tag, starting with this one
        itself, sorted in order of decreasing specificity. @internal
        */
        set, 
        /**
        The base unmodified tag that this one is based on, if it's
        modified @internal
        */
        base, 
        /**
        The modifiers applied to this.base @internal
        */
        modified) {
            this.set = set;
            this.base = base;
            this.modified = modified;
            /**
            @internal
            */
            this.id = nextTagID++;
        }
        /**
        Define a new tag. If `parent` is given, the tag is treated as a
        sub-tag of that parent, and [highlight
        styles](https://codemirror.net/6/docs/ref/#highlight.HighlightStyle) that don't mention this tag
        will try to fall back to the parent tag (or grandparent tag,
        etc).
        */
        static define(parent) {
            if (parent === null || parent === void 0 ? void 0 : parent.base)
                throw new Error("Can not derive from a modified tag");
            let tag = new Tag([], null, []);
            tag.set.push(tag);
            if (parent)
                for (let t of parent.set)
                    tag.set.push(t);
            return tag;
        }
        /**
        Define a tag _modifier_, which is a function that, given a tag,
        will return a tag that is a subtag of the original. Applying the
        same modifier to a twice tag will return the same value (`m1(t1)
        == m1(t1)`) and applying multiple modifiers will, regardless or
        order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
        
        When multiple modifiers are applied to a given base tag, each
        smaller set of modifiers is registered as a parent, so that for
        example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
        `m1(m3(t1)`, and so on.
        */
        static defineModifier() {
            let mod = new Modifier;
            return (tag) => {
                if (tag.modified.indexOf(mod) > -1)
                    return tag;
                return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort((a, b) => a.id - b.id));
            };
        }
    }
    let nextModifierID = 0;
    class Modifier {
        constructor() {
            this.instances = [];
            this.id = nextModifierID++;
        }
        static get(base, mods) {
            if (!mods.length)
                return base;
            let exists = mods[0].instances.find(t => t.base == base && sameArray(mods, t.modified));
            if (exists)
                return exists;
            let set = [], tag = new Tag(set, base, mods);
            for (let m of mods)
                m.instances.push(tag);
            let configs = permute(mods);
            for (let parent of base.set)
                for (let config of configs)
                    set.push(Modifier.get(parent, config));
            return tag;
        }
    }
    function sameArray(a, b) {
        return a.length == b.length && a.every((x, i) => x == b[i]);
    }
    function permute(array) {
        let result = [array];
        for (let i = 0; i < array.length; i++) {
            for (let a of permute(array.slice(0, i).concat(array.slice(i + 1))))
                result.push(a);
        }
        return result;
    }
    /**
    This function is used to add a set of tags to a language syntax
    via
    [`LRParser.configure`](https://lezer.codemirror.net/docs/ref#lr.LRParser.configure).

    The argument object maps node selectors to [highlighting
    tags](https://codemirror.net/6/docs/ref/#highlight.Tag) or arrays of tags.

    Node selectors may hold one or more (space-separated) node paths.
    Such a path can be a [node
    name](https://lezer.codemirror.net/docs/ref#common.NodeType.name),
    or multiple node names (or `*` wildcards) separated by slash
    characters, as in `"Block/Declaration/VariableName"`. Such a path
    matches the final node but only if its direct parent nodes are the
    other nodes mentioned. A `*` in such a path matches any parent,
    but only a single level—wildcards that match multiple parents
    aren't supported, both for efficiency reasons and because Lezer
    trees make it rather hard to reason about what they would match.)

    A path can be ended with `/...` to indicate that the tag assigned
    to the node should also apply to all child nodes, even if they
    match their own style (by default, only the innermost style is
    used).

    When a path ends in `!`, as in `Attribute!`, no further matching
    happens for the node's child nodes, and the entire node gets the
    given style.

    In this notation, node names that contain `/`, `!`, `*`, or `...`
    must be quoted as JSON strings.

    For example:

    ```javascript
    parser.withProps(
      styleTags({
        // Style Number and BigNumber nodes
        "Number BigNumber": tags.number,
        // Style Escape nodes whose parent is String
        "String/Escape": tags.escape,
        // Style anything inside Attributes nodes
        "Attributes!": tags.meta,
        // Add a style to all content inside Italic nodes
        "Italic/...": tags.emphasis,
        // Style InvalidString nodes as both `string` and `invalid`
        "InvalidString": [tags.string, tags.invalid],
        // Style the node named "/" as punctuation
        '"/"': tags.punctuation
      })
    )
    ```
    */
    function styleTags(spec) {
        let byName = Object.create(null);
        for (let prop in spec) {
            let tags = spec[prop];
            if (!Array.isArray(tags))
                tags = [tags];
            for (let part of prop.split(" "))
                if (part) {
                    let pieces = [], mode = 2 /* Normal */, rest = part;
                    for (let pos = 0;;) {
                        if (rest == "..." && pos > 0 && pos + 3 == part.length) {
                            mode = 1 /* Inherit */;
                            break;
                        }
                        let m = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(rest);
                        if (!m)
                            throw new RangeError("Invalid path: " + part);
                        pieces.push(m[0] == "*" ? null : m[0][0] == '"' ? JSON.parse(m[0]) : m[0]);
                        pos += m[0].length;
                        if (pos == part.length)
                            break;
                        let next = part[pos++];
                        if (pos == part.length && next == "!") {
                            mode = 0 /* Opaque */;
                            break;
                        }
                        if (next != "/")
                            throw new RangeError("Invalid path: " + part);
                        rest = part.slice(pos);
                    }
                    let last = pieces.length - 1, inner = pieces[last];
                    if (!inner)
                        throw new RangeError("Invalid path: " + part);
                    let rule = new Rule$1(tags, mode, last > 0 ? pieces.slice(0, last) : null);
                    byName[inner] = rule.sort(byName[inner]);
                }
        }
        return ruleNodeProp.add(byName);
    }
    const ruleNodeProp = /*@__PURE__*/new NodeProp();
    const highlightStyle = /*@__PURE__*/Facet.define({
        combine(stylings) { return stylings.length ? HighlightStyle.combinedMatch(stylings) : null; }
    });
    const fallbackHighlightStyle = /*@__PURE__*/Facet.define({
        combine(values) { return values.length ? values[0].match : null; }
    });
    function getHighlightStyle(state) {
        return state.facet(highlightStyle) || state.facet(fallbackHighlightStyle);
    }
    class Rule$1 {
        constructor(tags, mode, context, next) {
            this.tags = tags;
            this.mode = mode;
            this.context = context;
            this.next = next;
        }
        sort(other) {
            if (!other || other.depth < this.depth) {
                this.next = other;
                return this;
            }
            other.next = this.sort(other.next);
            return other;
        }
        get depth() { return this.context ? this.context.length : 0; }
    }
    /**
    A highlight style associates CSS styles with higlighting
    [tags](https://codemirror.net/6/docs/ref/#highlight.Tag).
    */
    class HighlightStyle {
        constructor(spec, options) {
            this.map = Object.create(null);
            let modSpec;
            function def(spec) {
                let cls = StyleModule.newName();
                (modSpec || (modSpec = Object.create(null)))["." + cls] = spec;
                return cls;
            }
            this.all = typeof options.all == "string" ? options.all : options.all ? def(options.all) : null;
            for (let style of spec) {
                let cls = (style.class || def(Object.assign({}, style, { tag: null }))) +
                    (this.all ? " " + this.all : "");
                let tags = style.tag;
                if (!Array.isArray(tags))
                    this.map[tags.id] = cls;
                else
                    for (let tag of tags)
                        this.map[tag.id] = cls;
            }
            this.module = modSpec ? new StyleModule(modSpec) : null;
            this.scope = options.scope || null;
            this.match = this.match.bind(this);
            let ext = [treeHighlighter];
            if (this.module)
                ext.push(EditorView.styleModule.of(this.module));
            this.extension = ext.concat(highlightStyle.of(this));
            this.fallback = ext.concat(fallbackHighlightStyle.of(this));
        }
        /**
        Returns the CSS class associated with the given tag, if any.
        This method is bound to the instance by the constructor.
        */
        match(tag, scope) {
            if (this.scope && scope != this.scope)
                return null;
            for (let t of tag.set) {
                let match = this.map[t.id];
                if (match !== undefined) {
                    if (t != tag)
                        this.map[tag.id] = match;
                    return match;
                }
            }
            return this.map[tag.id] = this.all;
        }
        /**
        Combines an array of highlight styles into a single match
        function that returns all of the classes assigned by the styles
        for a given tag.
        */
        static combinedMatch(styles) {
            if (styles.length == 1)
                return styles[0].match;
            let cache = styles.some(s => s.scope) ? undefined : Object.create(null);
            return (tag, scope) => {
                let cached = cache && cache[tag.id];
                if (cached !== undefined)
                    return cached;
                let result = null;
                for (let style of styles) {
                    let value = style.match(tag, scope);
                    if (value)
                        result = result ? result + " " + value : value;
                }
                if (cache)
                    cache[tag.id] = result;
                return result;
            };
        }
        /**
        Create a highlighter style that associates the given styles to
        the given tags. The spec must be objects that hold a style tag
        or array of tags in their `tag` property, and either a single
        `class` property providing a static CSS class (for highlighters
        like [`classHighlightStyle`](https://codemirror.net/6/docs/ref/#highlight.classHighlightStyle)
        that rely on external styling), or a
        [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
        set of CSS properties (which define the styling for those tags).
        
        The CSS rules created for a highlighter will be emitted in the
        order of the spec's properties. That means that for elements that
        have multiple tags associated with them, styles defined further
        down in the list will have a higher CSS precedence than styles
        defined earlier.
        */
        static define(specs, options) {
            return new HighlightStyle(specs, options || {});
        }
        /**
        Returns the CSS classes (if any) that the highlight styles
        active in the given state would assign to the given a style
        [tag](https://codemirror.net/6/docs/ref/#highlight.Tag) and (optional) language
        [scope](https://codemirror.net/6/docs/ref/#highlight.HighlightStyle^define^options.scope).
        */
        static get(state, tag, scope) {
            let style = getHighlightStyle(state);
            return style && style(tag, scope || NodeType.none);
        }
    }
    class TreeHighlighter {
        constructor(view) {
            this.markCache = Object.create(null);
            this.tree = syntaxTree(view.state);
            this.decorations = this.buildDeco(view, getHighlightStyle(view.state));
        }
        update(update) {
            let tree = syntaxTree(update.state), style = getHighlightStyle(update.state);
            let styleChange = style != update.startState.facet(highlightStyle);
            if (tree.length < update.view.viewport.to && !styleChange && tree.type == this.tree.type) {
                this.decorations = this.decorations.map(update.changes);
            }
            else if (tree != this.tree || update.viewportChanged || styleChange) {
                this.tree = tree;
                this.decorations = this.buildDeco(update.view, style);
            }
        }
        buildDeco(view, match) {
            if (!match || !this.tree.length)
                return Decoration.none;
            let builder = new RangeSetBuilder();
            for (let { from, to } of view.visibleRanges) {
                highlightTreeRange(this.tree, from, to, match, (from, to, style) => {
                    builder.add(from, to, this.markCache[style] || (this.markCache[style] = Decoration.mark({ class: style })));
                });
            }
            return builder.finish();
        }
    }
    // This extension installs a highlighter that highlights based on the
    // syntax tree and highlight style.
    const treeHighlighter = /*@__PURE__*/Prec.extend(/*@__PURE__*/ViewPlugin.fromClass(TreeHighlighter, {
        decorations: v => v.decorations
    }));
    const nodeStack = [""];
    class HighlightBuilder {
        constructor(at, style, span) {
            this.at = at;
            this.style = style;
            this.span = span;
            this.class = "";
        }
        startSpan(at, cls) {
            if (cls != this.class) {
                this.flush(at);
                if (at > this.at)
                    this.at = at;
                this.class = cls;
            }
        }
        flush(to) {
            if (to > this.at && this.class)
                this.span(this.at, to, this.class);
        }
        highlightRange(cursor, from, to, inheritedClass, depth, scope) {
            let { type, from: start, to: end } = cursor;
            if (start >= to || end <= from)
                return;
            nodeStack[depth] = type.name;
            if (type.isTop)
                scope = type;
            let cls = inheritedClass;
            let rule = type.prop(ruleNodeProp), opaque = false;
            while (rule) {
                if (!rule.context || matchContext(rule.context, nodeStack, depth)) {
                    for (let tag of rule.tags) {
                        let st = this.style(tag, scope);
                        if (st) {
                            if (cls)
                                cls += " ";
                            cls += st;
                            if (rule.mode == 1 /* Inherit */)
                                inheritedClass += (inheritedClass ? " " : "") + st;
                            else if (rule.mode == 0 /* Opaque */)
                                opaque = true;
                        }
                    }
                    break;
                }
                rule = rule.next;
            }
            this.startSpan(cursor.from, cls);
            if (opaque)
                return;
            let mounted = cursor.tree && cursor.tree.prop(NodeProp.mounted);
            if (mounted && mounted.overlay) {
                let inner = cursor.node.enter(mounted.overlay[0].from + start, 1);
                let hasChild = cursor.firstChild();
                for (let i = 0, pos = start;; i++) {
                    let next = i < mounted.overlay.length ? mounted.overlay[i] : null;
                    let nextPos = next ? next.from + start : end;
                    let rangeFrom = Math.max(from, pos), rangeTo = Math.min(to, nextPos);
                    if (rangeFrom < rangeTo && hasChild) {
                        while (cursor.from < rangeTo) {
                            this.highlightRange(cursor, rangeFrom, rangeTo, inheritedClass, depth + 1, scope);
                            this.startSpan(Math.min(to, cursor.to), cls);
                            if (cursor.to >= nextPos || !cursor.nextSibling())
                                break;
                        }
                    }
                    if (!next || nextPos > to)
                        break;
                    pos = next.to + start;
                    if (pos > from) {
                        this.highlightRange(inner.cursor, Math.max(from, next.from + start), Math.min(to, pos), inheritedClass, depth, mounted.tree.type);
                        this.startSpan(pos, cls);
                    }
                }
                if (hasChild)
                    cursor.parent();
            }
            else if (cursor.firstChild()) {
                do {
                    if (cursor.to <= from)
                        continue;
                    if (cursor.from >= to)
                        break;
                    this.highlightRange(cursor, from, to, inheritedClass, depth + 1, scope);
                    this.startSpan(Math.min(to, cursor.to), cls);
                } while (cursor.nextSibling());
                cursor.parent();
            }
        }
    }
    function highlightTreeRange(tree, from, to, style, span) {
        let builder = new HighlightBuilder(from, style, span);
        builder.highlightRange(tree.cursor(), from, to, "", 0, tree.type);
        builder.flush(to);
    }
    function matchContext(context, stack, depth) {
        if (context.length > depth - 1)
            return false;
        for (let d = depth - 1, i = context.length - 1; i >= 0; i--, d--) {
            let check = context[i];
            if (check && check != stack[d])
                return false;
        }
        return true;
    }
    const t = Tag.define;
    const comment = /*@__PURE__*/t(), name = /*@__PURE__*/t(), typeName = /*@__PURE__*/t(name), literal = /*@__PURE__*/t(), string$1 = /*@__PURE__*/t(literal), number$1 = /*@__PURE__*/t(literal), content$1 = /*@__PURE__*/t(), heading = /*@__PURE__*/t(content$1), keyword$1 = /*@__PURE__*/t(), operator$2 = /*@__PURE__*/t(), punctuation$1 = /*@__PURE__*/t(), bracket = /*@__PURE__*/t(punctuation$1), meta = /*@__PURE__*/t();
    /**
    The default set of highlighting [tags](https://codemirror.net/6/docs/ref/#highlight.Tag^define) used
    by regular language packages and themes.

    This collection is heavily biased towards programming languages,
    and necessarily incomplete. A full ontology of syntactic
    constructs would fill a stack of books, and be impractical to
    write themes for. So try to make do with this set. If all else
    fails, [open an
    issue](https://github.com/codemirror/codemirror.next) to propose a
    new tag, or [define](https://codemirror.net/6/docs/ref/#highlight.Tag^define) a local custom tag for
    your use case.

    Note that it is not obligatory to always attach the most specific
    tag possible to an element—if your grammar can't easily
    distinguish a certain type of element (such as a local variable),
    it is okay to style it as its more general variant (a variable).

    For tags that extend some parent tag, the documentation links to
    the parent.
    */
    const tags$1 = {
        /**
        A comment.
        */
        comment,
        /**
        A line [comment](https://codemirror.net/6/docs/ref/#highlight.tags.comment).
        */
        lineComment: /*@__PURE__*/t(comment),
        /**
        A block [comment](https://codemirror.net/6/docs/ref/#highlight.tags.comment).
        */
        blockComment: /*@__PURE__*/t(comment),
        /**
        A documentation [comment](https://codemirror.net/6/docs/ref/#highlight.tags.comment).
        */
        docComment: /*@__PURE__*/t(comment),
        /**
        Any kind of identifier.
        */
        name,
        /**
        The [name](https://codemirror.net/6/docs/ref/#highlight.tags.name) of a variable.
        */
        variableName: /*@__PURE__*/t(name),
        /**
        A type [name](https://codemirror.net/6/docs/ref/#highlight.tags.name).
        */
        typeName: typeName,
        /**
        A tag name (subtag of [`typeName`](https://codemirror.net/6/docs/ref/#highlight.tags.typeName)).
        */
        tagName: /*@__PURE__*/t(typeName),
        /**
        A property, field, or attribute [name](https://codemirror.net/6/docs/ref/#highlight.tags.name).
        */
        propertyName: /*@__PURE__*/t(name),
        /**
        The [name](https://codemirror.net/6/docs/ref/#highlight.tags.name) of a class.
        */
        className: /*@__PURE__*/t(name),
        /**
        A label [name](https://codemirror.net/6/docs/ref/#highlight.tags.name).
        */
        labelName: /*@__PURE__*/t(name),
        /**
        A namespace [name](https://codemirror.net/6/docs/ref/#highlight.tags.name).
        */
        namespace: /*@__PURE__*/t(name),
        /**
        The [name](https://codemirror.net/6/docs/ref/#highlight.tags.name) of a macro.
        */
        macroName: /*@__PURE__*/t(name),
        /**
        A literal value.
        */
        literal,
        /**
        A string [literal](https://codemirror.net/6/docs/ref/#highlight.tags.literal).
        */
        string: string$1,
        /**
        A documentation [string](https://codemirror.net/6/docs/ref/#highlight.tags.string).
        */
        docString: /*@__PURE__*/t(string$1),
        /**
        A character literal (subtag of [string](https://codemirror.net/6/docs/ref/#highlight.tags.string)).
        */
        character: /*@__PURE__*/t(string$1),
        /**
        A number [literal](https://codemirror.net/6/docs/ref/#highlight.tags.literal).
        */
        number: number$1,
        /**
        An integer [number](https://codemirror.net/6/docs/ref/#highlight.tags.number) literal.
        */
        integer: /*@__PURE__*/t(number$1),
        /**
        A floating-point [number](https://codemirror.net/6/docs/ref/#highlight.tags.number) literal.
        */
        float: /*@__PURE__*/t(number$1),
        /**
        A boolean [literal](https://codemirror.net/6/docs/ref/#highlight.tags.literal).
        */
        bool: /*@__PURE__*/t(literal),
        /**
        Regular expression [literal](https://codemirror.net/6/docs/ref/#highlight.tags.literal).
        */
        regexp: /*@__PURE__*/t(literal),
        /**
        An escape [literal](https://codemirror.net/6/docs/ref/#highlight.tags.literal), for example a
        backslash escape in a string.
        */
        escape: /*@__PURE__*/t(literal),
        /**
        A color [literal](https://codemirror.net/6/docs/ref/#highlight.tags.literal).
        */
        color: /*@__PURE__*/t(literal),
        /**
        A URL [literal](https://codemirror.net/6/docs/ref/#highlight.tags.literal).
        */
        url: /*@__PURE__*/t(literal),
        /**
        A language keyword.
        */
        keyword: keyword$1,
        /**
        The [keyword](https://codemirror.net/6/docs/ref/#highlight.tags.keyword) for the self or this
        object.
        */
        self: /*@__PURE__*/t(keyword$1),
        /**
        The [keyword](https://codemirror.net/6/docs/ref/#highlight.tags.keyword) for null.
        */
        null: /*@__PURE__*/t(keyword$1),
        /**
        A [keyword](https://codemirror.net/6/docs/ref/#highlight.tags.keyword) denoting some atomic value.
        */
        atom: /*@__PURE__*/t(keyword$1),
        /**
        A [keyword](https://codemirror.net/6/docs/ref/#highlight.tags.keyword) that represents a unit.
        */
        unit: /*@__PURE__*/t(keyword$1),
        /**
        A modifier [keyword](https://codemirror.net/6/docs/ref/#highlight.tags.keyword).
        */
        modifier: /*@__PURE__*/t(keyword$1),
        /**
        A [keyword](https://codemirror.net/6/docs/ref/#highlight.tags.keyword) that acts as an operator.
        */
        operatorKeyword: /*@__PURE__*/t(keyword$1),
        /**
        A control-flow related [keyword](https://codemirror.net/6/docs/ref/#highlight.tags.keyword).
        */
        controlKeyword: /*@__PURE__*/t(keyword$1),
        /**
        A [keyword](https://codemirror.net/6/docs/ref/#highlight.tags.keyword) that defines something.
        */
        definitionKeyword: /*@__PURE__*/t(keyword$1),
        /**
        An operator.
        */
        operator: operator$2,
        /**
        An [operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator) that defines something.
        */
        derefOperator: /*@__PURE__*/t(operator$2),
        /**
        Arithmetic-related [operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator).
        */
        arithmeticOperator: /*@__PURE__*/t(operator$2),
        /**
        Logical [operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator).
        */
        logicOperator: /*@__PURE__*/t(operator$2),
        /**
        Bit [operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator).
        */
        bitwiseOperator: /*@__PURE__*/t(operator$2),
        /**
        Comparison [operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator).
        */
        compareOperator: /*@__PURE__*/t(operator$2),
        /**
        [Operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator) that updates its operand.
        */
        updateOperator: /*@__PURE__*/t(operator$2),
        /**
        [Operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator) that defines something.
        */
        definitionOperator: /*@__PURE__*/t(operator$2),
        /**
        Type-related [operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator).
        */
        typeOperator: /*@__PURE__*/t(operator$2),
        /**
        Control-flow [operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator).
        */
        controlOperator: /*@__PURE__*/t(operator$2),
        /**
        Program or markup punctuation.
        */
        punctuation: punctuation$1,
        /**
        [Punctuation](https://codemirror.net/6/docs/ref/#highlight.tags.punctuation) that separates
        things.
        */
        separator: /*@__PURE__*/t(punctuation$1),
        /**
        Bracket-style [punctuation](https://codemirror.net/6/docs/ref/#highlight.tags.punctuation).
        */
        bracket,
        /**
        Angle [brackets](https://codemirror.net/6/docs/ref/#highlight.tags.bracket) (usually `<` and `>`
        tokens).
        */
        angleBracket: /*@__PURE__*/t(bracket),
        /**
        Square [brackets](https://codemirror.net/6/docs/ref/#highlight.tags.bracket) (usually `[` and `]`
        tokens).
        */
        squareBracket: /*@__PURE__*/t(bracket),
        /**
        Parentheses (usually `(` and `)` tokens). Subtag of
        [bracket](https://codemirror.net/6/docs/ref/#highlight.tags.bracket).
        */
        paren: /*@__PURE__*/t(bracket),
        /**
        Braces (usually `{` and `}` tokens). Subtag of
        [bracket](https://codemirror.net/6/docs/ref/#highlight.tags.bracket).
        */
        brace: /*@__PURE__*/t(bracket),
        /**
        Content, for example plain text in XML or markup documents.
        */
        content: content$1,
        /**
        [Content](https://codemirror.net/6/docs/ref/#highlight.tags.content) that represents a heading.
        */
        heading,
        /**
        A level 1 [heading](https://codemirror.net/6/docs/ref/#highlight.tags.heading).
        */
        heading1: /*@__PURE__*/t(heading),
        /**
        A level 2 [heading](https://codemirror.net/6/docs/ref/#highlight.tags.heading).
        */
        heading2: /*@__PURE__*/t(heading),
        /**
        A level 3 [heading](https://codemirror.net/6/docs/ref/#highlight.tags.heading).
        */
        heading3: /*@__PURE__*/t(heading),
        /**
        A level 4 [heading](https://codemirror.net/6/docs/ref/#highlight.tags.heading).
        */
        heading4: /*@__PURE__*/t(heading),
        /**
        A level 5 [heading](https://codemirror.net/6/docs/ref/#highlight.tags.heading).
        */
        heading5: /*@__PURE__*/t(heading),
        /**
        A level 6 [heading](https://codemirror.net/6/docs/ref/#highlight.tags.heading).
        */
        heading6: /*@__PURE__*/t(heading),
        /**
        A prose separator (such as a horizontal rule).
        */
        contentSeparator: /*@__PURE__*/t(content$1),
        /**
        [Content](https://codemirror.net/6/docs/ref/#highlight.tags.content) that represents a list.
        */
        list: /*@__PURE__*/t(content$1),
        /**
        [Content](https://codemirror.net/6/docs/ref/#highlight.tags.content) that represents a quote.
        */
        quote: /*@__PURE__*/t(content$1),
        /**
        [Content](https://codemirror.net/6/docs/ref/#highlight.tags.content) that is emphasized.
        */
        emphasis: /*@__PURE__*/t(content$1),
        /**
        [Content](https://codemirror.net/6/docs/ref/#highlight.tags.content) that is styled strong.
        */
        strong: /*@__PURE__*/t(content$1),
        /**
        [Content](https://codemirror.net/6/docs/ref/#highlight.tags.content) that is part of a link.
        */
        link: /*@__PURE__*/t(content$1),
        /**
        [Content](https://codemirror.net/6/docs/ref/#highlight.tags.content) that is styled as code or
        monospace.
        */
        monospace: /*@__PURE__*/t(content$1),
        /**
        [Content](https://codemirror.net/6/docs/ref/#highlight.tags.content) that has a strike-through
        style.
        */
        strikethrough: /*@__PURE__*/t(content$1),
        /**
        Inserted text in a change-tracking format.
        */
        inserted: /*@__PURE__*/t(),
        /**
        Deleted text.
        */
        deleted: /*@__PURE__*/t(),
        /**
        Changed text.
        */
        changed: /*@__PURE__*/t(),
        /**
        An invalid or unsyntactic element.
        */
        invalid: /*@__PURE__*/t(),
        /**
        Metadata or meta-instruction.
        */
        meta,
        /**
        [Metadata](https://codemirror.net/6/docs/ref/#highlight.tags.meta) that applies to the entire
        document.
        */
        documentMeta: /*@__PURE__*/t(meta),
        /**
        [Metadata](https://codemirror.net/6/docs/ref/#highlight.tags.meta) that annotates or adds
        attributes to a given syntactic element.
        */
        annotation: /*@__PURE__*/t(meta),
        /**
        Processing instruction or preprocessor directive. Subtag of
        [meta](https://codemirror.net/6/docs/ref/#highlight.tags.meta).
        */
        processingInstruction: /*@__PURE__*/t(meta),
        /**
        [Modifier](https://codemirror.net/6/docs/ref/#highlight.Tag^defineModifier) that indicates that a
        given element is being defined. Expected to be used with the
        various [name](https://codemirror.net/6/docs/ref/#highlight.tags.name) tags.
        */
        definition: /*@__PURE__*/Tag.defineModifier(),
        /**
        [Modifier](https://codemirror.net/6/docs/ref/#highlight.Tag^defineModifier) that indicates that
        something is constant. Mostly expected to be used with
        [variable names](https://codemirror.net/6/docs/ref/#highlight.tags.variableName).
        */
        constant: /*@__PURE__*/Tag.defineModifier(),
        /**
        [Modifier](https://codemirror.net/6/docs/ref/#highlight.Tag^defineModifier) used to indicate that
        a [variable](https://codemirror.net/6/docs/ref/#highlight.tags.variableName) or [property
        name](https://codemirror.net/6/docs/ref/#highlight.tags.propertyName) is being called or defined
        as a function.
        */
        function: /*@__PURE__*/Tag.defineModifier(),
        /**
        [Modifier](https://codemirror.net/6/docs/ref/#highlight.Tag^defineModifier) that can be applied to
        [names](https://codemirror.net/6/docs/ref/#highlight.tags.name) to indicate that they belong to
        the language's standard environment.
        */
        standard: /*@__PURE__*/Tag.defineModifier(),
        /**
        [Modifier](https://codemirror.net/6/docs/ref/#highlight.Tag^defineModifier) that indicates a given
        [names](https://codemirror.net/6/docs/ref/#highlight.tags.name) is local to some scope.
        */
        local: /*@__PURE__*/Tag.defineModifier(),
        /**
        A generic variant [modifier](https://codemirror.net/6/docs/ref/#highlight.Tag^defineModifier) that
        can be used to tag language-specific alternative variants of
        some common tag. It is recommended for themes to define special
        forms of at least the [string](https://codemirror.net/6/docs/ref/#highlight.tags.string) and
        [variable name](https://codemirror.net/6/docs/ref/#highlight.tags.variableName) tags, since those
        come up a lot.
        */
        special: /*@__PURE__*/Tag.defineModifier()
    };
    /**
    This is a highlight style that adds stable, predictable classes to
    tokens, for styling with external CSS.

    These tags are mapped to their name prefixed with `"cmt-"` (for
    example `"cmt-comment"`):

    * [`link`](https://codemirror.net/6/docs/ref/#highlight.tags.link)
    * [`heading`](https://codemirror.net/6/docs/ref/#highlight.tags.heading)
    * [`emphasis`](https://codemirror.net/6/docs/ref/#highlight.tags.emphasis)
    * [`strong`](https://codemirror.net/6/docs/ref/#highlight.tags.strong)
    * [`keyword`](https://codemirror.net/6/docs/ref/#highlight.tags.keyword)
    * [`atom`](https://codemirror.net/6/docs/ref/#highlight.tags.atom) [`bool`](https://codemirror.net/6/docs/ref/#highlight.tags.bool)
    * [`url`](https://codemirror.net/6/docs/ref/#highlight.tags.url)
    * [`labelName`](https://codemirror.net/6/docs/ref/#highlight.tags.labelName)
    * [`inserted`](https://codemirror.net/6/docs/ref/#highlight.tags.inserted)
    * [`deleted`](https://codemirror.net/6/docs/ref/#highlight.tags.deleted)
    * [`literal`](https://codemirror.net/6/docs/ref/#highlight.tags.literal)
    * [`string`](https://codemirror.net/6/docs/ref/#highlight.tags.string)
    * [`number`](https://codemirror.net/6/docs/ref/#highlight.tags.number)
    * [`variableName`](https://codemirror.net/6/docs/ref/#highlight.tags.variableName)
    * [`typeName`](https://codemirror.net/6/docs/ref/#highlight.tags.typeName)
    * [`namespace`](https://codemirror.net/6/docs/ref/#highlight.tags.namespace)
    * [`macroName`](https://codemirror.net/6/docs/ref/#highlight.tags.macroName)
    * [`propertyName`](https://codemirror.net/6/docs/ref/#highlight.tags.propertyName)
    * [`operator`](https://codemirror.net/6/docs/ref/#highlight.tags.operator)
    * [`comment`](https://codemirror.net/6/docs/ref/#highlight.tags.comment)
    * [`meta`](https://codemirror.net/6/docs/ref/#highlight.tags.meta)
    * [`punctuation`](https://codemirror.net/6/docs/ref/#highlight.tags.puncutation)
    * [`invalid`](https://codemirror.net/6/docs/ref/#highlight.tags.invalid)

    In addition, these mappings are provided:

    * [`regexp`](https://codemirror.net/6/docs/ref/#highlight.tags.regexp),
      [`escape`](https://codemirror.net/6/docs/ref/#highlight.tags.escape), and
      [`special`](https://codemirror.net/6/docs/ref/#highlight.tags.special)[`(string)`](https://codemirror.net/6/docs/ref/#highlight.tags.string)
      are mapped to `"cmt-string2"`
    * [`special`](https://codemirror.net/6/docs/ref/#highlight.tags.special)[`(variableName)`](https://codemirror.net/6/docs/ref/#highlight.tags.variableName)
      to `"cmt-variableName2"`
    * [`local`](https://codemirror.net/6/docs/ref/#highlight.tags.local)[`(variableName)`](https://codemirror.net/6/docs/ref/#highlight.tags.variableName)
      to `"cmt-variableName cmt-local"`
    * [`definition`](https://codemirror.net/6/docs/ref/#highlight.tags.definition)[`(variableName)`](https://codemirror.net/6/docs/ref/#highlight.tags.variableName)
      to `"cmt-variableName cmt-definition"`
    */
    const classHighlightStyle = /*@__PURE__*/HighlightStyle.define([
        { tag: tags$1.link, class: "cmt-link" },
        { tag: tags$1.heading, class: "cmt-heading" },
        { tag: tags$1.emphasis, class: "cmt-emphasis" },
        { tag: tags$1.strong, class: "cmt-strong" },
        { tag: tags$1.keyword, class: "cmt-keyword" },
        { tag: tags$1.atom, class: "cmt-atom" },
        { tag: tags$1.bool, class: "cmt-bool" },
        { tag: tags$1.url, class: "cmt-url" },
        { tag: tags$1.labelName, class: "cmt-labelName" },
        { tag: tags$1.inserted, class: "cmt-inserted" },
        { tag: tags$1.deleted, class: "cmt-deleted" },
        { tag: tags$1.literal, class: "cmt-literal" },
        { tag: tags$1.string, class: "cmt-string" },
        { tag: tags$1.number, class: "cmt-number" },
        { tag: [tags$1.regexp, tags$1.escape, /*@__PURE__*/tags$1.special(tags$1.string)], class: "cmt-string2" },
        { tag: tags$1.variableName, class: "cmt-variableName" },
        { tag: /*@__PURE__*/tags$1.local(tags$1.variableName), class: "cmt-variableName cmt-local" },
        { tag: /*@__PURE__*/tags$1.definition(tags$1.variableName), class: "cmt-variableName cmt-definition" },
        { tag: /*@__PURE__*/tags$1.special(tags$1.variableName), class: "cmt-variableName2" },
        { tag: tags$1.typeName, class: "cmt-typeName" },
        { tag: tags$1.namespace, class: "cmt-namespace" },
        { tag: tags$1.macroName, class: "cmt-macroName" },
        { tag: tags$1.propertyName, class: "cmt-propertyName" },
        { tag: tags$1.operator, class: "cmt-operator" },
        { tag: tags$1.comment, class: "cmt-comment" },
        { tag: tags$1.meta, class: "cmt-meta" },
        { tag: tags$1.invalid, class: "cmt-invalid" },
        { tag: tags$1.punctuation, class: "cmt-punctuation" }
    ]);

    let _properties = null;
    function properties$2() {
        if (!_properties && typeof document == "object" && document.body) {
            let names = [];
            for (let prop in document.body.style) {
                if (!/[A-Z]|^-|^(item|length)$/.test(prop))
                    names.push(prop);
            }
            _properties = names.sort().map(name => ({ type: "property", label: name }));
        }
        return _properties || [];
    }
    const pseudoClasses = /*@__PURE__*/[
        "active", "after", "before", "checked", "default",
        "disabled", "empty", "enabled", "first-child", "first-letter",
        "first-line", "first-of-type", "focus", "hover", "in-range",
        "indeterminate", "invalid", "lang", "last-child", "last-of-type",
        "link", "not", "nth-child", "nth-last-child", "nth-last-of-type",
        "nth-of-type", "only-of-type", "only-child", "optional", "out-of-range",
        "placeholder", "read-only", "read-write", "required", "root",
        "selection", "target", "valid", "visited"
    ].map(name => ({ type: "class", label: name }));
    const values = /*@__PURE__*/[
        "above", "absolute", "activeborder", "additive", "activecaption", "after-white-space",
        "ahead", "alias", "all", "all-scroll", "alphabetic", "alternate", "always",
        "antialiased", "appworkspace", "asterisks", "attr", "auto", "auto-flow", "avoid", "avoid-column",
        "avoid-page", "avoid-region", "axis-pan", "background", "backwards", "baseline", "below",
        "bidi-override", "blink", "block", "block-axis", "bold", "bolder", "border", "border-box",
        "both", "bottom", "break", "break-all", "break-word", "bullets", "button", "button-bevel",
        "buttonface", "buttonhighlight", "buttonshadow", "buttontext", "calc", "capitalize",
        "caps-lock-indicator", "caption", "captiontext", "caret", "cell", "center", "checkbox", "circle",
        "cjk-decimal", "clear", "clip", "close-quote", "col-resize", "collapse", "color", "color-burn",
        "color-dodge", "column", "column-reverse", "compact", "condensed", "contain", "content",
        "contents", "content-box", "context-menu", "continuous", "copy", "counter", "counters", "cover",
        "crop", "cross", "crosshair", "currentcolor", "cursive", "cyclic", "darken", "dashed", "decimal",
        "decimal-leading-zero", "default", "default-button", "dense", "destination-atop", "destination-in",
        "destination-out", "destination-over", "difference", "disc", "discard", "disclosure-closed",
        "disclosure-open", "document", "dot-dash", "dot-dot-dash", "dotted", "double", "down", "e-resize",
        "ease", "ease-in", "ease-in-out", "ease-out", "element", "ellipse", "ellipsis", "embed", "end",
        "ethiopic-abegede-gez", "ethiopic-halehame-aa-er", "ethiopic-halehame-gez", "ew-resize", "exclusion",
        "expanded", "extends", "extra-condensed", "extra-expanded", "fantasy", "fast", "fill", "fill-box",
        "fixed", "flat", "flex", "flex-end", "flex-start", "footnotes", "forwards", "from",
        "geometricPrecision", "graytext", "grid", "groove", "hand", "hard-light", "help", "hidden", "hide",
        "higher", "highlight", "highlighttext", "horizontal", "hsl", "hsla", "hue", "icon", "ignore",
        "inactiveborder", "inactivecaption", "inactivecaptiontext", "infinite", "infobackground", "infotext",
        "inherit", "initial", "inline", "inline-axis", "inline-block", "inline-flex", "inline-grid",
        "inline-table", "inset", "inside", "intrinsic", "invert", "italic", "justify", "keep-all",
        "landscape", "large", "larger", "left", "level", "lighter", "lighten", "line-through", "linear",
        "linear-gradient", "lines", "list-item", "listbox", "listitem", "local", "logical", "loud", "lower",
        "lower-hexadecimal", "lower-latin", "lower-norwegian", "lowercase", "ltr", "luminosity", "manipulation",
        "match", "matrix", "matrix3d", "medium", "menu", "menutext", "message-box", "middle", "min-intrinsic",
        "mix", "monospace", "move", "multiple", "multiple_mask_images", "multiply", "n-resize", "narrower",
        "ne-resize", "nesw-resize", "no-close-quote", "no-drop", "no-open-quote", "no-repeat", "none",
        "normal", "not-allowed", "nowrap", "ns-resize", "numbers", "numeric", "nw-resize", "nwse-resize",
        "oblique", "opacity", "open-quote", "optimizeLegibility", "optimizeSpeed", "outset", "outside",
        "outside-shape", "overlay", "overline", "padding", "padding-box", "painted", "page", "paused",
        "perspective", "pinch-zoom", "plus-darker", "plus-lighter", "pointer", "polygon", "portrait",
        "pre", "pre-line", "pre-wrap", "preserve-3d", "progress", "push-button", "radial-gradient", "radio",
        "read-only", "read-write", "read-write-plaintext-only", "rectangle", "region", "relative", "repeat",
        "repeating-linear-gradient", "repeating-radial-gradient", "repeat-x", "repeat-y", "reset", "reverse",
        "rgb", "rgba", "ridge", "right", "rotate", "rotate3d", "rotateX", "rotateY", "rotateZ", "round",
        "row", "row-resize", "row-reverse", "rtl", "run-in", "running", "s-resize", "sans-serif", "saturation",
        "scale", "scale3d", "scaleX", "scaleY", "scaleZ", "screen", "scroll", "scrollbar", "scroll-position",
        "se-resize", "self-start", "self-end", "semi-condensed", "semi-expanded", "separate", "serif", "show",
        "single", "skew", "skewX", "skewY", "skip-white-space", "slide", "slider-horizontal",
        "slider-vertical", "sliderthumb-horizontal", "sliderthumb-vertical", "slow", "small", "small-caps",
        "small-caption", "smaller", "soft-light", "solid", "source-atop", "source-in", "source-out",
        "source-over", "space", "space-around", "space-between", "space-evenly", "spell-out", "square", "start",
        "static", "status-bar", "stretch", "stroke", "stroke-box", "sub", "subpixel-antialiased", "svg_masks",
        "super", "sw-resize", "symbolic", "symbols", "system-ui", "table", "table-caption", "table-cell",
        "table-column", "table-column-group", "table-footer-group", "table-header-group", "table-row",
        "table-row-group", "text", "text-bottom", "text-top", "textarea", "textfield", "thick", "thin",
        "threeddarkshadow", "threedface", "threedhighlight", "threedlightshadow", "threedshadow", "to", "top",
        "transform", "translate", "translate3d", "translateX", "translateY", "translateZ", "transparent",
        "ultra-condensed", "ultra-expanded", "underline", "unidirectional-pan", "unset", "up", "upper-latin",
        "uppercase", "url", "var", "vertical", "vertical-text", "view-box", "visible", "visibleFill",
        "visiblePainted", "visibleStroke", "visual", "w-resize", "wait", "wave", "wider", "window", "windowframe",
        "windowtext", "words", "wrap", "wrap-reverse", "x-large", "x-small", "xor", "xx-large", "xx-small"
    ].map(name => ({ type: "keyword", label: name })).concat(/*@__PURE__*/[
        "aliceblue", "antiquewhite", "aqua", "aquamarine", "azure", "beige",
        "bisque", "black", "blanchedalmond", "blue", "blueviolet", "brown",
        "burlywood", "cadetblue", "chartreuse", "chocolate", "coral", "cornflowerblue",
        "cornsilk", "crimson", "cyan", "darkblue", "darkcyan", "darkgoldenrod",
        "darkgray", "darkgreen", "darkkhaki", "darkmagenta", "darkolivegreen",
        "darkorange", "darkorchid", "darkred", "darksalmon", "darkseagreen",
        "darkslateblue", "darkslategray", "darkturquoise", "darkviolet",
        "deeppink", "deepskyblue", "dimgray", "dodgerblue", "firebrick",
        "floralwhite", "forestgreen", "fuchsia", "gainsboro", "ghostwhite",
        "gold", "goldenrod", "gray", "grey", "green", "greenyellow", "honeydew",
        "hotpink", "indianred", "indigo", "ivory", "khaki", "lavender",
        "lavenderblush", "lawngreen", "lemonchiffon", "lightblue", "lightcoral",
        "lightcyan", "lightgoldenrodyellow", "lightgray", "lightgreen", "lightpink",
        "lightsalmon", "lightseagreen", "lightskyblue", "lightslategray",
        "lightsteelblue", "lightyellow", "lime", "limegreen", "linen", "magenta",
        "maroon", "mediumaquamarine", "mediumblue", "mediumorchid", "mediumpurple",
        "mediumseagreen", "mediumslateblue", "mediumspringgreen", "mediumturquoise",
        "mediumvioletred", "midnightblue", "mintcream", "mistyrose", "moccasin",
        "navajowhite", "navy", "oldlace", "olive", "olivedrab", "orange", "orangered",
        "orchid", "palegoldenrod", "palegreen", "paleturquoise", "palevioletred",
        "papayawhip", "peachpuff", "peru", "pink", "plum", "powderblue",
        "purple", "rebeccapurple", "red", "rosybrown", "royalblue", "saddlebrown",
        "salmon", "sandybrown", "seagreen", "seashell", "sienna", "silver", "skyblue",
        "slateblue", "slategray", "snow", "springgreen", "steelblue", "tan",
        "teal", "thistle", "tomato", "turquoise", "violet", "wheat", "white",
        "whitesmoke", "yellow", "yellowgreen"
    ].map(name => ({ type: "constant", label: name })));
    const tags = /*@__PURE__*/[
        "a", "abbr", "address", "article", "aside", "b", "bdi", "bdo", "blockquote", "body",
        "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "dd", "del",
        "details", "dfn", "dialog", "div", "dl", "dt", "em", "figcaption", "figure", "footer",
        "form", "header", "hgroup", "h1", "h2", "h3", "h4", "h5", "h6", "hr", "html", "i", "iframe",
        "img", "input", "ins", "kbd", "label", "legend", "li", "main", "meter", "nav", "ol", "output",
        "p", "pre", "ruby", "section", "select", "small", "source", "span", "strong", "sub", "summary",
        "sup", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "tr", "u", "ul"
    ].map(name => ({ type: "type", label: name }));
    const span = /^[\w-]*/;
    const completeCSS = context => {
        let { state, pos } = context, node = syntaxTree(state).resolveInner(pos, -1);
        if (node.name == "PropertyName")
            return { from: node.from, options: properties$2(), span };
        if (node.name == "ValueName")
            return { from: node.from, options: values, span };
        if (node.name == "PseudoClassName")
            return { from: node.from, options: pseudoClasses, span };
        if (node.name == "TagName") {
            for (let { parent } = node; parent; parent = parent.parent)
                if (parent.name == "Block")
                    return { from: node.from, options: properties$2(), span };
            return { from: node.from, options: tags, span };
        }
        if (!context.explicit)
            return null;
        let above = node.resolve(pos), before = above.childBefore(pos);
        if (before && before.name == ":" && above.name == "PseudoClassSelector")
            return { from: pos, options: pseudoClasses, span };
        if (before && before.name == ":" && above.name == "Declaration" || above.name == "ArgList")
            return { from: pos, options: values, span };
        if (above.name == "Block")
            return { from: pos, options: properties$2(), span };
        return null;
    };

    /**
    A language provider based on the [Lezer CSS
    parser](https://github.com/lezer-parser/css), extended with
    highlighting and indentation information.
    */
    const cssLanguage = /*@__PURE__*/LRLanguage.define({
        parser: /*@__PURE__*/parser$8.configure({
            props: [
                /*@__PURE__*/indentNodeProp.add({
                    Declaration: /*@__PURE__*/continuedIndent()
                }),
                /*@__PURE__*/foldNodeProp.add({
                    Block: foldInside$1
                }),
                /*@__PURE__*/styleTags({
                    "import charset namespace keyframes": tags$1.definitionKeyword,
                    "media supports": tags$1.controlKeyword,
                    "from to": tags$1.keyword,
                    NamespaceName: tags$1.namespace,
                    KeyframeName: tags$1.labelName,
                    TagName: tags$1.typeName,
                    ClassName: tags$1.className,
                    PseudoClassName: /*@__PURE__*/tags$1.constant(tags$1.className),
                    not: tags$1.operatorKeyword,
                    IdName: tags$1.labelName,
                    "FeatureName PropertyName AttributeName": tags$1.propertyName,
                    NumberLiteral: tags$1.number,
                    KeywordQuery: tags$1.keyword,
                    UnaryQueryOp: tags$1.operatorKeyword,
                    callee: tags$1.keyword,
                    "CallTag ValueName": tags$1.atom,
                    Callee: tags$1.variableName,
                    Unit: tags$1.unit,
                    "UniversalSelector NestingSelector": tags$1.definitionOperator,
                    AtKeyword: tags$1.keyword,
                    MatchOp: tags$1.compareOperator,
                    "ChildOp SiblingOp, LogicOp": tags$1.logicOperator,
                    BinOp: tags$1.arithmeticOperator,
                    Important: tags$1.modifier,
                    Comment: tags$1.blockComment,
                    ParenthesizedContent: /*@__PURE__*/tags$1.special(tags$1.name),
                    ColorLiteral: tags$1.color,
                    StringLiteral: tags$1.string,
                    ":": tags$1.punctuation,
                    "PseudoOp #": tags$1.derefOperator,
                    "; ,": tags$1.separator,
                    "( )": tags$1.paren,
                    "[ ]": tags$1.squareBracket,
                    "{ }": tags$1.brace
                })
            ]
        }),
        languageData: {
            commentTokens: { block: { open: "/*", close: "*/" } },
            indentOnInput: /^\s*\}$/
        }
    });
    /**
    CSS property and value keyword completion.
    */
    const cssCompletion = /*@__PURE__*/cssLanguage.data.of({ autocomplete: completeCSS });
    /**
    Language support for CSS.
    */
    function css$2() {
        return new LanguageSupport(cssLanguage, cssCompletion);
    }

    var index$b = /*#__PURE__*/Object.freeze({
        __proto__: null,
        css: css$2,
        cssCompletion: cssCompletion,
        cssLanguage: cssLanguage
    });

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const noSemi = 271,
      incdec = 1,
      incdecPrefix = 2,
      templateContent = 272,
      templateDollarBrace = 273,
      templateEnd = 274,
      insertSemi = 275,
      TSExtends = 3,
      spaces = 277,
      newline$2 = 278,
      LineComment$1 = 4,
      BlockComment$1 = 5,
      Dialect_ts = 1;

    /* Hand-written tokenizers for JavaScript tokens that can't be
       expressed by lezer's built-in tokenizer. */

    const space$1 = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200,
                   8201, 8202, 8232, 8233, 8239, 8287, 12288];

    const braceR = 125, braceL = 123, semicolon = 59, slash = 47, star = 42,
          plus = 43, minus = 45, dollar = 36, backtick = 96, backslash = 92;

    const trackNewline = new ContextTracker({
      start: false,
      shift(context, term) {
        return term == LineComment$1 || term == BlockComment$1 || term == spaces ? context : term == newline$2
      },
      strict: false
    });

    const insertSemicolon = new ExternalTokenizer((input, stack) => {
      let {next} = input;
      if ((next == braceR || next == -1 || stack.context) && stack.canShift(insertSemi))
        input.acceptToken(insertSemi);
    }, {contextual: true, fallback: true});

    const noSemicolon = new ExternalTokenizer((input, stack) => {
      let {next} = input, after;
      if (space$1.indexOf(next) > -1) return
      if (next == slash && ((after = input.peek(1)) == slash || after == star)) return
      if (next != braceR && next != semicolon && next != -1 && !stack.context && stack.canShift(noSemi))
        input.acceptToken(noSemi);
    }, {contextual: true});

    const incdecToken = new ExternalTokenizer((input, stack) => {
      let {next} = input;
      if (next == plus || next == minus) {
        input.advance();
        if (next == input.next) {
          input.advance();
          let mayPostfix = !stack.context && stack.canShift(incdec);
          input.acceptToken(mayPostfix ? incdec : incdecPrefix);
        }
      }
    }, {contextual: true});

    const template = new ExternalTokenizer(input => {
      for (let afterDollar = false, i = 0;; i++) {
        let {next} = input;
        if (next < 0) {
          if (i) input.acceptToken(templateContent);
          break
        } else if (next == backtick) {
          if (i) input.acceptToken(templateContent);
          else input.acceptToken(templateEnd, 1);
          break
        } else if (next == braceL && afterDollar) {
          if (i == 1) input.acceptToken(templateDollarBrace, 1);
          else input.acceptToken(templateContent, -1);
          break
        } else if (next == 10 /* "\n" */ && i) {
          // Break up template strings on lines, to avoid huge tokens
          input.advance();
          input.acceptToken(templateContent);
          break
        } else if (next == backslash) {
          input.advance();
        }
        afterDollar = next == dollar;
        input.advance();
      }
    });

    function tsExtends(value, stack) {
      return value == "extends" && stack.dialectEnabled(Dialect_ts) ? TSExtends : -1
    }

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const spec_identifier$4 = {__proto__:null,export:16, as:21, from:25, default:30, async:35, function:36, this:46, true:54, false:54, void:60, typeof:64, null:78, super:80, new:114, await:131, yield:133, delete:134, class:144, extends:146, public:183, private:183, protected:183, readonly:185, in:204, instanceof:206, const:208, import:240, keyof:291, unique:295, infer:301, is:335, abstract:355, implements:357, type:359, let:362, var:364, interface:371, enum:375, namespace:381, module:383, declare:387, global:391, for:412, of:421, while:424, with:428, do:432, if:436, else:438, switch:442, case:448, try:454, catch:456, finally:458, return:462, throw:466, break:470, continue:474, debugger:478};
    const spec_word = {__proto__:null,async:101, get:103, set:105, public:153, private:153, protected:153, static:155, abstract:157, readonly:161, new:339};
    const spec_LessThan = {__proto__:null,"<":121};
    const parser$7 = LRParser.deserialize({
      version: 13,
      states: "$-tO`QYOOO&}Q!LdO'#CgO'UOSO'#DSO)^QYO'#DXO)nQYO'#DdO)uQYO'#DnO-lQYO'#DtOOQO'#EU'#EUO.PQWO'#ETO.UQWO'#ETO0TQ!LdO'#ImO2kQ!LdO'#InO3XQWO'#ErO3^QpO'#FXOOQ!LS'#Ez'#EzO3fO!bO'#EzO3tQWO'#F`O5RQWO'#F_OOQ!LS'#In'#InOOQ!LQ'#Im'#ImOOQQ'#JV'#JVO5WQWO'#HfO5]Q!LYO'#HgOOQQ'#I_'#I_OOQQ'#Hh'#HhQ`QYOOO)uQYO'#DfO5eQWO'#GSO5jQ#tO'#ClO5xQWO'#ESO6TQ#tO'#EyO6oQWO'#GSO6tQWO'#GWO7PQWO'#GWO7_QWO'#GZO7_QWO'#G[O7_QWO'#G^O5eQWO'#GaO8OQWO'#GdO9^QWO'#CcO9nQWO'#GqO9vQWO'#GwO9vQWO'#GyO`QYO'#G{O9vQWO'#G}O9vQWO'#HQO9{QWO'#HWO:QQ!LZO'#H[O)uQYO'#H^O:]Q!LZO'#H`O:hQ!LZO'#HbO5]Q!LYO'#HdO)uQYO'#IoOOOS'#Hj'#HjO:sOSO,59nOOQ!LS,59n,59nO=UQbO'#CgO=`QYO'#HkO=mQWO'#IpO?lQbO'#IpO'aQYO'#IpO?sQWO,59sO@ZQ&jO'#D^OASQWO'#EUOAaQWO'#IzOAlQWO'#IyOAtQWO,5:rOAyQWO'#IxOBQQWO'#DuO5jQ#tO'#ESOB`QWO'#ESOBkQ`O'#EyOOQ!LS,5:O,5:OOBsQYO,5:OODqQ!LdO,5:YOE_QWO,5:`OExQ!LYO'#IwO6tQWO'#IvOFPQWO'#IvOFXQWO,5:qOF^QWO'#IvOFlQYO,5:oOHiQWO'#EQOIsQWO,5:oOKSQWO'#DhOKZQYO'#DmOKeQ&jO,5:xO)uQYO,5:xOOQQ'#Ej'#EjOOQQ'#El'#ElO)uQYO,5:yO)uQYO,5:yO)uQYO,5:yO)uQYO,5:yO)uQYO,5:yO)uQYO,5:yO)uQYO,5:yO)uQYO,5:yO)uQYO,5:yO)uQYO,5:yO)uQYO,5:yOOQQ'#Ep'#EpOKjQYO,5;ZOOQ!LS,5;`,5;`OOQ!LS,5;a,5;aOMgQWO,5;aOOQ!LS,5;b,5;bO)uQYO'#HuOMlQ!LYO,5;{ONWQWO,5:yO)uQYO,5;^ONpQpO'#JOON_QpO'#JOONwQpO'#JOO! YQpO,5;iOOQO,5;s,5;sO! hQYO'#FZOOOO'#Ht'#HtO3fO!bO,5;fO! oQpO'#F]OOQ!LS,5;f,5;fO!!]Q,UO'#CqOOQ!LS'#Ct'#CtO!!pQWO'#CtO!!uOSO'#CxO!#cQ#tO,5;xO!#jQWO,5;zO!$vQWO'#FjO!%TQWO'#FkO!%YQWO'#FoO!&[Q&jO'#FsO!&}Q,UO'#IhOOQ!LS'#Ih'#IhO!'XQWO'#IgO!'gQWO'#IfOOQ!LS'#Cr'#CrOOQ!LS'#Cy'#CyO!'oQWO'#C{OIxQWO'#FbOIxQWO'#FdO!'tQWO'#FfO!'yQWO'#FgO!(OQWO'#FmOIxQWO'#FrO!(TQWO'#EVO!(lQWO,5;yO`QYO,5>QOOQQ'#Ib'#IbOOQQ,5>R,5>ROOQQ-E;f-E;fO!*hQ!LdO,5:QOOQ!LQ'#Co'#CoO!+XQ#tO,5<nOOQO'#Ce'#CeO!+jQWO'#CpO!+rQ!LYO'#IcO5RQWO'#IcO9{QWO,59WO!,QQpO,59WO!,YQ#tO,59WO5jQ#tO,59WO!,eQWO,5:oO!,mQWO'#GpO!,uQWO'#JZO)uQYO,5;cOKeQ&jO,5;eO!,}QWO,5=ZO!-SQWO,5=ZO!-XQWO,5=ZO5]Q!LYO,5=ZO5eQWO,5<nO!-gQWO'#EWO!-xQ&jO'#EXOOQ!LQ'#Ix'#IxO!.ZQ!LYO'#JWO5]Q!LYO,5<rO7_QWO,5<xOOQO'#Cq'#CqO!.fQpO,5<uO!.nQ#tO,5<vO!.yQWO,5<xO!/OQ`O,5<{O9{QWO'#GfO5eQWO'#GhO!/WQWO'#GhO5jQ#tO'#GkO!/]QWO'#GkOOQQ,5=O,5=OO!/bQWO'#GlO!/jQWO'#ClO!/oQWO,58}O!/yQWO,58}O!1xQYO,58}OOQQ,58},58}O!2VQ!LYO,58}O)uQYO,58}O!2bQYO'#GsOOQQ'#Gt'#GtOOQQ'#Gu'#GuO`QYO,5=]O!2rQWO,5=]O)uQYO'#DtO`QYO,5=cO`QYO,5=eO!2wQWO,5=gO`QYO,5=iO!2|QWO,5=lO!3RQYO,5=rOOQQ,5=v,5=vO)uQYO,5=vO5]Q!LYO,5=xOOQQ,5=z,5=zO!7PQWO,5=zOOQQ,5=|,5=|O!7PQWO,5=|OOQQ,5>O,5>OO!7UQ`O,5?ZOOOS-E;h-E;hOOQ!LS1G/Y1G/YO!7ZQbO,5>VO)uQYO,5>VOOQO-E;i-E;iO!7eQWO,5?[O!7mQbO,5?[O!7tQWO,5?eOOQ!LS1G/_1G/_O!7|QpO'#DQOOQO'#Ir'#IrO)uQYO'#IrO!8kQpO'#IrO!9YQpO'#D_O!9kQ&jO'#D_O!;sQYO'#D_O!;zQWO'#IqO!<SQWO,59xO!<XQWO'#EYO!<gQWO'#I{O!<oQWO,5:sO!=VQ&jO'#D_O)uQYO,5?fO!=aQWO'#HpO!7tQWO,5?eOOQ!LQ1G0^1G0^O!>gQ&jO'#DxOOQ!LS,5:a,5:aO)uQYO,5:aOHiQWO,5:aO!>nQWO,5:aO9{QWO,5:nO!,QQpO,5:nO!,YQ#tO,5:nO5jQ#tO,5:nOOQ!LS1G/j1G/jOOQ!LS1G/z1G/zOOQ!LQ'#EP'#EPO)uQYO,5?cO!>yQ!LYO,5?cO!?[Q!LYO,5?cO!?cQWO,5?bO!?kQWO'#HrO!?cQWO,5?bOOQ!LQ1G0]1G0]O6tQWO,5?bOOQ!LS1G0Z1G0ZO!@VQ!LdO1G0ZO!@vQ!LbO,5:lOOQ!LS'#Fi'#FiO!AdQ!LdO'#IhOFlQYO1G0ZO!CcQ#tO'#IsO!CmQWO,5:SO!CrQbO'#ItO)uQYO'#ItO!C|QWO,5:XOOQ!LS'#DQ'#DQOOQ!LS1G0d1G0dO!DRQWO1G0dO!FdQ!LdO1G0eO!FkQ!LdO1G0eO!IOQ!LdO1G0eO!IVQ!LdO1G0eO!K^Q!LdO1G0eO!KqQ!LdO1G0eO!NbQ!LdO1G0eO!NiQ!LdO1G0eO#!|Q!LdO1G0eO##TQ!LdO1G0eO#$xQ!LdO1G0eO#'rQ7^O'#CgO#)mQ7^O1G0uO#+hQ7^O'#InOOQ!LS1G0{1G0{O#+{Q!LdO,5>aOOQ!LQ-E;s-E;sO#,lQ!LdO1G0eOOQ!LS1G0e1G0eO#.nQ!LdO1G0xO#/_QpO,5;kO#/dQpO,5;lO#/iQpO'#FSO#/}QWO'#FROOQO'#JP'#JPOOQO'#Hs'#HsO#0SQpO1G1TOOQ!LS1G1T1G1TOOQO1G1^1G1^O#0bQ7^O'#ImO#0lQWO,5;uOKjQYO,5;uOOOO-E;r-E;rOOQ!LS1G1Q1G1QOOQ!LS,5;w,5;wO#0qQpO,5;wOOQ!LS,59`,59`OHiQWO'#IjOOOS'#Hi'#HiO#0vOSO,59dOOQ!LS,59d,59dO)uQYO1G1dOKeQ&jO'#HwO#1RQWO,5<]OOQ!LS,5<Y,5<YOOQO'#F}'#F}OIxQWO,5<hOOQO'#GP'#GPOIxQWO,5<jOIxQWO,5<lOOQO1G1f1G1fO#1^Q`O'#CoO#1qQ`O,5<UO#1xQWO'#JSO5eQWO'#JSO#2WQWO,5<WOIxQWO,5<VO#2]Q`O'#FiO#2jQ`O'#JTO#2tQWO'#JTOHiQWO'#JTO#2yQWO,5<ZOOQ!LQ'#Dc'#DcO#3OQWO'#FlO#3ZQpO'#FtO!&VQ&jO'#FtO!&VQ&jO'#FvO#3lQWO'#FwO!(OQWO'#FzOOQO'#Hy'#HyO#3qQ&jO,5<_OOQ!LS,5<_,5<_O#3xQ&jO'#FtO#4WQ&jO'#FuO#4`Q&jO'#FuOOQ!LS,5<m,5<mOIxQWO,5?ROIxQWO,5?RO#4eQWO'#HzO#4pQWO,5?QOOQ!LS'#Cg'#CgO#5dQ#tO,59gOOQ!LS,59g,59gO#6VQ#tO,5;|O#6xQ#tO,5<OO#7SQWO,5<QOOQ!LS,5<R,5<RO#7XQWO,5<XO#7^Q#tO,5<^OFlQYO1G1eO#7nQWO1G1eOOQQ1G3l1G3lOOQ!LS1G/l1G/lOMgQWO1G/lOOQQ1G2Y1G2YOHiQWO1G2YO)uQYO1G2YOHiQWO1G2YO#7sQWO1G2YO#8RQWO,59[O#9[QWO'#EQOOQ!LQ,5>},5>}O#9fQ!LYO,5>}OOQQ1G.r1G.rO9{QWO1G.rO!,QQpO1G.rO!,YQ#tO1G.rO#9tQWO1G0ZO#9yQWO'#CgO#:UQWO'#J[O#:^QWO,5=[O#:cQWO'#J[O#:hQWO'#ISO#:vQWO,5?uO#;OQbO1G0}OOQ!LS1G1P1G1PO5eQWO1G2uO#;VQWO1G2uO#;[QWO1G2uO#;aQWO1G2uOOQQ1G2u1G2uO#;fQ#tO1G2YO6tQWO'#IyO6tQWO'#EYO6tQWO'#H|O#;wQ!LYO,5?rOOQQ1G2^1G2^O!.yQWO1G2dOHiQWO1G2aO#<SQWO1G2aOOQQ1G2b1G2bOHiQWO1G2bO#<XQWO1G2bO#<aQ&jO'#G`OOQQ1G2d1G2dO!&VQ&jO'#IOO!/OQ`O1G2gOOQQ1G2g1G2gOOQQ,5=Q,5=QO#<iQ#tO,5=SO5eQWO,5=SO#3lQWO,5=VO5RQWO,5=VO!,QQpO,5=VO!,YQ#tO,5=VO5jQ#tO,5=VO#<zQWO'#JYO#=VQWO,5=WOOQQ1G.i1G.iO#=[Q!LYO1G.iO#=gQWO1G.iO!'oQWO1G.iO5]Q!LYO1G.iO#=lQbO,5?wO#=vQWO,5?wO#>RQYO,5=_O#>YQWO,5=_O6tQWO,5?wOOQQ1G2w1G2wO`QYO1G2wOOQQ1G2}1G2}OOQQ1G3P1G3PO9vQWO1G3RO#>_QYO1G3TO#BVQYO'#HSOOQQ1G3W1G3WO9{QWO1G3^O#BdQWO1G3^O5]Q!LYO1G3bOOQQ1G3d1G3dOOQ!LQ'#Fp'#FpO5]Q!LYO1G3fO5]Q!LYO1G3hOOOS1G4u1G4uO#BlQ`O,5;{O#BtQbO1G3qO#COQWO1G4vO#CWQWO1G5PO#C`QWO,5?^OKjQYO,5:tO6tQWO,5:tO9{QWO,59yOKjQYO,59yO!,QQpO,59yO#CeQ7^O,59yOOQO,5:t,5:tO#CoQ&jO'#HlO#DVQWO,5?]OOQ!LS1G/d1G/dO#D_Q&jO'#HqO#DsQWO,5?gOOQ!LQ1G0_1G0_O!9kQ&jO,59yO#D{QbO1G5QOOQO,5>[,5>[O6tQWO,5>[OOQO-E;n-E;nO#EVQ!LrO'#D}O!&VQ&jO'#DyOOQO'#Ho'#HoO#EqQ&jO,5:dOOQ!LS,5:d,5:dO#ExQ&jO'#DyO#FWQ&jO'#D}O#FlQ&jO'#D}O!&VQ&jO'#D}O#FvQWO1G/{O#F{Q`O1G/{OOQ!LS1G/{1G/{O)uQYO1G/{OHiQWO1G/{OOQ!LS1G0Y1G0YO9{QWO1G0YO!,QQpO1G0YO!,YQ#tO1G0YO#GSQ!LdO1G4}O)uQYO1G4}O#GdQ!LYO1G4}O#GuQWO1G4|O6tQWO,5>^OOQO,5>^,5>^O#G}QWO,5>^OOQO-E;p-E;pO#GuQWO1G4|O#H]Q!LdO,59gO#J[Q!LdO,5;|O#L^Q!LdO,5<OO#N`Q!LdO,5<^OOQ!LS7+%u7+%uO$!hQ!LdO7+%uO$#XQWO'#HmO$#cQWO,5?_OOQ!LS1G/n1G/nO$#kQYO'#HnO$#xQWO,5?`O$$QQbO,5?`OOQ!LS1G/s1G/sOOQ!LS7+&O7+&OO$$[Q7^O,5:YO)uQYO7+&aO$$fQ7^O,5:QOOQO1G1V1G1VOOQO1G1W1G1WO$$sQMhO,5;nOKjQYO,5;mOOQO-E;q-E;qOOQ!LS7+&o7+&oOOQO7+&x7+&xOOOO1G1a1G1aO$%OQWO1G1aOOQ!LS1G1c1G1cO$%TQ`O,5?UOOOS-E;g-E;gOOQ!LS1G/O1G/OO$%[Q!LdO7+'OOOQ!LS,5>c,5>cO$%{QWO,5>cOOQ!LS1G1w1G1wP$&QQWO'#HwPOQ!LS-E;u-E;uO$&qQ#tO1G2SO$'dQ#tO1G2UO$'nQ#tO1G2WOOQ!LS1G1p1G1pO$'uQWO'#HvO$(TQWO,5?nO$(TQWO,5?nO$(]QWO,5?nO$(hQWO,5?nOOQO1G1r1G1rO$(vQ#tO1G1qO$)WQWO'#HxO$)hQWO,5?oOHiQWO,5?oO$)pQ`O,5?oOOQ!LS1G1u1G1uO5]Q!LYO,5<`O5]Q!LYO,5<aO$)zQWO,5<aO#3gQWO,5<aO!,QQpO,5<`O$*PQWO,5<bO5]Q!LYO,5<cO$)zQWO,5<fOOQO-E;w-E;wOOQ!LS1G1y1G1yO!&VQ&jO,5<`O$*XQWO,5<aO!&VQ&jO,5<bO!&VQ&jO,5<aO$*dQ#tO1G4mO$*nQ#tO1G4mOOQO,5>f,5>fOOQO-E;x-E;xOKeQ&jO,59iO)uQYO,59iO$*{QWO1G1lOIxQWO1G1sO$+QQ!LdO7+'POOQ!LS7+'P7+'POFlQYO7+'POOQ!LS7+%W7+%WO$+qQ`O'#JUO#FvQWO7+'tO$+{QWO7+'tO$,TQ`O7+'tOOQQ7+'t7+'tOHiQWO7+'tO)uQYO7+'tOHiQWO7+'tOOQO1G.v1G.vO$,_Q!LbO'#CgO$,oQ!LbO,5<dO$-^QWO,5<dOOQ!LQ1G4i1G4iOOQQ7+$^7+$^O9{QWO7+$^O!,QQpO7+$^OFlQYO7+%uO$-cQWO'#IRO$-nQWO,5?vOOQO1G2v1G2vO5eQWO,5?vOOQO,5>n,5>nOOQO-E<Q-E<QOOQ!LS7+&i7+&iO$-vQWO7+(aO5]Q!LYO7+(aO5eQWO7+(aO$-{QWO7+(aO$.QQWO7+'tOOQ!LQ,5>h,5>hOOQ!LQ-E;z-E;zOOQQ7+(O7+(OO$.`Q!LbO7+'{OHiQWO7+'{O$.jQ`O7+'|OOQQ7+'|7+'|OHiQWO7+'|O$.qQWO'#JXO$.|QWO,5<zOOQO,5>j,5>jOOQO-E;|-E;|OOQQ7+(R7+(RO$/sQ&jO'#GiOOQQ1G2n1G2nOHiQWO1G2nO)uQYO1G2nOHiQWO1G2nO$/zQWO1G2nO$0YQ#tO1G2nO5]Q!LYO1G2qO#3lQWO1G2qO5RQWO1G2qO!,QQpO1G2qO!,YQ#tO1G2qO$0kQWO'#IQO$0vQWO,5?tO$1OQ&jO,5?tOOQ!LQ1G2r1G2rOOQQ7+$T7+$TO$1TQWO7+$TO5]Q!LYO7+$TO$1YQWO7+$TO)uQYO1G5cO)uQYO1G5dO$1_QYO1G2yO$1fQWO1G2yO$1kQYO1G2yO$1rQ!LYO1G5cOOQQ7+(c7+(cO5]Q!LYO7+(mO`QYO7+(oOOQQ'#J_'#J_OOQQ'#IT'#ITO$1|QYO,5=nOOQQ,5=n,5=nO)uQYO'#HTO$2ZQWO'#HVOOQQ7+(x7+(xO$2`QYO7+(xO6tQWO7+(xOOQQ7+(|7+(|OOQQ7+)Q7+)QOOQQ7+)S7+)SOOQO1G4x1G4xO$6ZQ7^O1G0`O$6eQWO1G0`OOQO1G/e1G/eO$6pQ7^O1G/eO9{QWO1G/eOKjQYO'#D_OOQO,5>W,5>WOOQO-E;j-E;jOOQO,5>],5>]OOQO-E;o-E;oO!,QQpO1G/eOOQO1G3v1G3vO9{QWO,5:eOOQO,5:i,5:iO)uQYO,5:iO$6zQ!LYO,5:iO$7VQ!LYO,5:iO!,QQpO,5:eOOQO-E;m-E;mOOQ!LS1G0O1G0OO!&VQ&jO,5:eO$7eQ!LrO,5:iO$8PQ&jO,5:eO!&VQ&jO,5:iO$8_Q&jO,5:iO$8sQ!LYO,5:iOOQ!LS7+%g7+%gO#FvQWO7+%gO#F{Q`O7+%gOOQ!LS7+%t7+%tO9{QWO7+%tO!,QQpO7+%tO$9XQ!LdO7+*iO)uQYO7+*iOOQO1G3x1G3xO6tQWO1G3xO$9iQWO7+*hO$9qQ!LdO1G2SO$;sQ!LdO1G2UO$=uQ!LdO1G1qO$?}Q#tO,5>XOOQO-E;k-E;kO$@XQbO,5>YO)uQYO,5>YOOQO-E;l-E;lO$@cQWO1G4zO$@kQ7^O1G0ZO$BrQ7^O1G0eO$ByQ7^O1G0eO$DzQ7^O1G0eO$ERQ7^O1G0eO$FvQ7^O1G0eO$GZQ7^O1G0eO$IhQ7^O1G0eO$IoQ7^O1G0eO$KpQ7^O1G0eO$KwQ7^O1G0eO$MlQ7^O1G0eO$NPQ!LdO<<I{O$NpQ7^O1G0eO%!`Q7^O'#IhO%$]Q7^O1G0xOKjQYO'#FUOOQO'#JQ'#JQOOQO1G1Y1G1YO%$jQWO1G1XO%$oQ7^O,5>aOOOO7+&{7+&{OOOS1G4p1G4pOOQ!LS1G3}1G3}OIxQWO7+'rO%$yQWO,5>bO5eQWO,5>bOOQO-E;t-E;tO%%XQWO1G5YO%%XQWO1G5YO%%aQWO1G5YO%%lQ`O,5>dO%%vQWO,5>dOHiQWO,5>dOOQO-E;v-E;vO%%{Q`O1G5ZO%&VQWO1G5ZOOQO1G1z1G1zOOQO1G1{1G1{O5]Q!LYO1G1{O$)zQWO1G1{O5]Q!LYO1G1zO%&_QWO1G1|OHiQWO1G1|OOQO1G1}1G1}O5]Q!LYO1G2QO!,QQpO1G1zO#3gQWO1G1{O%&dQWO1G1|O%&lQWO1G1{OIxQWO7+*XOOQ!LS1G/T1G/TO%&wQWO1G/TOOQ!LS7+'W7+'WO%&|Q#tO7+'_O%'^Q!LdO<<JkOOQ!LS<<Jk<<JkOHiQWO'#H{O%'}QWO,5?pOOQQ<<K`<<K`OHiQWO<<K`O#FvQWO<<K`O%(VQWO<<K`O%(_Q`O<<K`OHiQWO1G2OOOQQ<<Gx<<GxO9{QWO<<GxO%(iQ!LdO<<IaOOQ!LS<<Ia<<IaOOQO,5>m,5>mO%)YQWO,5>mOOQO-E<P-E<PO%)_QWO1G5bO%)gQWO<<K{OOQQ<<K{<<K{O%)lQWO<<K{O5]Q!LYO<<K{O)uQYO<<K`OHiQWO<<K`OOQQ<<Kg<<KgO$.`Q!LbO<<KgOOQQ<<Kh<<KhO$.jQ`O<<KhO%)qQ&jO'#H}O%)|QWO,5?sOKjQYO,5?sOOQQ1G2f1G2fO#EVQ!LrO'#D}O!&VQ&jO'#GjOOQO'#IP'#IPO%*UQ&jO,5=TOOQQ,5=T,5=TO#4WQ&jO'#D}O%*]Q&jO'#D}O%*qQ&jO'#D}O%*{Q&jO'#GjO%+ZQWO7+(YO%+`QWO7+(YO%+hQ`O7+(YOOQQ7+(Y7+(YOHiQWO7+(YO)uQYO7+(YOHiQWO7+(YO%+rQWO7+(YOOQQ7+(]7+(]O5]Q!LYO7+(]O#3lQWO7+(]O5RQWO7+(]O!,QQpO7+(]O%,QQWO,5>lOOQO-E<O-E<OOOQO'#Gm'#GmO%,]QWO1G5`O5]Q!LYO<<GoOOQQ<<Go<<GoO%,eQWO<<GoO%,jQWO7+*}O%,oQWO7++OOOQQ7+(e7+(eO%,tQWO7+(eO%,yQYO7+(eO%-QQWO7+(eO)uQYO7+*}O)uQYO7++OOOQQ<<LX<<LXOOQQ<<LZ<<LZOOQQ-E<R-E<ROOQQ1G3Y1G3YO%-VQWO,5=oOOQQ,5=q,5=qO9{QWO<<LdO%-[QWO<<LdOKjQYO7+%zOOQO7+%P7+%PO%-aQ7^O1G5QO9{QWO7+%POOQO1G0P1G0PO%-kQ!LdO1G0TOOQO1G0T1G0TO)uQYO1G0TO%-uQ!LYO1G0TO9{QWO1G0PO!,QQpO1G0PO%.QQ!LYO1G0TO!&VQ&jO1G0PO%.`Q!LYO1G0TO%.tQ!LrO1G0TO%/OQ&jO1G0PO!&VQ&jO1G0TOOQ!LS<<IR<<IROOQ!LS<<I`<<I`O9{QWO<<I`O%/^Q!LdO<<NTOOQO7+)d7+)dO%/nQ!LdO7+'_O%1vQbO1G3tO%2QQ7^O7+%uO%2_Q7^O,59gO%4[Q7^O,5;|O%6XQ7^O,5<OO%8UQ7^O,5<^O%9tQ7^O7+'OO%:RQ7^O7+'PO%:`QWO,5;pOOQO7+&s7+&sO%:eQ#tO<<K^OOQO1G3|1G3|O%:uQWO1G3|O%;QQWO1G3|O%;`QWO7+*tO%;`QWO7+*tOHiQWO1G4OO%;hQ`O1G4OO%;rQWO7+*uOOQO7+'g7+'gO5]Q!LYO7+'gOOQO7+'f7+'fO$)zQWO7+'hO%;zQ`O7+'hOOQO7+'l7+'lO5]Q!LYO7+'fO$)zQWO7+'gO%<RQWO7+'hOHiQWO7+'hO#3gQWO7+'gO%<WQ#tO<<MsOOQ!LS7+$o7+$oO%<bQ`O,5>gOOQO-E;y-E;yO#FvQWOAN@zOOQQAN@zAN@zOHiQWOAN@zO%<lQ!LbO7+'jOOQQAN=dAN=dO5eQWO1G4XO%<yQWO7+*|O5]Q!LYOANAgO%=RQWOANAgOOQQANAgANAgO%=WQWOAN@zO%=`Q`OAN@zOOQQANARANAROOQQANASANASO%=jQWO,5>iOOQO-E;{-E;{O%=uQ7^O1G5_O#3lQWO,5=UO5RQWO,5=UO!,QQpO,5=UOOQO-E;}-E;}OOQQ1G2o1G2oO$7eQ!LrO,5:iO!&VQ&jO,5=UO%>PQ&jO,5=UO%>_Q&jO,5:iOOQQ<<Kt<<KtOHiQWO<<KtO%+ZQWO<<KtO%>sQWO<<KtO%>{Q`O<<KtO)uQYO<<KtOHiQWO<<KtOOQQ<<Kw<<KwO5]Q!LYO<<KwO#3lQWO<<KwO5RQWO<<KwO%?VQ&jO1G4WO%?[QWO7+*zOOQQAN=ZAN=ZO5]Q!LYOAN=ZOOQQ<<Ni<<NiOOQQ<<Nj<<NjOOQQ<<LP<<LPO%?dQWO<<LPO%?iQYO<<LPO%?pQWO<<NiO%?uQWO<<NjOOQQ1G3Z1G3ZOOQQANBOANBOO9{QWOANBOO%?zQ7^O<<IfOOQO<<Hk<<HkOOQO7+%o7+%oO%-kQ!LdO7+%oO)uQYO7+%oOOQO7+%k7+%kO9{QWO7+%kO%@UQ!LYO7+%oO!,QQpO7+%kO%@aQ!LYO7+%oO!&VQ&jO7+%kO%@oQ!LYO7+%oOOQ!LSAN>zAN>zO%ATQ!LdO<<K^O%C]Q7^O<<I{O%CjQ7^O1G1qO%EYQ7^O1G2SO%GVQ7^O1G2UO%ISQ7^O<<JkO%IaQ7^O<<IaOOQO1G1[1G1[OOQO7+)h7+)hO%InQWO7+)hO%IyQWO<<N`O%JRQ`O7+)jOOQO<<KR<<KRO5]Q!LYO<<KSO$)zQWO<<KSOOQO<<KQ<<KQO5]Q!LYO<<KRO%J]Q`O<<KSO$)zQWO<<KROOQQG26fG26fO#FvQWOG26fOOQO7+)s7+)sOOQQG27RG27RO5]Q!LYOG27ROHiQWOG26fOKjQYO1G4TO%JdQWO7+*yO5]Q!LYO1G2pO#3lQWO1G2pO5RQWO1G2pO!,QQpO1G2pO!&VQ&jO1G2pO%.tQ!LrO1G0TO%JlQ&jO1G2pO%+ZQWOANA`OOQQANA`ANA`OHiQWOANA`O%JzQWOANA`O%KSQ`OANA`OOQQANAcANAcO5]Q!LYOANAcO#3lQWOANAcOOQO'#Gn'#GnOOQO7+)r7+)rOOQQG22uG22uOOQQANAkANAkO%K^QWOANAkOOQQANDTANDTOOQQANDUANDUO%KcQYOG27jOOQO<<IZ<<IZO%-kQ!LdO<<IZOOQO<<IV<<IVO)uQYO<<IZO9{QWO<<IVO& ^Q!LYO<<IZO!,QQpO<<IVO& iQ!LYO<<IZO& wQ7^O7+'_OOQO<<MS<<MSOOQOAN@nAN@nO5]Q!LYOAN@nOOQOAN@mAN@mO$)zQWOAN@nO5]Q!LYOAN@mOOQQLD,QLD,QOOQQLD,mLD,mO#FvQWOLD,QO&#gQ7^O7+)oOOQO7+([7+([O5]Q!LYO7+([O#3lQWO7+([O5RQWO7+([O!,QQpO7+([O!&VQ&jO7+([OOQQG26zG26zO%+ZQWOG26zOHiQWOG26zOOQQG26}G26}O5]Q!LYOG26}OOQQG27VG27VO9{QWOLD-UOOQOAN>uAN>uO%-kQ!LdOAN>uOOQOAN>qAN>qO)uQYOAN>uO9{QWOAN>qO&#qQ!LYOAN>uO&#|Q7^O<<K^OOQOG26YG26YO5]Q!LYOG26YOOQOG26XG26XOOQQ!$( l!$( lOOQO<<Kv<<KvO5]Q!LYO<<KvO#3lQWO<<KvO5RQWO<<KvO!,QQpO<<KvOOQQLD,fLD,fO%+ZQWOLD,fOOQQLD,iLD,iOOQQ!$(!p!$(!pOOQOG24aG24aO%-kQ!LdOG24aOOQOG24]G24]O)uQYOG24aOOQOLD+tLD+tOOQOANAbANAbO5]Q!LYOANAbO#3lQWOANAbO5RQWOANAbOOQQ!$(!Q!$(!QOOQOLD){LD){O%-kQ!LdOLD){OOQOG26|G26|O5]Q!LYOG26|O#3lQWOG26|OOQO!$'Mg!$'MgOOQOLD,hLD,hO5]Q!LYOLD,hOOQO!$(!S!$(!SOKjQYO'#DnO&%lQbO'#ImOKjQYO'#DfO&%sQ!LdO'#CgO&&^QbO'#CgO&&nQYO,5:oOKjQYO,5:yOKjQYO,5:yOKjQYO,5:yOKjQYO,5:yOKjQYO,5:yOKjQYO,5:yOKjQYO,5:yOKjQYO,5:yOKjQYO,5:yOKjQYO,5:yOKjQYO,5:yOKjQYO'#HuO&(kQWO,5;{O&)}QWO,5:yOKjQYO,5;^O!'oQWO'#C{O!'oQWO'#C{OHiQWO'#FbO&(sQWO'#FbOHiQWO'#FdO&(sQWO'#FdOHiQWO'#FrO&(sQWO'#FrOKjQYO,5?fO&&nQYO1G0ZO&*UQ7^O'#CgOKjQYO1G1dOHiQWO,5<hO&(sQWO,5<hOHiQWO,5<jO&(sQWO,5<jOHiQWO,5<VO&(sQWO,5<VO&&nQYO1G1eOKjQYO7+&aOHiQWO1G1sO&(sQWO1G1sO&&nQYO7+'PO&&nQYO7+%uOHiQWO7+'rO&(sQWO7+'rO&*`QWO'#ETO&*eQWO'#ETO&*mQWO'#ErO&*rQWO'#IzO&*}QWO'#IxO&+YQWO,5:oO&+_Q#tO,5;xO&+fQWO'#FkO&+kQWO'#FkO&+pQWO,5;yO&+xQWO,5:oO&,QQ7^O1G0uO&,XQWO,5<XO&,^QWO,5<XO&,cQWO1G1eO&,hQWO1G0ZO&,mQ#tO1G2WO&,tQ#tO1G2WO3tQWO'#F`O5RQWO'#F_OB`QWO'#ESOKjQYO,5;ZO!(OQWO'#FmO!(OQWO'#FmOIxQWO,5<lOIxQWO,5<l",
      stateData: "&-p~O'POS'QOSSOSTOS~OPTOQTOWwO]bO^gOamOblOgbOiTOjbOkbOnTOpTOuROwbOxbOybO!PSO!ZjO!`UO!cTO!dTO!eTO!fTO!gTO!jkO#[qO#lnO#p]O$woO$yrO${pO$|pO%PsO%RtO%UuO%VuO%XvO%fxO%lyO%nzO%p{O%r|O%u}O%{!OO&P!PO&R!QO&T!RO&V!SO&X!TO'SPO']QO'u`O~OPZXYZX^ZXiZXrZXsZXuZX}ZX!]ZX!^ZX!`ZX!fZX!uZX#PcX#SZX#TZX#UZX#VZX#WZX#XZX#YZX#ZZX#]ZX#_ZX#aZX#bZX#gZX&}ZX']ZX'iZX'pZX'qZX~O!X$dX~P$wO&z!VO&{!UO&|!XO~OPTOQTO]bOa!hOb!gOgbOiTOjbOkbOnTOpTOuROwbOxbOybO!P!`O!ZjO!`UO!cTO!dTO!eTO!fTO!gTO!j!fO#l!iO#p]O'S!YO']QO'u`O~O|!^O}!ZOz'dPz'mP~P'aO!O!jO~P`OPTOQTO]bOa!hOb!gOgbOiTOjbOkbOnTOpTOuROwbOxbOybO!P!`O!ZjO!`UO!cTO!dTO!eTO!fTO!gTO!j!fO#l!iO#p]O'S8lO']QO'u`O~OPTOQTO]bOa!hOb!gOgbOiTOjbOkbOnTOpTOuROwbOxbOybO!P!`O!ZjO!`UO!cTO!dTO!eTO!fTO!gTO!j!fO#l!iO#p]O']QO'u`O~O|!oO!}!rO#O!oO'S8mO!_'jP~P+rO#P!sO~O!X!tO#P!sO~OP#ZOY#aOi#OOr!xOs!xOu!yO}#_O!]#QO!^!vO!`!wO!f#ZO#S!|O#T!}O#U!}O#V!}O#W#PO#X#QO#Y#QO#Z#QO#]#RO#_#TO#a#VO#b#WO']QO'i#XO'p!zO'q!{O~O^'aX&}'aX!_'aXz'aX!P'aX$x'aX!X'aX~P.^O!u#bO#g#bOP'bXY'bX^'bXi'bXr'bXs'bXu'bX}'bX!]'bX!^'bX!`'bX!f'bX#S'bX#T'bX#U'bX#V'bX#W'bX#X'bX#Z'bX#]'bX#_'bX#a'bX#b'bX']'bX'i'bX'p'bX'q'bX~O#Y'bX&}'bXz'bX!_'bX'_'bX!P'bX$x'bX!X'bX~P0nO!u#bO~O#r#cO#y#gO~O!P#hO#p]O#|#iO$O#kO~O]#nOg#{Oi#oOj#nOk#nOn#|Op#}Ou#uO!P#vO!Z$SO!`#sO#O$TO#l$QO$V$OO$X$PO$[$RO'S#mO']#pO'W'YP~O!`$UO~O!X$WO~O^$XO&}$XO~O'S$]O~O!`$UO'S$]O'T$_O'X$`O~Ob$fO!`$UO'S$]O~O]$oOr$kO!P$hO!`$jO$y$nO'S$]O'T$_O['}P~O!j$pO~Ou$qO!P$rO'S$]O~Ou$qO!P$rO%R$vO'S$]O~O'S$wO~O#[qO$yrO${pO$|pO%PsO%RtO%UuO%VuO~Oa%QOb%PO!j$}O$w%OO%Z$|O~P7dOa%TOblO!P%SO!jkO#[qO$woO${pO$|pO%PsO%RtO%UuO%VuO%XvO~O_%WO!u%ZO$y%UO'T$_O~P8cO!`%[O!c%`O~O!`%aO~O!PSO~O^$XO&y%iO&}$XO~O^$XO&y%lO&}$XO~O^$XO&y%nO&}$XO~O&z!VO&{!UO&|%rO~OPZXYZXiZXrZXsZXuZX}ZX}cX!]ZX!^ZX!`ZX!fZX!uZX!ucX#PcX#SZX#TZX#UZX#VZX#WZX#XZX#YZX#ZZX#]ZX#_ZX#aZX#bZX#gZX']ZX'iZX'pZX'qZX~OzZXzcX~P;OO|%tOz&_X}&_X~P)uO}!ZOz'dX~OP#ZOY#aOi#OOr!xOs!xOu!yO}!ZO!]#QO!^!vO!`!wO!f#ZO#S!|O#T!}O#U!}O#V!}O#W#PO#X#QO#Y#QO#Z#QO#]#RO#_#TO#a#VO#b#WO']QO'i#XO'p!zO'q!{O~Oz'dX~P=uOz%yO~Ou%|O!S&WO!T&PO!U&PO'T$_O~O]%}Oj%}O|&QO'`%zO!O'eP!O'oP~P?xOz'lX}'lX!X'lX!_'lX'i'lX~O!u'lX#P!xX!O'lX~P@qO!u&XOz'nX}'nX~O}&YOz'mX~Oz&[O~O!u#bO~P@qOR&`O!P&]O!k&_O'S$]O~Ob&eO!`$UO'S$]O~Or$kO!`$jO~O!O&fO~P`Or!xOs!xOu!yO!^!vO!`!wO']QOP!baY!bai!ba}!ba!]!ba!f!ba#S!ba#T!ba#U!ba#V!ba#W!ba#X!ba#Y!ba#Z!ba#]!ba#_!ba#a!ba#b!ba'i!ba'p!ba'q!ba~O^!ba&}!baz!ba!_!ba'_!ba!P!ba$x!ba!X!ba~PBzO!_&gO~O!X!tO!u&iO'i&hO}'kX^'kX&}'kX~O!_'kX~PEdO}&mO!_'jX~O!_&oO~Ou$qO!P$rO#O&pO'S$]O~OPTOQTO]bOa!hOb!gOgbOiTOjbOkbOnTOpTOuROwbOxbOybO!PSO!ZjO!`UO!cTO!dTO!eTO!fTO!gTO!j!fO#l!iO#p]O'S8lO']QO'u`O~O]#nOg#{Oi#oOj#nOk#nOn#|Op9OOu#uO!P#vO!Z:QO!`#sO#O9UO#l$QO$V9QO$X9SO$[$RO'S&tO']#pO~O#P&vO~O]#nOg#{Oi#oOj#nOk#nOn#|Op#}Ou#uO!P#vO!Z$SO!`#sO#O$TO#l$QO$V$OO$X$PO$[$RO'S&tO']#pO~O'W'gP~PIxO|&zO!_'hP~P)uO'`&|O~OP8iOQ8iO]bOa:OOb!gOgbOi8iOjbOkbOn8iOp8iOuROwbOxbOybO!P!`O!Z8kO!`UO!c8iO!d8iO!e8iO!f8iO!g8iO!j!fO#l!iO#p]O'S'[O']QO'u9|O~O!`!wO~O}#_O^$Ta&}$Ta!_$Taz$Ta!P$Ta$x$Ta!X$Ta~O#['cO~PHiO!X'eO!P'rX#o'rX#r'rX#y'rX~Or'fO~PN_Or'fO!P'rX#o'rX#r'rX#y'rX~O!P'hO#o'lO#r'gO#y'mO~O|'pO~PKjO#r#cO#y'sO~Or$]Xu$]X!^$]X'i$]X'p$]X'q$]X~OReX}eX!ueX'WeX'W$]X~P! wOj'uO~O&z'wO&{'vO&|'yO~Or'{Ou'|O'i#XO'p(OO'q(QO~O'W'zO~P!#QO'W(TO~O]#nOg#{Oi#oOj#nOk#nOn#|Op9OOu#uO!P#vO!Z:QO!`#sO#O9UO#l$QO$V9QO$X9SO$[$RO']#pO~O|(XO'S(UO!_'vP~P!#oO#P(ZO~O|(_O'S([Oz'wP~P!#oO^(hOi(mOu(eO!S(kO!T(dO!U(dO!`(bO!r(lO$o(gO'T$_O'`(aO~O!O(jO~P!%gO!^!vOr'[Xu'[X'i'[X'p'[X'q'[X}'[X!u'[X~O'W'[X#e'[X~P!&cOR(pO!u(oO}'ZX'W'ZX~O}(qO'W'YX~O'S(sO~O!`(xO~O'S&tO~O!`(bO~Ou$qO|!oO!P$rO!}!rO#O!oO'S$]O!_'jP~O!X!tO#P(|O~OP#ZOY#aOi#OOr!xOs!xOu!yO!]#QO!^!vO!`!wO!f#ZO#S!|O#T!}O#U!}O#V!}O#W#PO#X#QO#Y#QO#Z#QO#]#RO#_#TO#a#VO#b#WO']QO'i#XO'p!zO'q!{O~O^!Ya}!Ya&}!Yaz!Ya!_!Ya'_!Ya!P!Ya$x!Ya!X!Ya~P!(tOR)UO!P&]O!k)TO$x)SO'X$`O~O'S$wO'W'YP~O!X)XO!P'VX^'VX&}'VX~O!`$UO'X$`O~O!`$UO'S$]O'X$`O~O!X!tO#P&vO~O'S)aO!O(OP~O})eO['}X~OY)iO~O[)jO~O!P$hO'S$]O'T$_O['}P~Ou$qO|)oO!P$rO'S$]Oz'mP~O]&TOj&TO|)pO'`&|O!O'oP~O})qO^'zX&}'zX~O!u)uO'X$`O~OR)xO!P#vO'X$`O~O!P)zO~Or)|O!PSO~O!j*RO~Ob*WO~O'S(sO!O'|P~Ob$fO~O$yrO'S$wO~P8cOY*^O[*]O~OPTOQTO]bOamOblOgbOiTOjbOkbOnTOpTOuROwbOxbOybO!ZjO!`UO!cTO!dTO!eTO!fTO!gTO!jkO#p]O$woO']QO'u`O~O!P!`O#l!iO'S8lO~P!0RO[*]O^$XO&}$XO~O^*bO#[*dO${*dO$|*dO~P)uO!`%[O~O%l*iO~O!P*kO~O%|*nO%}*mOP%zaQ%zaW%za]%za^%zaa%zab%zag%zai%zaj%zak%zan%zap%zau%zaw%zax%zay%za!P%za!Z%za!`%za!c%za!d%za!e%za!f%za!g%za!j%za#[%za#l%za#p%za$w%za$y%za${%za$|%za%P%za%R%za%U%za%V%za%X%za%f%za%l%za%n%za%p%za%r%za%u%za%{%za&P%za&R%za&T%za&V%za&X%za&x%za'S%za']%za'u%za!O%za%s%za_%za%x%za~O'S*qO~O'_*tO~Oz&_a}&_a~P!(tO}!ZOz'da~Oz'da~P=uO}&YOz'ma~O}tX}!VX!OtX!O!VX!XtX!X!VX!`!VX!utX'X!VX~O!X*{O!u*zO}!|X}'fX!O!|X!O'fX!X'fX!`'fX'X'fX~O!X*}O!`$UO'X$`O}!RX!O!RX~O]%{Oj%{Ou%|O'`(aO~OP8iOQ8iO]bOa:OOb!gOgbOi8iOjbOkbOn8iOp8iOuROwbOxbOybO!P!`O!Z8kO!`UO!c8iO!d8iO!e8iO!f8iO!g8iO!j!fO#l!iO#p]O']QO'u9|O~O'S9YO~P!9yO}+RO!O'eX~O!O+TO~O!X*{O!u*zO}!|X!O!|X~O}+UO!O'oX~O!O+WO~O]%{Oj%{Ou%|O'T$_O'`(aO~O!T+XO!U+XO~P!<tOu$qO|+[O!P$rO'S$]Oz&dX}&dX~O^+`O!S+cO!T+_O!U+_O!n+eO!o+dO!p+dO!r+fO'T$_O'`(aO~O!O+bO~P!=uOR+kO!P&]O!k+jO~O!u+qO}'ka!_'ka^'ka&}'ka~O!X!tO~P!>yO}&mO!_'ja~Ou$qO|+tO!P$rO!}+vO#O+tO'S$]O}&fX!_&fX~O^!wi}!wi&}!wiz!wi!_!wi'_!wi!P!wi$x!wi!X!wi~P!(tO#P!ta}!ta!_!ta!u!ta!P!ta^!ta&}!taz!ta~P!#QO#P'[XP'[XY'[X^'[Xi'[Xs'[X!]'[X!`'[X!f'[X#S'[X#T'[X#U'[X#V'[X#W'[X#X'[X#Y'[X#Z'[X#]'[X#_'[X#a'[X#b'[X&}'[X']'[X!_'[Xz'[X!P'[X'_'[X$x'[X!X'[X~P!&cO},PO'W'gX~P!#QO'W,RO~O},SO!_'hX~P!(tO!_,VO~Oz,WO~OP#ZOr!xOs!xOu!yO!^!vO!`!wO!f#ZO']QOY#Ri^#Rii#Ri}#Ri!]#Ri#T#Ri#U#Ri#V#Ri#W#Ri#X#Ri#Y#Ri#Z#Ri#]#Ri#_#Ri#a#Ri#b#Ri&}#Ri'i#Ri'p#Ri'q#Riz#Ri!_#Ri'_#Ri!P#Ri$x#Ri!X#Ri~O#S#Ri~P!DWO#S!|O~P!DWOP#ZOr!xOs!xOu!yO!^!vO!`!wO!f#ZO#S!|O#T!}O#U!}O#V!}O']QOY#Ri^#Ri}#Ri!]#Ri#W#Ri#X#Ri#Y#Ri#Z#Ri#]#Ri#_#Ri#a#Ri#b#Ri&}#Ri'i#Ri'p#Ri'q#Riz#Ri!_#Ri'_#Ri!P#Ri$x#Ri!X#Ri~Oi#Ri~P!FrOi#OO~P!FrOP#ZOi#OOr!xOs!xOu!yO!^!vO!`!wO!f#ZO#S!|O#T!}O#U!}O#V!}O#W#PO']QO^#Ri}#Ri#]#Ri#_#Ri#a#Ri#b#Ri&}#Ri'i#Ri'p#Ri'q#Riz#Ri!_#Ri'_#Ri!P#Ri$x#Ri!X#Ri~OY#Ri!]#Ri#X#Ri#Y#Ri#Z#Ri~P!I^OY#aO!]#QO#X#QO#Y#QO#Z#QO~P!I^OP#ZOY#aOi#OOr!xOs!xOu!yO!]#QO!^!vO!`!wO!f#ZO#S!|O#T!}O#U!}O#V!}O#W#PO#X#QO#Y#QO#Z#QO#]#RO']QO^#Ri}#Ri#_#Ri#a#Ri#b#Ri&}#Ri'i#Ri'q#Riz#Ri!_#Ri'_#Ri!P#Ri$x#Ri!X#Ri~O'p#Ri~P!LUO'p!zO~P!LUOP#ZOY#aOi#OOr!xOs!xOu!yO!]#QO!^!vO!`!wO!f#ZO#S!|O#T!}O#U!}O#V!}O#W#PO#X#QO#Y#QO#Z#QO#]#RO#_#TO']QO'p!zO^#Ri}#Ri#a#Ri#b#Ri&}#Ri'i#Riz#Ri!_#Ri'_#Ri!P#Ri$x#Ri!X#Ri~O'q#Ri~P!NpO'q!{O~P!NpOP#ZOY#aOi#OOr!xOs!xOu!yO!]#QO!^!vO!`!wO!f#ZO#S!|O#T!}O#U!}O#V!}O#W#PO#X#QO#Y#QO#Z#QO#]#RO#_#TO#a#VO']QO'p!zO'q!{O~O^#Ri}#Ri#b#Ri&}#Ri'i#Riz#Ri!_#Ri'_#Ri!P#Ri$x#Ri!X#Ri~P##[OPZXYZXiZXrZXsZXuZX!]ZX!^ZX!`ZX!fZX!uZX#PcX#SZX#TZX#UZX#VZX#WZX#XZX#YZX#ZZX#]ZX#_ZX#aZX#bZX#gZX']ZX'iZX'pZX'qZX}ZX!OZX~O#eZX~P#%oOP#ZOY8|Oi8qOr!xOs!xOu!yO!]8sO!^!vO!`!wO!f#ZO#S8oO#T8pO#U8pO#V8pO#W8rO#X8sO#Y8sO#Z8sO#]8tO#_8vO#a8xO#b8yO']QO'i#XO'p!zO'q!{O~O#e,YO~P#'yOP'bXY'bXi'bXr'bXs'bXu'bX!]'bX!^'bX!`'bX!f'bX#S'bX#T'bX#U'bX#V'bX#W'bX#X'bX#Z'bX#]'bX#_'bX#a'bX#b'bX']'bX'i'bX'p'bX'q'bX}'bX~O!u8}O#g8}O#Y'bX#e'bX!O'bX~P#)tO^&ia}&ia&}&ia!_&ia'_&iaz&ia!P&ia$x&ia!X&ia~P!(tOP#RiY#Ri^#Rii#Ris#Ri}#Ri!]#Ri!^#Ri!`#Ri!f#Ri#S#Ri#T#Ri#U#Ri#V#Ri#W#Ri#X#Ri#Y#Ri#Z#Ri#]#Ri#_#Ri#a#Ri#b#Ri&}#Ri']#Riz#Ri!_#Ri'_#Ri!P#Ri$x#Ri!X#Ri~P!#QO^#fi}#fi&}#fiz#fi!_#fi'_#fi!P#fi$x#fi!X#fi~P!(tO#r,[O~O#r,]O~O!X'eO!u,^O!P#vX#o#vX#r#vX#y#vX~O|,_O~O!P'hO#o,aO#r'gO#y,bO~O}8zO!O'aX~P#'yO!O,cO~O#y,eO~O&z'wO&{'vO&|,hO~O],kOj,kOz,lO~O}cX!XcX!_cX!_$]X'icX~P! wO!_,rO~P!#QO},sO!X!tO'i&hO!_'vX~O!_,xO~Oz$]X}$]X!X$dX~P! wO},zOz'wX~P!#QO!X,|O~Oz-OO~O|(XO'S$]O!_'vP~Oi-SO!X!tO!`$UO'X$`O'i&hO~O!X)XO~O!O-YO~P!%gO!T-ZO!U-ZO'T$_O'`(aO~Ou-]O'`(aO~O!r-^O~O'S$wO}&nX'W&nX~O}(qO'W'Ya~Or-cOs-cOu-dO'ioa'poa'qoa}oa!uoa~O'Woa#eoa~P#4xOr'{Ou'|O'i$Ua'p$Ua'q$Ua}$Ua!u$Ua~O'W$Ua#e$Ua~P#5nOr'{Ou'|O'i$Wa'p$Wa'q$Wa}$Wa!u$Wa~O'W$Wa#e$Wa~P#6aO]-eO~O#P-fO~O'W$fa}$fa#e$fa!u$fa~P!#QO#P-iO~OR-rO!P&]O!k-qO$x-pO~O'W-sO~O]#nOi#oOj#nOk#nOn#|Op9OOu#uO!P#vO!Z:QO!`#sO#O9UO#l$QO$V9QO$X9SO$[$RO']#pO~Og-uO'S-tO~P#8WO!X)XO!P'Va^'Va&}'Va~O#P-{O~OYZX}cX!OcX~O}-|O!O(OX~O!O.OO~OY.PO~O!P$hO'S$]O[&vX}&vX~O})eO['}a~O!_.SO~P!(tO].UO~OY.VO~O[.WO~OR-rO!P&]O!k-qO$x-pO'X$`O~O})qO^'za&}'za~O!u.^O~OR.aO!P#vO~O'`&|O!O'{P~OR.kO!P.gO!k.jO$x.iO'X$`O~OY.uO}.sO!O'|X~O!O.vO~O[.xO^$XO&}$XO~O].yO~O#Y.{O%j.|O~P0nO!u#bO#Y.{O%j.|O~O^.}O~P)uO^/PO~O%s/TOP%qiQ%qiW%qi]%qi^%qia%qib%qig%qii%qij%qik%qin%qip%qiu%qiw%qix%qiy%qi!P%qi!Z%qi!`%qi!c%qi!d%qi!e%qi!f%qi!g%qi!j%qi#[%qi#l%qi#p%qi$w%qi$y%qi${%qi$|%qi%P%qi%R%qi%U%qi%V%qi%X%qi%f%qi%l%qi%n%qi%p%qi%r%qi%u%qi%{%qi&P%qi&R%qi&T%qi&V%qi&X%qi&x%qi'S%qi']%qi'u%qi!O%qi_%qi%x%qi~O_/ZO!O/XO%x/YO~P`O!PSO!`/^O~O}#_O'_$Ta~Oz&_i}&_i~P!(tO}!ZOz'di~O}&YOz'mi~Oz/bO~O}!Ra!O!Ra~P#'yO]%{Oj%{O|/hO'`(aO}&`X!O&`X~P?xO}+RO!O'ea~O]&TOj&TO|)pO'`&|O}&eX!O&eX~O}+UO!O'oa~Oz'ni}'ni~P!(tO^$XO!X!tO!`$UO!f/sO!u/qO&}$XO'X$`O'i&hO~O!O/vO~P!=uO!T/wO!U/wO'T$_O'`(aO~O!S/yO!T/wO!U/wO!r/zO'T$_O'`(aO~O!o/{O!p/{O~P#FWO!P&]O~O!P&]O~P!#QO}'ki!_'ki^'ki&}'ki~P!(tO!u0UO}'ki!_'ki^'ki&}'ki~O}&mO!_'ji~Ou$qO!P$rO#O0WO'S$]O~O#PoaPoaYoa^oaioa!]oa!^oa!`oa!foa#Soa#Toa#Uoa#Voa#Woa#Xoa#Yoa#Zoa#]oa#_oa#aoa#boa&}oa']oa!_oazoa!Poa'_oa$xoa!Xoa~P#4xO#P$UaP$UaY$Ua^$Uai$Uas$Ua!]$Ua!^$Ua!`$Ua!f$Ua#S$Ua#T$Ua#U$Ua#V$Ua#W$Ua#X$Ua#Y$Ua#Z$Ua#]$Ua#_$Ua#a$Ua#b$Ua&}$Ua']$Ua!_$Uaz$Ua!P$Ua'_$Ua$x$Ua!X$Ua~P#5nO#P$WaP$WaY$Wa^$Wai$Was$Wa!]$Wa!^$Wa!`$Wa!f$Wa#S$Wa#T$Wa#U$Wa#V$Wa#W$Wa#X$Wa#Y$Wa#Z$Wa#]$Wa#_$Wa#a$Wa#b$Wa&}$Wa']$Wa!_$Waz$Wa!P$Wa'_$Wa$x$Wa!X$Wa~P#6aO#P$faP$faY$fa^$fai$fas$fa}$fa!]$fa!^$fa!`$fa!f$fa#S$fa#T$fa#U$fa#V$fa#W$fa#X$fa#Y$fa#Z$fa#]$fa#_$fa#a$fa#b$fa&}$fa']$fa!_$faz$fa!P$fa!u$fa'_$fa$x$fa!X$fa~P!#QO^!wq}!wq&}!wqz!wq!_!wq'_!wq!P!wq$x!wq!X!wq~P!(tO}&aX'W&aX~PIxO},PO'W'ga~O|0`O}&bX!_&bX~P)uO},SO!_'ha~O},SO!_'ha~P!(tO#e!ba!O!ba~PBzO#e!Ya}!Ya!O!Ya~P#'yO!P0sO#p]O#w0tO~O!O0xO~O'_0yO~P!#QO^$Qq}$Qq&}$Qqz$Qq!_$Qq'_$Qq!P$Qq$x$Qq!X$Qq~P!(tOz0zO~O],kOj,kO~Or'{Ou'|O'q(QO'i$pi'p$pi}$pi!u$pi~O'W$pi#e$pi~P$&YOr'{Ou'|O'i$ri'p$ri'q$ri}$ri!u$ri~O'W$ri#e$ri~P$&{O#e0{O~P!#QO|0}O'S$]O}&jX!_&jX~O},sO!_'va~O},sO!X!tO!_'va~O},sO!X!tO'i&hO!_'va~O'W$_i}$_i#e$_i!u$_i~P!#QO|1UO'S([Oz&lX}&lX~P!#oO},zOz'wa~O},zOz'wa~P!#QO!X!tO~O!X!tO#Y1`O~Oi1dO!X!tO'i&hO~O}'Zi'W'Zi~P!#QO!u1gO}'Zi'W'Zi~P!#QO!_1jO~O^$Rq}$Rq&}$Rqz$Rq!_$Rq'_$Rq!P$Rq$x$Rq!X$Rq~P!(tO}1nO!P'xX~P!#QO!P&]O$x1qO~O!P&]O$x1qO~P!#QO!P$]X$mZX^$]X&}$]X~P! wO$m1uOrfXufX!PfX'ifX'pfX'qfX^fX&}fX~O$m1uO~O'S)aO}&uX!O&uX~O}-|O!O(Oa~O[2OO~O]2RO~OR2TO!P&]O!k2SO$x1qO~O^$XO&}$XO~P!#QO!P#vO~P!#QO}2YO!u2[O!O'{X~O!O2]O~Ou(eO!S2fO!T2_O!U2_O!n2eO!o2dO!p2dO!r2cO'T$_O'`(aO~O!O2bO~P$/ROR2mO!P.gO!k2lO$x2kO~OR2mO!P.gO!k2lO$x2kO'X$`O~O'S(sO}&tX!O&tX~O}.sO!O'|a~O'`2vO~O]2xO~O[2zO~O!_2}O~P)uO^3PO~O^3PO~P)uO#Y3RO%j3SO~PEdO_/ZO!O3WO%x/YO~P`O!X3YO~O%}3ZOP%zqQ%zqW%zq]%zq^%zqa%zqb%zqg%zqi%zqj%zqk%zqn%zqp%zqu%zqw%zqx%zqy%zq!P%zq!Z%zq!`%zq!c%zq!d%zq!e%zq!f%zq!g%zq!j%zq#[%zq#l%zq#p%zq$w%zq$y%zq${%zq$|%zq%P%zq%R%zq%U%zq%V%zq%X%zq%f%zq%l%zq%n%zq%p%zq%r%zq%u%zq%{%zq&P%zq&R%zq&T%zq&V%zq&X%zq&x%zq'S%zq']%zq'u%zq!O%zq%s%zq_%zq%x%zq~O}!|i!O!|i~P#'yO!u3]O}!|i!O!|i~O}!Ri!O!Ri~P#'yO^$XO!u3dO&}$XO~O^$XO!X!tO!u3dO&}$XO~O^$XO!X!tO!`$UO!f3hO!u3dO&}$XO'X$`O'i&hO~O!T3iO!U3iO'T$_O'`(aO~O!S3lO!T3iO!U3iO!r3mO'T$_O'`(aO~O^$XO!X!tO!f3hO!u3dO&}$XO'i&hO~O}'kq!_'kq^'kq&}'kq~P!(tO}&mO!_'jq~O#P$piP$piY$pi^$pii$pis$pi!]$pi!^$pi!`$pi!f$pi#S$pi#T$pi#U$pi#V$pi#W$pi#X$pi#Y$pi#Z$pi#]$pi#_$pi#a$pi#b$pi&}$pi']$pi!_$piz$pi!P$pi'_$pi$x$pi!X$pi~P$&YO#P$riP$riY$ri^$rii$ris$ri!]$ri!^$ri!`$ri!f$ri#S$ri#T$ri#U$ri#V$ri#W$ri#X$ri#Y$ri#Z$ri#]$ri#_$ri#a$ri#b$ri&}$ri']$ri!_$riz$ri!P$ri'_$ri$x$ri!X$ri~P$&{O#P$_iP$_iY$_i^$_ii$_is$_i}$_i!]$_i!^$_i!`$_i!f$_i#S$_i#T$_i#U$_i#V$_i#W$_i#X$_i#Y$_i#Z$_i#]$_i#_$_i#a$_i#b$_i&}$_i']$_i!_$_iz$_i!P$_i!u$_i'_$_i$x$_i!X$_i~P!#QO}&aa'W&aa~P!#QO}&ba!_&ba~P!(tO},SO!_'hi~O#e!wi}!wi!O!wi~P#'yOP#ZOr!xOs!xOu!yO!^!vO!`!wO!f#ZO']QOY#Rii#Ri!]#Ri#T#Ri#U#Ri#V#Ri#W#Ri#X#Ri#Y#Ri#Z#Ri#]#Ri#_#Ri#a#Ri#b#Ri#e#Ri'i#Ri'p#Ri'q#Ri}#Ri!O#Ri~O#S#Ri~P$@xO#S8oO~P$@xOP#ZOr!xOs!xOu!yO!^!vO!`!wO!f#ZO#S8oO#T8pO#U8pO#V8pO']QOY#Ri!]#Ri#W#Ri#X#Ri#Y#Ri#Z#Ri#]#Ri#_#Ri#a#Ri#b#Ri#e#Ri'i#Ri'p#Ri'q#Ri}#Ri!O#Ri~Oi#Ri~P$CQOi8qO~P$CQOP#ZOi8qOr!xOs!xOu!yO!^!vO!`!wO!f#ZO#S8oO#T8pO#U8pO#V8pO#W8rO']QO#]#Ri#_#Ri#a#Ri#b#Ri#e#Ri'i#Ri'p#Ri'q#Ri}#Ri!O#Ri~OY#Ri!]#Ri#X#Ri#Y#Ri#Z#Ri~P$EYOY8|O!]8sO#X8sO#Y8sO#Z8sO~P$EYOP#ZOY8|Oi8qOr!xOs!xOu!yO!]8sO!^!vO!`!wO!f#ZO#S8oO#T8pO#U8pO#V8pO#W8rO#X8sO#Y8sO#Z8sO#]8tO']QO#_#Ri#a#Ri#b#Ri#e#Ri'i#Ri'q#Ri}#Ri!O#Ri~O'p#Ri~P$GnO'p!zO~P$GnOP#ZOY8|Oi8qOr!xOs!xOu!yO!]8sO!^!vO!`!wO!f#ZO#S8oO#T8pO#U8pO#V8pO#W8rO#X8sO#Y8sO#Z8sO#]8tO#_8vO']QO'p!zO#a#Ri#b#Ri#e#Ri'i#Ri}#Ri!O#Ri~O'q#Ri~P$IvO'q!{O~P$IvOP#ZOY8|Oi8qOr!xOs!xOu!yO!]8sO!^!vO!`!wO!f#ZO#S8oO#T8pO#U8pO#V8pO#W8rO#X8sO#Y8sO#Z8sO#]8tO#_8vO#a8xO']QO'p!zO'q!{O~O#b#Ri#e#Ri'i#Ri}#Ri!O#Ri~P$LOO^#cy}#cy&}#cyz#cy!_#cy'_#cy!P#cy$x#cy!X#cy~P!(tOP#RiY#Rii#Ris#Ri!]#Ri!^#Ri!`#Ri!f#Ri#S#Ri#T#Ri#U#Ri#V#Ri#W#Ri#X#Ri#Y#Ri#Z#Ri#]#Ri#_#Ri#a#Ri#b#Ri#e#Ri']#Ri}#Ri!O#Ri~P!#QO!^!vOP'[XY'[Xi'[Xr'[Xs'[Xu'[X!]'[X!`'[X!f'[X#S'[X#T'[X#U'[X#V'[X#W'[X#X'[X#Y'[X#Z'[X#]'[X#_'[X#a'[X#b'[X#e'[X']'[X'i'[X'p'[X'q'[X}'[X!O'[X~O#e#fi}#fi!O#fi~P#'yO!O3}O~O}&ia!O&ia~P#'yO!X!tO'i&hO}&ja!_&ja~O},sO!_'vi~O},sO!X!tO!_'vi~Oz&la}&la~P!#QO!X4UO~O},zOz'wi~P!#QO},zOz'wi~Oz4[O~O!X!tO#Y4bO~Oi4cO!X!tO'i&hO~Oz4eO~O'W$aq}$aq#e$aq!u$aq~P!#QO^$Ry}$Ry&}$Ryz$Ry!_$Ry'_$Ry!P$Ry$x$Ry!X$Ry~P!(tO}1nO!P'xa~O!P&]O$x4jO~O!P&]O$x4jO~P!#QO^!wy}!wy&}!wyz!wy!_!wy'_!wy!P!wy$x!wy!X!wy~P!(tOY4mO~O}-|O!O(Oi~O]4oO~O[4pO~O'`&|O}&qX!O&qX~O}2YO!O'{a~O!O4}O~P$/RO!S5QO!T5PO!U5PO!r/zO'T$_O'`(aO~O!o5RO!p5RO~P%*]O!T5PO!U5PO'T$_O'`(aO~O!P.gO~O!P.gO$x5TO~O!P.gO$x5TO~P!#QOR5YO!P.gO!k5XO$x5TO~OY5_O}&ta!O&ta~O}.sO!O'|i~O]5bO~O!_5cO~O!_5dO~O!_5eO~O!_5eO~P)uO^5gO~O!X5jO~O!_5lO~O}'ni!O'ni~P#'yO^$XO&}$XO~P!(tO^$XO!u5qO&}$XO~O^$XO!X!tO!u5qO&}$XO~O^$XO!X!tO!f5vO!u5qO&}$XO'i&hO~O!`$UO'X$`O~P%.`O!T5wO!U5wO'T$_O'`(aO~O}'ky!_'ky^'ky&}'ky~P!(tO#P$aqP$aqY$aq^$aqi$aqs$aq}$aq!]$aq!^$aq!`$aq!f$aq#S$aq#T$aq#U$aq#V$aq#W$aq#X$aq#Y$aq#Z$aq#]$aq#_$aq#a$aq#b$aq&}$aq']$aq!_$aqz$aq!P$aq!u$aq'_$aq$x$aq!X$aq~P!#QO}&bi!_&bi~P!(tO#e!wq}!wq!O!wq~P#'yOr-cOs-cOu-dOPoaYoaioa!]oa!^oa!`oa!foa#Soa#Toa#Uoa#Voa#Woa#Xoa#Yoa#Zoa#]oa#_oa#aoa#boa#eoa']oa'ioa'poa'qoa}oa!Ooa~Or'{Ou'|OP$UaY$Uai$Uas$Ua!]$Ua!^$Ua!`$Ua!f$Ua#S$Ua#T$Ua#U$Ua#V$Ua#W$Ua#X$Ua#Y$Ua#Z$Ua#]$Ua#_$Ua#a$Ua#b$Ua#e$Ua']$Ua'i$Ua'p$Ua'q$Ua}$Ua!O$Ua~Or'{Ou'|OP$WaY$Wai$Was$Wa!]$Wa!^$Wa!`$Wa!f$Wa#S$Wa#T$Wa#U$Wa#V$Wa#W$Wa#X$Wa#Y$Wa#Z$Wa#]$Wa#_$Wa#a$Wa#b$Wa#e$Wa']$Wa'i$Wa'p$Wa'q$Wa}$Wa!O$Wa~OP$faY$fai$fas$fa!]$fa!^$fa!`$fa!f$fa#S$fa#T$fa#U$fa#V$fa#W$fa#X$fa#Y$fa#Z$fa#]$fa#_$fa#a$fa#b$fa#e$fa']$fa}$fa!O$fa~P!#QO#e$Qq}$Qq!O$Qq~P#'yO#e$Rq}$Rq!O$Rq~P#'yO!O6RO~O'W$ty}$ty#e$ty!u$ty~P!#QO!X!tO}&ji!_&ji~O!X!tO'i&hO}&ji!_&ji~O},sO!_'vq~Oz&li}&li~P!#QO},zOz'wq~Oz6YO~P!#QOz6YO~O}'Zy'W'Zy~P!#QO}&oa!P&oa~P!#QO!P$lq^$lq&}$lq~P!#QO}-|O!O(Oq~O]6cO~O!P&]O$x6dO~O!P&]O$x6dO~P!#QO!u6eO}&qa!O&qa~O}2YO!O'{i~P#'yO!T6kO!U6kO'T$_O'`(aO~O!S6mO!T6kO!U6kO!r3mO'T$_O'`(aO~O!P.gO$x6pO~O!P.gO$x6pO~P!#QO'`6vO~O}.sO!O'|q~O!_6yO~O!_6yO~P)uO!_6{O~O!_6|O~O}!|y!O!|y~P#'yO^$XO!u7RO&}$XO~O^$XO!X!tO!u7RO&}$XO~O^$XO!X!tO!f7VO!u7RO&}$XO'i&hO~O#P$tyP$tyY$ty^$tyi$tys$ty}$ty!]$ty!^$ty!`$ty!f$ty#S$ty#T$ty#U$ty#V$ty#W$ty#X$ty#Y$ty#Z$ty#]$ty#_$ty#a$ty#b$ty&}$ty']$ty!_$tyz$ty!P$ty!u$ty'_$ty$x$ty!X$ty~P!#QO#e#cy}#cy!O#cy~P#'yOP$_iY$_ii$_is$_i!]$_i!^$_i!`$_i!f$_i#S$_i#T$_i#U$_i#V$_i#W$_i#X$_i#Y$_i#Z$_i#]$_i#_$_i#a$_i#b$_i#e$_i']$_i}$_i!O$_i~P!#QOr'{Ou'|O'q(QOP$piY$pii$pis$pi!]$pi!^$pi!`$pi!f$pi#S$pi#T$pi#U$pi#V$pi#W$pi#X$pi#Y$pi#Z$pi#]$pi#_$pi#a$pi#b$pi#e$pi']$pi'i$pi'p$pi}$pi!O$pi~Or'{Ou'|OP$riY$rii$ris$ri!]$ri!^$ri!`$ri!f$ri#S$ri#T$ri#U$ri#V$ri#W$ri#X$ri#Y$ri#Z$ri#]$ri#_$ri#a$ri#b$ri#e$ri']$ri'i$ri'p$ri'q$ri}$ri!O$ri~O#e$Ry}$Ry!O$Ry~P#'yO#e!wy}!wy!O!wy~P#'yO!X!tO}&jq!_&jq~O},sO!_'vy~Oz&lq}&lq~P!#QOz7]O~P!#QO}2YO!O'{q~O!T7hO!U7hO'T$_O'`(aO~O!P.gO$x7kO~O!P.gO$x7kO~P!#QO!_7nO~O%}7oOP%z!ZQ%z!ZW%z!Z]%z!Z^%z!Za%z!Zb%z!Zg%z!Zi%z!Zj%z!Zk%z!Zn%z!Zp%z!Zu%z!Zw%z!Zx%z!Zy%z!Z!P%z!Z!Z%z!Z!`%z!Z!c%z!Z!d%z!Z!e%z!Z!f%z!Z!g%z!Z!j%z!Z#[%z!Z#l%z!Z#p%z!Z$w%z!Z$y%z!Z${%z!Z$|%z!Z%P%z!Z%R%z!Z%U%z!Z%V%z!Z%X%z!Z%f%z!Z%l%z!Z%n%z!Z%p%z!Z%r%z!Z%u%z!Z%{%z!Z&P%z!Z&R%z!Z&T%z!Z&V%z!Z&X%z!Z&x%z!Z'S%z!Z']%z!Z'u%z!Z!O%z!Z%s%z!Z_%z!Z%x%z!Z~O^$XO!u7sO&}$XO~O^$XO!X!tO!u7sO&}$XO~OP$aqY$aqi$aqs$aq!]$aq!^$aq!`$aq!f$aq#S$aq#T$aq#U$aq#V$aq#W$aq#X$aq#Y$aq#Z$aq#]$aq#_$aq#a$aq#b$aq#e$aq']$aq}$aq!O$aq~P!#QO}&qq!O&qq~P#'yO^$XO!u8XO&}$XO~OP$tyY$tyi$tys$ty!]$ty!^$ty!`$ty!f$ty#S$ty#T$ty#U$ty#V$ty#W$ty#X$ty#Y$ty#Z$ty#]$ty#_$ty#a$ty#b$ty#e$ty']$ty}$ty!O$ty~P!#QO'_'aX~P.^O'_ZXzZX!_ZX%jZX!PZX$xZX!XZX~P$wO!XcX!_ZX!_cX'icX~P;OOP8iOQ8iO]bOa:OOb!gOgbOi8iOjbOkbOn8iOp8iOuROwbOxbOybO!PSO!Z8kO!`UO!c8iO!d8iO!e8iO!f8iO!g8iO!j!fO#l!iO#p]O'S'[O']QO'u9|O~O}8zO!O$Ta~O]#nOg#{Oi#oOj#nOk#nOn#|Op9POu#uO!P#vO!Z:RO!`#sO#O9VO#l$QO$V9RO$X9TO$[$RO'S&tO']#pO~O#['cO~P&(sO!OZX!OcX~P;OO#P8nO~O!X!tO#P8nO~O!u8}O~O!u9WO}'nX!O'nX~O!u8}O}'lX!O'lX~O#P9XO~O'W9ZO~P!#QO#P9`O~O#P9aO~O!X!tO#P9bO~O!X!tO#P9XO~O#e9cO~P#'yO#P9dO~O#P9eO~O#P9fO~O#P9gO~O#e9hO~P!#QO#e9iO~P!#QO#p~!^!n!p!}#O'u$V$X$[$m$w$x$y%P%R%U%V%X%Z~TS#p'u#Ty'P'Q#r'P'S'`~",
      goto: "#=a(SPPPPPPP(TP(eP*QPPPP-aPP-v2z4m5QP5QPPP5Q5QP5QP6nPP6sP7[PPPP;kPPPP;k>ZPPP>a@dP;kPBwPPPPDo;kPPPPPFh;kPPIgJdPPPJhPJpKqP;k;kNx!#q!(a!(a!+nPPP!+u;kPPPPPPPPPP!.iP!/zPP;k!1XP;kP;k;k;k;kP;k!3lPP!6cP!9U!9^!9b!9bP!6`P!9f!9fP!<XP!<];k;k!<c!?T5QP5QP5Q5QP!@W5Q5Q!A{5Q5Q5Q!C}5Q5Q!Dk!Fe!Fe!Fi!Fe!FqP!FeP5Q!Gm5Q!Hw5Q5Q-aPPP!JUPP!Jn!JnP!JnP!KT!JnPP!KZP!KQP!KQ!KmJl!KQ!L[!Lb!Le(T!Lh(TP!Lo!Lo!LoP(TP(TP(TP(TPP(TP!Lu!LxP!Lx(TPPP(TP(TP(TP(TP(TP(T(T!L|!MW!M^!Md!Mr!Mx!NO!NY!N`!Nj!Np# O# U# [# j#!P##c##q##w##}#$T#$Z#$e#$k#$q#${#%V#%]PPPPPPPPP#%cPP#&V#*TPP#+h#+o#+wP#0TPP#0X#2l#8f#8j#8m#8p#8{#9OP#9R#9V#9t#:i#:m#;PPP#;T#;Z#;_P#;b#;f#;i#<X#<o#<t#<w#<z#=Q#=T#=X#=]mgOSi{!k$W%_%b%c%e*f*k/T/WQ$elQ$lnQ%VwS&P!`+RQ&d!gS(d#v(iQ)_$fQ)k$nQ*V%PQ+X&WS+_&]+aQ+o&eQ-Z(kQ.r*WU/w+c+d+eS2_.g2aS3i/y/{U5P2d2e2fQ5w3lS6k5Q5RR7h6m$lZORSTUij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#_#b$W$j%W%Z%_%a%b%c%e%i%t%|&X&_&i&v&z'z(|)T*b*f*k+j+q,S,Y-d-i-q-{.j.{.|.}/P/T/W/Y/q0U0`2S2l3P3R3S3d5X5g5q7R7s8X!j'^#Y#h&Q'p*z*},_/h0s2[3]6e8i8k8n8o8p8q8r8s8t8u8v8w8x8y8z8}9W9X9Z9b9c9f9g:PQ(t#}Q)d$hQ*X%SQ*`%[Q+y9OQ-v)XQ.z*^Q1{-|Q2t.sR3v9PpdOSiw{!k$W%U%_%b%c%e*f*k/T/WR*Z%W&WVOSTijm{!Q!U!Z!h!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#Y#_#b#h$W$j%W%Z%[%_%a%b%c%e%i%t%|&X&_&i&v&z'p'z(|)T*b*f*k*z*}+j+q,S,Y,_-d-i-q-{.j.{.|.}/P/T/W/Y/h/q0U0`0s2S2[2l3P3R3S3]3d5X5g5q6e7R7s8X8i8k8n8o8p8q8r8s8t8u8v8w8x8y8z8}9W9X9Z9b9c9f9g:O:PW!aRU!^&QQ$^kQ$dlS$in$nv$spq!o!r$U$q&Y&m&p)o)p)q*d*{+[+t+v/^0WQ${uQ&a!fQ&c!gS(W#s(bS)^$e$fQ)b$hQ)n$pQ*Q$}Q*U%PS+n&d&eQ,w(XQ-z)_Q.Q)eQ.T)iQ.m*RS.q*V*WQ0S+oQ0|,sQ1z-|Q1}.PQ2Q.VQ2s.rQ4R0}R6a4m!W$bl!g$d$e$f&O&c&d&e(c)^)_+O+^+n+o-T-z/m/t/x0S1c3g3k5u7UQ)V$^Q)v$xQ)y$yQ*T%PQ.X)nQ.l*QU.p*U*V*WQ2n.mS2r.q.rQ4z2^Q5^2sS6i4{5OS7f6j6lQ8O7gR8^8PW#y`$`(q9|S$xr%UQ$ysQ$ztR)t$v$V#x`!t!v#a#s#u$O$P$T&`'v(P(R(S(Z(_(o(p)S)U)X)u)x+k,P,z,|-f-p-r.^.a.i.k0{1U1`1g1n1q1u2T2k2m4U4b4j5T5Y6d6p7k8|9Q9R9S9T9U9V9[9]9^9_9`9a9d9e9h9i9|:S:TV(u#}9O9PU&T!`$r+UQ&}!xQ)h$kQ,j'{Q.b)zQ1h-cR4v2Y&YbORSTUij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#Y#_#b#h$W$j%W%Z%[%_%a%b%c%e%i%t%|&Q&X&_&i&v&z'p'z(|)T*b*f*k*z*}+j+q,S,Y,_-d-i-q-{.j.{.|.}/P/T/W/Y/h/q0U0`0s2S2[2l3P3R3S3]3d5X5g5q6e7R7s8X8i8k8n8o8p8q8r8s8t8u8v8w8x8y8z8}9W9X9Z9b9c9f9g:P$]#^Y!]!l$[%s%w&r&y'P'Q'R'S'T'U'V'W'X'Y'Z']'`'d'n)g*v+P+Y+p,O,U,X,Z,i-g/c/f0T0_0c0d0e0f0g0h0i0j0k0l0m0n0o0r0w1l1x3_3b3q3t3u3z3{4x5m5p5{6P6Q7P7b7q8V8a8j9u&ZbORSTUij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#Y#_#b#h$W$j%W%Z%[%_%a%b%c%e%i%t%|&Q&X&_&i&v&z'p'z(|)T*b*f*k*z*}+j+q,S,Y,_-d-i-q-{.j.{.|.}/P/T/W/Y/h/q0U0`0s2S2[2l3P3R3S3]3d5X5g5q6e7R7s8X8i8k8n8o8p8q8r8s8t8u8v8w8x8y8z8}9W9X9Z9b9c9f9g:PQ&R!`R/i+RY%{!`&P&W+R+XS(c#v(iS+^&]+aS-T(d(kQ-U(eQ-[(lQ.d)|S/t+_+cS/x+d+eS/|+f2cQ1c-ZQ1e-]Q1f-^S2^.g2aS3g/w/yQ3j/zQ3k/{S4{2_2fS5O2d2eS5u3i3lQ5x3mS6j5P5QQ6l5RQ7U5wS7g6k6mR8P7hlgOSi{!k$W%_%b%c%e*f*k/T/WQ%g!OS&q!s8nQ)[$cQ*O${Q*P$|Q+l&bS+}&v9XS-h(|9bQ-x)]Q.f)}Q/[*mQ/]*nQ/e*|Q0Q+mS1m-i9fQ1v-yS1y-{9gQ3^/gQ3a/oQ3o0RQ4l1wQ5k3ZQ5n3`Q5r3fQ5y3pQ6}5lQ7Q5sQ7r7SQ8T7oR8W7t$W#]Y!]!l%s%w&r&y'P'Q'R'S'T'U'V'W'X'Y'Z']'`'d'n)g*v+P+Y+p,O,U,X,i-g/c/f0T0_0c0d0e0f0g0h0i0j0k0l0m0n0o0r0w1l1x3_3b3q3t3u3z3{4x5m5p5{6P6Q7P7b7q8V8a8j9uU(n#w&u0qT)Q$[,Z$W#[Y!]!l%s%w&r&y'P'Q'R'S'T'U'V'W'X'Y'Z']'`'d'n)g*v+P+Y+p,O,U,X,i-g/c/f0T0_0c0d0e0f0g0h0i0j0k0l0m0n0o0r0w1l1x3_3b3q3t3u3z3{4x5m5p5{6P6Q7P7b7q8V8a8j9uQ'_#]S)P$[,ZR-j)Q&YbORSTUij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#Y#_#b#h$W$j%W%Z%[%_%a%b%c%e%i%t%|&Q&X&_&i&v&z'p'z(|)T*b*f*k*z*}+j+q,S,Y,_-d-i-q-{.j.{.|.}/P/T/W/Y/h/q0U0`0s2S2[2l3P3R3S3]3d5X5g5q6e7R7s8X8i8k8n8o8p8q8r8s8t8u8v8w8x8y8z8}9W9X9Z9b9c9f9g:PQ%byQ%czQ%e|Q%f}R/S*iQ&^!fQ)R$^Q+i&aS-o)V)nS/}+g+hW1p-l-m-n.XS3n0O0PU4i1r1s1tU6_4h4r4sQ7_6`R7z7aT+`&]+aS+`&]+aT2`.g2aS&k!n/QQ,v(WQ-R(cS/s+^2^Q1R,wS1]-S-[U3h/x/|5OQ4Q0|S4`1d1fU5v3j3k6lQ6T4RQ6^4cR7V5xQ!uXS&j!n/QQ(}$VQ)Y$aQ)`$gQ+r&kQ,u(WQ-Q(cQ-V(fQ-w)ZQ.n*SS/r+^2^S1Q,v,wS1[-R-[Q1_-UQ1b-WQ2p.oW3e/s/x/|5OQ4P0|Q4T1RS4Y1]1fQ4a1eQ5[2qW5t3h3j3k6lS6S4Q4RQ6X4[Q6[4`Q6g4yQ6t5]S7T5v5xQ7X6TQ7Z6YQ7^6^Q7d6hQ7m6uQ7u7VQ7x7]Q7|7eQ8[7}Q8c8]Q8g8dQ9o9kQ9x9sR9y9t$nWORSTUij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#_#b$W$j%W%Z%[%_%a%b%c%e%i%t%|&X&_&i&v&z'z(|)T*b*f*k+j+q,S,Y-d-i-q-{.j.{.|.}/P/T/W/Y/q0U0`2S2l3P3R3S3d5X5g5q7R7s8XS!um!h!j9j#Y#h&Q'p*z*},_/h0s2[3]6e8i8k8n8o8p8q8r8s8t8u8v8w8x8y8z8}9W9X9Z9b9c9f9g:PR9o:O$nXORSTUij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#_#b$W$j%W%Z%[%_%a%b%c%e%i%t%|&X&_&i&v&z'z(|)T*b*f*k+j+q,S,Y-d-i-q-{.j.{.|.}/P/T/W/Y/q0U0`2S2l3P3R3S3d5X5g5q7R7s8XQ$Va!W$al!g$d$e$f&O&c&d&e(c)^)_+O+^+n+o-T-z/m/t/x0S1c3g3k5u7US$gm!hQ)Z$bQ*S%PW.o*T*U*V*WU2q.p.q.rQ4y2^S5]2r2sU6h4z4{5OQ6u5^U7e6i6j6lS7}7f7gS8]8O8PQ8d8^!j9k#Y#h&Q'p*z*},_/h0s2[3]6e8i8k8n8o8p8q8r8s8t8u8v8w8x8y8z8}9W9X9Z9b9c9f9g:PQ9s9}R9t:O$f[OSTij{!Q!U!Z!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#_#b$W$j%W%Z%_%a%b%c%e%i%t%|&X&_&i&v&z'z(|)T*b*f*k+j+q,S,Y-d-i-q-{.j.{.|.}/P/T/W/Y/q0U0`2S2l3P3R3S3d5X5g5q7R7s8XU!eRU!^v$spq!o!r$U$q&Y&m&p)o)p)q*d*{+[+t+v/^0WQ*a%[!h9l#Y#h'p*z*},_/h0s2[3]6e8i8k8n8o8p8q8r8s8t8u8v8w8x8y8z8}9W9X9Z9b9c9f9g:PR9n&QS&U!`$rR/k+U$lZORSTUij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#_#b$W$j%W%Z%_%a%b%c%e%i%t%|&X&_&i&v&z'z(|)T*b*f*k+j+q,S,Y-d-i-q-{.j.{.|.}/P/T/W/Y/q0U0`2S2l3P3R3S3d5X5g5q7R7s8X!j'^#Y#h&Q'p*z*},_/h0s2[3]6e8i8k8n8o8p8q8r8s8t8u8v8w8x8y8z8}9W9X9Z9b9c9f9g:PR*`%[!h#SY!]$[%s%w&r&y'W'X'Y'Z'`'d)g*v+Y+p,O,U,i-g0T0_0o1l1x3b3q3t5p7P7q8V8a8j!R8u']'n+P,Z/c/f0c0k0l0m0n0r0w3_3u3z3{4x5m5{6P6Q7b9u!d#UY!]$[%s%w&r&y'Y'Z'`'d)g*v+Y+p,O,U,i-g0T0_0o1l1x3b3q3t5p7P7q8V8a8j}8w']'n+P,Z/c/f0c0m0n0r0w3_3u3z3{4x5m5{6P6Q7b9u!`#YY!]$[%s%w&r&y'`'d)g*v+Y+p,O,U,i-g0T0_0o1l1x3b3q3t5p7P7q8V8a8jl(S#q&w({,q,y-_-`0]1k4O4d9p9z9{x:P']'n+P,Z/c/f0c0r0w3_3u3z3{4x5m5{6P6Q7b9u!`:S&s'b(V(]+h+|,f,}-k-n.]._0P0[1S1W1t2V2X2i3s4V4]4f4k4s5W5z6V6]6rZ:T0p3y5|7W7v&YbORSTUij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#Y#_#b#h$W$j%W%Z%[%_%a%b%c%e%i%t%|&Q&X&_&i&v&z'p'z(|)T*b*f*k*z*}+j+q,S,Y,_-d-i-q-{.j.{.|.}/P/T/W/Y/h/q0U0`0s2S2[2l3P3R3S3]3d5X5g5q6e7R7s8X8i8k8n8o8p8q8r8s8t8u8v8w8x8y8z8}9W9X9Z9b9c9f9g:PS#i_#jR0t,^&a^ORSTU_ij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#Y#_#b#h#j$W$j%W%Z%[%_%a%b%c%e%i%t%|&Q&X&_&i&v&z'p'z(|)T*b*f*k*z*}+j+q,S,Y,^,_-d-i-q-{.j.{.|.}/P/T/W/Y/h/q0U0`0s2S2[2l3P3R3S3]3d5X5g5q6e7R7s8X8i8k8n8o8p8q8r8s8t8u8v8w8x8y8z8}9W9X9Z9b9c9f9g:PS#d]#kT'g#f'kT#e]#kT'i#f'k&a_ORSTU_ij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#Y#_#b#h#j$W$j%W%Z%[%_%a%b%c%e%i%t%|&Q&X&_&i&v&z'p'z(|)T*b*f*k*z*}+j+q,S,Y,^,_-d-i-q-{.j.{.|.}/P/T/W/Y/h/q0U0`0s2S2[2l3P3R3S3]3d5X5g5q6e7R7s8X8i8k8n8o8p8q8r8s8t8u8v8w8x8y8z8}9W9X9Z9b9c9f9g:PT#i_#jQ#l_R'r#j$naORSTUij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#_#b$W$j%W%Z%[%_%a%b%c%e%i%t%|&X&_&i&v&z'z(|)T*b*f*k+j+q,S,Y-d-i-q-{.j.{.|.}/P/T/W/Y/q0U0`2S2l3P3R3S3d5X5g5q7R7s8X!k9}#Y#h&Q'p*z*},_/h0s2[3]6e8i8k8n8o8p8q8r8s8t8u8v8w8x8y8z8}9W9X9Z9b9c9f9g:P#RcOSUi{!Q!U!k!y#h$W%W%Z%[%_%a%b%c%e%i%|&_'p)T*b*f*k+j,_-d-q.j.{.|.}/P/T/W/Y0s2S2l3P3R3S5X5gt#w`!v$O$P$T(P(R(S(Z(o(p,P-f0{1g9|:S:T!|&u!t#a#s#u&`'v(_)S)U)X)u)x+k,z,|-p-r.^.a.i.k1U1`1n1q1u2T2k2m4U4b4j5T5Y6d6p7k9Q9S9U9[9^9`9d9hQ(y$Rc0q8|9R9T9V9]9_9a9e9it#t`!v$O$P$T(P(R(S(Z(o(p,P-f0{1g9|:S:TS(f#v(iQ(z$SQ-W(g!|9q!t#a#s#u&`'v(_)S)U)X)u)x+k,z,|-p-r.^.a.i.k1U1`1n1q1u2T2k2m4U4b4j5T5Y6d6p7k9Q9S9U9[9^9`9d9hb9r8|9R9T9V9]9_9a9e9iQ9v:QR9w:RleOSi{!k$W%_%b%c%e*f*k/T/WQ(^#uQ*r%lQ*s%nR1T,z$U#x`!t!v#a#s#u$O$P$T&`'v(P(R(S(Z(_(o(p)S)U)X)u)x+k,P,z,|-f-p-r.^.a.i.k0{1U1`1g1n1q1u2T2k2m4U4b4j5T5Y6d6p7k8|9Q9R9S9T9U9V9[9]9^9_9`9a9d9e9h9i9|:S:TQ)w$yQ.`)yQ2W._R4u2XT(h#v(iS(h#v(iT2`.g2aQ)Y$aQ-V(fQ-w)ZQ.n*SQ2p.oQ5[2qQ6g4yQ6t5]Q7d6hQ7m6uQ7|7eQ8[7}Q8c8]R8g8dl(P#q&w({,q,y-_-`0]1k4O4d9p9z9{!`9[&s'b(V(]+h+|,f,}-k-n.]._0P0[1S1W1t2V2X2i3s4V4]4f4k4s5W5z6V6]6rZ9]0p3y5|7W7vn(R#q&w({,o,q,y-_-`0]1k4O4d9p9z9{!b9^&s'b(V(]+h+|,f,}-k-n.]._0P0Y0[1S1W1t2V2X2i3s4V4]4f4k4s5W5z6V6]6r]9_0p3y5|5}7W7vpdOSiw{!k$W%U%_%b%c%e*f*k/T/WQ%RvR*b%[pdOSiw{!k$W%U%_%b%c%e*f*k/T/WR%RvQ){$zR.[)tqdOSiw{!k$W%U%_%b%c%e*f*k/T/WQ.h*QS2j.l.mW5S2g2h2i2nU6o5U5V5WU7i6n6q6rQ8Q7jR8_8RQ%YwR*[%UR2w.uR6w5_S$in$nR.Q)eQ%_xR*f%`R*l%fT/U*k/WQiOQ!kST$Zi!kQ'x#pR,g'xQ!WQR%q!WQ![RU%u![%v*wQ%v!]R*w%wQ+S&RR/j+SQ,Q&wR0^,QQ,T&yS0a,T0bR0b,UQ+a&]R/u+aQ&Z!cQ*x%xT+]&Z*xQ+V&UR/l+VQ&n!pQ+s&lU+w&n+s0XR0X+xQ'k#fR,`'kQ#j_R'q#jQ#`YU'a#`*u8{Q*u8jR8{'nQ,t(WW1O,t1P4S6UU1P,u,v,wS4S1Q1RR6U4T#q'}#q&s&w'b(V(](v(w({+h+z+{+|,f,o,p,q,y,}-_-`-k-n.]._0P0Y0Z0[0]0p1S1W1k1t2V2X2i3s3w3x3y4O4V4]4d4f4k4s5W5z5|5}6O6V6]6r7W7v9p9z9{Q,{(]U1V,{1X4WQ1X,}R4W1WQ(i#vR-X(iQ(r#zR-b(rQ1o-kR4g1oQ)r$tR.Z)rQ2Z.bS4w2Z6fR6f4xQ)}${R.e)}Q2a.gR4|2aQ.t*XS2u.t5`R5`2wQ-})bS1|-}4nR4n1}Q)f$iR.R)fQ/W*kR3V/WWhOSi!kQ%d{Q)O$WQ*e%_Q*g%bQ*h%cQ*j%eQ/R*fS/U*k/WR3U/TQ$YfQ%h!PQ%k!RQ%m!SQ%o!TQ)m$oQ)s$uQ*Z%YQ*p%jS.w*[*_Q/_*oQ/`*rQ/a*sS/p+^2^Q1Y-PQ1Z-QQ1a-VQ2P.UQ2U.]Q2o.nQ2y.yQ3T/SY3c/r/s/x/|5OQ4X1[Q4Z1^Q4^1bQ4q2RQ4t2VQ5Z2pQ5a2x[5o3b3e3h3j3k6lQ6W4YQ6Z4_Q6b4oQ6s5[Q6x5bW7O5p5t5v5xQ7Y6XQ7[6[Q7`6cQ7c6gQ7l6tU7p7P7T7VQ7w7ZQ7y7^Q7{7dQ8S7mS8U7q7uQ8Y7xQ8Z7|Q8`8VQ8b8[Q8e8aQ8f8cR8h8gQ$clQ&b!gU)]$d$e$fQ*|&OU+m&c&d&eQ-P(cS-y)^)_Q/g+OQ/o+^S0R+n+oQ1^-TQ1w-zQ3`/mS3f/t/xQ3p0SQ4_1cS5s3g3kQ7S5uR7t7US#r`9|R)W$`U#z`$`9|R-a(qQ#q`S&s!t)XQ&w!vQ'b#aQ(V#sQ(]#uQ(v$OQ(w$PQ({$TQ+h&`Q+z9QQ+{9SQ+|9UQ,f'vQ,o(PQ,p(RQ,q(SQ,y(ZQ,}(_Q-_(oQ-`(pd-k)S-p.i1q2k4j5T6d6p7kQ-n)UQ.])uQ._)xQ0P+kQ0Y9[Q0Z9^Q0[9`Q0],PQ0p8|Q1S,zQ1W,|Q1k-fQ1t-rQ2V.^Q2X.aQ2i.kQ3s9dQ3w9RQ3x9TQ3y9VQ4O0{Q4V1UQ4]1`Q4d1gQ4f1nQ4k1uQ4s2TQ5W2mQ5z9hQ5|9aQ5}9]Q6O9_Q6V4UQ6]4bQ6r5YQ7W9eQ7v9iQ9p9|Q9z:SR9{:TT'w#p'xlfOSi{!k$W%_%b%c%e*f*k/T/WS!mU%aQ%j!QQ%p!UQ'O!yQ'o#hS*_%W%ZQ*c%[Q*o%iQ*y%|Q+g&_Q,d'pQ-m)TQ/O*bQ0O+jQ0v,_Q1i-dQ1s-qQ2h.jQ2{.{Q2|.|Q3O.}Q3Q/PQ3X/YQ3|0sQ4r2SQ5V2lQ5f3PQ5h3RQ5i3SQ6q5XR6z5g!vYOSUi{!Q!k!y$W%W%Z%[%_%a%b%c%e%i%|&_)T*b*f*k+j-d-q.j.{.|.}/P/T/W/Y2S2l3P3R3S5X5gQ!]RQ!lTQ$[jQ%s!ZQ%w!^Q&r!sQ&y!wQ'P!|Q'Q!}Q'R#OQ'S#PQ'T#QQ'U#RQ'V#SQ'W#TQ'X#UQ'Y#VQ'Z#WQ']#YQ'`#_Q'd#bW'n#h'p,_0sQ)g$jQ*v%tS+P&Q/hQ+Y&XQ+p&iQ,O&vQ,U&zQ,X8iQ,Z8kQ,i'zQ-g(|Q/c*zQ/f*}Q0T+qQ0_,SQ0c8nQ0d8oQ0e8pQ0f8qQ0g8rQ0h8sQ0i8tQ0j8uQ0k8vQ0l8wQ0m8xQ0n8yQ0o,YQ0r8}Q0w8zQ1l-iQ1x-{Q3_9WQ3b/qQ3q0UQ3t0`Q3u9XQ3z9ZQ3{9bQ4x2[Q5m3]Q5p3dQ5{9cQ6P9fQ6Q9gQ7P5qQ7b6eQ7q7RQ8V7sQ8a8XQ8j!UR9u:PT!VQ!WR!_RR&S!`S&O!`+RS+O&P&WR/m+XR&x!vR&{!wT!qU$US!pU$UU$tpq*dS&l!o!rQ+u&mQ+x&pQ.Y)qS0V+t+vR3r0W[!bR!^$q&Y)o+[h!nUpq!o!r$U&m&p)q+t+v0WQ/Q*dQ/d*{Q3[/^T9m&Q)pT!dR$qS!cR$qS%x!^)oS+Q&Q)pQ+Z&YR/n+[T&V!`$rQ#f]R't#kT'j#f'kR0u,^T(Y#s(bR(`#uQ-l)SQ1r-pQ2g.iQ4h1qQ5U2kQ6`4jQ6n5TQ7a6dQ7j6pR8R7klgOSi{!k$W%_%b%c%e*f*k/T/WQ%XwR*Z%UV$upq*dR.c)zR*Y%SQ$mnR)l$nR)c$hT%]x%`T%^x%`T/V*k/W",
      nodeNames: "⚠ ArithOp ArithOp extends LineComment BlockComment Script ExportDeclaration export Star as VariableName from String ; default FunctionDeclaration async function VariableDefinition TypeParamList TypeDefinition ThisType this LiteralType ArithOp Number BooleanLiteral TemplateType VoidType void TypeofType typeof MemberExpression . ?. PropertyName [ TemplateString null super RegExp ] ArrayExpression Spread , } { ObjectExpression Property async get set PropertyNameDefinition Block : NewExpression new TypeArgList CompareOp < ) ( ArgList UnaryExpression await yield delete LogicOp BitOp ParenthesizedExpression ClassExpression class extends ClassBody MethodDeclaration Privacy static abstract PropertyDeclaration readonly Optional TypeAnnotation Equals FunctionExpression ArrowFunction ParamList ParamList ArrayPattern ObjectPattern PatternProperty Privacy readonly Arrow MemberExpression BinaryExpression ArithOp ArithOp ArithOp ArithOp BitOp CompareOp in instanceof const CompareOp BitOp BitOp BitOp LogicOp LogicOp ConditionalExpression LogicOp LogicOp AssignmentExpression UpdateOp PostfixExpression CallExpression TaggedTemplatExpression DynamicImport import ImportMeta JSXElement JSXSelfCloseEndTag JSXStartTag JSXSelfClosingTag JSXIdentifier JSXNamespacedName JSXMemberExpression JSXSpreadAttribute JSXAttribute JSXAttributeValue JSXEscape JSXEndTag JSXOpenTag JSXFragmentTag JSXText JSXEscape JSXStartCloseTag JSXCloseTag PrefixCast ArrowFunction TypeParamList SequenceExpression KeyofType keyof UniqueType unique ImportType InferredType infer TypeName ParenthesizedType FunctionSignature ParamList NewSignature IndexedType TupleType Label ArrayType ReadonlyType ObjectType MethodType PropertyType IndexSignature CallSignature TypePredicate is NewSignature new UnionType LogicOp IntersectionType LogicOp ConditionalType ParameterizedType ClassDeclaration abstract implements type VariableDeclaration let var TypeAliasDeclaration InterfaceDeclaration interface EnumDeclaration enum EnumBody NamespaceDeclaration namespace module AmbientDeclaration declare GlobalDeclaration global ClassDeclaration ClassBody MethodDeclaration AmbientFunctionDeclaration ExportGroup VariableName VariableName ImportDeclaration ImportGroup ForStatement for ForSpec ForInSpec ForOfSpec of WhileStatement while WithStatement with DoStatement do IfStatement if else SwitchStatement switch SwitchBody CaseLabel case DefaultLabel TryStatement try catch finally ReturnStatement return ThrowStatement throw BreakStatement break ContinueStatement continue DebuggerStatement debugger LabeledStatement ExpressionStatement",
      maxTerm: 325,
      context: trackNewline,
      nodeProps: [
        [NodeProp.group, -26,7,14,16,54,176,180,183,184,186,189,192,203,205,211,213,215,217,220,226,230,232,234,236,238,240,241,"Statement",-30,11,13,23,26,27,38,39,40,41,43,48,56,64,70,71,84,85,94,95,111,114,116,117,118,119,121,122,140,141,143,"Expression",-22,22,24,28,29,31,144,146,148,149,151,152,153,155,156,157,159,160,161,170,172,174,175,"Type",-2,75,79,"ClassItem"],
        [NodeProp.closedBy, 37,"]",47,"}",62,")",124,"JSXSelfCloseEndTag JSXEndTag",138,"JSXEndTag"],
        [NodeProp.openedBy, 42,"[",46,"{",61,"(",123,"JSXStartTag",133,"JSXStartTag JSXStartCloseTag"]
      ],
      skippedNodes: [0,4,5],
      repeatNodeCount: 28,
      tokenData: "!As~R!`OX%TXY%cYZ'RZ[%c[]%T]^'R^p%Tpq%cqr'crs(kst%Ttu0huv2xvw3mwx4kxy;Ryz;cz{;s{|<s|}=W}!O<s!O!P=h!P!QAt!Q!R!.d!R![!/y![!]!5i!]!^!5{!^!_!6]!_!`!7Y!`!a!8Q!a!b!9w!b!c%T!c!}0h!}#O!;Y#O#P%T#P#Q!;j#Q#R!;z#R#S0h#S#T!<_#T#o0h#o#p!<o#p#q!<t#q#r!=[#r#s!=n#s$f%T$f$g%c$g#BY0h#BY#BZ!>O#BZ$IS0h$IS$I_!>O$I_$I|0h$I|$I}!@g$I}$JO!@g$JO$JT0h$JT$JU!>O$JU$KV0h$KV$KW!>O$KW&FU0h&FU&FV!>O&FV?HT0h?HT?HU!>O?HU~0hW%YR#|WO!^%T!_#o%T#p~%T,T%jg#|W'P+{OX%TXY%cYZ%TZ[%c[p%Tpq%cq!^%T!_#o%T#p$f%T$f$g%c$g#BY%T#BY#BZ%c#BZ$IS%T$IS$I_%c$I_$JT%T$JT$JU%c$JU$KV%T$KV$KW%c$KW&FU%T&FU&FV%c&FV?HT%T?HT?HU%c?HU~%T,T'YR#|W'Q+{O!^%T!_#o%T#p~%T$T'jS#|W!f#{O!^%T!_!`'v!`#o%T#p~%T$O'}S#]#v#|WO!^%T!_!`(Z!`#o%T#p~%T$O(bR#]#v#|WO!^%T!_#o%T#p~%T'u(rZ#|W]!ROY(kYZ)eZr(krs*rs!^(k!^!_+U!_#O(k#O#P-b#P#o(k#o#p+U#p~(k&r)jV#|WOr)ers*Ps!^)e!^!_*a!_#o)e#o#p*a#p~)e&r*WR#w&j#|WO!^%T!_#o%T#p~%T&j*dROr*ars*ms~*a&j*rO#w&j'u*{R#w&j#|W]!RO!^%T!_#o%T#p~%T'm+ZV]!ROY+UYZ*aZr+Urs+ps#O+U#O#P+w#P~+U'm+wO#w&j]!R'm+zROr+Urs,Ts~+U'm,[U#w&j]!ROY,nZr,nrs-Vs#O,n#O#P-[#P~,n!R,sU]!ROY,nZr,nrs-Vs#O,n#O#P-[#P~,n!R-[O]!R!R-_PO~,n'u-gV#|WOr(krs-|s!^(k!^!_+U!_#o(k#o#p+U#p~(k'u.VZ#w&j#|W]!ROY.xYZ%TZr.xrs/rs!^.x!^!_,n!_#O.x#O#P0S#P#o.x#o#p,n#p~.x!Z/PZ#|W]!ROY.xYZ%TZr.xrs/rs!^.x!^!_,n!_#O.x#O#P0S#P#o.x#o#p,n#p~.x!Z/yR#|W]!RO!^%T!_#o%T#p~%T!Z0XT#|WO!^.x!^!_,n!_#o.x#o#p,n#p~.x&i0s_#|W#rS'S%k'`pOt%Ttu0hu}%T}!O1r!O!Q%T!Q![0h![!^%T!_!c%T!c!}0h!}#R%T#R#S0h#S#T%T#T#o0h#p$g%T$g~0h[1y_#|W#rSOt%Ttu1ru}%T}!O1r!O!Q%T!Q![1r![!^%T!_!c%T!c!}1r!}#R%T#R#S1r#S#T%T#T#o1r#p$g%T$g~1r$O3PS#U#v#|WO!^%T!_!`3]!`#o%T#p~%T$O3dR#|W#g#vO!^%T!_#o%T#p~%T%r3tU'q%j#|WOv%Tvw4Ww!^%T!_!`3]!`#o%T#p~%T$O4_S#|W#a#vO!^%T!_!`3]!`#o%T#p~%T'u4rZ#|W]!ROY4kYZ5eZw4kwx*rx!^4k!^!_6]!_#O4k#O#P8]#P#o4k#o#p6]#p~4k&r5jV#|WOw5ewx*Px!^5e!^!_6P!_#o5e#o#p6P#p~5e&j6SROw6Pwx*mx~6P'm6bV]!ROY6]YZ6PZw6]wx+px#O6]#O#P6w#P~6]'m6zROw6]wx7Tx~6]'m7[U#w&j]!ROY7nZw7nwx-Vx#O7n#O#P8V#P~7n!R7sU]!ROY7nZw7nwx-Vx#O7n#O#P8V#P~7n!R8YPO~7n'u8bV#|WOw4kwx8wx!^4k!^!_6]!_#o4k#o#p6]#p~4k'u9QZ#w&j#|W]!ROY9sYZ%TZw9swx/rx!^9s!^!_7n!_#O9s#O#P:m#P#o9s#o#p7n#p~9s!Z9zZ#|W]!ROY9sYZ%TZw9swx/rx!^9s!^!_7n!_#O9s#O#P:m#P#o9s#o#p7n#p~9s!Z:rT#|WO!^9s!^!_7n!_#o9s#o#p7n#p~9s%V;YR!`$}#|WO!^%T!_#o%T#p~%TZ;jR!_R#|WO!^%T!_#o%T#p~%T%R;|U'T!R#V#v#|WOz%Tz{<`{!^%T!_!`3]!`#o%T#p~%T$O<gS#S#v#|WO!^%T!_!`3]!`#o%T#p~%T$u<zSi$m#|WO!^%T!_!`3]!`#o%T#p~%T&i=_R}&a#|WO!^%T!_#o%T#p~%T&i=oVr%n#|WO!O%T!O!P>U!P!Q%T!Q![>z![!^%T!_#o%T#p~%Ty>ZT#|WO!O%T!O!P>j!P!^%T!_#o%T#p~%Ty>qR|q#|WO!^%T!_#o%T#p~%Ty?RZ#|WjqO!Q%T!Q![>z![!^%T!_!g%T!g!h?t!h#R%T#R#S>z#S#X%T#X#Y?t#Y#o%T#p~%Ty?yZ#|WO{%T{|@l|}%T}!O@l!O!Q%T!Q![AW![!^%T!_#R%T#R#SAW#S#o%T#p~%Ty@qV#|WO!Q%T!Q![AW![!^%T!_#R%T#R#SAW#S#o%T#p~%TyA_V#|WjqO!Q%T!Q![AW![!^%T!_#R%T#R#SAW#S#o%T#p~%T,TA{`#|W#T#vOYB}YZ%TZzB}z{Ht{!PB}!P!Q!+m!Q!^B}!^!_EQ!_!`!,f!`!a!-e!a!}B}!}#OFy#O#PHY#P#oB}#o#pEQ#p~B}XCU[#|WyPOYB}YZ%TZ!PB}!P!QCz!Q!^B}!^!_EQ!_!}B}!}#OFy#O#PHY#P#oB}#o#pEQ#p~B}XDR_#|WyPO!^%T!_#Z%T#Z#[Cz#[#]%T#]#^Cz#^#a%T#a#bCz#b#g%T#g#hCz#h#i%T#i#jCz#j#m%T#m#nCz#n#o%T#p~%TPEVVyPOYEQZ!PEQ!P!QEl!Q!}EQ!}#OFT#O#PFp#P~EQPEqUyP#Z#[El#]#^El#a#bEl#g#hEl#i#jEl#m#nElPFWTOYFTZ#OFT#O#PFg#P#QEQ#Q~FTPFjQOYFTZ~FTPFsQOYEQZ~EQXGOY#|WOYFyYZ%TZ!^Fy!^!_FT!_#OFy#O#PGn#P#QB}#Q#oFy#o#pFT#p~FyXGsV#|WOYFyYZ%TZ!^Fy!^!_FT!_#oFy#o#pFT#p~FyXH_V#|WOYB}YZ%TZ!^B}!^!_EQ!_#oB}#o#pEQ#p~B},TH{^#|WyPOYHtYZIwZzHtz{LY{!PHt!P!Q!*Z!Q!^Ht!^!_Ne!_!}Ht!}#O!&U#O#P!)i#P#oHt#o#pNe#p~Ht,TI|V#|WOzIwz{Jc{!^Iw!^!_Ke!_#oIw#o#pKe#p~Iw,TJhX#|WOzIwz{Jc{!PIw!P!QKT!Q!^Iw!^!_Ke!_#oIw#o#pKe#p~Iw,TK[R#|WT+{O!^%T!_#o%T#p~%T+{KhROzKez{Kq{~Ke+{KtTOzKez{Kq{!PKe!P!QLT!Q~Ke+{LYOT+{,TLa^#|WyPOYHtYZIwZzHtz{LY{!PHt!P!QM]!Q!^Ht!^!_Ne!_!}Ht!}#O!&U#O#P!)i#P#oHt#o#pNe#p~Ht,TMf_#|WT+{yPO!^%T!_#Z%T#Z#[Cz#[#]%T#]#^Cz#^#a%T#a#bCz#b#g%T#g#hCz#h#i%T#i#jCz#j#m%T#m#nCz#n#o%T#p~%T+{NjYyPOYNeYZKeZzNez{! Y{!PNe!P!Q!%Q!Q!}Ne!}#O!!h#O#P!$n#P~Ne+{! _YyPOYNeYZKeZzNez{! Y{!PNe!P!Q! }!Q!}Ne!}#O!!h#O#P!$n#P~Ne+{!!UUT+{yP#Z#[El#]#^El#a#bEl#g#hEl#i#jEl#m#nEl+{!!kWOY!!hYZKeZz!!hz{!#T{#O!!h#O#P!$[#P#QNe#Q~!!h+{!#WYOY!!hYZKeZz!!hz{!#T{!P!!h!P!Q!#v!Q#O!!h#O#P!$[#P#QNe#Q~!!h+{!#{TT+{OYFTZ#OFT#O#PFg#P#QEQ#Q~FT+{!$_TOY!!hYZKeZz!!hz{!#T{~!!h+{!$qTOYNeYZKeZzNez{! Y{~Ne+{!%V_yPOzKez{Kq{#ZKe#Z#[!%Q#[#]Ke#]#^!%Q#^#aKe#a#b!%Q#b#gKe#g#h!%Q#h#iKe#i#j!%Q#j#mKe#m#n!%Q#n~Ke,T!&Z[#|WOY!&UYZIwZz!&Uz{!'P{!^!&U!^!_!!h!_#O!&U#O#P!(w#P#QHt#Q#o!&U#o#p!!h#p~!&U,T!'U^#|WOY!&UYZIwZz!&Uz{!'P{!P!&U!P!Q!(Q!Q!^!&U!^!_!!h!_#O!&U#O#P!(w#P#QHt#Q#o!&U#o#p!!h#p~!&U,T!(XY#|WT+{OYFyYZ%TZ!^Fy!^!_FT!_#OFy#O#PGn#P#QB}#Q#oFy#o#pFT#p~Fy,T!(|X#|WOY!&UYZIwZz!&Uz{!'P{!^!&U!^!_!!h!_#o!&U#o#p!!h#p~!&U,T!)nX#|WOYHtYZIwZzHtz{LY{!^Ht!^!_Ne!_#oHt#o#pNe#p~Ht,T!*bc#|WyPOzIwz{Jc{!^Iw!^!_Ke!_#ZIw#Z#[!*Z#[#]Iw#]#^!*Z#^#aIw#a#b!*Z#b#gIw#g#h!*Z#h#iIw#i#j!*Z#j#mIw#m#n!*Z#n#oIw#o#pKe#p~Iw,T!+tV#|WS+{OY!+mYZ%TZ!^!+m!^!_!,Z!_#o!+m#o#p!,Z#p~!+m+{!,`QS+{OY!,ZZ~!,Z$P!,o[#|W#g#vyPOYB}YZ%TZ!PB}!P!QCz!Q!^B}!^!_EQ!_!}B}!}#OFy#O#PHY#P#oB}#o#pEQ#p~B}]!-n[#oS#|WyPOYB}YZ%TZ!PB}!P!QCz!Q!^B}!^!_EQ!_!}B}!}#OFy#O#PHY#P#oB}#o#pEQ#p~B}y!.kd#|WjqO!O%T!O!P>z!P!Q%T!Q![!/y![!^%T!_!g%T!g!h?t!h#R%T#R#S!/y#S#U%T#U#V!1a#V#X%T#X#Y?t#Y#b%T#b#c!1P#c#d!2o#d#l%T#l#m!3w#m#o%T#p~%Ty!0Q_#|WjqO!O%T!O!P>z!P!Q%T!Q![!/y![!^%T!_!g%T!g!h?t!h#R%T#R#S!/y#S#X%T#X#Y?t#Y#b%T#b#c!1P#c#o%T#p~%Ty!1WR#|WjqO!^%T!_#o%T#p~%Ty!1fW#|WO!Q%T!Q!R!2O!R!S!2O!S!^%T!_#R%T#R#S!2O#S#o%T#p~%Ty!2VW#|WjqO!Q%T!Q!R!2O!R!S!2O!S!^%T!_#R%T#R#S!2O#S#o%T#p~%Ty!2tV#|WO!Q%T!Q!Y!3Z!Y!^%T!_#R%T#R#S!3Z#S#o%T#p~%Ty!3bV#|WjqO!Q%T!Q!Y!3Z!Y!^%T!_#R%T#R#S!3Z#S#o%T#p~%Ty!3|Z#|WO!Q%T!Q![!4o![!^%T!_!c%T!c!i!4o!i#R%T#R#S!4o#S#T%T#T#Z!4o#Z#o%T#p~%Ty!4vZ#|WjqO!Q%T!Q![!4o![!^%T!_!c%T!c!i!4o!i#R%T#R#S!4o#S#T%T#T#Z!4o#Z#o%T#p~%T%w!5rR!XV#|W#e%hO!^%T!_#o%T#p~%T!P!6SR^w#|WO!^%T!_#o%T#p~%T+c!6hR'Xd!]%Y#p&s'uP!P!Q!6q!^!_!6v!_!`!7TW!6vO$OW#v!6{P#W#v!_!`!7O#v!7TO#g#v#v!7YO#X#v%w!7aT!u%o#|WO!^%T!_!`'v!`!a!7p!a#o%T#p~%T$P!7wR#P#w#|WO!^%T!_#o%T#p~%T%w!8]T'W!s#X#v#yS#|WO!^%T!_!`!8l!`!a!8|!a#o%T#p~%T$O!8sR#X#v#|WO!^%T!_#o%T#p~%T$O!9TT#W#v#|WO!^%T!_!`3]!`!a!9d!a#o%T#p~%T$O!9kS#W#v#|WO!^%T!_!`3]!`#o%T#p~%T%w!:OV'i%o#|WO!O%T!O!P!:e!P!^%T!_!a%T!a!b!:u!b#o%T#p~%T$`!:lRs$W#|WO!^%T!_#o%T#p~%T$O!:|S#|W#b#vO!^%T!_!`3]!`#o%T#p~%T&e!;aRu&]#|WO!^%T!_#o%T#p~%TZ!;qRzR#|WO!^%T!_#o%T#p~%T$O!<RS#_#v#|WO!^%T!_!`3]!`#o%T#p~%T$P!<fR#|W']#wO!^%T!_#o%T#p~%T~!<tO!P~%r!<{T'p%j#|WO!^%T!_!`3]!`#o%T#p#q!:u#q~%T$u!=eR!O$k#|W'_QO!^%T!_#o%T#p~%TX!=uR!gP#|WO!^%T!_#o%T#p~%T,T!>]r#|W'P+{#rS'S%k'`pOX%TXY%cYZ%TZ[%c[p%Tpq%cqt%Ttu0hu}%T}!O1r!O!Q%T!Q![0h![!^%T!_!c%T!c!}0h!}#R%T#R#S0h#S#T%T#T#o0h#p$f%T$f$g%c$g#BY0h#BY#BZ!>O#BZ$IS0h$IS$I_!>O$I_$JT0h$JT$JU!>O$JU$KV0h$KV$KW!>O$KW&FU0h&FU&FV!>O&FV?HT0h?HT?HU!>O?HU~0h,T!@t_#|W'Q+{#rS'S%k'`pOt%Ttu0hu}%T}!O1r!O!Q%T!Q![0h![!^%T!_!c%T!c!}0h!}#R%T#R#S0h#S#T%T#T#o0h#p$g%T$g~0h",
      tokenizers: [noSemicolon, incdecToken, template, 0, 1, 2, 3, 4, 5, 6, 7, 8, insertSemicolon],
      topRules: {"Script":[0,6]},
      dialects: {jsx: 11129, ts: 11131},
      dynamicPrecedences: {"141":1,"168":1},
      specialized: [{term: 280, get: (value, stack) => (tsExtends(value, stack) << 1) | 1},{term: 280, get: value => spec_identifier$4[value] || -1},{term: 292, get: value => spec_word[value] || -1},{term: 59, get: value => spec_LessThan[value] || -1}],
      tokenPrec: 11151
    });

    function toSet(chars) {
        let flat = Object.keys(chars).join("");
        let words = /\w/.test(flat);
        if (words)
            flat = flat.replace(/\w/g, "");
        return `[${words ? "\\w" : ""}${flat.replace(/[^\w\s]/g, "\\$&")}]`;
    }
    function prefixMatch(options) {
        let first = Object.create(null), rest = Object.create(null);
        for (let { label } of options) {
            first[label[0]] = true;
            for (let i = 1; i < label.length; i++)
                rest[label[i]] = true;
        }
        let source = toSet(first) + toSet(rest) + "*$";
        return [new RegExp("^" + source), new RegExp(source)];
    }
    /**
    Given a a fixed array of options, return an autocompleter that
    completes them.
    */
    function completeFromList(list) {
        let options = list.map(o => typeof o == "string" ? { label: o } : o);
        let [span, match] = options.every(o => /^\w+$/.test(o.label)) ? [/\w*$/, /\w+$/] : prefixMatch(options);
        return (context) => {
            let token = context.matchBefore(match);
            return token || context.explicit ? { from: token ? token.from : context.pos, options, span } : null;
        };
    }
    /**
    Wrap the given completion source so that it will not fire when the
    cursor is in a syntax node with one of the given names.
    */
    function ifNotIn(nodes, source) {
        return (context) => {
            for (let pos = syntaxTree(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent)
                if (nodes.indexOf(pos.name) > -1)
                    return null;
            return source(context);
        };
    }

    const MaxInfoWidth = 300;
    const baseTheme$2 = /*@__PURE__*/EditorView.baseTheme({
        ".cm-tooltip.cm-tooltip-autocomplete": {
            "& > ul": {
                fontFamily: "monospace",
                whiteSpace: "nowrap",
                overflow: "auto",
                maxWidth_fallback: "700px",
                maxWidth: "min(700px, 95vw)",
                maxHeight: "10em",
                listStyle: "none",
                margin: 0,
                padding: 0,
                "& > li": {
                    cursor: "pointer",
                    padding: "1px 1em 1px 3px",
                    lineHeight: 1.2
                },
                "& > li[aria-selected]": {
                    background_fallback: "#bdf",
                    backgroundColor: "Highlight",
                    color_fallback: "white",
                    color: "HighlightText"
                }
            }
        },
        ".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after": {
            content: '"···"',
            opacity: 0.5,
            display: "block",
            textAlign: "center"
        },
        ".cm-tooltip.cm-completionInfo": {
            position: "absolute",
            padding: "3px 9px",
            width: "max-content",
            maxWidth: MaxInfoWidth + "px",
        },
        ".cm-completionInfo.cm-completionInfo-left": { right: "100%" },
        ".cm-completionInfo.cm-completionInfo-right": { left: "100%" },
        "&light .cm-snippetField": { backgroundColor: "#00000022" },
        "&dark .cm-snippetField": { backgroundColor: "#ffffff22" },
        ".cm-snippetFieldPosition": {
            verticalAlign: "text-top",
            width: 0,
            height: "1.15em",
            margin: "0 -0.7px -.7em",
            borderLeft: "1.4px dotted #888"
        },
        ".cm-completionMatchedText": {
            textDecoration: "underline"
        },
        ".cm-completionDetail": {
            marginLeft: "0.5em",
            fontStyle: "italic"
        },
        ".cm-completionIcon": {
            fontSize: "90%",
            width: ".8em",
            display: "inline-block",
            textAlign: "center",
            paddingRight: ".6em",
            opacity: "0.6"
        },
        ".cm-completionIcon-function, .cm-completionIcon-method": {
            "&:after": { content: "'ƒ'" }
        },
        ".cm-completionIcon-class": {
            "&:after": { content: "'○'" }
        },
        ".cm-completionIcon-interface": {
            "&:after": { content: "'◌'" }
        },
        ".cm-completionIcon-variable": {
            "&:after": { content: "'𝑥'" }
        },
        ".cm-completionIcon-constant": {
            "&:after": { content: "'𝐶'" }
        },
        ".cm-completionIcon-type": {
            "&:after": { content: "'𝑡'" }
        },
        ".cm-completionIcon-enum": {
            "&:after": { content: "'∪'" }
        },
        ".cm-completionIcon-property": {
            "&:after": { content: "'□'" }
        },
        ".cm-completionIcon-keyword": {
            "&:after": { content: "'🔑\uFE0E'" } // Disable emoji rendering
        },
        ".cm-completionIcon-namespace": {
            "&:after": { content: "'▢'" }
        },
        ".cm-completionIcon-text": {
            "&:after": { content: "'abc'", fontSize: "50%", verticalAlign: "middle" }
        }
    });

    class FieldPos {
        constructor(field, line, from, to) {
            this.field = field;
            this.line = line;
            this.from = from;
            this.to = to;
        }
    }
    class FieldRange {
        constructor(field, from, to) {
            this.field = field;
            this.from = from;
            this.to = to;
        }
        map(changes) {
            return new FieldRange(this.field, changes.mapPos(this.from, -1), changes.mapPos(this.to, 1));
        }
    }
    class Snippet {
        constructor(lines, fieldPositions) {
            this.lines = lines;
            this.fieldPositions = fieldPositions;
        }
        instantiate(state, pos) {
            let text = [], lineStart = [pos];
            let lineObj = state.doc.lineAt(pos), baseIndent = /^\s*/.exec(lineObj.text)[0];
            for (let line of this.lines) {
                if (text.length) {
                    let indent = baseIndent, tabs = /^\t*/.exec(line)[0].length;
                    for (let i = 0; i < tabs; i++)
                        indent += state.facet(indentUnit);
                    lineStart.push(pos + indent.length - tabs);
                    line = indent + line.slice(tabs);
                }
                text.push(line);
                pos += line.length + 1;
            }
            let ranges = this.fieldPositions.map(pos => new FieldRange(pos.field, lineStart[pos.line] + pos.from, lineStart[pos.line] + pos.to));
            return { text, ranges };
        }
        static parse(template) {
            let fields = [];
            let lines = [], positions = [], m;
            for (let line of template.split(/\r\n?|\n/)) {
                while (m = /[#$]\{(?:(\d+)(?::([^}]*))?|([^}]*))\}/.exec(line)) {
                    let seq = m[1] ? +m[1] : null, name = m[2] || m[3], found = -1;
                    for (let i = 0; i < fields.length; i++) {
                        if (seq != null ? fields[i].seq == seq : name ? fields[i].name == name : false)
                            found = i;
                    }
                    if (found < 0) {
                        let i = 0;
                        while (i < fields.length && (seq == null || (fields[i].seq != null && fields[i].seq < seq)))
                            i++;
                        fields.splice(i, 0, { seq, name: name || null });
                        found = i;
                        for (let pos of positions)
                            if (pos.field >= found)
                                pos.field++;
                    }
                    positions.push(new FieldPos(found, lines.length, m.index, m.index + name.length));
                    line = line.slice(0, m.index) + name + line.slice(m.index + m[0].length);
                }
                lines.push(line);
            }
            return new Snippet(lines, positions);
        }
    }
    let fieldMarker = /*@__PURE__*/Decoration.widget({ widget: /*@__PURE__*/new class extends WidgetType {
            toDOM() {
                let span = document.createElement("span");
                span.className = "cm-snippetFieldPosition";
                return span;
            }
            ignoreEvent() { return false; }
        } });
    let fieldRange = /*@__PURE__*/Decoration.mark({ class: "cm-snippetField" });
    class ActiveSnippet {
        constructor(ranges, active) {
            this.ranges = ranges;
            this.active = active;
            this.deco = Decoration.set(ranges.map(r => (r.from == r.to ? fieldMarker : fieldRange).range(r.from, r.to)));
        }
        map(changes) {
            return new ActiveSnippet(this.ranges.map(r => r.map(changes)), this.active);
        }
        selectionInsideField(sel) {
            return sel.ranges.every(range => this.ranges.some(r => r.field == this.active && r.from <= range.from && r.to >= range.to));
        }
    }
    const setActive = /*@__PURE__*/StateEffect.define({
        map(value, changes) { return value && value.map(changes); }
    });
    const moveToField = /*@__PURE__*/StateEffect.define();
    const snippetState = /*@__PURE__*/StateField.define({
        create() { return null; },
        update(value, tr) {
            for (let effect of tr.effects) {
                if (effect.is(setActive))
                    return effect.value;
                if (effect.is(moveToField) && value)
                    return new ActiveSnippet(value.ranges, effect.value);
            }
            if (value && tr.docChanged)
                value = value.map(tr.changes);
            if (value && tr.selection && !value.selectionInsideField(tr.selection))
                value = null;
            return value;
        },
        provide: f => EditorView.decorations.from(f, val => val ? val.deco : Decoration.none)
    });
    function fieldSelection(ranges, field) {
        return EditorSelection.create(ranges.filter(r => r.field == field).map(r => EditorSelection.range(r.from, r.to)));
    }
    /**
    Convert a snippet template to a function that can apply it.
    Snippets are written using syntax like this:

        "for (let ${index} = 0; ${index} < ${end}; ${index}++) {\n\t${}\n}"

    Each `${}` placeholder (you may also use `#{}`) indicates a field
    that the user can fill in. Its name, if any, will be the default
    content for the field.

    When the snippet is activated by calling the returned function,
    the code is inserted at the given position. Newlines in the
    template are indented by the indentation of the start line, plus
    one [indent unit](https://codemirror.net/6/docs/ref/#language.indentUnit) per tab character after
    the newline.

    On activation, (all instances of) the first field are selected.
    The user can move between fields with Tab and Shift-Tab as long as
    the fields are active. Moving to the last field or moving the
    cursor out of the current field deactivates the fields.

    The order of fields defaults to textual order, but you can add
    numbers to placeholders (`${1}` or `${1:defaultText}`) to provide
    a custom order.
    */
    function snippet(template) {
        let snippet = Snippet.parse(template);
        return (editor, _completion, from, to) => {
            let { text, ranges } = snippet.instantiate(editor.state, from);
            let spec = { changes: { from, to, insert: Text.of(text) } };
            if (ranges.length)
                spec.selection = fieldSelection(ranges, 0);
            if (ranges.length > 1) {
                let active = new ActiveSnippet(ranges, 0);
                let effects = spec.effects = [setActive.of(active)];
                if (editor.state.field(snippetState, false) === undefined)
                    effects.push(StateEffect.appendConfig.of([snippetState.init(() => active), addSnippetKeymap,
                        snippetPointerHandler, baseTheme$2]));
            }
            editor.dispatch(editor.state.update(spec));
        };
    }
    function moveField(dir) {
        return ({ state, dispatch }) => {
            let active = state.field(snippetState, false);
            if (!active || dir < 0 && active.active == 0)
                return false;
            let next = active.active + dir, last = dir > 0 && !active.ranges.some(r => r.field == next + dir);
            dispatch(state.update({
                selection: fieldSelection(active.ranges, next),
                effects: setActive.of(last ? null : new ActiveSnippet(active.ranges, next))
            }));
            return true;
        };
    }
    /**
    A command that clears the active snippet, if any.
    */
    const clearSnippet = ({ state, dispatch }) => {
        let active = state.field(snippetState, false);
        if (!active)
            return false;
        dispatch(state.update({ effects: setActive.of(null) }));
        return true;
    };
    /**
    Move to the next snippet field, if available.
    */
    const nextSnippetField = /*@__PURE__*/moveField(1);
    /**
    Move to the previous snippet field, if available.
    */
    const prevSnippetField = /*@__PURE__*/moveField(-1);
    const defaultSnippetKeymap = [
        { key: "Tab", run: nextSnippetField, shift: prevSnippetField },
        { key: "Escape", run: clearSnippet }
    ];
    /**
    A facet that can be used to configure the key bindings used by
    snippets. The default binds Tab to
    [`nextSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.nextSnippetField), Shift-Tab to
    [`prevSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.prevSnippetField), and Escape
    to [`clearSnippet`](https://codemirror.net/6/docs/ref/#autocomplete.clearSnippet).
    */
    const snippetKeymap = /*@__PURE__*/Facet.define({
        combine(maps) { return maps.length ? maps[0] : defaultSnippetKeymap; }
    });
    const addSnippetKeymap = /*@__PURE__*/Prec.override(/*@__PURE__*/keymap.compute([snippetKeymap], state => state.facet(snippetKeymap)));
    /**
    Create a completion from a snippet. Returns an object with the
    properties from `completion`, plus an `apply` function that
    applies the snippet.
    */
    function snippetCompletion(template, completion) {
        return Object.assign(Object.assign({}, completion), { apply: snippet(template) });
    }
    const snippetPointerHandler = /*@__PURE__*/EditorView.domEventHandlers({
        mousedown(event, view) {
            let active = view.state.field(snippetState, false), pos;
            if (!active || (pos = view.posAtCoords({ x: event.clientX, y: event.clientY })) == null)
                return false;
            let match = active.ranges.find(r => r.from <= pos && r.to >= pos);
            if (!match || match.field == active.active)
                return false;
            view.dispatch({
                selection: fieldSelection(active.ranges, match.field),
                effects: setActive.of(active.ranges.some(r => r.field > match.field) ? new ActiveSnippet(active.ranges, match.field) : null)
            });
            return true;
        }
    });

    /**
    A collection of JavaScript-related
    [snippets](https://codemirror.net/6/docs/ref/#autocomplete.snippet).
    */
    const snippets = [
        /*@__PURE__*/snippetCompletion("function ${name}(${params}) {\n\t${}\n}", {
            label: "function",
            detail: "definition",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("for (let ${index} = 0; ${index} < ${bound}; ${index}++) {\n\t${}\n}", {
            label: "for",
            detail: "loop",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("for (let ${name} of ${collection}) {\n\t${}\n}", {
            label: "for",
            detail: "of loop",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("try {\n\t${}\n} catch (${error}) {\n\t${}\n}", {
            label: "try",
            detail: "block",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("class ${name} {\n\tconstructor(${params}) {\n\t\t${}\n\t}\n}", {
            label: "class",
            detail: "definition",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("import {${names}} from \"${module}\"\n${}", {
            label: "import",
            detail: "named",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("import ${name} from \"${module}\"\n${}", {
            label: "import",
            detail: "default",
            type: "keyword"
        })
    ];

    /**
    A language provider based on the [Lezer JavaScript
    parser](https://github.com/lezer-parser/javascript), extended with
    highlighting and indentation information.
    */
    const javascriptLanguage = /*@__PURE__*/LRLanguage.define({
        parser: /*@__PURE__*/parser$7.configure({
            props: [
                /*@__PURE__*/indentNodeProp.add({
                    IfStatement: /*@__PURE__*/continuedIndent({ except: /^\s*({|else\b)/ }),
                    TryStatement: /*@__PURE__*/continuedIndent({ except: /^\s*({|catch|finally)\b/ }),
                    LabeledStatement: flatIndent,
                    SwitchBody: context => {
                        let after = context.textAfter, closed = /^\s*\}/.test(after), isCase = /^\s*(case|default)\b/.test(after);
                        return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;
                    },
                    Block: /*@__PURE__*/delimitedIndent({ closing: "}" }),
                    ArrowFunction: cx => cx.baseIndent + cx.unit,
                    "TemplateString BlockComment": () => -1,
                    "Statement Property": /*@__PURE__*/continuedIndent({ except: /^{/ }),
                    JSXElement(context) {
                        let closed = /^\s*<\//.test(context.textAfter);
                        return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);
                    },
                    JSXEscape(context) {
                        let closed = /\s*\}/.test(context.textAfter);
                        return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);
                    },
                    "JSXOpenTag JSXSelfClosingTag"(context) {
                        return context.column(context.node.from) + context.unit;
                    }
                }),
                /*@__PURE__*/foldNodeProp.add({
                    "Block ClassBody SwitchBody EnumBody ObjectExpression ArrayExpression": foldInside$1,
                    BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }
                }),
                /*@__PURE__*/styleTags({
                    "get set async static": tags$1.modifier,
                    "for while do if else switch try catch finally return throw break continue default case": tags$1.controlKeyword,
                    "in of await yield void typeof delete instanceof": tags$1.operatorKeyword,
                    "export import let var const function class extends": tags$1.definitionKeyword,
                    "with debugger from as new": tags$1.keyword,
                    TemplateString: /*@__PURE__*/tags$1.special(tags$1.string),
                    Super: tags$1.atom,
                    BooleanLiteral: tags$1.bool,
                    this: tags$1.self,
                    null: tags$1.null,
                    Star: tags$1.modifier,
                    VariableName: tags$1.variableName,
                    "CallExpression/VariableName": /*@__PURE__*/tags$1.function(tags$1.variableName),
                    VariableDefinition: /*@__PURE__*/tags$1.definition(tags$1.variableName),
                    Label: tags$1.labelName,
                    PropertyName: tags$1.propertyName,
                    "CallExpression/MemberExpression/PropertyName": /*@__PURE__*/tags$1.function(tags$1.propertyName),
                    "FunctionDeclaration/VariableDefinition": /*@__PURE__*/tags$1.function(/*@__PURE__*/tags$1.definition(tags$1.variableName)),
                    "ClassDeclaration/VariableDefinition": /*@__PURE__*/tags$1.definition(tags$1.className),
                    PropertyNameDefinition: /*@__PURE__*/tags$1.definition(tags$1.propertyName),
                    UpdateOp: tags$1.updateOperator,
                    LineComment: tags$1.lineComment,
                    BlockComment: tags$1.blockComment,
                    Number: tags$1.number,
                    String: tags$1.string,
                    ArithOp: tags$1.arithmeticOperator,
                    LogicOp: tags$1.logicOperator,
                    BitOp: tags$1.bitwiseOperator,
                    CompareOp: tags$1.compareOperator,
                    RegExp: tags$1.regexp,
                    Equals: tags$1.definitionOperator,
                    "Arrow : Spread": tags$1.punctuation,
                    "( )": tags$1.paren,
                    "[ ]": tags$1.squareBracket,
                    "{ }": tags$1.brace,
                    ".": tags$1.derefOperator,
                    ", ;": tags$1.separator,
                    TypeName: tags$1.typeName,
                    TypeDefinition: /*@__PURE__*/tags$1.definition(tags$1.typeName),
                    "type enum interface implements namespace module declare": tags$1.definitionKeyword,
                    "abstract global privacy readonly": tags$1.modifier,
                    "is keyof unique infer": tags$1.operatorKeyword,
                    JSXAttributeValue: tags$1.string,
                    JSXText: tags$1.content,
                    "JSXStartTag JSXStartCloseTag JSXSelfCloseEndTag JSXEndTag": tags$1.angleBracket,
                    "JSXIdentifier JSXNameSpacedName": tags$1.tagName,
                    "JSXAttribute/JSXIdentifier JSXAttribute/JSXNameSpacedName": tags$1.propertyName
                })
            ]
        }),
        languageData: {
            closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] },
            commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
            indentOnInput: /^\s*(?:case |default:|\{|\}|<\/)$/,
            wordChars: "$"
        }
    });
    /**
    A language provider for TypeScript.
    */
    const typescriptLanguage = /*@__PURE__*/javascriptLanguage.configure({ dialect: "ts" });
    /**
    Language provider for JSX.
    */
    const jsxLanguage = /*@__PURE__*/javascriptLanguage.configure({ dialect: "jsx" });
    /**
    Language provider for JSX + TypeScript.
    */
    const tsxLanguage = /*@__PURE__*/javascriptLanguage.configure({ dialect: "jsx ts" });
    /**
    JavaScript support. Includes [snippet](https://codemirror.net/6/docs/ref/#lang-javascript.snippets)
    completion.
    */
    function javascript$2(config = {}) {
        let lang = config.jsx ? (config.typescript ? tsxLanguage : jsxLanguage)
            : config.typescript ? typescriptLanguage : javascriptLanguage;
        return new LanguageSupport(lang, javascriptLanguage.data.of({
            autocomplete: ifNotIn(["LineComment", "BlockComment", "String"], completeFromList(snippets))
        }));
    }

    /**
    Connects an [ESLint](https://eslint.org/) linter to CodeMirror's
    [lint](https://codemirror.net/6/docs/ref/#lint) integration. `eslint` should be an instance of the
    [`Linter`](https://eslint.org/docs/developer-guide/nodejs-api#linter)
    class, and `config` an optional ESLint configuration. The return
    value of this function can be passed to [`linter`](https://codemirror.net/6/docs/ref/#lint.linter)
    to create a JavaScript linting extension.

    Note that ESLint targets node, and is tricky to run in the
    browser. The [eslint4b](https://github.com/mysticatea/eslint4b)
    and
    [eslint4b-prebuilt](https://github.com/marijnh/eslint4b-prebuilt/)
    packages may help with that.
    */
    function esLint(eslint, config) {
        if (!config) {
            config = {
                parserOptions: { ecmaVersion: 2019, sourceType: "module" },
                env: { browser: true, node: true, es6: true, es2015: true, es2017: true, es2020: true },
                rules: {}
            };
            eslint.getRules().forEach((desc, name) => {
                if (desc.meta.docs.recommended)
                    config.rules[name] = 2;
            });
        }
        return (view) => {
            let { state } = view, found = [];
            for (let { from, to } of javascriptLanguage.findRegions(state)) {
                let fromLine = state.doc.lineAt(from), offset = { line: fromLine.number - 1, col: from - fromLine.from, pos: from };
                for (let d of eslint.verify(state.sliceDoc(from, to), config))
                    found.push(translateDiagnostic(d, state.doc, offset));
            }
            return found;
        };
    }
    function mapPos(line, col, doc, offset) {
        return doc.line(line + offset.line).from + col + (line == 1 ? offset.col - 1 : -1);
    }
    function translateDiagnostic(input, doc, offset) {
        let start = mapPos(input.line, input.column, doc, offset);
        let result = {
            from: start,
            to: input.endLine != null && input.endColumn != 1 ? mapPos(input.endLine, input.endColumn, doc, offset) : start,
            message: input.message,
            source: input.ruleId ? "jshint:" + input.ruleId : "jshint",
            severity: input.severity == 1 ? "warning" : "error",
        };
        if (input.fix) {
            let { range, text } = input.fix, from = range[0] + offset.pos - start, to = range[1] + offset.pos - start;
            result.actions = [{
                    name: "fix",
                    apply(view, start) {
                        view.dispatch({ changes: { from: start + from, to: start + to, insert: text }, scrollIntoView: true });
                    }
                }];
        }
        return result;
    }

    var index$a = /*#__PURE__*/Object.freeze({
        __proto__: null,
        esLint: esLint,
        javascript: javascript$2,
        javascriptLanguage: javascriptLanguage,
        jsxLanguage: jsxLanguage,
        snippets: snippets,
        tsxLanguage: tsxLanguage,
        typescriptLanguage: typescriptLanguage
    });

    const Targets = ["_blank", "_self", "_top", "_parent"];
    const Charsets = ["ascii", "utf-8", "utf-16", "latin1", "latin1"];
    const Methods = ["get", "post", "put", "delete"];
    const Encs = ["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"];
    const Bool$1 = ["true", "false"];
    const S = {}; // Empty tag spec
    const Tags = {
        a: {
            attrs: {
                href: null, ping: null, type: null,
                media: null,
                target: Targets,
                hreflang: null
            }
        },
        abbr: S,
        acronym: S,
        address: S,
        applet: S,
        area: {
            attrs: {
                alt: null, coords: null, href: null, target: null, ping: null,
                media: null, hreflang: null, type: null,
                shape: ["default", "rect", "circle", "poly"]
            }
        },
        article: S,
        aside: S,
        audio: {
            attrs: {
                src: null, mediagroup: null,
                crossorigin: ["anonymous", "use-credentials"],
                preload: ["none", "metadata", "auto"],
                autoplay: ["autoplay"],
                loop: ["loop"],
                controls: ["controls"]
            }
        },
        b: S,
        base: { attrs: { href: null, target: Targets } },
        basefont: S,
        bdi: S,
        bdo: S,
        big: S,
        blockquote: { attrs: { cite: null } },
        body: S,
        br: S,
        button: {
            attrs: {
                form: null, formaction: null, name: null, value: null,
                autofocus: ["autofocus"],
                disabled: ["autofocus"],
                formenctype: Encs,
                formmethod: Methods,
                formnovalidate: ["novalidate"],
                formtarget: Targets,
                type: ["submit", "reset", "button"]
            }
        },
        canvas: { attrs: { width: null, height: null } },
        caption: S,
        center: S,
        cite: S,
        code: S,
        col: { attrs: { span: null } },
        colgroup: { attrs: { span: null } },
        command: {
            attrs: {
                type: ["command", "checkbox", "radio"],
                label: null, icon: null, radiogroup: null, command: null, title: null,
                disabled: ["disabled"],
                checked: ["checked"]
            }
        },
        data: { attrs: { value: null } },
        datagrid: { attrs: { disabled: ["disabled"], multiple: ["multiple"] } },
        datalist: { attrs: { data: null } },
        dd: S,
        del: { attrs: { cite: null, datetime: null } },
        details: { attrs: { open: ["open"] } },
        dfn: S,
        dir: S,
        div: S,
        dl: S,
        dt: S,
        em: S,
        embed: { attrs: { src: null, type: null, width: null, height: null } },
        eventsource: { attrs: { src: null } },
        fieldset: { attrs: { disabled: ["disabled"], form: null, name: null } },
        figcaption: S,
        figure: S,
        font: S,
        footer: S,
        form: {
            attrs: {
                action: null, name: null,
                "accept-charset": Charsets,
                autocomplete: ["on", "off"],
                enctype: Encs,
                method: Methods,
                novalidate: ["novalidate"],
                target: Targets
            }
        },
        frame: S,
        frameset: S,
        h1: S, h2: S, h3: S, h4: S, h5: S, h6: S,
        head: {
            children: ["title", "base", "link", "style", "meta", "script", "noscript", "command"]
        },
        header: S,
        hgroup: S,
        hr: S,
        html: {
            attrs: { manifest: null },
            children: ["head", "body"]
        },
        i: S,
        iframe: {
            attrs: {
                src: null, srcdoc: null, name: null, width: null, height: null,
                sandbox: ["allow-top-navigation", "allow-same-origin", "allow-forms", "allow-scripts"],
                seamless: ["seamless"]
            }
        },
        img: {
            attrs: {
                alt: null, src: null, ismap: null, usemap: null, width: null, height: null,
                crossorigin: ["anonymous", "use-credentials"]
            }
        },
        input: {
            attrs: {
                alt: null, dirname: null, form: null, formaction: null,
                height: null, list: null, max: null, maxlength: null, min: null,
                name: null, pattern: null, placeholder: null, size: null, src: null,
                step: null, value: null, width: null,
                accept: ["audio/*", "video/*", "image/*"],
                autocomplete: ["on", "off"],
                autofocus: ["autofocus"],
                checked: ["checked"],
                disabled: ["disabled"],
                formenctype: Encs,
                formmethod: Methods,
                formnovalidate: ["novalidate"],
                formtarget: Targets,
                multiple: ["multiple"],
                readonly: ["readonly"],
                required: ["required"],
                type: ["hidden", "text", "search", "tel", "url", "email", "password", "datetime", "date", "month",
                    "week", "time", "datetime-local", "number", "range", "color", "checkbox", "radio",
                    "file", "submit", "image", "reset", "button"]
            }
        },
        ins: { attrs: { cite: null, datetime: null } },
        kbd: S,
        keygen: {
            attrs: {
                challenge: null, form: null, name: null,
                autofocus: ["autofocus"],
                disabled: ["disabled"],
                keytype: ["RSA"]
            }
        },
        label: { attrs: { for: null, form: null } },
        legend: S,
        li: { attrs: { value: null } },
        link: {
            attrs: {
                href: null, type: null,
                hreflang: null,
                media: null,
                sizes: ["all", "16x16", "16x16 32x32", "16x16 32x32 64x64"]
            }
        },
        map: { attrs: { name: null } },
        mark: S,
        menu: { attrs: { label: null, type: ["list", "context", "toolbar"] } },
        meta: {
            attrs: {
                content: null,
                charset: Charsets,
                name: ["viewport", "application-name", "author", "description", "generator", "keywords"],
                "http-equiv": ["content-language", "content-type", "default-style", "refresh"]
            }
        },
        meter: { attrs: { value: null, min: null, low: null, high: null, max: null, optimum: null } },
        nav: S,
        noframes: S,
        noscript: S,
        object: {
            attrs: {
                data: null, type: null, name: null, usemap: null, form: null, width: null, height: null,
                typemustmatch: ["typemustmatch"]
            }
        },
        ol: { attrs: { reversed: ["reversed"], start: null, type: ["1", "a", "A", "i", "I"] },
            children: ["li", "script", "template", "ul", "ol"] },
        optgroup: { attrs: { disabled: ["disabled"], label: null } },
        option: { attrs: { disabled: ["disabled"], label: null, selected: ["selected"], value: null } },
        output: { attrs: { for: null, form: null, name: null } },
        p: S,
        param: { attrs: { name: null, value: null } },
        pre: S,
        progress: { attrs: { value: null, max: null } },
        q: { attrs: { cite: null } },
        rp: S,
        rt: S,
        ruby: S,
        s: S,
        samp: S,
        script: {
            attrs: {
                type: ["text/javascript"],
                src: null,
                async: ["async"],
                defer: ["defer"],
                charset: Charsets
            }
        },
        section: S,
        select: {
            attrs: {
                form: null, name: null, size: null,
                autofocus: ["autofocus"],
                disabled: ["disabled"],
                multiple: ["multiple"]
            }
        },
        small: S,
        source: { attrs: { src: null, type: null, media: null } },
        span: S,
        strike: S,
        strong: S,
        style: {
            attrs: {
                type: ["text/css"],
                media: null,
                scoped: null
            }
        },
        sub: S,
        summary: S,
        sup: S,
        table: S,
        tbody: S,
        td: { attrs: { colspan: null, rowspan: null, headers: null } },
        textarea: {
            attrs: {
                dirname: null, form: null, maxlength: null, name: null, placeholder: null,
                rows: null, cols: null,
                autofocus: ["autofocus"],
                disabled: ["disabled"],
                readonly: ["readonly"],
                required: ["required"],
                wrap: ["soft", "hard"]
            }
        },
        tfoot: S,
        th: { attrs: { colspan: null, rowspan: null, headers: null, scope: ["row", "col", "rowgroup", "colgroup"] } },
        thead: S,
        time: { attrs: { datetime: null } },
        title: S,
        tr: S,
        track: {
            attrs: {
                src: null, label: null, default: null,
                kind: ["subtitles", "captions", "descriptions", "chapters", "metadata"],
                srclang: null
            }
        },
        tt: S,
        u: S,
        ul: { children: ["li", "script", "template", "ul", "ol"] },
        var: S,
        video: {
            attrs: {
                src: null, poster: null, width: null, height: null,
                crossorigin: ["anonymous", "use-credentials"],
                preload: ["auto", "metadata", "none"],
                autoplay: ["autoplay"],
                mediagroup: ["movie"],
                muted: ["muted"],
                controls: ["controls"]
            }
        },
        wbr: S
    };
    const GlobalAttrs = {
        accesskey: null,
        class: null,
        contenteditable: Bool$1,
        contextmenu: null,
        dir: ["ltr", "rtl", "auto"],
        draggable: ["true", "false", "auto"],
        dropzone: ["copy", "move", "link", "string:", "file:"],
        hidden: ["hidden"],
        id: null,
        inert: ["inert"],
        itemid: null,
        itemprop: null,
        itemref: null,
        itemscope: ["itemscope"],
        itemtype: null,
        lang: ["ar", "bn", "de", "en-GB", "en-US", "es", "fr", "hi", "id", "ja", "pa", "pt", "ru", "tr", "zh"],
        spellcheck: Bool$1,
        autocorrect: Bool$1,
        autocapitalize: Bool$1,
        style: null,
        tabindex: null,
        title: null,
        translate: ["yes", "no"],
        onclick: null,
        rel: ["stylesheet", "alternate", "author", "bookmark", "help", "license", "next", "nofollow", "noreferrer", "prefetch", "prev", "search", "tag"],
        role: /*@__PURE__*/"alert application article banner button cell checkbox complementary contentinfo dialog document feed figure form grid gridcell heading img list listbox listitem main navigation region row rowgroup search switch tab table tabpanel textbox timer".split(" "),
        "aria-activedescendant": null,
        "aria-atomic": Bool$1,
        "aria-autocomplete": ["inline", "list", "both", "none"],
        "aria-busy": Bool$1,
        "aria-checked": ["true", "false", "mixed", "undefined"],
        "aria-controls": null,
        "aria-describedby": null,
        "aria-disabled": Bool$1,
        "aria-dropeffect": null,
        "aria-expanded": ["true", "false", "undefined"],
        "aria-flowto": null,
        "aria-grabbed": ["true", "false", "undefined"],
        "aria-haspopup": Bool$1,
        "aria-hidden": Bool$1,
        "aria-invalid": ["true", "false", "grammar", "spelling"],
        "aria-label": null,
        "aria-labelledby": null,
        "aria-level": null,
        "aria-live": ["off", "polite", "assertive"],
        "aria-multiline": Bool$1,
        "aria-multiselectable": Bool$1,
        "aria-owns": null,
        "aria-posinset": null,
        "aria-pressed": ["true", "false", "mixed", "undefined"],
        "aria-readonly": Bool$1,
        "aria-relevant": null,
        "aria-required": Bool$1,
        "aria-selected": ["true", "false", "undefined"],
        "aria-setsize": null,
        "aria-sort": ["ascending", "descending", "none", "other"],
        "aria-valuemax": null,
        "aria-valuemin": null,
        "aria-valuenow": null,
        "aria-valuetext": null
    };
    const AllTags = /*@__PURE__*/Object.keys(Tags);
    const GlobalAttrNames = /*@__PURE__*/Object.keys(GlobalAttrs);
    function elementName$1(doc, tree) {
        let tag = tree.firstChild;
        let name = tag && tag.getChild("TagName");
        return name ? doc.sliceString(name.from, name.to) : "";
    }
    function findParentElement$1(tree, skip = false) {
        for (let cur = tree.parent; cur; cur = cur.parent)
            if (cur.name == "Element") {
                if (skip)
                    skip = false;
                else
                    return cur;
            }
        return null;
    }
    function allowedChildren(doc, tree) {
        let parent = findParentElement$1(tree, true);
        let parentInfo = parent ? Tags[elementName$1(doc, parent)] : null;
        return (parentInfo === null || parentInfo === void 0 ? void 0 : parentInfo.children) || AllTags;
    }
    function openTags(doc, tree) {
        let open = [];
        for (let parent = tree; parent = findParentElement$1(parent);) {
            let tagName = elementName$1(doc, parent);
            if (tagName && parent.lastChild.name == "CloseTag")
                break;
            if (tagName && open.indexOf(tagName) < 0 && (tree.name == "EndTag" || tree.from >= parent.firstChild.to))
                open.push(tagName);
        }
        return open;
    }
    const identifier$2 = /^[:\-\.\w\u00b7-\uffff]+$/;
    function completeTag(state, tree, from, to) {
        let end = /\s*>/.test(state.sliceDoc(to, to + 5)) ? "" : ">";
        return { from, to,
            options: allowedChildren(state.doc, tree).map(tagName => ({ label: tagName, type: "type" })).concat(openTags(state.doc, tree).map((tag, i) => ({ label: "/" + tag, apply: "/" + tag + end, type: "type", boost: 99 - i }))),
            span: /^\/?[:\-\.\w\u00b7-\uffff]*$/ };
    }
    function completeCloseTag(state, tree, from, to) {
        let end = /\s*>/.test(state.sliceDoc(to, to + 5)) ? "" : ">";
        return { from, to,
            options: openTags(state.doc, tree).map((tag, i) => ({ label: tag, apply: tag + end, type: "type", boost: 99 - i })),
            span: identifier$2 };
    }
    function completeStartTag(state, tree, pos) {
        let options = [], level = 0;
        for (let tagName of allowedChildren(state.doc, tree))
            options.push({ label: "<" + tagName, type: "type" });
        for (let open of openTags(state.doc, tree))
            options.push({ label: "</" + open + ">", type: "type", boost: 99 - level++ });
        return { from: pos, to: pos, options, span: /^<\/?[:\-\.\w\u00b7-\uffff]*$/ };
    }
    function completeAttrName(state, tree, from, to) {
        let elt = findParentElement$1(tree), info = elt ? Tags[elementName$1(state.doc, elt)] : null;
        let names = (info && info.attrs ? Object.keys(info.attrs).concat(GlobalAttrNames) : GlobalAttrNames);
        return { from, to,
            options: names.map(attrName => ({ label: attrName, type: "property" })),
            span: identifier$2 };
    }
    function completeAttrValue(state, tree, from, to) {
        var _a;
        let nameNode = (_a = tree.parent) === null || _a === void 0 ? void 0 : _a.getChild("AttributeName");
        let options = [], span = undefined;
        if (nameNode) {
            let attrName = state.sliceDoc(nameNode.from, nameNode.to);
            let attrs = GlobalAttrs[attrName];
            if (!attrs) {
                let elt = findParentElement$1(tree), info = elt ? Tags[elementName$1(state.doc, elt)] : null;
                attrs = (info === null || info === void 0 ? void 0 : info.attrs) && info.attrs[attrName];
            }
            if (attrs) {
                let base = state.sliceDoc(from, to).toLowerCase(), quoteStart = '"', quoteEnd = '"';
                if (/^['"]/.test(base)) {
                    span = base[0] == '"' ? /^[^"]*$/ : /^[^']*$/;
                    quoteStart = "";
                    quoteEnd = state.sliceDoc(to, to + 1) == base[0] ? "" : base[0];
                    base = base.slice(1);
                    from++;
                }
                else {
                    span = /^[^\s<>='"]*$/;
                }
                for (let value of attrs)
                    options.push({ label: value, apply: quoteStart + value + quoteEnd, type: "constant" });
            }
        }
        return { from, to, options, span };
    }
    function completeHTML(context) {
        let { state, pos } = context, around = syntaxTree(state).resolveInner(pos), tree = around.resolve(pos, -1);
        for (let scan = pos, before; around == tree && (before = tree.childBefore(scan));) {
            let last = before.lastChild;
            if (!last || !last.type.isError || last.from < last.to)
                break;
            around = tree = before;
            scan = last.from;
        }
        if (tree.name == "TagName") {
            return tree.parent && /CloseTag$/.test(tree.parent.name) ? completeCloseTag(state, tree, tree.from, pos)
                : completeTag(state, tree, tree.from, pos);
        }
        else if (tree.name == "StartTag") {
            return completeTag(state, tree, pos, pos);
        }
        else if (tree.name == "StartCloseTag" || tree.name == "IncompleteCloseTag") {
            return completeCloseTag(state, tree, pos, pos);
        }
        else if (context.explicit && (tree.name == "OpenTag" || tree.name == "SelfClosingTag") || tree.name == "AttributeName") {
            return completeAttrName(state, tree, tree.name == "AttributeName" ? tree.from : pos, pos);
        }
        else if (tree.name == "Is" || tree.name == "AttributeValue" || tree.name == "UnquotedAttributeValue") {
            return completeAttrValue(state, tree, tree.name == "Is" ? pos : tree.from, pos);
        }
        else if (context.explicit && (around.name == "Element" || around.name == "Text" || around.name == "Document")) {
            return completeStartTag(state, tree, pos);
        }
        else {
            return null;
        }
    }

    /**
    A language provider based on the [Lezer HTML
    parser](https://github.com/lezer-parser/html), extended with the
    JavaScript and CSS parsers to parse the content of `<script>` and
    `<style>` tags.
    */
    const htmlLanguage = /*@__PURE__*/LRLanguage.define({
        parser: /*@__PURE__*/parser$9.configure({
            props: [
                /*@__PURE__*/indentNodeProp.add({
                    Element(context) {
                        let after = /^(\s*)(<\/)?/.exec(context.textAfter);
                        if (context.node.to <= context.pos + after[0].length)
                            return context.continue();
                        return context.lineIndent(context.node.from) + (after[2] ? 0 : context.unit);
                    },
                    "OpenTag CloseTag SelfClosingTag"(context) {
                        return context.column(context.node.from) + context.unit;
                    },
                    Document(context) {
                        if (context.pos + /\s*/.exec(context.textAfter)[0].length < context.node.to)
                            return context.continue();
                        let endElt = null, close;
                        for (let cur = context.node;;) {
                            let last = cur.lastChild;
                            if (!last || last.name != "Element" || last.to != cur.to)
                                break;
                            endElt = cur = last;
                        }
                        if (endElt && !((close = endElt.lastChild) && (close.name == "CloseTag" || close.name == "SelfClosingTag")))
                            return context.lineIndent(endElt.from) + context.unit;
                        return null;
                    }
                }),
                /*@__PURE__*/foldNodeProp.add({
                    Element(node) {
                        let first = node.firstChild, last = node.lastChild;
                        if (!first || first.name != "OpenTag")
                            return null;
                        return { from: first.to, to: last.name == "CloseTag" ? last.from : node.to };
                    }
                }),
                /*@__PURE__*/styleTags({
                    AttributeValue: tags$1.string,
                    "Text RawText": tags$1.content,
                    "StartTag StartCloseTag SelfCloserEndTag EndTag SelfCloseEndTag": tags$1.angleBracket,
                    TagName: tags$1.tagName,
                    "MismatchedCloseTag/TagName": [tags$1.tagName, tags$1.invalid],
                    AttributeName: tags$1.propertyName,
                    UnquotedAttributeValue: tags$1.string,
                    Is: tags$1.definitionOperator,
                    "EntityReference CharacterReference": tags$1.character,
                    Comment: tags$1.blockComment,
                    ProcessingInst: tags$1.processingInstruction,
                    DoctypeDecl: tags$1.documentMeta
                })
            ],
            wrap: /*@__PURE__*/configureNesting([
                { tag: "script",
                    attrs(attrs) {
                        return !attrs.type || /^(?:text|application)\/(?:x-)?(?:java|ecma)script$|^module$|^$/i.test(attrs.type);
                    },
                    parser: javascriptLanguage.parser },
                { tag: "style",
                    attrs(attrs) {
                        return (!attrs.lang || attrs.lang == "css") && (!attrs.type || /^(text\/)?(x-)?(stylesheet|css)$/i.test(attrs.type));
                    },
                    parser: cssLanguage.parser }
            ])
        }),
        languageData: {
            commentTokens: { block: { open: "<!--", close: "-->" } },
            indentOnInput: /^\s*<\/\w+\W$/
        }
    });
    /**
    HTML tag completion. Opens and closes tags and attributes in a
    context-aware way.
    */
    const htmlCompletion = /*@__PURE__*/htmlLanguage.data.of({ autocomplete: completeHTML });
    /**
    Language support for HTML, including
    [`htmlCompletion`](https://codemirror.net/6/docs/ref/#lang-html.htmlCompletion) and JavaScript and
    CSS support extensions.
    */
    function html(config = {}) {
        let lang = htmlLanguage;
        if (config.matchClosingTags === false)
            lang = lang.configure({ dialect: "noMatch" });
        return new LanguageSupport(lang, [htmlCompletion, javascript$2().support, css$2().support]);
    }

    var index$9 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        html: html,
        htmlCompletion: htmlCompletion,
        htmlLanguage: htmlLanguage
    });

    const data = /*@__PURE__*/defineLanguageFacet({ block: { open: "<!--", close: "-->" } });
    const commonmark = /*@__PURE__*/parser$a.configure({
        props: [
            /*@__PURE__*/styleTags({
                "Blockquote/...": tags$1.quote,
                HorizontalRule: tags$1.contentSeparator,
                "ATXHeading1/... SetextHeading1/...": tags$1.heading1,
                "ATXHeading2/... SetextHeading2/...": tags$1.heading2,
                "ATXHeading3/...": tags$1.heading3,
                "ATXHeading4/...": tags$1.heading4,
                "ATXHeading5/...": tags$1.heading5,
                "ATXHeading6/...": tags$1.heading6,
                "Comment CommentBlock": tags$1.comment,
                Escape: tags$1.escape,
                Entity: tags$1.character,
                "Emphasis/...": tags$1.emphasis,
                "StrongEmphasis/...": tags$1.strong,
                "Link/... Image/...": tags$1.link,
                "OrderedList/... BulletList/...": tags$1.list,
                "BlockQuote/...": tags$1.quote,
                "InlineCode/... CodeBlock FencedCode": tags$1.monospace,
                URL: tags$1.url,
                "HeaderMark HardBreak QuoteMark ListMark LinkMark EmphasisMark CodeMark": tags$1.processingInstruction,
                "CodeInfo LinkLabel": tags$1.labelName,
                LinkTitle: tags$1.string,
                Paragraph: tags$1.content
            }),
            /*@__PURE__*/foldNodeProp.add(type => {
                if (!type.is("Block") || type.is("Document"))
                    return undefined;
                return (tree, state) => ({ from: state.doc.lineAt(tree.from).to, to: tree.to });
            }),
            /*@__PURE__*/indentNodeProp.add({
                Document: () => null
            }),
            /*@__PURE__*/languageDataProp.add({
                Document: data
            })
        ]
    });
    function mkLang(parser) {
        return new Language(data, parser, parser.nodeSet.types.find(t => t.name == "Document"));
    }
    /**
    Language support for strict CommonMark.
    */
    const commonmarkLanguage = /*@__PURE__*/mkLang(commonmark);
    const extended = /*@__PURE__*/commonmark.configure([GFM, Subscript, Superscript, Emoji, {
            props: [
                /*@__PURE__*/styleTags({
                    "TableDelimiter SubscriptMark SuperscriptMark StrikethroughMark": tags$1.processingInstruction,
                    "TableHeader/...": tags$1.heading,
                    "Strikethrough/...": tags$1.strikethrough,
                    TaskMarker: tags$1.atom,
                    Task: tags$1.list,
                    Emoji: tags$1.character,
                    "Subscript Superscript": /*@__PURE__*/tags$1.special(tags$1.content),
                    TableCell: tags$1.content
                })
            ]
        }]);
    /**
    Language support for [GFM](https://github.github.com/gfm/) plus
    subscript, superscript, and emoji syntax.
    */
    const markdownLanguage = /*@__PURE__*/mkLang(extended);
    function getCodeParser(languages, defaultLanguage) {
        return (info) => {
            let found = info && LanguageDescription.matchLanguageName(languages, info, true);
            if (!found)
                return defaultLanguage ? defaultLanguage.parser : null;
            if (found.support)
                return found.support.language.parser;
            return ParseContext.getSkippingParser(found.load());
        };
    }

    function nodeStart(node, doc) {
        return doc.sliceString(node.from, node.from + 50);
    }
    class Context$c {
        constructor(node, from, to, spaceBefore, spaceAfter, type, item) {
            this.node = node;
            this.from = from;
            this.to = to;
            this.spaceBefore = spaceBefore;
            this.spaceAfter = spaceAfter;
            this.type = type;
            this.item = item;
        }
        blank(trailing = true) {
            let result = this.spaceBefore;
            if (this.node.name == "Blockquote")
                result += ">";
            else
                for (let i = this.to - this.from - result.length - this.spaceAfter.length; i > 0; i--)
                    result += " ";
            return result + (trailing ? this.spaceAfter : "");
        }
        marker(doc, add) {
            let number = this.node.name == "OrderedList" ? String((+itemNumber(this.item, doc)[2] + add)) : "";
            return this.spaceBefore + number + this.type + this.spaceAfter;
        }
    }
    function getContext(node, line, doc) {
        let nodes = [];
        for (let cur = node; cur && cur.name != "Document"; cur = cur.parent) {
            if (cur.name == "ListItem" || cur.name == "Blockquote")
                nodes.push(cur);
        }
        let context = [], pos = 0;
        for (let i = nodes.length - 1; i >= 0; i--) {
            let node = nodes[i], match, start = pos;
            if (node.name == "Blockquote" && (match = /^\s*>( ?)/.exec(line.slice(pos)))) {
                pos += match[0].length;
                context.push(new Context$c(node, start, pos, "", match[1], ">", null));
            }
            else if (node.name == "ListItem" && node.parent.name == "OrderedList" &&
                (match = /^(\s*)\d+([.)])(\s*)/.exec(nodeStart(node, doc)))) {
                let after = match[3], len = match[0].length;
                if (after.length >= 4) {
                    after = after.slice(0, after.length - 4);
                    len -= 4;
                }
                pos += len;
                context.push(new Context$c(node.parent, start, pos, match[1], after, match[2], node));
            }
            else if (node.name == "ListItem" && node.parent.name == "BulletList" &&
                (match = /^(\s*)([-+*])(\s+)/.exec(nodeStart(node, doc)))) {
                let after = match[3], len = match[0].length;
                if (after.length > 4) {
                    after = after.slice(0, after.length - 4);
                    len -= 4;
                }
                pos += len;
                context.push(new Context$c(node.parent, start, pos, match[1], after, match[2], node));
            }
        }
        return context;
    }
    function itemNumber(item, doc) {
        return /^(\s*)(\d+)(?=[.)])/.exec(doc.sliceString(item.from, item.from + 10));
    }
    function renumberList(after, doc, changes) {
        for (let prev = -1, node = after;;) {
            if (node.name == "ListItem") {
                let m = itemNumber(node, doc);
                let number = +m[2];
                if (prev >= 0) {
                    if (number != prev + 1)
                        return;
                    changes.push({ from: node.from + m[1].length, to: node.from + m[0].length, insert: String(prev + 2) });
                }
                prev = number;
            }
            let next = node.nextSibling;
            if (!next)
                break;
            node = next;
        }
    }
    /**
    This command, when invoked in Markdown context with cursor
    selection(s), will create a new line with the markup for
    blockquotes and lists that were active on the old line. If the
    cursor was directly after the end of the markup for the old line,
    trailing whitespace and list markers are removed from that line.

    The command does nothing in non-Markdown context, so it should
    not be used as the only binding for Enter (even in a Markdown
    document, HTML and code regions might use a different language).
    */
    const insertNewlineContinueMarkup = ({ state, dispatch }) => {
        let tree = syntaxTree(state), { doc } = state;
        let dont = null, changes = state.changeByRange(range => {
            if (!range.empty || !markdownLanguage.isActiveAt(state, range.from))
                return dont = { range };
            let pos = range.from, line = doc.lineAt(pos);
            let context = getContext(tree.resolveInner(pos, -1), line.text, doc);
            while (context.length && context[context.length - 1].from > pos - line.from)
                context.pop();
            if (!context.length)
                return dont = { range };
            let inner = context[context.length - 1];
            if (inner.to - inner.spaceAfter.length > pos - line.from)
                return dont = { range };
            // Empty line in list
            if (inner.item && pos >= (inner.to - inner.spaceAfter.length) && !/\S/.test(line.text.slice(inner.to, pos - line.from))) {
                // First list item or blank line before: delete a level of markup
                if (inner.node.firstChild.to >= pos ||
                    line.from > 0 && !/[^\s>]/.test(doc.lineAt(line.from - 1).text)) {
                    let next = context.length > 1 ? context[context.length - 2] : null;
                    let delTo, insert = "";
                    if (next && next.item) { // Re-add marker for the list at the next level
                        delTo = line.from + next.from;
                        insert = next.marker(doc, 1);
                    }
                    else {
                        delTo = line.from + (next ? next.to : 0);
                    }
                    let changes = [{ from: delTo, to: pos, insert }];
                    if (inner.node.name == "OrderedList")
                        renumberList(inner.item, doc, changes);
                    if (next && next.node.name == "OrderedList")
                        renumberList(next.item, doc, changes);
                    // FIXME renumber
                    return { range: EditorSelection.cursor(delTo + insert.length), changes };
                }
                else { // Move this line down
                    let insert = "";
                    for (let i = 0, e = context.length - 2; i <= e; i++)
                        insert += context[i].blank(i < e);
                    insert += state.lineBreak;
                    return { range: EditorSelection.cursor(pos + insert.length), changes: { from: line.from, insert } };
                }
            }
            let changes = [];
            if (inner.node.name == "OrderedList")
                renumberList(inner.item, doc, changes);
            let insert = state.lineBreak;
            let continued = inner.item && inner.item.from < line.from;
            // If not dedented
            if (!continued || /^[\s\d.)\-+*>]*/.exec(line.text)[0].length >= inner.to) {
                for (let i = 0, e = context.length - 1; i <= e; i++)
                    insert += i == e && !continued ? context[i].marker(doc, 1) : context[i].blank();
            }
            let from = pos;
            while (from > line.from && /\s/.test(line.text.charAt(from - line.from - 1)))
                from--;
            changes.push({ from, to: pos, insert });
            return { range: EditorSelection.cursor(from + insert.length), changes };
        });
        if (dont)
            return false;
        dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
        return true;
    };
    function isMark(node) {
        return node.name == "QuoteMark" || node.name == "ListMark";
    }
    function contextNodeForDelete(tree, pos) {
        let node = tree.resolveInner(pos, -1), scan = pos;
        if (isMark(node)) {
            scan = node.from;
            node = node.parent;
        }
        for (let prev; prev = node.childBefore(scan);) {
            if (isMark(prev)) {
                scan = prev.from;
            }
            else if (prev.name == "OrderedList" || prev.name == "BulletList") {
                node = prev.lastChild;
                scan = node.to;
            }
            else {
                break;
            }
        }
        return node;
    }
    /**
    This command will, when invoked in a Markdown context with the
    cursor directly after list or blockquote markup, delete one level
    of markup. When the markup is for a list, it will be replaced by
    spaces on the first invocation (a further invocation will delete
    the spaces), to make it easy to continue a list.

    When not after Markdown block markup, this command will return
    false, so it is intended to be bound alongside other deletion
    commands, with a higher precedence than the more generic commands.
    */
    const deleteMarkupBackward = ({ state, dispatch }) => {
        let tree = syntaxTree(state);
        let dont = null, changes = state.changeByRange(range => {
            let pos = range.from, { doc } = state;
            if (range.empty && markdownLanguage.isActiveAt(state, range.from)) {
                let line = doc.lineAt(pos);
                let context = getContext(contextNodeForDelete(tree, pos), line.text, doc);
                if (context.length) {
                    let inner = context[context.length - 1];
                    let spaceEnd = inner.to - inner.spaceAfter.length + (inner.node.name == "OrderedList" ? 0 : 1);
                    // Delete extra trailing space after markup
                    if (pos - line.from > spaceEnd && !/\S/.test(line.text.slice(spaceEnd, pos - line.from)))
                        return { range: EditorSelection.cursor(line.from + spaceEnd),
                            changes: { from: line.from + spaceEnd, to: pos } };
                    if (pos - line.from == spaceEnd) {
                        let start = line.from + inner.from;
                        // Replace a list item marker with blank space
                        if (inner.item && inner.node.from < inner.item.from && /\S/.test(line.text.slice(inner.from, inner.to)))
                            return { range, changes: { from: start, to: line.from + inner.to, insert: inner.blank() } };
                        // Delete one level of indentation
                        if (start < pos)
                            return { range: EditorSelection.cursor(start), changes: { from: start, to: pos } };
                    }
                }
            }
            return dont = { range };
        });
        if (dont)
            return false;
        dispatch(state.update(changes, { scrollIntoView: true, userEvent: "delete" }));
        return true;
    };

    /**
    A small keymap with Markdown-specific bindings. Binds Enter to
    [`insertNewlineContinueMarkup`](https://codemirror.net/6/docs/ref/#lang-markdown.insertNewlineContinueMarkup)
    and Backspace to
    [`deleteMarkupBackward`](https://codemirror.net/6/docs/ref/#lang-markdown.deleteMarkupBackward).
    */
    const markdownKeymap = [
        { key: "Enter", run: insertNewlineContinueMarkup },
        { key: "Backspace", run: deleteMarkupBackward }
    ];
    const htmlNoMatch = /*@__PURE__*/html({ matchClosingTags: false });
    /**
    Markdown language support.
    */
    function markdown(config = {}) {
        let { codeLanguages, defaultCodeLanguage, addKeymap = true, base: { parser } = commonmarkLanguage } = config;
        if (!(parser instanceof MarkdownParser))
            throw new RangeError("Base parser provided to `markdown` should be a Markdown parser");
        let extensions = config.extensions ? [config.extensions] : [];
        let support = [htmlNoMatch.support], defaultCode;
        if (defaultCodeLanguage instanceof LanguageSupport) {
            support.push(defaultCodeLanguage.support);
            defaultCode = defaultCodeLanguage.language;
        }
        else if (defaultCodeLanguage) {
            defaultCode = defaultCodeLanguage;
        }
        let codeParser = codeLanguages || defaultCode ? getCodeParser(codeLanguages || [], defaultCode) : undefined;
        extensions.push(parseCode({ codeParser, htmlParser: htmlNoMatch.language.parser }));
        if (addKeymap)
            support.push(Prec.extend(keymap.of(markdownKeymap)));
        return new LanguageSupport(mkLang(parser.configure(extensions)), support);
    }

    var index$8 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        commonmarkLanguage: commonmarkLanguage,
        deleteMarkupBackward: deleteMarkupBackward,
        insertNewlineContinueMarkup: insertNewlineContinueMarkup,
        markdown: markdown,
        markdownKeymap: markdownKeymap,
        markdownLanguage: markdownLanguage
    });

    function legacy(parser) {
        return Promise.resolve().then(function () { return index$7; }).then(m => new LanguageSupport(m.StreamLanguage.define(parser)));
    }
    function sql$3(dialectName) {
        return Promise.resolve().then(function () { return index$6; }).then(m => m.sql({ dialect: m[dialectName] }));
    }
    /**
    An array of language descriptions for known language packages.
    */
    const languages = [
        // New-style language modes
        /*@__PURE__*/LanguageDescription.of({
            name: "C",
            extensions: ["c", "h", "ino"],
            load() {
                return Promise.resolve().then(function () { return index$5; }).then(m => m.cpp());
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "C++",
            alias: ["cpp"],
            extensions: ["cpp", "c++", "cc", "cxx", "hpp", "h++", "hh", "hxx"],
            load() {
                return Promise.resolve().then(function () { return index$5; }).then(m => m.cpp());
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "CQL",
            alias: ["cassandra"],
            extensions: ["cql"],
            load() { return sql$3("Cassandra"); }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "CSS",
            extensions: ["css"],
            load() {
                return Promise.resolve().then(function () { return index$b; }).then(m => m.css());
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "HTML",
            alias: ["xhtml"],
            extensions: ["html", "htm", "handlebars", "hbs"],
            load() {
                return Promise.resolve().then(function () { return index$9; }).then(m => m.html());
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Java",
            extensions: ["java"],
            load() {
                return Promise.resolve().then(function () { return index$4; }).then(m => m.java());
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "JavaScript",
            alias: ["ecmascript", "js", "node"],
            extensions: ["js", "mjs", "cjs"],
            load() {
                return Promise.resolve().then(function () { return index$a; }).then(m => m.javascript());
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "JSON",
            alias: ["json5"],
            extensions: ["json", "map"],
            load() {
                return Promise.resolve().then(function () { return index$3; }).then(m => m.json());
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "JSX",
            extensions: ["jsx"],
            load() {
                return Promise.resolve().then(function () { return index$a; }).then(m => m.javascript({ jsx: true }));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "MariaDB SQL",
            load() { return sql$3("MariaSQL"); }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Markdown",
            extensions: ["md", "markdown", "mkd"],
            load() {
                return Promise.resolve().then(function () { return index$8; }).then(m => m.markdown());
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "MS SQL",
            load() { return sql$3("MSSQL"); }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "MySQL",
            load() { return sql$3("MySQL"); }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "PLSQL",
            extensions: ["pls"],
            load() { return sql$3("PLSQL"); }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "PostgreSQL",
            load() { return sql$3("PostgreSQL"); }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Python",
            extensions: ["BUILD", "bzl", "py", "pyw"],
            filename: /^(BUCK|BUILD)$/,
            load() {
                return Promise.resolve().then(function () { return index$2; }).then(m => m.python());
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Rust",
            extensions: ["rs"],
            load() {
                return Promise.resolve().then(function () { return index$1; }).then(m => m.rust());
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "SQL",
            extensions: ["sql"],
            load() { return sql$3("StandardSQL"); }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "SQLite",
            load() { return sql$3("SQLite"); }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "TSX",
            extensions: ["tsx"],
            load() {
                return Promise.resolve().then(function () { return index$a; }).then(m => m.javascript({ jsx: true, typescript: true }));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "TypeScript",
            alias: ["ts"],
            extensions: ["ts"],
            load() {
                return Promise.resolve().then(function () { return index$a; }).then(m => m.javascript({ typescript: true }));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "XML",
            alias: ["rss", "wsdl", "xsd"],
            extensions: ["xml", "xsl", "xsd", "svg"],
            load() {
                return Promise.resolve().then(function () { return index; }).then(m => m.xml());
            }
        }),
        // Legacy modes ported from CodeMirror 5
        /*@__PURE__*/LanguageDescription.of({
            name: "APL",
            extensions: ["dyalog", "apl"],
            load() {
                return Promise.resolve().then(function () { return apl$1; }).then(m => legacy(m.apl));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "PGP",
            alias: ["asciiarmor"],
            extensions: ["asc", "pgp", "sig"],
            load() {
                return Promise.resolve().then(function () { return asciiarmor; }).then(m => legacy(m.asciiArmor));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "ASN.1",
            extensions: ["asn", "asn1"],
            load() {
                return Promise.resolve().then(function () { return asn1$1; }).then(m => legacy(m.asn1({})));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Asterisk",
            filename: /^extensions\.conf$/i,
            load() {
                return Promise.resolve().then(function () { return asterisk$1; }).then(m => legacy(m.asterisk));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Brainfuck",
            extensions: ["b", "bf"],
            load() {
                return Promise.resolve().then(function () { return brainfuck$1; }).then(m => legacy(m.brainfuck));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Cobol",
            extensions: ["cob", "cpy"],
            load() {
                return Promise.resolve().then(function () { return cobol$1; }).then(m => legacy(m.cobol));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "C#",
            alias: ["csharp", "cs"],
            extensions: ["cs"],
            load() {
                return Promise.resolve().then(function () { return clike$1; }).then(m => legacy(m.csharp));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Clojure",
            extensions: ["clj", "cljc", "cljx"],
            load() {
                return Promise.resolve().then(function () { return clojure$1; }).then(m => legacy(m.clojure));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "ClojureScript",
            extensions: ["cljs"],
            load() {
                return Promise.resolve().then(function () { return clojure$1; }).then(m => legacy(m.clojure));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Closure Stylesheets (GSS)",
            extensions: ["gss"],
            load() {
                return Promise.resolve().then(function () { return css$1; }).then(m => legacy(m.gss));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "CMake",
            extensions: ["cmake", "cmake.in"],
            filename: /^CMakeLists\.txt$/,
            load() {
                return Promise.resolve().then(function () { return cmake$1; }).then(m => legacy(m.cmake));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "CoffeeScript",
            alias: ["coffee", "coffee-script"],
            extensions: ["coffee"],
            load() {
                return Promise.resolve().then(function () { return coffeescript; }).then(m => legacy(m.coffeeScript));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Common Lisp",
            alias: ["lisp"],
            extensions: ["cl", "lisp", "el"],
            load() {
                return Promise.resolve().then(function () { return commonlisp; }).then(m => legacy(m.commonLisp));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Cypher",
            extensions: ["cyp", "cypher"],
            load() {
                return Promise.resolve().then(function () { return cypher$1; }).then(m => legacy(m.cypher));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Cython",
            extensions: ["pyx", "pxd", "pxi"],
            load() {
                return Promise.resolve().then(function () { return python$1; }).then(m => legacy(m.cython));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Crystal",
            extensions: ["cr"],
            load() {
                return Promise.resolve().then(function () { return crystal$1; }).then(m => legacy(m.crystal));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "D",
            extensions: ["d"],
            load() {
                return Promise.resolve().then(function () { return d$2; }).then(m => legacy(m.d));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Dart",
            extensions: ["dart"],
            load() {
                return Promise.resolve().then(function () { return clike$1; }).then(m => legacy(m.dart));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "diff",
            extensions: ["diff", "patch"],
            load() {
                return Promise.resolve().then(function () { return diff$1; }).then(m => legacy(m.diff));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Dockerfile",
            filename: /^Dockerfile$/,
            load() {
                return Promise.resolve().then(function () { return dockerfile; }).then(m => legacy(m.dockerFile));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "DTD",
            extensions: ["dtd"],
            load() {
                return Promise.resolve().then(function () { return dtd$1; }).then(m => legacy(m.dtd));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Dylan",
            extensions: ["dylan", "dyl", "intr"],
            load() {
                return Promise.resolve().then(function () { return dylan$1; }).then(m => legacy(m.dylan));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "EBNF",
            load() {
                return Promise.resolve().then(function () { return ebnf$1; }).then(m => legacy(m.ebnf));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "ECL",
            extensions: ["ecl"],
            load() {
                return Promise.resolve().then(function () { return ecl$1; }).then(m => legacy(m.ecl));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "edn",
            extensions: ["edn"],
            load() {
                return Promise.resolve().then(function () { return clojure$1; }).then(m => legacy(m.clojure));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Eiffel",
            extensions: ["e"],
            load() {
                return Promise.resolve().then(function () { return eiffel$1; }).then(m => legacy(m.eiffel));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Elm",
            extensions: ["elm"],
            load() {
                return Promise.resolve().then(function () { return elm$1; }).then(m => legacy(m.elm));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Erlang",
            extensions: ["erl"],
            load() {
                return Promise.resolve().then(function () { return erlang$1; }).then(m => legacy(m.erlang));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Esper",
            load() {
                return Promise.resolve().then(function () { return sql$1; }).then(m => legacy(m.esper));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Factor",
            extensions: ["factor"],
            load() {
                return Promise.resolve().then(function () { return factor$1; }).then(m => legacy(m.factor));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "FCL",
            load() {
                return Promise.resolve().then(function () { return fcl$1; }).then(m => legacy(m.fcl));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Forth",
            extensions: ["forth", "fth", "4th"],
            load() {
                return Promise.resolve().then(function () { return forth$1; }).then(m => legacy(m.forth));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Fortran",
            extensions: ["f", "for", "f77", "f90", "f95"],
            load() {
                return Promise.resolve().then(function () { return fortran$1; }).then(m => legacy(m.fortran));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "F#",
            alias: ["fsharp"],
            extensions: ["fs"],
            load() {
                return Promise.resolve().then(function () { return mllike; }).then(m => legacy(m.fSharp));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Gas",
            extensions: ["s"],
            load() {
                return Promise.resolve().then(function () { return gas$1; }).then(m => legacy(m.gas));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Gherkin",
            extensions: ["feature"],
            load() {
                return Promise.resolve().then(function () { return gherkin$1; }).then(m => legacy(m.gherkin));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Go",
            extensions: ["go"],
            load() {
                return Promise.resolve().then(function () { return go$1; }).then(m => legacy(m.go));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Groovy",
            extensions: ["groovy", "gradle"],
            filename: /^Jenkinsfile$/,
            load() {
                return Promise.resolve().then(function () { return groovy$1; }).then(m => legacy(m.groovy));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Haskell",
            extensions: ["hs"],
            load() {
                return Promise.resolve().then(function () { return haskell$1; }).then(m => legacy(m.haskell));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Haxe",
            extensions: ["hx"],
            load() {
                return Promise.resolve().then(function () { return haxe$1; }).then(m => legacy(m.haxe));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "HXML",
            extensions: ["hxml"],
            load() {
                return Promise.resolve().then(function () { return haxe$1; }).then(m => legacy(m.hxml));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "HTTP",
            load() {
                return Promise.resolve().then(function () { return http$1; }).then(m => legacy(m.http));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "IDL",
            extensions: ["pro"],
            load() {
                return Promise.resolve().then(function () { return idl$1; }).then(m => legacy(m.idl));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "JSON-LD",
            alias: ["jsonld"],
            extensions: ["jsonld"],
            load() {
                return Promise.resolve().then(function () { return javascript$1; }).then(m => legacy(m.jsonld));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Jinja2",
            extensions: ["j2", "jinja", "jinja2"],
            load() {
                return Promise.resolve().then(function () { return jinja2$1; }).then(m => legacy(m.jinja2));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Julia",
            extensions: ["jl"],
            load() {
                return Promise.resolve().then(function () { return julia$1; }).then(m => legacy(m.julia));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Kotlin",
            extensions: ["kt"],
            load() {
                return Promise.resolve().then(function () { return clike$1; }).then(m => legacy(m.kotlin));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "LESS",
            extensions: ["less"],
            load() {
                return Promise.resolve().then(function () { return css$1; }).then(m => legacy(m.less));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "LiveScript",
            alias: ["ls"],
            extensions: ["ls"],
            load() {
                return Promise.resolve().then(function () { return livescript; }).then(m => legacy(m.liveScript));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Lua",
            extensions: ["lua"],
            load() {
                return Promise.resolve().then(function () { return lua$1; }).then(m => legacy(m.lua));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "mIRC",
            load() {
                return Promise.resolve().then(function () { return mirc$1; }).then(m => legacy(m.mirc));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Mathematica",
            extensions: ["m", "nb", "wl", "wls"],
            load() {
                return Promise.resolve().then(function () { return mathematica$1; }).then(m => legacy(m.mathematica));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Modelica",
            extensions: ["mo"],
            load() {
                return Promise.resolve().then(function () { return modelica$1; }).then(m => legacy(m.modelica));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "MUMPS",
            extensions: ["mps"],
            load() {
                return Promise.resolve().then(function () { return mumps$1; }).then(m => legacy(m.mumps));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "mbox",
            extensions: ["mbox"],
            load() {
                return Promise.resolve().then(function () { return mbox$1; }).then(m => legacy(m.mbox));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Nginx",
            filename: /nginx.*\.conf$/i,
            load() {
                return Promise.resolve().then(function () { return nginx$1; }).then(m => legacy(m.nginx));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "NSIS",
            extensions: ["nsh", "nsi"],
            load() {
                return Promise.resolve().then(function () { return nsis$1; }).then(m => legacy(m.nsis));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "NTriples",
            extensions: ["nt", "nq"],
            load() {
                return Promise.resolve().then(function () { return ntriples$1; }).then(m => legacy(m.ntriples));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Objective-C",
            alias: ["objective-c", "objc"],
            extensions: ["m"],
            load() {
                return Promise.resolve().then(function () { return clike$1; }).then(m => legacy(m.objectiveC));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Objective-C++",
            alias: ["objective-c++", "objc++"],
            extensions: ["mm"],
            load() {
                return Promise.resolve().then(function () { return clike$1; }).then(m => legacy(m.objectiveCpp));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "OCaml",
            extensions: ["ml", "mli", "mll", "mly"],
            load() {
                return Promise.resolve().then(function () { return mllike; }).then(m => legacy(m.oCaml));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Octave",
            extensions: ["m"],
            load() {
                return Promise.resolve().then(function () { return octave$1; }).then(m => legacy(m.octave));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Oz",
            extensions: ["oz"],
            load() {
                return Promise.resolve().then(function () { return oz$1; }).then(m => legacy(m.oz));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Pascal",
            extensions: ["p", "pas"],
            load() {
                return Promise.resolve().then(function () { return pascal$1; }).then(m => legacy(m.pascal));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Perl",
            extensions: ["pl", "pm"],
            load() {
                return Promise.resolve().then(function () { return perl$1; }).then(m => legacy(m.perl));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Pig",
            extensions: ["pig"],
            load() {
                return Promise.resolve().then(function () { return pig$1; }).then(m => legacy(m.pig));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "PowerShell",
            extensions: ["ps1", "psd1", "psm1"],
            load() {
                return Promise.resolve().then(function () { return powershell; }).then(m => legacy(m.powerShell));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Properties files",
            alias: ["ini", "properties"],
            extensions: ["properties", "ini", "in"],
            load() {
                return Promise.resolve().then(function () { return properties$1; }).then(m => legacy(m.properties));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "ProtoBuf",
            extensions: ["proto"],
            load() {
                return Promise.resolve().then(function () { return protobuf$1; }).then(m => legacy(m.protobuf));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Puppet",
            extensions: ["pp"],
            load() {
                return Promise.resolve().then(function () { return puppet$1; }).then(m => legacy(m.puppet));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Q",
            extensions: ["q"],
            load() {
                return Promise.resolve().then(function () { return q$1; }).then(m => legacy(m.q));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "R",
            alias: ["rscript"],
            extensions: ["r", "R"],
            load() {
                return Promise.resolve().then(function () { return r$1; }).then(m => legacy(m.r));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "RPM Changes",
            load() {
                return Promise.resolve().then(function () { return rpm; }).then(m => legacy(m.rpmChanges));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "RPM Spec",
            extensions: ["spec"],
            load() {
                return Promise.resolve().then(function () { return rpm; }).then(m => legacy(m.rpmSpec));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Ruby",
            alias: ["jruby", "macruby", "rake", "rb", "rbx"],
            extensions: ["rb"],
            load() {
                return Promise.resolve().then(function () { return ruby$1; }).then(m => legacy(m.ruby));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "SAS",
            extensions: ["sas"],
            load() {
                return Promise.resolve().then(function () { return sas$1; }).then(m => legacy(m.sas));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Scala",
            extensions: ["scala"],
            load() {
                return Promise.resolve().then(function () { return clike$1; }).then(m => legacy(m.scala));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Scheme",
            extensions: ["scm", "ss"],
            load() {
                return Promise.resolve().then(function () { return scheme$1; }).then(m => legacy(m.scheme));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "SCSS",
            extensions: ["scss"],
            load() {
                return Promise.resolve().then(function () { return css$1; }).then(m => legacy(m.sCSS));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Shell",
            alias: ["bash", "sh", "zsh"],
            extensions: ["sh", "ksh", "bash"],
            filename: /^PKGBUILD$/,
            load() {
                return Promise.resolve().then(function () { return shell$1; }).then(m => legacy(m.shell));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Sieve",
            extensions: ["siv", "sieve"],
            load() {
                return Promise.resolve().then(function () { return sieve$1; }).then(m => legacy(m.sieve));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Smalltalk",
            extensions: ["st"],
            load() {
                return Promise.resolve().then(function () { return smalltalk$1; }).then(m => legacy(m.smalltalk));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Solr",
            load() {
                return Promise.resolve().then(function () { return solr$1; }).then(m => legacy(m.solr));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "SML",
            extensions: ["sml", "sig", "fun", "smackspec"],
            load() {
                return Promise.resolve().then(function () { return mllike; }).then(m => legacy(m.sml));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "SPARQL",
            alias: ["sparul"],
            extensions: ["rq", "sparql"],
            load() {
                return Promise.resolve().then(function () { return sparql$1; }).then(m => legacy(m.sparql));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Spreadsheet",
            alias: ["excel", "formula"],
            load() {
                return Promise.resolve().then(function () { return spreadsheet$1; }).then(m => legacy(m.spreadsheet));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "SQL",
            extensions: ["sql"],
            load() {
                return Promise.resolve().then(function () { return sql$1; }).then(m => legacy(m.standardSQL));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "SQLite",
            load() {
                return Promise.resolve().then(function () { return sql$1; }).then(m => legacy(m.sqlite));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Squirrel",
            extensions: ["nut"],
            load() {
                return Promise.resolve().then(function () { return clike$1; }).then(m => legacy(m.squirrel));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Stylus",
            extensions: ["styl"],
            load() {
                return Promise.resolve().then(function () { return stylus$1; }).then(m => legacy(m.stylus));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Swift",
            extensions: ["swift"],
            load() {
                return Promise.resolve().then(function () { return swift$1; }).then(m => legacy(m.swift));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "sTeX",
            load() {
                return Promise.resolve().then(function () { return stex$1; }).then(m => legacy(m.stex));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "LaTeX",
            alias: ["tex"],
            extensions: ["text", "ltx", "tex"],
            load() {
                return Promise.resolve().then(function () { return stex$1; }).then(m => legacy(m.stex));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "SystemVerilog",
            extensions: ["v", "sv", "svh"],
            load() {
                return Promise.resolve().then(function () { return verilog$1; }).then(m => legacy(m.verilog));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Tcl",
            extensions: ["tcl"],
            load() {
                return Promise.resolve().then(function () { return tcl$1; }).then(m => legacy(m.tcl));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Textile",
            extensions: ["textile"],
            load() {
                return Promise.resolve().then(function () { return textile$1; }).then(m => legacy(m.textile));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "TiddlyWiki",
            load() {
                return Promise.resolve().then(function () { return tiddlywiki; }).then(m => legacy(m.tiddlyWiki));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Tiki wiki",
            load() {
                return Promise.resolve().then(function () { return tiki$1; }).then(m => legacy(m.tiki));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "TOML",
            extensions: ["toml"],
            load() {
                return Promise.resolve().then(function () { return toml$1; }).then(m => legacy(m.toml));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "troff",
            extensions: ["1", "2", "3", "4", "5", "6", "7", "8", "9"],
            load() {
                return Promise.resolve().then(function () { return troff$1; }).then(m => legacy(m.troff));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "TTCN",
            extensions: ["ttcn", "ttcn3", "ttcnpp"],
            load() {
                return Promise.resolve().then(function () { return ttcn$1; }).then(m => legacy(m.ttcn));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "TTCN_CFG",
            extensions: ["cfg"],
            load() {
                return Promise.resolve().then(function () { return ttcnCfg$1; }).then(m => legacy(m.ttcnCfg));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Turtle",
            extensions: ["ttl"],
            load() {
                return Promise.resolve().then(function () { return turtle$1; }).then(m => legacy(m.turtle));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Web IDL",
            extensions: ["webidl"],
            load() {
                return Promise.resolve().then(function () { return webidl; }).then(m => legacy(m.webIDL));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "VB.NET",
            extensions: ["vb"],
            load() {
                return Promise.resolve().then(function () { return vb$1; }).then(m => legacy(m.vb));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "VBScript",
            extensions: ["vbs"],
            load() {
                return Promise.resolve().then(function () { return vbscript; }).then(m => legacy(m.vbScript));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Velocity",
            extensions: ["vtl"],
            load() {
                return Promise.resolve().then(function () { return velocity$1; }).then(m => legacy(m.velocity));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Verilog",
            extensions: ["v"],
            load() {
                return Promise.resolve().then(function () { return verilog$1; }).then(m => legacy(m.verilog));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "VHDL",
            extensions: ["vhd", "vhdl"],
            load() {
                return Promise.resolve().then(function () { return vhdl$1; }).then(m => legacy(m.vhdl));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "XQuery",
            extensions: ["xy", "xquery"],
            load() {
                return Promise.resolve().then(function () { return xquery; }).then(m => legacy(m.xQuery));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Yacas",
            extensions: ["ys"],
            load() {
                return Promise.resolve().then(function () { return yacas$1; }).then(m => legacy(m.yacas));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "YAML",
            alias: ["yml"],
            extensions: ["yaml", "yml"],
            load() {
                return Promise.resolve().then(function () { return yaml$1; }).then(m => legacy(m.yaml));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "Z80",
            extensions: ["z80"],
            load() {
                return Promise.resolve().then(function () { return z80$1; }).then(m => legacy(m.z80));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "mscgen",
            extensions: ["mscgen", "mscin", "msc"],
            load() {
                return Promise.resolve().then(function () { return mscgen$1; }).then(m => legacy(m.mscgen));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "xu",
            extensions: ["xu"],
            load() {
                return Promise.resolve().then(function () { return mscgen$1; }).then(m => legacy(m.xu));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "msgenny",
            extensions: ["msgenny"],
            load() {
                return Promise.resolve().then(function () { return mscgen$1; }).then(m => legacy(m.msgenny));
            }
        }),
        /*@__PURE__*/LanguageDescription.of({
            name: "WebAssembly",
            extensions: ["wat", "wast"],
            load() {
                return Promise.resolve().then(function () { return wast$1; }).then(m => legacy(m.wast));
            }
        })
    ];

    const basicNormalize = typeof String.prototype.normalize == "function"
        ? x => x.normalize("NFKD") : x => x;
    /**
    A search cursor provides an iterator over text matches in a
    document.
    */
    class SearchCursor {
        /**
        Create a text cursor. The query is the search string, `from` to
        `to` provides the region to search.
        
        When `normalize` is given, it will be called, on both the query
        string and the content it is matched against, before comparing.
        You can, for example, create a case-insensitive search by
        passing `s => s.toLowerCase()`.
        
        Text is always normalized with
        [`.normalize("NFKD")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)
        (when supported).
        */
        constructor(text, query, from = 0, to = text.length, normalize) {
            /**
            The current match (only holds a meaningful value after
            [`next`](https://codemirror.net/6/docs/ref/#search.SearchCursor.next) has been called and when
            `done` is false).
            */
            this.value = { from: 0, to: 0 };
            /**
            Whether the end of the iterated region has been reached.
            */
            this.done = false;
            this.matches = [];
            this.buffer = "";
            this.bufferPos = 0;
            this.iter = text.iterRange(from, to);
            this.bufferStart = from;
            this.normalize = normalize ? x => normalize(basicNormalize(x)) : basicNormalize;
            this.query = this.normalize(query);
        }
        peek() {
            if (this.bufferPos == this.buffer.length) {
                this.bufferStart += this.buffer.length;
                this.iter.next();
                if (this.iter.done)
                    return -1;
                this.bufferPos = 0;
                this.buffer = this.iter.value;
            }
            return codePointAt(this.buffer, this.bufferPos);
        }
        /**
        Look for the next match. Updates the iterator's
        [`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and
        [`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called
        at least once before using the cursor.
        */
        next() {
            while (this.matches.length)
                this.matches.pop();
            return this.nextOverlapping();
        }
        /**
        The `next` method will ignore matches that partially overlap a
        previous match. This method behaves like `next`, but includes
        such matches.
        */
        nextOverlapping() {
            for (;;) {
                let next = this.peek();
                if (next < 0) {
                    this.done = true;
                    return this;
                }
                let str = fromCodePoint(next), start = this.bufferStart + this.bufferPos;
                this.bufferPos += codePointSize(next);
                let norm = this.normalize(str);
                for (let i = 0, pos = start;; i++) {
                    let code = norm.charCodeAt(i);
                    let match = this.match(code, pos);
                    if (match) {
                        this.value = match;
                        return this;
                    }
                    if (i == norm.length - 1)
                        break;
                    if (pos == start && i < str.length && str.charCodeAt(i) == code)
                        pos++;
                }
            }
        }
        match(code, pos) {
            let match = null;
            for (let i = 0; i < this.matches.length; i += 2) {
                let index = this.matches[i], keep = false;
                if (this.query.charCodeAt(index) == code) {
                    if (index == this.query.length - 1) {
                        match = { from: this.matches[i + 1], to: pos + 1 };
                    }
                    else {
                        this.matches[i]++;
                        keep = true;
                    }
                }
                if (!keep) {
                    this.matches.splice(i, 2);
                    i -= 2;
                }
            }
            if (this.query.charCodeAt(0) == code) {
                if (this.query.length == 1)
                    match = { from: pos, to: pos + 1 };
                else
                    this.matches.push(1, pos);
            }
            return match;
        }
    }

    const defaultHighlightOptions = {
        highlightWordAroundCursor: false,
        minSelectionLength: 1,
        maxMatches: 100
    };
    const highlightConfig = /*@__PURE__*/Facet.define({
        combine(options) {
            return combineConfig(options, defaultHighlightOptions, {
                highlightWordAroundCursor: (a, b) => a || b,
                minSelectionLength: Math.min,
                maxMatches: Math.min
            });
        }
    });
    /**
    This extension highlights text that matches the selection. It uses
    the `"cm-selectionMatch"` class for the highlighting. When
    `highlightWordAroundCursor` is enabled, the word at the cursor
    itself will be highlighted with `"cm-selectionMatch-main"`.
    */
    function highlightSelectionMatches(options) {
        let ext = [defaultTheme, matchHighlighter];
        if (options)
            ext.push(highlightConfig.of(options));
        return ext;
    }
    const matchDeco = /*@__PURE__*/Decoration.mark({ class: "cm-selectionMatch" });
    const mainMatchDeco = /*@__PURE__*/Decoration.mark({ class: "cm-selectionMatch cm-selectionMatch-main" });
    const matchHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {
        constructor(view) {
            this.decorations = this.getDeco(view);
        }
        update(update) {
            if (update.selectionSet || update.docChanged || update.viewportChanged)
                this.decorations = this.getDeco(update.view);
        }
        getDeco(view) {
            let conf = view.state.facet(highlightConfig);
            let { state } = view, sel = state.selection;
            if (sel.ranges.length > 1)
                return Decoration.none;
            let range = sel.main, query, check = null;
            if (range.empty) {
                if (!conf.highlightWordAroundCursor)
                    return Decoration.none;
                let word = state.wordAt(range.head);
                if (!word)
                    return Decoration.none;
                check = state.charCategorizer(range.head);
                query = state.sliceDoc(word.from, word.to);
            }
            else {
                let len = range.to - range.from;
                if (len < conf.minSelectionLength || len > 200)
                    return Decoration.none;
                query = state.sliceDoc(range.from, range.to).trim();
                if (!query)
                    return Decoration.none;
            }
            let deco = [];
            for (let part of view.visibleRanges) {
                let cursor = new SearchCursor(state.doc, query, part.from, part.to);
                while (!cursor.next().done) {
                    let { from, to } = cursor.value;
                    if (!check || ((from == 0 || check(state.sliceDoc(from - 1, from)) != CharCategory.Word) &&
                        (to == state.doc.length || check(state.sliceDoc(to, to + 1)) != CharCategory.Word))) {
                        if (check && from <= range.from && to >= range.to)
                            deco.push(mainMatchDeco.range(from, to));
                        else if (from >= range.to || to <= range.from)
                            deco.push(matchDeco.range(from, to));
                        if (deco.length > conf.maxMatches)
                            return Decoration.none;
                    }
                }
            }
            return Decoration.set(deco);
        }
    }, {
        decorations: v => v.decorations
    });
    const defaultTheme = /*@__PURE__*/EditorView.baseTheme({
        ".cm-selectionMatch": { backgroundColor: "#99ff7780" },
        ".cm-searchMatch .cm-selectionMatch": { backgroundColor: "transparent" }
    });

    /**
    A gutter marker represents a bit of information attached to a line
    in a specific gutter. Your own custom markers have to extend this
    class.
    */
    class GutterMarker extends RangeValue {
        /**
        @internal
        */
        compare(other) {
            return this == other || this.constructor == other.constructor && this.eq(other);
        }
        /**
        Compare this marker to another marker of the same type.
        */
        eq(other) { return false; }
    }
    GutterMarker.prototype.elementClass = "";
    GutterMarker.prototype.toDOM = undefined;
    GutterMarker.prototype.mapMode = MapMode.TrackBefore;
    GutterMarker.prototype.startSide = GutterMarker.prototype.endSide = -1;
    GutterMarker.prototype.point = true;
    /**
    Facet used to add a class to all gutter elements for a given line.
    Markers given to this facet should _only_ define an
    [`elementclass`](https://codemirror.net/6/docs/ref/#gutter.GutterMarker.elementClass), not a
    [`toDOM`](https://codemirror.net/6/docs/ref/#gutter.GutterMarker.toDOM) (or the marker will appear
    in all gutters for the line).
    */
    const gutterLineClass = /*@__PURE__*/Facet.define();
    const defaults$3 = {
        class: "",
        renderEmptyElements: false,
        elementStyle: "",
        markers: () => RangeSet.empty,
        lineMarker: () => null,
        initialSpacer: null,
        updateSpacer: null,
        domEventHandlers: {}
    };
    const activeGutters = /*@__PURE__*/Facet.define();
    /**
    Define an editor gutter. The order in which the gutters appear is
    determined by their extension priority.
    */
    function gutter(config) {
        return [gutters(), activeGutters.of(Object.assign(Object.assign({}, defaults$3), config))];
    }
    const baseTheme$1 = /*@__PURE__*/EditorView.baseTheme({
        ".cm-gutters": {
            display: "flex",
            height: "100%",
            boxSizing: "border-box",
            left: 0,
            zIndex: 200
        },
        "&light .cm-gutters": {
            backgroundColor: "#f5f5f5",
            color: "#999",
            borderRight: "1px solid #ddd"
        },
        "&dark .cm-gutters": {
            backgroundColor: "#333338",
            color: "#ccc"
        },
        ".cm-gutter": {
            display: "flex !important",
            flexDirection: "column",
            flexShrink: 0,
            boxSizing: "border-box",
            height: "100%",
            overflow: "hidden"
        },
        ".cm-gutterElement": {
            boxSizing: "border-box"
        },
        ".cm-lineNumbers .cm-gutterElement": {
            padding: "0 3px 0 5px",
            minWidth: "20px",
            textAlign: "right",
            whiteSpace: "nowrap"
        },
        "&light .cm-activeLineGutter": {
            backgroundColor: "#e2f2ff"
        },
        "&dark .cm-activeLineGutter": {
            backgroundColor: "#222227"
        }
    });
    const unfixGutters = /*@__PURE__*/Facet.define({
        combine: values => values.some(x => x)
    });
    /**
    The gutter-drawing plugin is automatically enabled when you add a
    gutter, but you can use this function to explicitly configure it.

    Unless `fixed` is explicitly set to `false`, the gutters are
    fixed, meaning they don't scroll along with the content
    horizontally (except on Internet Explorer, which doesn't support
    CSS [`position:
    sticky`](https://developer.mozilla.org/en-US/docs/Web/CSS/position#sticky)).
    */
    function gutters(config) {
        let result = [
            gutterView,
            baseTheme$1
        ];
        if (config && config.fixed === false)
            result.push(unfixGutters.of(true));
        return result;
    }
    const gutterView = /*@__PURE__*/ViewPlugin.fromClass(class {
        constructor(view) {
            this.view = view;
            this.dom = document.createElement("div");
            this.dom.className = "cm-gutters";
            this.dom.setAttribute("aria-hidden", "true");
            this.gutters = view.state.facet(activeGutters).map(conf => new SingleGutterView(view, conf));
            for (let gutter of this.gutters)
                this.dom.appendChild(gutter.dom);
            this.fixed = !view.state.facet(unfixGutters);
            if (this.fixed) {
                // FIXME IE11 fallback, which doesn't support position: sticky,
                // by using position: relative + event handlers that realign the
                // gutter (or just force fixed=false on IE11?)
                this.dom.style.position = "sticky";
            }
            view.scrollDOM.insertBefore(this.dom, view.contentDOM);
            this.syncGutters();
        }
        update(update) {
            if (this.updateGutters(update))
                this.syncGutters();
        }
        syncGutters() {
            let lineClasses = RangeSet.iter(this.view.state.facet(gutterLineClass), this.view.viewport.from);
            let classSet = [];
            let contexts = this.gutters.map(gutter => new UpdateContext(gutter, this.view.viewport));
            this.view.viewportLines(line => {
                let text;
                if (Array.isArray(line.type)) {
                    for (let b of line.type)
                        if (b.type == BlockType.Text) {
                            text = b;
                            break;
                        }
                }
                else {
                    text = line.type == BlockType.Text ? line : undefined;
                }
                if (!text)
                    return;
                if (classSet.length)
                    classSet = [];
                advanceCursor(lineClasses, classSet, line.from);
                for (let cx of contexts)
                    cx.line(this.view, text, classSet);
            }, 0);
            for (let cx of contexts)
                cx.finish();
            this.dom.style.minHeight = this.view.contentHeight + "px";
            if (this.view.state.facet(unfixGutters) != !this.fixed) {
                this.fixed = !this.fixed;
                this.dom.style.position = this.fixed ? "sticky" : "";
            }
        }
        updateGutters(update) {
            let prev = update.startState.facet(activeGutters), cur = update.state.facet(activeGutters);
            let change = update.docChanged || update.heightChanged || update.viewportChanged ||
                !RangeSet.eq(update.startState.facet(gutterLineClass), update.state.facet(gutterLineClass), update.view.viewport.from, update.view.viewport.to);
            if (prev == cur) {
                for (let gutter of this.gutters)
                    if (gutter.update(update))
                        change = true;
            }
            else {
                change = true;
                let gutters = [];
                for (let conf of cur) {
                    let known = prev.indexOf(conf);
                    if (known < 0) {
                        gutters.push(new SingleGutterView(this.view, conf));
                    }
                    else {
                        this.gutters[known].update(update);
                        gutters.push(this.gutters[known]);
                    }
                }
                for (let g of this.gutters)
                    g.dom.remove();
                for (let g of gutters)
                    this.dom.appendChild(g.dom);
                this.gutters = gutters;
            }
            return change;
        }
        destroy() {
            this.dom.remove();
        }
    }, {
        provide: /*@__PURE__*/PluginField.scrollMargins.from(value => {
            if (value.gutters.length == 0 || !value.fixed)
                return null;
            return value.view.textDirection == Direction.LTR ? { left: value.dom.offsetWidth } : { right: value.dom.offsetWidth };
        })
    });
    function asArray(val) { return (Array.isArray(val) ? val : [val]); }
    function advanceCursor(cursor, collect, pos) {
        while (cursor.value && cursor.from <= pos) {
            if (cursor.from == pos)
                collect.push(cursor.value);
            cursor.next();
        }
    }
    class UpdateContext {
        constructor(gutter, viewport) {
            this.gutter = gutter;
            this.localMarkers = [];
            this.i = 0;
            this.height = 0;
            this.cursor = RangeSet.iter(gutter.markers, viewport.from);
        }
        line(view, line, extraMarkers) {
            if (this.localMarkers.length)
                this.localMarkers = [];
            advanceCursor(this.cursor, this.localMarkers, line.from);
            let localMarkers = extraMarkers.length ? this.localMarkers.concat(extraMarkers) : this.localMarkers;
            let forLine = this.gutter.config.lineMarker(view, line, localMarkers);
            if (forLine)
                localMarkers.unshift(forLine);
            let gutter = this.gutter;
            if (localMarkers.length == 0 && !gutter.config.renderEmptyElements)
                return;
            let above = line.top - this.height;
            if (this.i == gutter.elements.length) {
                let newElt = new GutterElement(view, line.height, above, localMarkers);
                gutter.elements.push(newElt);
                gutter.dom.appendChild(newElt.dom);
            }
            else {
                let elt = gutter.elements[this.i];
                if (sameMarkers(localMarkers, elt.markers))
                    localMarkers = elt.markers;
                elt.update(view, line.height, above, localMarkers);
            }
            this.height = line.bottom;
            this.i++;
        }
        finish() {
            let gutter = this.gutter;
            while (gutter.elements.length > this.i)
                gutter.dom.removeChild(gutter.elements.pop().dom);
        }
    }
    class SingleGutterView {
        constructor(view, config) {
            this.view = view;
            this.config = config;
            this.elements = [];
            this.spacer = null;
            this.dom = document.createElement("div");
            this.dom.className = "cm-gutter" + (this.config.class ? " " + this.config.class : "");
            for (let prop in config.domEventHandlers) {
                this.dom.addEventListener(prop, (event) => {
                    let line = view.visualLineAtHeight(event.clientY, view.contentDOM.getBoundingClientRect().top);
                    if (config.domEventHandlers[prop](view, line, event))
                        event.preventDefault();
                });
            }
            this.markers = asArray(config.markers(view));
            if (config.initialSpacer) {
                this.spacer = new GutterElement(view, 0, 0, [config.initialSpacer(view)]);
                this.dom.appendChild(this.spacer.dom);
                this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none";
            }
        }
        update(update) {
            let prevMarkers = this.markers;
            this.markers = asArray(this.config.markers(update.view));
            if (this.spacer && this.config.updateSpacer) {
                let updated = this.config.updateSpacer(this.spacer.markers[0], update);
                if (updated != this.spacer.markers[0])
                    this.spacer.update(update.view, 0, 0, [updated]);
            }
            let vp = update.view.viewport;
            return !RangeSet.eq(this.markers, prevMarkers, vp.from, vp.to);
        }
    }
    class GutterElement {
        constructor(view, height, above, markers) {
            this.height = -1;
            this.above = 0;
            this.dom = document.createElement("div");
            this.update(view, height, above, markers);
        }
        update(view, height, above, markers) {
            if (this.height != height)
                this.dom.style.height = (this.height = height) + "px";
            if (this.above != above)
                this.dom.style.marginTop = (this.above = above) ? above + "px" : "";
            if (this.markers != markers) {
                this.markers = markers;
                for (let ch; ch = this.dom.lastChild;)
                    ch.remove();
                let cls = "cm-gutterElement";
                for (let m of markers) {
                    if (m.toDOM)
                        this.dom.appendChild(m.toDOM(view));
                    let c = m.elementClass;
                    if (c)
                        cls += " " + c;
                }
                this.dom.className = cls;
            }
        }
    }
    function sameMarkers(a, b) {
        if (a.length != b.length)
            return false;
        for (let i = 0; i < a.length; i++)
            if (!a[i].compare(b[i]))
                return false;
        return true;
    }
    /**
    Facet used to provide markers to the line number gutter.
    */
    const lineNumberMarkers = /*@__PURE__*/Facet.define();
    const lineNumberConfig = /*@__PURE__*/Facet.define({
        combine(values) {
            return combineConfig(values, { formatNumber: String, domEventHandlers: {} }, {
                domEventHandlers(a, b) {
                    let result = Object.assign({}, a);
                    for (let event in b) {
                        let exists = result[event], add = b[event];
                        result[event] = exists ? (view, line, event) => exists(view, line, event) || add(view, line, event) : add;
                    }
                    return result;
                }
            });
        }
    });
    class NumberMarker extends GutterMarker {
        constructor(number) {
            super();
            this.number = number;
        }
        eq(other) { return this.number == other.number; }
        toDOM(_view) { return document.createTextNode(this.number); }
    }
    function formatNumber(view, number) {
        return view.state.facet(lineNumberConfig).formatNumber(number, view.state);
    }
    const lineNumberGutter = /*@__PURE__*/activeGutters.compute([lineNumberConfig], state => ({
        class: "cm-lineNumbers",
        renderEmptyElements: false,
        markers(view) { return view.state.facet(lineNumberMarkers); },
        lineMarker(view, line, others) {
            if (others.some(m => m.toDOM))
                return null;
            return new NumberMarker(formatNumber(view, view.state.doc.lineAt(line.from).number));
        },
        initialSpacer(view) {
            return new NumberMarker(formatNumber(view, maxLineNumber(view.state.doc.lines)));
        },
        updateSpacer(spacer, update) {
            let max = formatNumber(update.view, maxLineNumber(update.view.state.doc.lines));
            return max == spacer.number ? spacer : new NumberMarker(max);
        },
        domEventHandlers: state.facet(lineNumberConfig).domEventHandlers
    }));
    /**
    Create a line number gutter extension.
    */
    function lineNumbers(config = {}) {
        return [
            lineNumberConfig.of(config),
            gutters(),
            lineNumberGutter
        ];
    }
    function maxLineNumber(lines) {
        let last = 9;
        while (last < lines)
            last = last * 10 + 9;
        return last;
    }
    const activeLineGutterMarker = /*@__PURE__*/new class extends GutterMarker {
        constructor() {
            super(...arguments);
            this.elementClass = "cm-activeLineGutter";
        }
    };
    const activeLineGutterHighlighter = /*@__PURE__*/gutterLineClass.compute(["selection"], state => {
        let marks = [], last = -1;
        for (let range of state.selection.ranges)
            if (range.empty) {
                let linePos = state.doc.lineAt(range.head).from;
                if (linePos > last) {
                    last = linePos;
                    marks.push(activeLineGutterMarker.range(linePos));
                }
            }
        return RangeSet.of(marks);
    });
    /**
    Returns an extension that adds a `cm-activeLineGutter` class to
    all gutter elements on the [active
    line](https://codemirror.net/6/docs/ref/#view.highlightActiveLine).
    */
    function highlightActiveLineGutter() {
        return activeLineGutterHighlighter;
    }

    function mapRange(range, mapping) {
        let from = mapping.mapPos(range.from, 1), to = mapping.mapPos(range.to, -1);
        return from >= to ? undefined : { from, to };
    }
    /**
    State effect that can be attached to a transaction to fold the
    given range. (You probably only need this in exceptional
    circumstances—usually you'll just want to let
    [`foldCode`](https://codemirror.net/6/docs/ref/#fold.foldCode) and the [fold
    gutter](https://codemirror.net/6/docs/ref/#fold.foldGutter) create the transactions.)
    */
    const foldEffect = /*@__PURE__*/StateEffect.define({ map: mapRange });
    /**
    State effect that unfolds the given range (if it was folded).
    */
    const unfoldEffect = /*@__PURE__*/StateEffect.define({ map: mapRange });
    function selectedLines(view) {
        let lines = [];
        for (let { head } of view.state.selection.ranges) {
            if (lines.some(l => l.from <= head && l.to >= head))
                continue;
            lines.push(view.visualLineAt(head));
        }
        return lines;
    }
    const foldState = /*@__PURE__*/StateField.define({
        create() {
            return Decoration.none;
        },
        update(folded, tr) {
            folded = folded.map(tr.changes);
            for (let e of tr.effects) {
                if (e.is(foldEffect) && !foldExists(folded, e.value.from, e.value.to))
                    folded = folded.update({ add: [foldWidget.range(e.value.from, e.value.to)] });
                else if (e.is(unfoldEffect))
                    folded = folded.update({ filter: (from, to) => e.value.from != from || e.value.to != to,
                        filterFrom: e.value.from, filterTo: e.value.to });
            }
            // Clear folded ranges that cover the selection head
            if (tr.selection) {
                let onSelection = false, { head } = tr.selection.main;
                folded.between(head, head, (a, b) => { if (a < head && b > head)
                    onSelection = true; });
                if (onSelection)
                    folded = folded.update({
                        filterFrom: head,
                        filterTo: head,
                        filter: (a, b) => b <= head || a >= head
                    });
            }
            return folded;
        },
        provide: f => EditorView.decorations.from(f)
    });
    function foldInside(state, from, to) {
        var _a;
        let found = null;
        (_a = state.field(foldState, false)) === null || _a === void 0 ? void 0 : _a.between(from, to, (from, to) => {
            if (!found || found.from > from)
                found = { from, to };
        });
        return found;
    }
    function foldExists(folded, from, to) {
        let found = false;
        folded.between(from, from, (a, b) => { if (a == from && b == to)
            found = true; });
        return found;
    }
    function maybeEnable(state, other) {
        return state.field(foldState, false) ? other : other.concat(StateEffect.appendConfig.of(codeFolding()));
    }
    /**
    Fold the lines that are selected, if possible.
    */
    const foldCode = view => {
        for (let line of selectedLines(view)) {
            let range = foldable(view.state, line.from, line.to);
            if (range) {
                view.dispatch({ effects: maybeEnable(view.state, [foldEffect.of(range), announceFold(view, range)]) });
                return true;
            }
        }
        return false;
    };
    /**
    Unfold folded ranges on selected lines.
    */
    const unfoldCode = view => {
        if (!view.state.field(foldState, false))
            return false;
        let effects = [];
        for (let line of selectedLines(view)) {
            let folded = foldInside(view.state, line.from, line.to);
            if (folded)
                effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));
        }
        if (effects.length)
            view.dispatch({ effects });
        return effects.length > 0;
    };
    function announceFold(view, range, fold = true) {
        let lineFrom = view.state.doc.lineAt(range.from).number, lineTo = view.state.doc.lineAt(range.to).number;
        return EditorView.announce.of(`${view.state.phrase(fold ? "Folded lines" : "Unfolded lines")} ${lineFrom} ${view.state.phrase("to")} ${lineTo}.`);
    }
    /**
    Fold all top-level foldable ranges.
    */
    const foldAll = view => {
        let { state } = view, effects = [];
        for (let pos = 0; pos < state.doc.length;) {
            let line = view.visualLineAt(pos), range = foldable(state, line.from, line.to);
            if (range)
                effects.push(foldEffect.of(range));
            pos = (range ? view.visualLineAt(range.to) : line).to + 1;
        }
        if (effects.length)
            view.dispatch({ effects: maybeEnable(view.state, effects) });
        return !!effects.length;
    };
    /**
    Unfold all folded code.
    */
    const unfoldAll = view => {
        let field = view.state.field(foldState, false);
        if (!field || !field.size)
            return false;
        let effects = [];
        field.between(0, view.state.doc.length, (from, to) => { effects.push(unfoldEffect.of({ from, to })); });
        view.dispatch({ effects });
        return true;
    };
    /**
    Default fold-related key bindings.

     - Ctrl-Shift-[ (Cmd-Alt-[ on macOS): [`foldCode`](https://codemirror.net/6/docs/ref/#fold.foldCode).
     - Ctrl-Shift-] (Cmd-Alt-] on macOS): [`unfoldCode`](https://codemirror.net/6/docs/ref/#fold.unfoldCode).
     - Ctrl-Alt-[: [`foldAll`](https://codemirror.net/6/docs/ref/#fold.foldAll).
     - Ctrl-Alt-]: [`unfoldAll`](https://codemirror.net/6/docs/ref/#fold.unfoldAll).
    */
    const foldKeymap = [
        { key: "Ctrl-Shift-[", mac: "Cmd-Alt-[", run: foldCode },
        { key: "Ctrl-Shift-]", mac: "Cmd-Alt-]", run: unfoldCode },
        { key: "Ctrl-Alt-[", run: foldAll },
        { key: "Ctrl-Alt-]", run: unfoldAll }
    ];
    const defaultConfig = {
        placeholderDOM: null,
        placeholderText: "…"
    };
    const foldConfig = /*@__PURE__*/Facet.define({
        combine(values) { return combineConfig(values, defaultConfig); }
    });
    /**
    Create an extension that configures code folding.
    */
    function codeFolding(config) {
        let result = [foldState, baseTheme];
        if (config)
            result.push(foldConfig.of(config));
        return result;
    }
    const foldWidget = /*@__PURE__*/Decoration.replace({ widget: /*@__PURE__*/new class extends WidgetType {
            ignoreEvents() { return false; }
            toDOM(view) {
                let { state } = view, conf = state.facet(foldConfig);
                if (conf.placeholderDOM)
                    return conf.placeholderDOM();
                let element = document.createElement("span");
                element.textContent = conf.placeholderText;
                element.setAttribute("aria-label", state.phrase("folded code"));
                element.title = state.phrase("unfold");
                element.className = "cm-foldPlaceholder";
                element.onclick = event => {
                    let line = view.visualLineAt(view.posAtDOM(event.target));
                    let folded = foldInside(view.state, line.from, line.to);
                    if (folded)
                        view.dispatch({ effects: unfoldEffect.of(folded) });
                    event.preventDefault();
                };
                return element;
            }
        } });
    const foldGutterDefaults = {
        openText: "⌄",
        closedText: "›",
        markerDOM: null,
    };
    class FoldMarker extends GutterMarker {
        constructor(config, open) {
            super();
            this.config = config;
            this.open = open;
        }
        eq(other) { return this.config == other.config && this.open == other.open; }
        toDOM(view) {
            if (this.config.markerDOM)
                return this.config.markerDOM(this.open);
            let span = document.createElement("span");
            span.textContent = this.open ? this.config.openText : this.config.closedText;
            span.title = view.state.phrase(this.open ? "Fold line" : "Unfold line");
            return span;
        }
    }
    /**
    Create an extension that registers a fold gutter, which shows a
    fold status indicator before foldable lines (which can be clicked
    to fold or unfold the line).
    */
    function foldGutter(config = {}) {
        let fullConfig = Object.assign(Object.assign({}, foldGutterDefaults), config);
        let canFold = new FoldMarker(fullConfig, true), canUnfold = new FoldMarker(fullConfig, false);
        let markers = ViewPlugin.fromClass(class {
            constructor(view) {
                this.from = view.viewport.from;
                this.markers = this.buildMarkers(view);
            }
            update(update) {
                if (update.docChanged || update.viewportChanged ||
                    update.startState.facet(language) != update.state.facet(language) ||
                    update.startState.field(foldState, false) != update.state.field(foldState, false))
                    this.markers = this.buildMarkers(update.view);
            }
            buildMarkers(view) {
                let builder = new RangeSetBuilder();
                view.viewportLines(line => {
                    let mark = foldInside(view.state, line.from, line.to) ? canUnfold
                        : foldable(view.state, line.from, line.to) ? canFold : null;
                    if (mark)
                        builder.add(line.from, line.from, mark);
                });
                return builder.finish();
            }
        });
        return [
            markers,
            gutter({
                class: "cm-foldGutter",
                markers(view) { var _a; return ((_a = view.plugin(markers)) === null || _a === void 0 ? void 0 : _a.markers) || RangeSet.empty; },
                initialSpacer() {
                    return new FoldMarker(fullConfig, false);
                },
                domEventHandlers: {
                    click: (view, line) => {
                        let folded = foldInside(view.state, line.from, line.to);
                        if (folded) {
                            view.dispatch({ effects: unfoldEffect.of(folded) });
                            return true;
                        }
                        let range = foldable(view.state, line.from, line.to);
                        if (range) {
                            view.dispatch({ effects: foldEffect.of(range) });
                            return true;
                        }
                        return false;
                    }
                }
            }),
            codeFolding()
        ];
    }
    const baseTheme = /*@__PURE__*/EditorView.baseTheme({
        ".cm-foldPlaceholder": {
            backgroundColor: "#eee",
            border: "1px solid #ddd",
            color: "#888",
            borderRadius: ".2em",
            margin: "0 1px",
            padding: "0 1px",
            cursor: "pointer"
        },
        ".cm-foldGutter .cm-gutterElement": {
            padding: "0 1px",
            cursor: "pointer"
        }
    });

    function updateSel(sel, by) {
        return EditorSelection.create(sel.ranges.map(by), sel.mainIndex);
    }
    function setSel(state, selection) {
        return state.update({ selection, scrollIntoView: true, userEvent: "select" });
    }
    function moveSel({ state, dispatch }, how) {
        let selection = updateSel(state.selection, how);
        if (selection.eq(state.selection))
            return false;
        dispatch(setSel(state, selection));
        return true;
    }
    function rangeEnd(range, forward) {
        return EditorSelection.cursor(forward ? range.to : range.from);
    }
    function cursorByChar(view, forward) {
        return moveSel(view, range => range.empty ? view.moveByChar(range, forward) : rangeEnd(range, forward));
    }
    /**
    Move the selection one character to the left (which is backward in
    left-to-right text, forward in right-to-left text).
    */
    const cursorCharLeft = view => cursorByChar(view, view.textDirection != Direction.LTR);
    /**
    Move the selection one character to the right.
    */
    const cursorCharRight = view => cursorByChar(view, view.textDirection == Direction.LTR);
    function cursorByGroup(view, forward) {
        return moveSel(view, range => range.empty ? view.moveByGroup(range, forward) : rangeEnd(range, forward));
    }
    /**
    Move the selection to the left across one group of word or
    non-word (but also non-space) characters.
    */
    const cursorGroupLeft = view => cursorByGroup(view, view.textDirection != Direction.LTR);
    /**
    Move the selection one group to the right.
    */
    const cursorGroupRight = view => cursorByGroup(view, view.textDirection == Direction.LTR);
    function interestingNode(state, node, bracketProp) {
        if (node.type.prop(bracketProp))
            return true;
        let len = node.to - node.from;
        return len && (len > 2 || /[^\s,.;:]/.test(state.sliceDoc(node.from, node.to))) || node.firstChild;
    }
    function moveBySyntax(state, start, forward) {
        let pos = syntaxTree(state).resolveInner(start.head);
        let bracketProp = forward ? NodeProp.closedBy : NodeProp.openedBy;
        // Scan forward through child nodes to see if there's an interesting
        // node ahead.
        for (let at = start.head;;) {
            let next = forward ? pos.childAfter(at) : pos.childBefore(at);
            if (!next)
                break;
            if (interestingNode(state, next, bracketProp))
                pos = next;
            else
                at = forward ? next.to : next.from;
        }
        let bracket = pos.type.prop(bracketProp), match, newPos;
        if (bracket && (match = forward ? matchBrackets(state, pos.from, 1) : matchBrackets(state, pos.to, -1)) && match.matched)
            newPos = forward ? match.end.to : match.end.from;
        else
            newPos = forward ? pos.to : pos.from;
        return EditorSelection.cursor(newPos, forward ? -1 : 1);
    }
    /**
    Move the cursor over the next syntactic element to the left.
    */
    const cursorSyntaxLeft = view => moveSel(view, range => moveBySyntax(view.state, range, view.textDirection != Direction.LTR));
    /**
    Move the cursor over the next syntactic element to the right.
    */
    const cursorSyntaxRight = view => moveSel(view, range => moveBySyntax(view.state, range, view.textDirection == Direction.LTR));
    function cursorByLine(view, forward) {
        return moveSel(view, range => {
            if (!range.empty)
                return rangeEnd(range, forward);
            let moved = view.moveVertically(range, forward);
            return moved.head != range.head ? moved : view.moveToLineBoundary(range, forward);
        });
    }
    /**
    Move the selection one line up.
    */
    const cursorLineUp = view => cursorByLine(view, false);
    /**
    Move the selection one line down.
    */
    const cursorLineDown = view => cursorByLine(view, true);
    function cursorByPage(view, forward) {
        return moveSel(view, range => range.empty ? view.moveVertically(range, forward, view.dom.clientHeight) : rangeEnd(range, forward));
    }
    /**
    Move the selection one page up.
    */
    const cursorPageUp = view => cursorByPage(view, false);
    /**
    Move the selection one page down.
    */
    const cursorPageDown = view => cursorByPage(view, true);
    function moveByLineBoundary(view, start, forward) {
        let line = view.visualLineAt(start.head), moved = view.moveToLineBoundary(start, forward);
        if (moved.head == start.head && moved.head != (forward ? line.to : line.from))
            moved = view.moveToLineBoundary(start, forward, false);
        if (!forward && moved.head == line.from && line.length) {
            let space = /^\s*/.exec(view.state.sliceDoc(line.from, Math.min(line.from + 100, line.to)))[0].length;
            if (space && start.head != line.from + space)
                moved = EditorSelection.cursor(line.from + space);
        }
        return moved;
    }
    /**
    Move the selection to the next line wrap point, or to the end of
    the line if there isn't one left on this line.
    */
    const cursorLineBoundaryForward = view => moveSel(view, range => moveByLineBoundary(view, range, true));
    /**
    Move the selection to previous line wrap point, or failing that to
    the start of the line. If the line is indented, and the cursor
    isn't already at the end of the indentation, this will move to the
    end of the indentation instead of the start of the line.
    */
    const cursorLineBoundaryBackward = view => moveSel(view, range => moveByLineBoundary(view, range, false));
    /**
    Move the selection to the start of the line.
    */
    const cursorLineStart = view => moveSel(view, range => EditorSelection.cursor(view.visualLineAt(range.head).from, 1));
    /**
    Move the selection to the end of the line.
    */
    const cursorLineEnd = view => moveSel(view, range => EditorSelection.cursor(view.visualLineAt(range.head).to, -1));
    function toMatchingBracket(state, dispatch, extend) {
        let found = false, selection = updateSel(state.selection, range => {
            let matching = matchBrackets(state, range.head, -1)
                || matchBrackets(state, range.head, 1)
                || (range.head > 0 && matchBrackets(state, range.head - 1, 1))
                || (range.head < state.doc.length && matchBrackets(state, range.head + 1, -1));
            if (!matching || !matching.end)
                return range;
            found = true;
            let head = matching.start.from == range.head ? matching.end.to : matching.end.from;
            return extend ? EditorSelection.range(range.anchor, head) : EditorSelection.cursor(head);
        });
        if (!found)
            return false;
        dispatch(setSel(state, selection));
        return true;
    }
    /**
    Move the selection to the bracket matching the one it is currently
    on, if any.
    */
    const cursorMatchingBracket = ({ state, dispatch }) => toMatchingBracket(state, dispatch, false);
    function extendSel(view, how) {
        let selection = updateSel(view.state.selection, range => {
            let head = how(range);
            return EditorSelection.range(range.anchor, head.head, head.goalColumn);
        });
        if (selection.eq(view.state.selection))
            return false;
        view.dispatch(setSel(view.state, selection));
        return true;
    }
    function selectByChar(view, forward) {
        return extendSel(view, range => view.moveByChar(range, forward));
    }
    /**
    Move the selection head one character to the left, while leaving
    the anchor in place.
    */
    const selectCharLeft = view => selectByChar(view, view.textDirection != Direction.LTR);
    /**
    Move the selection head one character to the right.
    */
    const selectCharRight = view => selectByChar(view, view.textDirection == Direction.LTR);
    function selectByGroup(view, forward) {
        return extendSel(view, range => view.moveByGroup(range, forward));
    }
    /**
    Move the selection head one [group](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) to
    the left.
    */
    const selectGroupLeft = view => selectByGroup(view, view.textDirection != Direction.LTR);
    /**
    Move the selection head one group to the right.
    */
    const selectGroupRight = view => selectByGroup(view, view.textDirection == Direction.LTR);
    /**
    Move the selection head over the next syntactic element to the left.
    */
    const selectSyntaxLeft = view => extendSel(view, range => moveBySyntax(view.state, range, view.textDirection != Direction.LTR));
    /**
    Move the selection head over the next syntactic element to the right.
    */
    const selectSyntaxRight = view => extendSel(view, range => moveBySyntax(view.state, range, view.textDirection == Direction.LTR));
    function selectByLine(view, forward) {
        return extendSel(view, range => view.moveVertically(range, forward));
    }
    /**
    Move the selection head one line up.
    */
    const selectLineUp = view => selectByLine(view, false);
    /**
    Move the selection head one line down.
    */
    const selectLineDown = view => selectByLine(view, true);
    function selectByPage(view, forward) {
        return extendSel(view, range => view.moveVertically(range, forward, view.dom.clientHeight));
    }
    /**
    Move the selection head one page up.
    */
    const selectPageUp = view => selectByPage(view, false);
    /**
    Move the selection head one page down.
    */
    const selectPageDown = view => selectByPage(view, true);
    /**
    Move the selection head to the next line boundary.
    */
    const selectLineBoundaryForward = view => extendSel(view, range => moveByLineBoundary(view, range, true));
    /**
    Move the selection head to the previous line boundary.
    */
    const selectLineBoundaryBackward = view => extendSel(view, range => moveByLineBoundary(view, range, false));
    /**
    Move the selection head to the start of the line.
    */
    const selectLineStart = view => extendSel(view, range => EditorSelection.cursor(view.visualLineAt(range.head).from));
    /**
    Move the selection head to the end of the line.
    */
    const selectLineEnd = view => extendSel(view, range => EditorSelection.cursor(view.visualLineAt(range.head).to));
    /**
    Move the selection to the start of the document.
    */
    const cursorDocStart = ({ state, dispatch }) => {
        dispatch(setSel(state, { anchor: 0 }));
        return true;
    };
    /**
    Move the selection to the end of the document.
    */
    const cursorDocEnd = ({ state, dispatch }) => {
        dispatch(setSel(state, { anchor: state.doc.length }));
        return true;
    };
    /**
    Move the selection head to the start of the document.
    */
    const selectDocStart = ({ state, dispatch }) => {
        dispatch(setSel(state, { anchor: state.selection.main.anchor, head: 0 }));
        return true;
    };
    /**
    Move the selection head to the end of the document.
    */
    const selectDocEnd = ({ state, dispatch }) => {
        dispatch(setSel(state, { anchor: state.selection.main.anchor, head: state.doc.length }));
        return true;
    };
    /**
    Select the entire document.
    */
    const selectAll = ({ state, dispatch }) => {
        dispatch(state.update({ selection: { anchor: 0, head: state.doc.length }, userEvent: "select" }));
        return true;
    };
    /**
    Expand the selection to cover entire lines.
    */
    const selectLine = ({ state, dispatch }) => {
        let ranges = selectedLineBlocks(state).map(({ from, to }) => EditorSelection.range(from, Math.min(to + 1, state.doc.length)));
        dispatch(state.update({ selection: EditorSelection.create(ranges), userEvent: "select" }));
        return true;
    };
    /**
    Select the next syntactic construct that is larger than the
    selection. Note that this will only work insofar as the language
    [provider](https://codemirror.net/6/docs/ref/#language.language) you use builds up a full
    syntax tree.
    */
    const selectParentSyntax = ({ state, dispatch }) => {
        let selection = updateSel(state.selection, range => {
            var _a;
            let context = syntaxTree(state).resolveInner(range.head, 1);
            while (!((context.from < range.from && context.to >= range.to) ||
                (context.to > range.to && context.from <= range.from) ||
                !((_a = context.parent) === null || _a === void 0 ? void 0 : _a.parent)))
                context = context.parent;
            return EditorSelection.range(context.to, context.from);
        });
        dispatch(setSel(state, selection));
        return true;
    };
    /**
    Simplify the current selection. When multiple ranges are selected,
    reduce it to its main range. Otherwise, if the selection is
    non-empty, convert it to a cursor selection.
    */
    const simplifySelection = ({ state, dispatch }) => {
        let cur = state.selection, selection = null;
        if (cur.ranges.length > 1)
            selection = EditorSelection.create([cur.main]);
        else if (!cur.main.empty)
            selection = EditorSelection.create([EditorSelection.cursor(cur.main.head)]);
        if (!selection)
            return false;
        dispatch(setSel(state, selection));
        return true;
    };
    function deleteBy({ state, dispatch }, by) {
        if (state.readOnly)
            return false;
        let event = "delete.selection";
        let changes = state.changeByRange(range => {
            let { from, to } = range;
            if (from == to) {
                let towards = by(from);
                if (towards < from)
                    event = "delete.backward";
                else if (towards > from)
                    event = "delete.forward";
                from = Math.min(from, towards);
                to = Math.max(to, towards);
            }
            return from == to ? { range } : { changes: { from, to }, range: EditorSelection.cursor(from) };
        });
        if (changes.changes.empty)
            return false;
        dispatch(state.update(changes, { scrollIntoView: true, userEvent: event }));
        return true;
    }
    function skipAtomic(target, pos, forward) {
        if (target instanceof EditorView)
            for (let ranges of target.pluginField(PluginField.atomicRanges))
                ranges.between(pos, pos, (from, to) => {
                    if (from < pos && to > pos)
                        pos = forward ? to : from;
                });
        return pos;
    }
    const deleteByChar = (target, forward) => deleteBy(target, pos => {
        let { state } = target, line = state.doc.lineAt(pos), before, targetPos;
        if (!forward && pos > line.from && pos < line.from + 200 &&
            !/[^ \t]/.test(before = line.text.slice(0, pos - line.from))) {
            if (before[before.length - 1] == "\t")
                return pos - 1;
            let col = countColumn(before, state.tabSize), drop = col % getIndentUnit(state) || getIndentUnit(state);
            for (let i = 0; i < drop && before[before.length - 1 - i] == " "; i++)
                pos--;
            targetPos = pos;
        }
        else {
            targetPos = findClusterBreak(line.text, pos - line.from, forward) + line.from;
            if (targetPos == pos && line.number != (forward ? state.doc.lines : 1))
                targetPos += forward ? 1 : -1;
        }
        return skipAtomic(target, targetPos, forward);
    });
    /**
    Delete the selection, or, for cursor selections, the character
    before the cursor.
    */
    const deleteCharBackward = view => deleteByChar(view, false);
    /**
    Delete the selection or the character after the cursor.
    */
    const deleteCharForward = view => deleteByChar(view, true);
    const deleteByGroup = (target, forward) => deleteBy(target, start => {
        let pos = start, { state } = target, line = state.doc.lineAt(pos);
        let categorize = state.charCategorizer(pos);
        for (let cat = null;;) {
            if (pos == (forward ? line.to : line.from)) {
                if (pos == start && line.number != (forward ? state.doc.lines : 1))
                    pos += forward ? 1 : -1;
                break;
            }
            let next = findClusterBreak(line.text, pos - line.from, forward) + line.from;
            let nextChar = line.text.slice(Math.min(pos, next) - line.from, Math.max(pos, next) - line.from);
            let nextCat = categorize(nextChar);
            if (cat != null && nextCat != cat)
                break;
            if (nextChar != " " || pos != start)
                cat = nextCat;
            pos = next;
        }
        return skipAtomic(target, pos, forward);
    });
    /**
    Delete the selection or backward until the end of the next
    [group](https://codemirror.net/6/docs/ref/#view.EditorView.moveByGroup), only skipping groups of
    whitespace when they consist of a single space.
    */
    const deleteGroupBackward = target => deleteByGroup(target, false);
    /**
    Delete the selection or forward until the end of the next group.
    */
    const deleteGroupForward = target => deleteByGroup(target, true);
    /**
    Delete the selection, or, if it is a cursor selection, delete to
    the end of the line. If the cursor is directly at the end of the
    line, delete the line break after it.
    */
    const deleteToLineEnd = view => deleteBy(view, pos => {
        let lineEnd = view.visualLineAt(pos).to;
        return skipAtomic(view, pos < lineEnd ? lineEnd : Math.min(view.state.doc.length, pos + 1), true);
    });
    /**
    Delete the selection, or, if it is a cursor selection, delete to
    the start of the line. If the cursor is directly at the start of the
    line, delete the line break before it.
    */
    const deleteToLineStart = view => deleteBy(view, pos => {
        let lineStart = view.visualLineAt(pos).from;
        return skipAtomic(view, pos > lineStart ? lineStart : Math.max(0, pos - 1), false);
    });
    /**
    Replace each selection range with a line break, leaving the cursor
    on the line before the break.
    */
    const splitLine = ({ state, dispatch }) => {
        if (state.readOnly)
            return false;
        let changes = state.changeByRange(range => {
            return { changes: { from: range.from, to: range.to, insert: Text.of(["", ""]) },
                range: EditorSelection.cursor(range.from) };
        });
        dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
        return true;
    };
    /**
    Flip the characters before and after the cursor(s).
    */
    const transposeChars = ({ state, dispatch }) => {
        if (state.readOnly)
            return false;
        let changes = state.changeByRange(range => {
            if (!range.empty || range.from == 0 || range.from == state.doc.length)
                return { range };
            let pos = range.from, line = state.doc.lineAt(pos);
            let from = pos == line.from ? pos - 1 : findClusterBreak(line.text, pos - line.from, false) + line.from;
            let to = pos == line.to ? pos + 1 : findClusterBreak(line.text, pos - line.from, true) + line.from;
            return { changes: { from, to, insert: state.doc.slice(pos, to).append(state.doc.slice(from, pos)) },
                range: EditorSelection.cursor(to) };
        });
        if (changes.changes.empty)
            return false;
        dispatch(state.update(changes, { scrollIntoView: true, userEvent: "move.character" }));
        return true;
    };
    function selectedLineBlocks(state) {
        let blocks = [], upto = -1;
        for (let range of state.selection.ranges) {
            let startLine = state.doc.lineAt(range.from), endLine = state.doc.lineAt(range.to);
            if (!range.empty && range.to == endLine.from)
                endLine = state.doc.lineAt(range.to - 1);
            if (upto >= startLine.number) {
                let prev = blocks[blocks.length - 1];
                prev.to = endLine.to;
                prev.ranges.push(range);
            }
            else {
                blocks.push({ from: startLine.from, to: endLine.to, ranges: [range] });
            }
            upto = endLine.number + 1;
        }
        return blocks;
    }
    function moveLine(state, dispatch, forward) {
        if (state.readOnly)
            return false;
        let changes = [], ranges = [];
        for (let block of selectedLineBlocks(state)) {
            if (forward ? block.to == state.doc.length : block.from == 0)
                continue;
            let nextLine = state.doc.lineAt(forward ? block.to + 1 : block.from - 1);
            let size = nextLine.length + 1;
            if (forward) {
                changes.push({ from: block.to, to: nextLine.to }, { from: block.from, insert: nextLine.text + state.lineBreak });
                for (let r of block.ranges)
                    ranges.push(EditorSelection.range(Math.min(state.doc.length, r.anchor + size), Math.min(state.doc.length, r.head + size)));
            }
            else {
                changes.push({ from: nextLine.from, to: block.from }, { from: block.to, insert: state.lineBreak + nextLine.text });
                for (let r of block.ranges)
                    ranges.push(EditorSelection.range(r.anchor - size, r.head - size));
            }
        }
        if (!changes.length)
            return false;
        dispatch(state.update({
            changes,
            scrollIntoView: true,
            selection: EditorSelection.create(ranges, state.selection.mainIndex),
            userEvent: "move.line"
        }));
        return true;
    }
    /**
    Move the selected lines up one line.
    */
    const moveLineUp = ({ state, dispatch }) => moveLine(state, dispatch, false);
    /**
    Move the selected lines down one line.
    */
    const moveLineDown = ({ state, dispatch }) => moveLine(state, dispatch, true);
    function copyLine(state, dispatch, forward) {
        if (state.readOnly)
            return false;
        let changes = [];
        for (let block of selectedLineBlocks(state)) {
            if (forward)
                changes.push({ from: block.from, insert: state.doc.slice(block.from, block.to) + state.lineBreak });
            else
                changes.push({ from: block.to, insert: state.lineBreak + state.doc.slice(block.from, block.to) });
        }
        dispatch(state.update({ changes, scrollIntoView: true, userEvent: "input.copyline" }));
        return true;
    }
    /**
    Create a copy of the selected lines. Keep the selection in the top copy.
    */
    const copyLineUp = ({ state, dispatch }) => copyLine(state, dispatch, false);
    /**
    Create a copy of the selected lines. Keep the selection in the bottom copy.
    */
    const copyLineDown = ({ state, dispatch }) => copyLine(state, dispatch, true);
    /**
    Delete selected lines.
    */
    const deleteLine = view => {
        if (view.state.readOnly)
            return false;
        let { state } = view, changes = state.changes(selectedLineBlocks(state).map(({ from, to }) => {
            if (from > 0)
                from--;
            else if (to < state.doc.length)
                to++;
            return { from, to };
        }));
        let selection = updateSel(state.selection, range => view.moveVertically(range, true)).map(changes);
        view.dispatch({ changes, selection, scrollIntoView: true, userEvent: "delete.line" });
        return true;
    };
    function isBetweenBrackets(state, pos) {
        if (/\(\)|\[\]|\{\}/.test(state.sliceDoc(pos - 1, pos + 1)))
            return { from: pos, to: pos };
        let context = syntaxTree(state).resolveInner(pos);
        let before = context.childBefore(pos), after = context.childAfter(pos), closedBy;
        if (before && after && before.to <= pos && after.from >= pos &&
            (closedBy = before.type.prop(NodeProp.closedBy)) && closedBy.indexOf(after.name) > -1 &&
            state.doc.lineAt(before.to).from == state.doc.lineAt(after.from).from)
            return { from: before.to, to: after.from };
        return null;
    }
    /**
    Replace the selection with a newline and indent the newly created
    line(s). If the current line consists only of whitespace, this
    will also delete that whitespace. When the cursor is between
    matching brackets, an additional newline will be inserted after
    the cursor.
    */
    const insertNewlineAndIndent = ({ state, dispatch }) => {
        if (state.readOnly)
            return false;
        let changes = state.changeByRange(({ from, to }) => {
            let explode = from == to && isBetweenBrackets(state, from);
            let cx = new IndentContext(state, { simulateBreak: from, simulateDoubleBreak: !!explode });
            let indent = getIndentation(cx, from);
            if (indent == null)
                indent = /^\s*/.exec(state.doc.lineAt(from).text)[0].length;
            let line = state.doc.lineAt(from);
            while (to < line.to && /\s/.test(line.text[to - line.from]))
                to++;
            if (explode)
                ({ from, to } = explode);
            else if (from > line.from && from < line.from + 100 && !/\S/.test(line.text.slice(0, from)))
                from = line.from;
            let insert = ["", indentString(state, indent)];
            if (explode)
                insert.push(indentString(state, cx.lineIndent(line.from, -1)));
            return { changes: { from, to, insert: Text.of(insert) },
                range: EditorSelection.cursor(from + 1 + insert[1].length) };
        });
        dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
        return true;
    };
    function changeBySelectedLine(state, f) {
        let atLine = -1;
        return state.changeByRange(range => {
            let changes = [];
            for (let pos = range.from; pos <= range.to;) {
                let line = state.doc.lineAt(pos);
                if (line.number > atLine && (range.empty || range.to > line.from)) {
                    f(line, changes, range);
                    atLine = line.number;
                }
                pos = line.to + 1;
            }
            let changeSet = state.changes(changes);
            return { changes,
                range: EditorSelection.range(changeSet.mapPos(range.anchor, 1), changeSet.mapPos(range.head, 1)) };
        });
    }
    /**
    Auto-indent the selected lines. This uses the [indentation service
    facet](https://codemirror.net/6/docs/ref/#language.indentService) as source for auto-indent
    information.
    */
    const indentSelection = ({ state, dispatch }) => {
        if (state.readOnly)
            return false;
        let updated = Object.create(null);
        let context = new IndentContext(state, { overrideIndentation: start => {
                let found = updated[start];
                return found == null ? -1 : found;
            } });
        let changes = changeBySelectedLine(state, (line, changes, range) => {
            let indent = getIndentation(context, line.from);
            if (indent == null)
                return;
            if (!/\S/.test(line.text))
                indent = 0;
            let cur = /^\s*/.exec(line.text)[0];
            let norm = indentString(state, indent);
            if (cur != norm || range.from < line.from + cur.length) {
                updated[line.from] = indent;
                changes.push({ from: line.from, to: line.from + cur.length, insert: norm });
            }
        });
        if (!changes.changes.empty)
            dispatch(state.update(changes, { userEvent: "indent" }));
        return true;
    };
    /**
    Add a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation to all selected
    lines.
    */
    const indentMore = ({ state, dispatch }) => {
        if (state.readOnly)
            return false;
        dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
            changes.push({ from: line.from, insert: state.facet(indentUnit) });
        }), { userEvent: "input.indent" }));
        return true;
    };
    /**
    Remove a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation from all
    selected lines.
    */
    const indentLess = ({ state, dispatch }) => {
        if (state.readOnly)
            return false;
        dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
            let space = /^\s*/.exec(line.text)[0];
            if (!space)
                return;
            let col = countColumn(space, state.tabSize), keep = 0;
            let insert = indentString(state, Math.max(0, col - getIndentUnit(state)));
            while (keep < space.length && keep < insert.length && space.charCodeAt(keep) == insert.charCodeAt(keep))
                keep++;
            changes.push({ from: line.from + keep, to: line.from + space.length, insert: insert.slice(keep) });
        }), { userEvent: "delete.dedent" }));
        return true;
    };
    /**
    Array of key bindings containing the Emacs-style bindings that are
    available on macOS by default.

     - Ctrl-b: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
     - Ctrl-f: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
     - Ctrl-p: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
     - Ctrl-n: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
     - Ctrl-a: [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
     - Ctrl-e: [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
     - Ctrl-d: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
     - Ctrl-h: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)
     - Ctrl-k: [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd)
     - Ctrl-Alt-h: [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
     - Ctrl-o: [`splitLine`](https://codemirror.net/6/docs/ref/#commands.splitLine)
     - Ctrl-t: [`transposeChars`](https://codemirror.net/6/docs/ref/#commands.transposeChars)
     - Alt-<: [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart)
     - Alt->: [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd)
     - Ctrl-v: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown)
     - Alt-v: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp)
    */
    const emacsStyleKeymap = [
        { key: "Ctrl-b", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
        { key: "Ctrl-f", run: cursorCharRight, shift: selectCharRight },
        { key: "Ctrl-p", run: cursorLineUp, shift: selectLineUp },
        { key: "Ctrl-n", run: cursorLineDown, shift: selectLineDown },
        { key: "Ctrl-a", run: cursorLineStart, shift: selectLineStart },
        { key: "Ctrl-e", run: cursorLineEnd, shift: selectLineEnd },
        { key: "Ctrl-d", run: deleteCharForward },
        { key: "Ctrl-h", run: deleteCharBackward },
        { key: "Ctrl-k", run: deleteToLineEnd },
        { key: "Ctrl-Alt-h", run: deleteGroupBackward },
        { key: "Ctrl-o", run: splitLine },
        { key: "Ctrl-t", run: transposeChars },
        { key: "Alt-<", run: cursorDocStart },
        { key: "Alt->", run: cursorDocEnd },
        { key: "Ctrl-v", run: cursorPageDown },
        { key: "Alt-v", run: cursorPageUp },
    ];
    /**
    An array of key bindings closely sticking to platform-standard or
    widely used bindings. (This includes the bindings from
    [`emacsStyleKeymap`](https://codemirror.net/6/docs/ref/#commands.emacsStyleKeymap), with their `key`
    property changed to `mac`.)

     - ArrowLeft: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
     - ArrowRight: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
     - Ctrl-ArrowLeft (Alt-ArrowLeft on macOS): [`cursorGroupLeft`](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) ([`selectGroupLeft`](https://codemirror.net/6/docs/ref/#commands.selectGroupLeft) with Shift)
     - Ctrl-ArrowRight (Alt-ArrowRight on macOS): [`cursorGroupRight`](https://codemirror.net/6/docs/ref/#commands.cursorGroupRight) ([`selectGroupRight`](https://codemirror.net/6/docs/ref/#commands.selectGroupRight) with Shift)
     - Cmd-ArrowLeft (on macOS): [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
     - Cmd-ArrowRight (on macOS): [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
     - ArrowUp: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
     - ArrowDown: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
     - Cmd-ArrowUp (on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
     - Cmd-ArrowDown (on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
     - Ctrl-ArrowUp (on macOS): [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
     - Ctrl-ArrowDown (on macOS): [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
     - PageUp: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
     - PageDown: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
     - Home: [`cursorLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryBackward) ([`selectLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryBackward) with Shift)
     - End: [`cursorLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryForward) ([`selectLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryForward) with Shift)
     - Ctrl-Home (Cmd-Home on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
     - Ctrl-End (Cmd-Home on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
     - Enter: [`insertNewlineAndIndent`](https://codemirror.net/6/docs/ref/#commands.insertNewlineAndIndent)
     - Ctrl-a (Cmd-a on macOS): [`selectAll`](https://codemirror.net/6/docs/ref/#commands.selectAll)
     - Backspace: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)
     - Delete: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
     - Ctrl-Backspace (Alt-Backspace on macOS): [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
     - Ctrl-Delete (Alt-Delete on macOS): [`deleteGroupForward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupForward)
     - Cmd-Backspace (macOS): [`deleteToLineStart`](https://codemirror.net/6/docs/ref/#commands.deleteToLineStart).
     - Cmd-Delete (macOS): [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd).
    */
    const standardKeymap = /*@__PURE__*/[
        { key: "ArrowLeft", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
        { key: "Mod-ArrowLeft", mac: "Alt-ArrowLeft", run: cursorGroupLeft, shift: selectGroupLeft },
        { mac: "Cmd-ArrowLeft", run: cursorLineBoundaryBackward, shift: selectLineBoundaryBackward },
        { key: "ArrowRight", run: cursorCharRight, shift: selectCharRight, preventDefault: true },
        { key: "Mod-ArrowRight", mac: "Alt-ArrowRight", run: cursorGroupRight, shift: selectGroupRight },
        { mac: "Cmd-ArrowRight", run: cursorLineBoundaryForward, shift: selectLineBoundaryForward },
        { key: "ArrowUp", run: cursorLineUp, shift: selectLineUp, preventDefault: true },
        { mac: "Cmd-ArrowUp", run: cursorDocStart, shift: selectDocStart },
        { mac: "Ctrl-ArrowUp", run: cursorPageUp, shift: selectPageUp },
        { key: "ArrowDown", run: cursorLineDown, shift: selectLineDown, preventDefault: true },
        { mac: "Cmd-ArrowDown", run: cursorDocEnd, shift: selectDocEnd },
        { mac: "Ctrl-ArrowDown", run: cursorPageDown, shift: selectPageDown },
        { key: "PageUp", run: cursorPageUp, shift: selectPageUp },
        { key: "PageDown", run: cursorPageDown, shift: selectPageDown },
        { key: "Home", run: cursorLineBoundaryBackward, shift: selectLineBoundaryBackward },
        { key: "Mod-Home", run: cursorDocStart, shift: selectDocStart },
        { key: "End", run: cursorLineBoundaryForward, shift: selectLineBoundaryForward },
        { key: "Mod-End", run: cursorDocEnd, shift: selectDocEnd },
        { key: "Enter", run: insertNewlineAndIndent },
        { key: "Mod-a", run: selectAll },
        { key: "Backspace", run: deleteCharBackward, shift: deleteCharBackward },
        { key: "Delete", run: deleteCharForward, shift: deleteCharForward },
        { key: "Mod-Backspace", mac: "Alt-Backspace", run: deleteGroupBackward },
        { key: "Mod-Delete", mac: "Alt-Delete", run: deleteGroupForward },
        { mac: "Mod-Backspace", run: deleteToLineStart },
        { mac: "Mod-Delete", run: deleteToLineEnd }
    ].concat(/*@__PURE__*/emacsStyleKeymap.map(b => ({ mac: b.key, run: b.run, shift: b.shift })));
    /**
    The default keymap. Includes all bindings from
    [`standardKeymap`](https://codemirror.net/6/docs/ref/#commands.standardKeymap) plus the following:

    - Alt-ArrowLeft (Ctrl-ArrowLeft on macOS): [`cursorSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxLeft) ([`selectSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxLeft) with Shift)
    - Alt-ArrowRight (Ctrl-ArrowRight on macOS): [`cursorSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxRight) ([`selectSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxRight) with Shift)
    - Alt-ArrowUp: [`moveLineUp`](https://codemirror.net/6/docs/ref/#commands.moveLineUp)
    - Alt-ArrowDown: [`moveLineDown`](https://codemirror.net/6/docs/ref/#commands.moveLineDown)
    - Shift-Alt-ArrowUp: [`copyLineUp`](https://codemirror.net/6/docs/ref/#commands.copyLineUp)
    - Shift-Alt-ArrowDown: [`copyLineDown`](https://codemirror.net/6/docs/ref/#commands.copyLineDown)
    - Escape: [`simplifySelection`](https://codemirror.net/6/docs/ref/#commands.simplifySelection)
    - Alt-l (Ctrl-l on macOS): [`selectLine`](https://codemirror.net/6/docs/ref/#commands.selectLine)
    - Ctrl-i (Cmd-i on macOS): [`selectParentSyntax`](https://codemirror.net/6/docs/ref/#commands.selectParentSyntax)
    - Ctrl-[ (Cmd-[ on macOS): [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess)
    - Ctrl-] (Cmd-] on macOS): [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore)
    - Ctrl-Alt-\\ (Cmd-Alt-\\ on macOS): [`indentSelection`](https://codemirror.net/6/docs/ref/#commands.indentSelection)
    - Shift-Ctrl-k (Shift-Cmd-k on macOS): [`deleteLine`](https://codemirror.net/6/docs/ref/#commands.deleteLine)
    - Shift-Ctrl-\\ (Shift-Cmd-\\ on macOS): [`cursorMatchingBracket`](https://codemirror.net/6/docs/ref/#commands.cursorMatchingBracket)
    */
    const defaultKeymap = /*@__PURE__*/[
        { key: "Alt-ArrowLeft", mac: "Ctrl-ArrowLeft", run: cursorSyntaxLeft, shift: selectSyntaxLeft },
        { key: "Alt-ArrowRight", mac: "Ctrl-ArrowRight", run: cursorSyntaxRight, shift: selectSyntaxRight },
        { key: "Alt-ArrowUp", run: moveLineUp },
        { key: "Shift-Alt-ArrowUp", run: copyLineUp },
        { key: "Alt-ArrowDown", run: moveLineDown },
        { key: "Shift-Alt-ArrowDown", run: copyLineDown },
        { key: "Escape", run: simplifySelection },
        { key: "Alt-l", mac: "Ctrl-l", run: selectLine },
        { key: "Mod-i", run: selectParentSyntax, preventDefault: true },
        { key: "Mod-[", run: indentLess },
        { key: "Mod-]", run: indentMore },
        { key: "Mod-Alt-\\", run: indentSelection },
        { key: "Shift-Mod-k", run: deleteLine },
        { key: "Shift-Mod-\\", run: cursorMatchingBracket }
    ].concat(standardKeymap);

    const fromHistory = /*@__PURE__*/Annotation.define();
    /**
    Transaction annotation that will prevent that transaction from
    being combined with other transactions in the undo history. Given
    `"before"`, it'll prevent merging with previous transactions. With
    `"after"`, subsequent transactions won't be combined with this
    one. With `"full"`, the transaction is isolated on both sides.
    */
    const isolateHistory = /*@__PURE__*/Annotation.define();
    /**
    This facet provides a way to register functions that, given a
    transaction, provide a set of effects that the history should
    store when inverting the transaction. This can be used to
    integrate some kinds of effects in the history, so that they can
    be undone (and redone again).
    */
    const invertedEffects = /*@__PURE__*/Facet.define();
    const historyConfig = /*@__PURE__*/Facet.define({
        combine(configs) {
            return combineConfig(configs, {
                minDepth: 100,
                newGroupDelay: 500
            }, { minDepth: Math.max, newGroupDelay: Math.min });
        }
    });
    const historyField_ = /*@__PURE__*/StateField.define({
        create() {
            return HistoryState.empty;
        },
        update(state, tr) {
            let config = tr.state.facet(historyConfig);
            let fromHist = tr.annotation(fromHistory);
            if (fromHist) {
                let item = HistEvent.fromTransaction(tr), from = fromHist.side;
                let other = from == 0 /* Done */ ? state.undone : state.done;
                if (item)
                    other = updateBranch(other, other.length, config.minDepth, item);
                else
                    other = addSelection(other, tr.startState.selection);
                return new HistoryState(from == 0 /* Done */ ? fromHist.rest : other, from == 0 /* Done */ ? other : fromHist.rest);
            }
            let isolate = tr.annotation(isolateHistory);
            if (isolate == "full" || isolate == "before")
                state = state.isolate();
            if (tr.annotation(Transaction.addToHistory) === false)
                return !tr.changes.empty ? state.addMapping(tr.changes.desc) : state;
            let event = HistEvent.fromTransaction(tr);
            let time = tr.annotation(Transaction.time), userEvent = tr.annotation(Transaction.userEvent);
            if (event)
                state = state.addChanges(event, time, userEvent, config.newGroupDelay, config.minDepth);
            else if (tr.selection)
                state = state.addSelection(tr.startState.selection, time, userEvent, config.newGroupDelay);
            if (isolate == "full" || isolate == "after")
                state = state.isolate();
            return state;
        },
        toJSON(value) {
            return { done: value.done.map(e => e.toJSON()), undone: value.undone.map(e => e.toJSON()) };
        },
        fromJSON(json) {
            return new HistoryState(json.done.map(HistEvent.fromJSON), json.undone.map(HistEvent.fromJSON));
        }
    });
    /**
    Create a history extension with the given configuration.
    */
    function history(config = {}) {
        return [
            historyField_,
            historyConfig.of(config),
            EditorView.domEventHandlers({
                beforeinput(e, view) {
                    if (e.inputType == "historyUndo")
                        return undo(view);
                    if (e.inputType == "historyRedo")
                        return redo(view);
                    return false;
                }
            })
        ];
    }
    function cmd(side, selection) {
        return function ({ state, dispatch }) {
            let historyState = state.field(historyField_, false);
            if (!historyState)
                return false;
            let tr = historyState.pop(side, state, selection);
            if (!tr)
                return false;
            dispatch(tr);
            return true;
        };
    }
    /**
    Undo a single group of history events. Returns false if no group
    was available.
    */
    const undo = /*@__PURE__*/cmd(0 /* Done */, false);
    /**
    Redo a group of history events. Returns false if no group was
    available.
    */
    const redo = /*@__PURE__*/cmd(1 /* Undone */, false);
    /**
    Undo a selection change.
    */
    const undoSelection = /*@__PURE__*/cmd(0 /* Done */, true);
    /**
    Redo a selection change.
    */
    const redoSelection = /*@__PURE__*/cmd(1 /* Undone */, true);
    // History events store groups of changes or effects that need to be
    // undone/redone together.
    class HistEvent {
        constructor(
        // The changes in this event. Normal events hold at least one
        // change or effect. But it may be necessary to store selection
        // events before the first change, in which case a special type of
        // instance is created which doesn't hold any changes, with
        // changes == startSelection == undefined
        changes, 
        // The effects associated with this event
        effects, mapped, 
        // The selection before this event
        startSelection, 
        // Stores selection changes after this event, to be used for
        // selection undo/redo.
        selectionsAfter) {
            this.changes = changes;
            this.effects = effects;
            this.mapped = mapped;
            this.startSelection = startSelection;
            this.selectionsAfter = selectionsAfter;
        }
        setSelAfter(after) {
            return new HistEvent(this.changes, this.effects, this.mapped, this.startSelection, after);
        }
        toJSON() {
            var _a, _b, _c;
            return {
                changes: (_a = this.changes) === null || _a === void 0 ? void 0 : _a.toJSON(),
                mapped: (_b = this.mapped) === null || _b === void 0 ? void 0 : _b.toJSON(),
                startSelection: (_c = this.startSelection) === null || _c === void 0 ? void 0 : _c.toJSON(),
                selectionsAfter: this.selectionsAfter.map(s => s.toJSON())
            };
        }
        static fromJSON(json) {
            return new HistEvent(json.changes && ChangeSet.fromJSON(json.changes), [], json.mapped && ChangeDesc.fromJSON(json.mapped), json.startSelection && EditorSelection.fromJSON(json.startSelection), json.selectionsAfter.map(EditorSelection.fromJSON));
        }
        // This does not check `addToHistory` and such, it assumes the
        // transaction needs to be converted to an item. Returns null when
        // there are no changes or effects in the transaction.
        static fromTransaction(tr) {
            let effects = none;
            for (let invert of tr.startState.facet(invertedEffects)) {
                let result = invert(tr);
                if (result.length)
                    effects = effects.concat(result);
            }
            if (!effects.length && tr.changes.empty)
                return null;
            return new HistEvent(tr.changes.invert(tr.startState.doc), effects, undefined, tr.startState.selection, none);
        }
        static selection(selections) {
            return new HistEvent(undefined, none, undefined, undefined, selections);
        }
    }
    function updateBranch(branch, to, maxLen, newEvent) {
        let start = to + 1 > maxLen + 20 ? to - maxLen - 1 : 0;
        let newBranch = branch.slice(start, to);
        newBranch.push(newEvent);
        return newBranch;
    }
    function isAdjacent(a, b) {
        let ranges = [], isAdjacent = false;
        a.iterChangedRanges((f, t) => ranges.push(f, t));
        b.iterChangedRanges((_f, _t, f, t) => {
            for (let i = 0; i < ranges.length;) {
                let from = ranges[i++], to = ranges[i++];
                if (t >= from && f <= to)
                    isAdjacent = true;
            }
        });
        return isAdjacent;
    }
    function eqSelectionShape(a, b) {
        return a.ranges.length == b.ranges.length &&
            a.ranges.filter((r, i) => r.empty != b.ranges[i].empty).length === 0;
    }
    function conc(a, b) {
        return !a.length ? b : !b.length ? a : a.concat(b);
    }
    const none = [];
    const MaxSelectionsPerEvent = 200;
    function addSelection(branch, selection) {
        if (!branch.length) {
            return [HistEvent.selection([selection])];
        }
        else {
            let lastEvent = branch[branch.length - 1];
            let sels = lastEvent.selectionsAfter.slice(Math.max(0, lastEvent.selectionsAfter.length - MaxSelectionsPerEvent));
            if (sels.length && sels[sels.length - 1].eq(selection))
                return branch;
            sels.push(selection);
            return updateBranch(branch, branch.length - 1, 1e9, lastEvent.setSelAfter(sels));
        }
    }
    // Assumes the top item has one or more selectionAfter values
    function popSelection(branch) {
        let last = branch[branch.length - 1];
        let newBranch = branch.slice();
        newBranch[branch.length - 1] = last.setSelAfter(last.selectionsAfter.slice(0, last.selectionsAfter.length - 1));
        return newBranch;
    }
    // Add a mapping to the top event in the given branch. If this maps
    // away all the changes and effects in that item, drop it and
    // propagate the mapping to the next item.
    function addMappingToBranch(branch, mapping) {
        if (!branch.length)
            return branch;
        let length = branch.length, selections = none;
        while (length) {
            let event = mapEvent(branch[length - 1], mapping, selections);
            if (event.changes && !event.changes.empty || event.effects.length) { // Event survived mapping
                let result = branch.slice(0, length);
                result[length - 1] = event;
                return result;
            }
            else { // Drop this event, since there's no changes or effects left
                mapping = event.mapped;
                length--;
                selections = event.selectionsAfter;
            }
        }
        return selections.length ? [HistEvent.selection(selections)] : none;
    }
    function mapEvent(event, mapping, extraSelections) {
        let selections = conc(event.selectionsAfter.length ? event.selectionsAfter.map(s => s.map(mapping)) : none, extraSelections);
        // Change-less events don't store mappings (they are always the last event in a branch)
        if (!event.changes)
            return HistEvent.selection(selections);
        let mappedChanges = event.changes.map(mapping), before = mapping.mapDesc(event.changes, true);
        let fullMapping = event.mapped ? event.mapped.composeDesc(before) : before;
        return new HistEvent(mappedChanges, StateEffect.mapEffects(event.effects, mapping), fullMapping, event.startSelection.map(before), selections);
    }
    class HistoryState {
        constructor(done, undone, prevTime = 0, prevUserEvent = undefined) {
            this.done = done;
            this.undone = undone;
            this.prevTime = prevTime;
            this.prevUserEvent = prevUserEvent;
        }
        isolate() {
            return this.prevTime ? new HistoryState(this.done, this.undone) : this;
        }
        addChanges(event, time, userEvent, newGroupDelay, maxLen) {
            let done = this.done, lastEvent = done[done.length - 1];
            if (lastEvent && lastEvent.changes && !lastEvent.changes.empty && event.changes &&
                ((!lastEvent.selectionsAfter.length &&
                    time - this.prevTime < newGroupDelay &&
                    isAdjacent(lastEvent.changes, event.changes)) ||
                    // For compose (but not compose.start) events, always join with previous event
                    userEvent == "input.type.compose")) {
                done = updateBranch(done, done.length - 1, maxLen, new HistEvent(event.changes.compose(lastEvent.changes), conc(event.effects, lastEvent.effects), lastEvent.mapped, lastEvent.startSelection, none));
            }
            else {
                done = updateBranch(done, done.length, maxLen, event);
            }
            return new HistoryState(done, none, time, userEvent);
        }
        addSelection(selection, time, userEvent, newGroupDelay) {
            let last = this.done.length ? this.done[this.done.length - 1].selectionsAfter : none;
            if (last.length > 0 &&
                time - this.prevTime < newGroupDelay &&
                userEvent == this.prevUserEvent && userEvent && /^select($|\.)/.test(userEvent) &&
                eqSelectionShape(last[last.length - 1], selection))
                return this;
            return new HistoryState(addSelection(this.done, selection), this.undone, time, userEvent);
        }
        addMapping(mapping) {
            return new HistoryState(addMappingToBranch(this.done, mapping), addMappingToBranch(this.undone, mapping), this.prevTime, this.prevUserEvent);
        }
        pop(side, state, selection) {
            let branch = side == 0 /* Done */ ? this.done : this.undone;
            if (branch.length == 0)
                return null;
            let event = branch[branch.length - 1];
            if (selection && event.selectionsAfter.length) {
                return state.update({
                    selection: event.selectionsAfter[event.selectionsAfter.length - 1],
                    annotations: fromHistory.of({ side, rest: popSelection(branch) }),
                    userEvent: side == 0 /* Done */ ? "select.undo" : "select.redo"
                });
            }
            else if (!event.changes) {
                return null;
            }
            else {
                let rest = branch.length == 1 ? none : branch.slice(0, branch.length - 1);
                if (event.mapped)
                    rest = addMappingToBranch(rest, event.mapped);
                return state.update({
                    changes: event.changes,
                    selection: event.startSelection,
                    effects: event.effects,
                    annotations: fromHistory.of({ side, rest }),
                    filter: false,
                    userEvent: side == 0 /* Done */ ? "undo" : "redo"
                });
            }
        }
    }
    HistoryState.empty = /*@__PURE__*/new HistoryState(none, none);
    /**
    Default key bindings for the undo history.

    - Mod-z: [`undo`](https://codemirror.net/6/docs/ref/#history.undo).
    - Mod-y (Mod-Shift-z on macOS): [`redo`](https://codemirror.net/6/docs/ref/#history.redo).
    - Mod-u: [`undoSelection`](https://codemirror.net/6/docs/ref/#history.undoSelection).
    - Alt-u (Mod-Shift-u on macOS): [`redoSelection`](https://codemirror.net/6/docs/ref/#history.redoSelection).
    */
    const historyKeymap = [
        { key: "Mod-z", run: undo, preventDefault: true },
        { key: "Mod-y", mac: "Mod-Shift-z", run: redo, preventDefault: true },
        { key: "Mod-u", run: undoSelection, preventDefault: true },
        { key: "Alt-u", mac: "Mod-Shift-u", run: redoSelection, preventDefault: true }
    ];

    /**
    Comment or uncomment the current selection. Will use line comments
    if available, otherwise falling back to block comments.
    */
    const toggleComment = target => {
        let config = getConfig(target.state);
        return config.line ? toggleLineComment(target) : config.block ? toggleBlockComment(target) : false;
    };
    function command$1(f, option) {
        return ({ state, dispatch }) => {
            let tr = f(option, state.selection.ranges, state);
            if (!tr)
                return false;
            dispatch(state.update(tr));
            return true;
        };
    }
    /**
    Comment or uncomment the current selection using line comments.
    The line comment syntax is taken from the
    [`commentTokens`](https://codemirror.net/6/docs/ref/#comment.CommentTokens) [language
    data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
    */
    const toggleLineComment = /*@__PURE__*/command$1(changeLineComment, 0 /* Toggle */);
    /**
    Comment or uncomment the current selection using block comments.
    The block comment syntax is taken from the
    [`commentTokens`](https://codemirror.net/6/docs/ref/#comment.CommentTokens) [language
    data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
    */
    const toggleBlockComment = /*@__PURE__*/command$1(changeBlockComment, 0 /* Toggle */);
    /**
    Default key bindings for this package.

     - Ctrl-/ (Cmd-/ on macOS): [`toggleComment`](https://codemirror.net/6/docs/ref/#comment.toggleComment).
     - Shift-Alt-a: [`toggleBlockComment`](https://codemirror.net/6/docs/ref/#comment.toggleBlockComment).
    */
    const commentKeymap = [
        { key: "Mod-/", run: toggleComment },
        { key: "Alt-A", run: toggleBlockComment }
    ];
    function getConfig(state, pos = state.selection.main.head) {
        let data = state.languageDataAt("commentTokens", pos);
        return data.length ? data[0] : {};
    }
    const SearchMargin = 50;
    /**
    Determines if the given range is block-commented in the given
    state.
    */
    function findBlockComment(state, { open, close }, from, to) {
        let textBefore = state.sliceDoc(from - SearchMargin, from);
        let textAfter = state.sliceDoc(to, to + SearchMargin);
        let spaceBefore = /\s*$/.exec(textBefore)[0].length, spaceAfter = /^\s*/.exec(textAfter)[0].length;
        let beforeOff = textBefore.length - spaceBefore;
        if (textBefore.slice(beforeOff - open.length, beforeOff) == open &&
            textAfter.slice(spaceAfter, spaceAfter + close.length) == close) {
            return { open: { pos: from - spaceBefore, margin: spaceBefore && 1 },
                close: { pos: to + spaceAfter, margin: spaceAfter && 1 } };
        }
        let startText, endText;
        if (to - from <= 2 * SearchMargin) {
            startText = endText = state.sliceDoc(from, to);
        }
        else {
            startText = state.sliceDoc(from, from + SearchMargin);
            endText = state.sliceDoc(to - SearchMargin, to);
        }
        let startSpace = /^\s*/.exec(startText)[0].length, endSpace = /\s*$/.exec(endText)[0].length;
        let endOff = endText.length - endSpace - close.length;
        if (startText.slice(startSpace, startSpace + open.length) == open &&
            endText.slice(endOff, endOff + close.length) == close) {
            return { open: { pos: from + startSpace + open.length,
                    margin: /\s/.test(startText.charAt(startSpace + open.length)) ? 1 : 0 },
                close: { pos: to - endSpace - close.length,
                    margin: /\s/.test(endText.charAt(endOff - 1)) ? 1 : 0 } };
        }
        return null;
    }
    // Performs toggle, comment and uncomment of block comments in
    // languages that support them.
    function changeBlockComment(option, ranges, state) {
        let tokens = ranges.map(r => getConfig(state, r.from).block);
        if (!tokens.every(c => c))
            return null;
        let comments = ranges.map((r, i) => findBlockComment(state, tokens[i], r.from, r.to));
        if (option != 2 /* Uncomment */ && !comments.every(c => c)) {
            let index = 0;
            return state.changeByRange(range => {
                let { open, close } = tokens[index++];
                if (comments[index])
                    return { range };
                let shift = open.length + 1;
                return {
                    changes: [{ from: range.from, insert: open + " " }, { from: range.to, insert: " " + close }],
                    range: EditorSelection.range(range.anchor + shift, range.head + shift)
                };
            });
        }
        else if (option != 1 /* Comment */ && comments.some(c => c)) {
            let changes = [];
            for (let i = 0, comment; i < comments.length; i++)
                if (comment = comments[i]) {
                    let token = tokens[i], { open, close } = comment;
                    changes.push({ from: open.pos - token.open.length, to: open.pos + open.margin }, { from: close.pos - close.margin, to: close.pos + token.close.length });
                }
            return { changes };
        }
        return null;
    }
    // Performs toggle, comment and uncomment of line comments.
    function changeLineComment(option, ranges, state) {
        let lines = [];
        let prevLine = -1;
        for (let { from, to } of ranges) {
            let startI = lines.length, minIndent = 1e9;
            for (let pos = from; pos <= to;) {
                let line = state.doc.lineAt(pos);
                if (line.from > prevLine && (from == to || to > line.from)) {
                    prevLine = line.from;
                    let token = getConfig(state, pos).line;
                    if (!token)
                        continue;
                    let indent = /^\s*/.exec(line.text)[0].length;
                    let empty = indent == line.length;
                    let comment = line.text.slice(indent, indent + token.length) == token ? indent : -1;
                    if (indent < line.text.length && indent < minIndent)
                        minIndent = indent;
                    lines.push({ line, comment, token, indent, empty, single: false });
                }
                pos = line.to + 1;
            }
            if (minIndent < 1e9)
                for (let i = startI; i < lines.length; i++)
                    if (lines[i].indent < lines[i].line.text.length)
                        lines[i].indent = minIndent;
            if (lines.length == startI + 1)
                lines[startI].single = true;
        }
        if (option != 2 /* Uncomment */ && lines.some(l => l.comment < 0 && (!l.empty || l.single))) {
            let changes = [];
            for (let { line, token, indent, empty, single } of lines)
                if (single || !empty)
                    changes.push({ from: line.from + indent, insert: token + " " });
            let changeSet = state.changes(changes);
            return { changes: changeSet, selection: state.selection.map(changeSet, 1) };
        }
        else if (option != 1 /* Comment */ && lines.some(l => l.comment >= 0)) {
            let changes = [];
            for (let { line, comment, token } of lines)
                if (comment >= 0) {
                    let from = line.from + comment, to = from + token.length;
                    if (line.text[to - line.from] == " ")
                        to++;
                    changes.push({ from, to });
                }
            return { changes };
        }
        return null;
    }

    class SMEditor {
      constructor() {
        this.handleViewPort();
        this.handleCreateDom();
        this.handleCreateEditor();
      }

      /**
       * 重写视口标签
       * 
       */
      handleViewPort() {
        $('meta[name="viewport"]').attr('content', 'width=device-width, user-scalable=no, initial-scale=1.0, shrink-to-fit=no, viewport-fit=cover');
      }

      /**
       * 创建 DOM 节点
       * 
       */
      handleCreateDom() {
        $('#text').before(`
        <div class="cm-container">
            <div class="cm-tools"></div>
            <div class="cm-mainer">
                <div class="cm-resize"></div>
                <div class="cm-preview"><div class="cm-preview-content"></div></div>
            </div>
        </div>
    `);
      }

      /**
       * 创建编辑器实例
       * 
       */
      handleCreateEditor() {
        const cm = new EditorView({
          state: EditorState.create({
            doc: $('#text').val(),
            extensions: [
              // 自定义类名样式
              classHighlightStyle,
              // 自动闭合括号
              closeBrackets(),
              // 匹配括号
              bracketMatching(),
              // 高亮选择
              drawSelection(),
              // 当前行高亮
              highlightActiveLine(),
              // 高亮匹配
              highlightSelectionMatches(),
              // 行号
              lineNumbers(),
              // 撤销回退历史
              history(),
              // 高亮当前行号
              highlightActiveLineGutter(),
              // 重新缩进
              indentOnInput(),
              // 折叠代码
              foldGutter({
                markerDOM: open => {
                  const div = document.createElement('div');
                  div.className = open ? 'cm-fold' : 'cm-unfold';
                  div.title = open ? '折叠' : '展开';
                  return div;
                },
              }),
              // 折叠代码后的样式
              codeFolding({ placeholderText: '⋯' }),
              // 高亮 markdown 语法
              markdown({
                base: markdownLanguage,
                codeLanguages: languages
              }),
              // 超出换行
              EditorView.lineWrapping,
              // 按键映射
              keymap.of([
                ...closeBracketsKeymap,
                ...defaultKeymap,
                ...historyKeymap,
                ...foldKeymap,
                ...commentKeymap,
              ])
            ],
          }),
        });
        $('.cm-mainer').prepend(cm.dom);
        const formEle = $('#text')[0].form;
        formEle && formEle.addEventListener('submit', () => $('#text').val(cm.state.doc.toString()));
      }
    }

    document.addEventListener('DOMContentLoaded', () => new SMEditor());

    // Counts the column offset in a string, taking tabs into account.
    // Used mostly to find indentation.
    function countCol(string, end, tabSize, startIndex = 0, startValue = 0) {
        if (end == null) {
            end = string.search(/[^\s\u00a0]/);
            if (end == -1)
                end = string.length;
        }
        let n = startValue;
        for (let i = startIndex; i < end; i++) {
            if (string.charCodeAt(i) == 9)
                n += tabSize - (n % tabSize);
            else
                n++;
        }
        return n;
    }
    /**
    Encapsulates a single line of input. Given to stream syntax code,
    which uses it to tokenize the content.
    */
    class StringStream {
        /**
        @internal
        */
        constructor(
        /**
        The line.
        */
        string, tabSize, 
        /**
        The current indent unit size.
        */
        indentUnit) {
            this.string = string;
            this.tabSize = tabSize;
            this.indentUnit = indentUnit;
            /**
            The current position on the line.
            */
            this.pos = 0;
            /**
            The start position of the current token.
            */
            this.start = 0;
            this.lastColumnPos = 0;
            this.lastColumnValue = 0;
        }
        /**
        True if we are at the end of the line.
        */
        eol() { return this.pos >= this.string.length; }
        /**
        True if we are at the start of the line.
        */
        sol() { return this.pos == 0; }
        /**
        Get the next code unit after the current position, or undefined
        if we're at the end of the line.
        */
        peek() { return this.string.charAt(this.pos) || undefined; }
        /**
        Read the next code unit and advance `this.pos`.
        */
        next() {
            if (this.pos < this.string.length)
                return this.string.charAt(this.pos++);
        }
        /**
        Match the next character against the given string, regular
        expression, or predicate. Consume and return it if it matches.
        */
        eat(match) {
            let ch = this.string.charAt(this.pos);
            let ok;
            if (typeof match == "string")
                ok = ch == match;
            else
                ok = ch && (match instanceof RegExp ? match.test(ch) : match(ch));
            if (ok) {
                ++this.pos;
                return ch;
            }
        }
        /**
        Continue matching characters that match the given string,
        regular expression, or predicate function. Return true if any
        characters were consumed.
        */
        eatWhile(match) {
            let start = this.pos;
            while (this.eat(match)) { }
            return this.pos > start;
        }
        /**
        Consume whitespace ahead of `this.pos`. Return true if any was
        found.
        */
        eatSpace() {
            let start = this.pos;
            while (/[\s\u00a0]/.test(this.string.charAt(this.pos)))
                ++this.pos;
            return this.pos > start;
        }
        /**
        Move to the end of the line.
        */
        skipToEnd() { this.pos = this.string.length; }
        /**
        Move to directly before the given character, if found on the
        current line.
        */
        skipTo(ch) {
            let found = this.string.indexOf(ch, this.pos);
            if (found > -1) {
                this.pos = found;
                return true;
            }
        }
        /**
        Move back `n` characters.
        */
        backUp(n) { this.pos -= n; }
        /**
        Get the column position at `this.pos`.
        */
        column() {
            if (this.lastColumnPos < this.start) {
                this.lastColumnValue = countCol(this.string, this.start, this.tabSize, this.lastColumnPos, this.lastColumnValue);
                this.lastColumnPos = this.start;
            }
            return this.lastColumnValue;
        }
        /**
        Get the indentation column of the current line.
        */
        indentation() {
            return countCol(this.string, null, this.tabSize);
        }
        /**
        Match the input against the given string or regular expression
        (which should start with a `^`). Return true or the regexp match
        if it matches.
        
        Unless `consume` is set to `false`, this will move `this.pos`
        past the matched text.
        
        When matching a string `caseInsensitive` can be set to true to
        make the match case-insensitive.
        */
        match(pattern, consume, caseInsensitive) {
            if (typeof pattern == "string") {
                let cased = (str) => caseInsensitive ? str.toLowerCase() : str;
                let substr = this.string.substr(this.pos, pattern.length);
                if (cased(substr) == cased(pattern)) {
                    if (consume !== false)
                        this.pos += pattern.length;
                    return true;
                }
                else
                    return null;
            }
            else {
                let match = this.string.slice(this.pos).match(pattern);
                if (match && match.index > 0)
                    return null;
                if (match && consume !== false)
                    this.pos += match[0].length;
                return match;
            }
        }
        /**
        Get the current token.
        */
        current() { return this.string.slice(this.start, this.pos); }
    }

    function fullParser(spec) {
        return {
            token: spec.token,
            blankLine: spec.blankLine || (() => { }),
            startState: spec.startState || (() => true),
            copyState: spec.copyState || defaultCopyState,
            indent: spec.indent || (() => null),
            languageData: spec.languageData || {}
        };
    }
    function defaultCopyState(state) {
        if (typeof state != "object")
            return state;
        let newState = {};
        for (let prop in state) {
            let val = state[prop];
            newState[prop] = (val instanceof Array ? val.slice() : val);
        }
        return newState;
    }
    /**
    A [language](https://codemirror.net/6/docs/ref/#language.Language) class based on a streaming
    parser.
    */
    class StreamLanguage extends Language {
        constructor(parser) {
            let data = defineLanguageFacet(parser.languageData);
            let p = fullParser(parser), self;
            let impl = new class extends Parser {
                createParse(input, fragments, ranges) {
                    return new Parse(self, input, fragments, ranges);
                }
            };
            super(data, impl, docID(data), [indentService.of((cx, pos) => this.getIndent(cx, pos))]);
            self = this;
            this.streamParser = p;
            this.stateAfter = new NodeProp({ perNode: true });
        }
        static define(spec) { return new StreamLanguage(spec); }
        getIndent(cx, pos) {
            let tree = syntaxTree(cx.state), at = tree.resolve(pos);
            while (at && at.type != this.topNode)
                at = at.parent;
            if (!at)
                return null;
            let start = findState(this, tree, 0, at.from, pos), statePos, state;
            if (start) {
                state = start.state;
                statePos = start.pos + 1;
            }
            else {
                state = this.streamParser.startState(cx.unit);
                statePos = 0;
            }
            if (pos - statePos > 10000 /* MaxIndentScanDist */)
                return null;
            while (statePos < pos) {
                let line = cx.state.doc.lineAt(statePos), end = Math.min(pos, line.to);
                if (line.length) {
                    let stream = new StringStream(line.text, cx.state.tabSize, cx.unit);
                    while (stream.pos < end - line.from)
                        readToken$2(this.streamParser.token, stream, state);
                }
                else {
                    this.streamParser.blankLine(state, cx.unit);
                }
                if (end == pos)
                    break;
                statePos = line.to + 1;
            }
            let { text } = cx.state.doc.lineAt(pos);
            return this.streamParser.indent(state, /^\s*(.*)/.exec(text)[1], cx);
        }
        get allowsNesting() { return false; }
    }
    function findState(lang, tree, off, startPos, before) {
        let state = off >= startPos && off + tree.length <= before && tree.prop(lang.stateAfter);
        if (state)
            return { state: lang.streamParser.copyState(state), pos: off + tree.length };
        for (let i = tree.children.length - 1; i >= 0; i--) {
            let child = tree.children[i], pos = off + tree.positions[i];
            let found = child instanceof Tree && pos < before && findState(lang, child, pos, startPos, before);
            if (found)
                return found;
        }
        return null;
    }
    function cutTree(lang, tree, from, to, inside) {
        if (inside && from <= 0 && to >= tree.length)
            return tree;
        if (!inside && tree.type == lang.topNode)
            inside = true;
        for (let i = tree.children.length - 1; i >= 0; i--) {
            let pos = tree.positions[i] + from, child = tree.children[i], inner;
            if (pos < to && child instanceof Tree) {
                if (!(inner = cutTree(lang, child, from - pos, to - pos, inside)))
                    break;
                return !inside ? inner
                    : new Tree(tree.type, tree.children.slice(0, i).concat(inner), tree.positions.slice(0, i + 1), pos + inner.length);
            }
        }
        return null;
    }
    function findStartInFragments(lang, fragments, startPos, editorState) {
        for (let f of fragments) {
            let from = f.from + (f.openStart ? 25 : 0), to = f.to - (f.openEnd ? 25 : 0);
            let found = from <= startPos && to > startPos && findState(lang, f.tree, 0 - f.offset, startPos, to), tree;
            if (found && (tree = cutTree(lang, f.tree, startPos + f.offset, found.pos + f.offset, false)))
                return { state: found.state, tree };
        }
        return { state: lang.streamParser.startState(editorState ? getIndentUnit(editorState) : 4), tree: Tree.empty };
    }
    class Parse {
        constructor(lang, input, fragments, ranges) {
            this.lang = lang;
            this.input = input;
            this.fragments = fragments;
            this.ranges = ranges;
            this.stoppedAt = null;
            this.chunks = [];
            this.chunkPos = [];
            this.chunk = [];
            this.chunkReused = undefined;
            this.rangeIndex = 0;
            this.to = ranges[ranges.length - 1].to;
            let context = ParseContext.get(), from = ranges[0].from;
            let { state, tree } = findStartInFragments(lang, fragments, from, context === null || context === void 0 ? void 0 : context.state);
            this.state = state;
            this.parsedPos = this.chunkStart = from + tree.length;
            if (tree.length) {
                this.chunks.push(tree);
                this.chunkPos.push(0);
            }
            if (context && this.parsedPos < context.viewport.from - 100000 /* MaxDistanceBeforeViewport */) {
                this.state = this.lang.streamParser.startState(getIndentUnit(context.state));
                context.skipUntilInView(this.parsedPos, context.viewport.from);
                this.parsedPos = context.viewport.from;
            }
        }
        advance() {
            let context = ParseContext.get();
            let parseEnd = this.stoppedAt == null ? this.to : this.stoppedAt;
            let end = Math.min(parseEnd, this.chunkStart + 2048 /* ChunkSize */);
            if (context)
                end = Math.min(end, context.viewport.to);
            while (this.parsedPos < end)
                this.parseLine(context);
            if (this.chunkStart < this.parsedPos)
                this.finishChunk();
            if (this.parsedPos >= parseEnd)
                return this.finish();
            if (context && this.parsedPos > context.viewport.to) {
                context.skipUntilInView(this.parsedPos, parseEnd);
                return this.finish();
            }
            return null;
        }
        stopAt(pos) {
            this.stoppedAt = pos;
        }
        lineAfter(pos) {
            let chunk = this.input.chunk(pos);
            if (!this.input.lineChunks) {
                let eol = chunk.indexOf("\n");
                if (eol > -1)
                    chunk = chunk.slice(0, eol);
            }
            else if (chunk == "\n") {
                chunk = "";
            }
            return pos + chunk.length <= this.to ? chunk : chunk.slice(0, this.to - pos);
        }
        nextLine() {
            let from = this.parsedPos, line = this.lineAfter(from), end = from + line.length;
            for (let index = this.rangeIndex;;) {
                let rangeEnd = this.ranges[index].to;
                if (rangeEnd >= end)
                    break;
                line = line.slice(0, rangeEnd - (end - line.length));
                index++;
                if (index == this.ranges.length)
                    break;
                let rangeStart = this.ranges[index].from;
                let after = this.lineAfter(rangeStart);
                line += after;
                end = rangeStart + after.length;
            }
            return { line, end };
        }
        skipGapsTo(pos, offset, side) {
            for (;;) {
                let end = this.ranges[this.rangeIndex].to, offPos = pos + offset;
                if (side > 0 ? end > offPos : end >= offPos)
                    break;
                let start = this.ranges[++this.rangeIndex].from;
                offset += start - end;
            }
            return offset;
        }
        emitToken(id, from, to, size, offset) {
            if (this.ranges.length > 1) {
                offset = this.skipGapsTo(from, offset, 1);
                from += offset;
                let len0 = this.chunk.length;
                offset = this.skipGapsTo(to, offset, -1);
                to += offset;
                size += this.chunk.length - len0;
            }
            this.chunk.push(id, from, to, size);
            return offset;
        }
        parseLine(context) {
            let { line, end } = this.nextLine(), offset = 0, { streamParser } = this.lang;
            let stream = new StringStream(line, context ? context.state.tabSize : 4, context ? getIndentUnit(context.state) : 2);
            if (stream.eol()) {
                streamParser.blankLine(this.state, stream.indentUnit);
            }
            else {
                while (!stream.eol()) {
                    let token = readToken$2(streamParser.token, stream, this.state);
                    if (token)
                        offset = this.emitToken(tokenID(token), this.parsedPos + stream.start, this.parsedPos + stream.pos, 4, offset);
                }
            }
            this.parsedPos = end;
            if (this.parsedPos < this.to)
                this.parsedPos++;
        }
        finishChunk() {
            let tree = Tree.build({
                buffer: this.chunk,
                start: this.chunkStart,
                length: this.parsedPos - this.chunkStart,
                nodeSet,
                topID: 0,
                maxBufferLength: 2048 /* ChunkSize */,
                reused: this.chunkReused
            });
            tree = new Tree(tree.type, tree.children, tree.positions, tree.length, [[this.lang.stateAfter, this.lang.streamParser.copyState(this.state)]]);
            this.chunks.push(tree);
            this.chunkPos.push(this.chunkStart - this.ranges[0].from);
            this.chunk = [];
            this.chunkReused = undefined;
            this.chunkStart = this.parsedPos;
        }
        finish() {
            return new Tree(this.lang.topNode, this.chunks, this.chunkPos, this.parsedPos - this.ranges[0].from).balance();
        }
    }
    function readToken$2(token, stream, state) {
        stream.start = stream.pos;
        for (let i = 0; i < 10; i++) {
            let result = token(stream, state);
            if (stream.pos > stream.start)
                return result;
        }
        throw new Error("Stream parser failed to advance stream.");
    }
    const tokenTable = /*@__PURE__*/Object.create(null);
    const typeArray$1 = [NodeType.none];
    const nodeSet = /*@__PURE__*/new NodeSet(typeArray$1);
    const warned = [];
    function tokenID(tag) {
        return !tag ? 0 : tokenTable[tag] || (tokenTable[tag] = createTokenType(tag));
    }
    for (let [legacyName, name] of [
        ["variable", "variableName"],
        ["variable-2", "variableName.special"],
        ["string-2", "string.special"],
        ["def", "variableName.definition"],
        ["tag", "typeName"],
        ["attribute", "propertyName"],
        ["type", "typeName"],
        ["builtin", "variableName.standard"],
        ["qualifier", "modifier"],
        ["error", "invalid"],
        ["header", "heading"],
        ["property", "propertyName"]
    ])
        tokenTable[legacyName] = /*@__PURE__*/tokenID(name);
    function warnForPart(part, msg) {
        if (warned.indexOf(part) > -1)
            return;
        warned.push(part);
        console.warn(msg);
    }
    function createTokenType(tagStr) {
        let tag = null;
        for (let part of tagStr.split(".")) {
            let value = tags$1[part];
            if (!value) {
                warnForPart(part, `Unknown highlighting tag ${part}`);
            }
            else if (typeof value == "function") {
                if (!tag)
                    warnForPart(part, `Modifier ${part} used at start of tag`);
                else
                    tag = value(tag);
            }
            else {
                if (tag)
                    warnForPart(part, `Tag ${part} used as modifier`);
                else
                    tag = value;
            }
        }
        if (!tag)
            return 0;
        let name = tagStr.replace(/ /g, "_"), type = NodeType.define({
            id: typeArray$1.length,
            name,
            props: [styleTags({ [name]: tag })]
        });
        typeArray$1.push(type);
        return type.id;
    }
    function docID(data) {
        let type = NodeType.define({ id: typeArray$1.length, name: "Document", props: [languageDataProp.add(() => data)] });
        typeArray$1.push(type);
        return type;
    }

    var index$7 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        StreamLanguage: StreamLanguage,
        StringStream: StringStream
    });

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const whitespace$1 = 34,
      LineComment = 1,
      BlockComment = 2,
      String$1 = 3,
      Number$1 = 4,
      Bool = 5,
      Null = 6,
      ParenL$2 = 7,
      ParenR$1 = 8,
      BraceL$1 = 9,
      BraceR = 10,
      BracketL$1 = 11,
      BracketR = 12,
      Semi = 13,
      Dot$1 = 14,
      Operator = 15,
      Punctuation = 16,
      SpecialVar = 17,
      Identifier$2 = 18,
      QuotedIdentifier = 19,
      Keyword = 20,
      Type = 21,
      Builtin = 22;

    function isAlpha(ch) {
        return ch >= 65 /* A */ && ch <= 90 /* Z */ || ch >= 97 /* a */ && ch <= 122 /* z */ || ch >= 48 /* _0 */ && ch <= 57 /* _9 */;
    }
    function isHexDigit(ch) {
        return ch >= 48 /* _0 */ && ch <= 57 /* _9 */ || ch >= 97 /* a */ && ch <= 102 /* f */ || ch >= 65 /* A */ && ch <= 70 /* F */;
    }
    function readLiteral(input, endQuote, backslashEscapes) {
        for (let escaped = false;;) {
            if (input.next < 0)
                return;
            if (input.next == endQuote && !escaped) {
                input.advance();
                return;
            }
            escaped = backslashEscapes && !escaped && input.next == 92 /* Backslash */;
            input.advance();
        }
    }
    function readWord(input, result) {
        for (;;) {
            if (input.next != 95 /* Underscore */ && !isAlpha(input.next))
                break;
            if (result != null)
                result += String.fromCharCode(input.next);
            input.advance();
        }
        return result;
    }
    function readWordOrQuoted(input) {
        if (input.next == 39 /* SingleQuote */ || input.next == 34 /* DoubleQuote */ || input.next == 96 /* Backtick */) {
            let quote = input.next;
            input.advance();
            readLiteral(input, quote, false);
        }
        else {
            readWord(input);
        }
    }
    function readNumber(input, sawDot) {
        for (;;) {
            if (input.next == 46 /* Dot */) {
                if (sawDot)
                    break;
                sawDot = true;
            }
            else if (input.next < 48 /* _0 */ || input.next > 57 /* _9 */) {
                break;
            }
            input.advance();
        }
        if (input.next == 69 /* E */ || input.next == 101 /* e */) {
            input.advance();
            if (input.next == 43 /* Plus */ || input.next == 45 /* Dash */)
                input.advance();
            while (input.next >= 48 /* _0 */ && input.next <= 57 /* _9 */)
                input.advance();
        }
    }
    function eol(input) {
        while (!(input.next < 0 || input.next == 10 /* Newline */))
            input.advance();
    }
    function inString$2(ch, str) {
        for (let i = 0; i < str.length; i++)
            if (str.charCodeAt(i) == ch)
                return true;
        return false;
    }
    const Space$1 = " \t\r\n";
    function keywords$F(keywords, types, builtin) {
        let result = Object.create(null);
        result["true"] = result["false"] = Bool;
        result["null"] = result["unknown"] = Null;
        for (let kw of keywords.split(" "))
            if (kw)
                result[kw] = Keyword;
        for (let tp of types.split(" "))
            if (tp)
                result[tp] = Type;
        for (let kw of (builtin || "").split(" "))
            if (kw)
                result[kw] = Builtin;
        return result;
    }
    const SQLTypes = "array binary bit boolean char character clob date decimal double float int integer interval large national nchar nclob numeric object precision real smallint time timestamp varchar varying ";
    const SQLKeywords = "absolute action add after all allocate alter and any are as asc assertion at authorization before begin between blob both breadth by call cascade cascaded case cast catalog check close collate collation column commit condition connect connection constraint constraints constructor continue corresponding count create cross cube current current_date current_default_transform_group current_transform_group_for_type current_path current_role current_time current_timestamp current_user cursor cycle data day deallocate dec declare default deferrable deferred delete depth deref desc describe descriptor deterministic diagnostics disconnect distinct do domain drop dynamic each else elseif end end-exec equals escape except exception exec execute exists exit external fetch first for foreign found from free full function general get global go goto grant group grouping handle having hold hour identity if immediate in indicator initially inner inout input insert intersect into is isolation join key language last lateral leading leave left level like limit local localtime localtimestamp locator loop map match method minute modifies module month names natural nesting new next no none not of old on only open option or order ordinality out outer output overlaps pad parameter partial path prepare preserve primary prior privileges procedure public read reads recursive redo ref references referencing relative release repeat resignal restrict result return returns revoke right role rollback rollup routine row rows savepoint schema scroll search second section select session session_user set sets signal similar size some space specific specifictype sql sqlexception sqlstate sqlwarning start state static system_user table temporary then timezone_hour timezone_minute to trailing transaction translation treat trigger under undo union unique unnest until update usage user using value values view when whenever where while with without work write year zone ";
    const defaults$2 = {
        backslashEscapes: false,
        hashComments: false,
        spaceAfterDashes: false,
        slashComments: false,
        doubleQuotedStrings: false,
        charSetCasts: false,
        operatorChars: "*+\-%<>!=&|~^/",
        specialVar: "?",
        identifierQuotes: '"',
        words: /*@__PURE__*/keywords$F(SQLKeywords, SQLTypes)
    };
    function dialect(spec, kws, types, builtin) {
        let dialect = {};
        for (let prop in defaults$2)
            dialect[prop] = (spec.hasOwnProperty(prop) ? spec : defaults$2)[prop];
        if (kws)
            dialect.words = keywords$F(kws, types || "", builtin);
        return dialect;
    }
    function tokensFor(d) {
        return new ExternalTokenizer(input => {
            var _a;
            let { next } = input;
            input.advance();
            if (inString$2(input.next, Space$1)) {
                while (inString$2(input.next, Space$1))
                    input.advance();
                input.acceptToken(whitespace$1);
            }
            else if (next == 39 /* SingleQuote */ || next == 34 /* DoubleQuote */ && d.doubleQuotedStrings) {
                readLiteral(input, next, d.backslashEscapes);
                input.acceptToken(String$1);
            }
            else if (next == 35 /* Hash */ && d.hashComments ||
                next == 47 /* Slash */ && input.next == 47 /* Slash */ && d.slashComments) {
                eol(input);
                input.acceptToken(LineComment);
            }
            else if (next == 45 /* Dash */ && input.next == 45 /* Dash */ &&
                (!d.spaceAfterDashes || input.peek(2) == 32 /* Space */)) {
                eol(input);
                input.acceptToken(LineComment);
            }
            else if (next == 47 /* Slash */ && input.next == 42 /* Star */) {
                input.advance();
                for (let prev = -1, depth = 1;;) {
                    if (input.next < 0)
                        break;
                    input.advance();
                    if (prev == 42 /* Star */ && input.next == 47 /* Slash */) {
                        depth--;
                        if (!depth)
                            break;
                        prev = -1;
                    }
                    else if (prev == 47 /* Slash */ && input.next == 42 /* Star */) {
                        depth++;
                        prev = -1;
                    }
                    else {
                        prev = input.next;
                    }
                }
                input.acceptToken(BlockComment);
            }
            else if ((next == 101 /* e */ || next == 69 /* E */) && input.next == 39 /* SingleQuote */) {
                input.advance();
                readLiteral(input, 39 /* SingleQuote */, true);
            }
            else if ((next == 110 /* n */ || next == 78 /* N */) && input.next == 39 /* SingleQuote */ &&
                d.charSetCasts) {
                input.advance();
                readLiteral(input, 39 /* SingleQuote */, d.backslashEscapes);
                input.acceptToken(String$1);
            }
            else if (next == 95 /* Underscore */ && d.charSetCasts) {
                for (let i = 0;; i++) {
                    if (input.next == 39 /* SingleQuote */ && i > 1) {
                        input.advance();
                        readLiteral(input, 39 /* SingleQuote */, d.backslashEscapes);
                        input.acceptToken(String$1);
                        break;
                    }
                    if (!isAlpha(input.next))
                        break;
                    input.advance();
                }
            }
            else if (next == 40 /* ParenL */) {
                input.acceptToken(ParenL$2);
            }
            else if (next == 41 /* ParenR */) {
                input.acceptToken(ParenR$1);
            }
            else if (next == 123 /* BraceL */) {
                input.acceptToken(BraceL$1);
            }
            else if (next == 125 /* BraceR */) {
                input.acceptToken(BraceR);
            }
            else if (next == 91 /* BracketL */) {
                input.acceptToken(BracketL$1);
            }
            else if (next == 93 /* BracketR */) {
                input.acceptToken(BracketR);
            }
            else if (next == 59 /* Semi */) {
                input.acceptToken(Semi);
            }
            else if (next == 48 /* _0 */ && (input.next == 98 /* b */ || input.next == 66 /* B */) ||
                (next == 98 /* b */ || next == 66 /* B */) && input.next == 39 /* SingleQuote */) {
                let quoted = input.next == 39 /* SingleQuote */;
                input.advance();
                while (input.next == 48 /* _0 */ || input.next == 49 /* _1 */)
                    input.advance();
                if (quoted && input.next == 39 /* SingleQuote */)
                    input.advance();
                input.acceptToken(Number$1);
            }
            else if (next == 48 /* _0 */ && (input.next == 120 /* x */ || input.next == 88 /* X */) ||
                (next == 120 /* x */ || next == 88 /* X */) && input.next == 39 /* SingleQuote */) {
                let quoted = input.next == 39 /* SingleQuote */;
                input.advance();
                while (isHexDigit(input.next))
                    input.advance();
                if (quoted && input.next == 39 /* SingleQuote */)
                    input.advance();
                input.acceptToken(Number$1);
            }
            else if (next == 46 /* Dot */ && input.next >= 48 /* _0 */ && input.next <= 57 /* _9 */) {
                readNumber(input, true);
                input.acceptToken(Number$1);
            }
            else if (next == 46 /* Dot */) {
                input.acceptToken(Dot$1);
            }
            else if (next >= 48 /* _0 */ && next <= 57 /* _9 */) {
                readNumber(input, false);
                input.acceptToken(Number$1);
            }
            else if (inString$2(next, d.operatorChars)) {
                while (inString$2(input.next, d.operatorChars))
                    input.advance();
                input.acceptToken(Operator);
            }
            else if (inString$2(next, d.specialVar)) {
                if (input.next == next)
                    input.advance();
                readWordOrQuoted(input);
                input.acceptToken(SpecialVar);
            }
            else if (inString$2(next, d.identifierQuotes)) {
                readLiteral(input, next, false);
                input.acceptToken(QuotedIdentifier);
            }
            else if (next == 58 /* Colon */ || next == 44 /* Comma */) {
                input.acceptToken(Punctuation);
            }
            else if (isAlpha(next)) {
                let word = readWord(input, String.fromCharCode(next));
                input.acceptToken((_a = d.words[word.toLowerCase()]) !== null && _a !== void 0 ? _a : Identifier$2);
            }
        });
    }
    const tokens = /*@__PURE__*/tokensFor(defaults$2);

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const parser$1$1 = /*@__PURE__*/LRParser.deserialize({
      version: 13,
      states: "%dQ]QQOOO#kQRO'#DQO#rQQO'#CuO%RQQO'#CvO%YQQO'#CwO%aQQO'#CxOOQQ'#DQ'#DQOOQQ'#C{'#C{O&lQRO'#CyOOQQ'#Ct'#CtOOQQ'#Cz'#CzQ]QQOOQOQQOOO&vQQO,59aO'RQQO,59aO'WQQO'#DQOOQQ,59b,59bO'eQQO,59bOOQQ,59c,59cO'lQQO,59cOOQQ,59d,59dO'sQQO,59dOOQQ-E6y-E6yOOQQ,59`,59`OOQQ-E6x-E6xOOQQ'#C|'#C|OOQQ1G.{1G.{O&vQQO1G.{OOQQ1G.|1G.|OOQQ1G.}1G.}OOQQ1G/O1G/OP'zQQO'#C{POQQ-E6z-E6zOOQQ7+$g7+$g",
      stateData: "(R~OrOSPOSQOS~ORUOSUOTUOUUOVROXSOZTO]XO^QO_UO`UOaPObPOcPOdUOeUOfUO~O^]ORtXStXTtXUtXVtXXtXZtX]tX_tX`tXatXbtXctXdtXetXftX~OqtX~P!dOa^Ob^Oc^O~ORUOSUOTUOUUOVROXSOZTO^QO_UO`UOa_Ob_Oc_OdUOeUOfUO~OW`O~P#}OYbO~P#}O[dO~P#}ORUOSUOTUOUUOVROXSOZTO^QO_UO`UOaPObPOcPOdUOeUOfUO~O]gOqmX~P%hOaiObiOciO~O^kO~OWtXYtX[tX~P!dOWlO~P#}OYmO~P#}O[nO~P#}O]gO~P#}O",
      goto: "#YuPPPPPPPPPPPPPPPPPPPPPPPPvzzzz!W![!b!vPPP!|TYOZeUORSTWZaceoT[OZQZORhZSWOZQaRQcSQeTZfWaceoQj]RqkeVORSTWZaceo",
      nodeNames: "⚠ LineComment BlockComment String Number Bool Null ( ) [ ] { } ; . Operator Punctuation SpecialVar Identifier QuotedIdentifier Keyword Type Builtin Script Statement CompositeIdentifier Parens Braces Brackets Statement",
      maxTerm: 36,
      skippedNodes: [0,1,2],
      repeatNodeCount: 3,
      tokenData: "RORO",
      tokenizers: [0, tokens],
      topRules: {"Script":[0,23]},
      tokenPrec: 0
    });

    function tokenBefore(tree) {
        let cursor = tree.cursor.moveTo(tree.from, -1);
        while (/Comment/.test(cursor.name))
            cursor.moveTo(cursor.from, -1);
        return cursor.node;
    }
    function stripQuotes(name) {
        let quoted = /^[`'"](.*)[`'"]$/.exec(name);
        return quoted ? quoted[1] : name;
    }
    function sourceContext(state, startPos) {
        let pos = syntaxTree(state).resolveInner(startPos, -1);
        let empty = false;
        if (pos.name == "Identifier" || pos.name == "QuotedIdentifier") {
            empty = false;
            let parent = null;
            let dot = tokenBefore(pos);
            if (dot && dot.name == ".") {
                let before = tokenBefore(dot);
                if (before && before.name == "Identifier" || before.name == "QuotedIdentifier")
                    parent = stripQuotes(state.sliceDoc(before.from, before.to).toLowerCase());
            }
            return { parent,
                from: pos.from,
                quoted: pos.name == "QuotedIdentifier" ? state.sliceDoc(pos.from, pos.from + 1) : null };
        }
        else if (pos.name == ".") {
            let before = tokenBefore(pos);
            if (before && before.name == "Identifier" || before.name == "QuotedIdentifier")
                return { parent: stripQuotes(state.sliceDoc(before.from, before.to).toLowerCase()),
                    from: startPos,
                    quoted: null };
        }
        else {
            empty = true;
        }
        return { parent: null, from: startPos, quoted: null, empty };
    }
    function maybeQuoteCompletions(quote, completions) {
        if (!quote)
            return completions;
        return completions.map(c => (Object.assign(Object.assign({}, c), { label: quote + c.label + quote, apply: undefined })));
    }
    const Span = /^\w*$/, QuotedSpan = /^[`'"]?\w*[`'"]?$/;
    function completeFromSchema$1(schema, tables, defaultTable) {
        let byTable = Object.create(null);
        for (let table in schema)
            byTable[table] = schema[table].map(val => {
                return typeof val == "string" ? { label: val, type: "property" } : val;
            });
        let topOptions = (tables || Object.keys(byTable).map(name => ({ label: name, type: "type" })))
            .concat(defaultTable && byTable[defaultTable] || []);
        return (context) => {
            let { parent, from, quoted, empty } = sourceContext(context.state, context.pos);
            if (empty && !context.explicit)
                return null;
            let options = topOptions;
            if (parent) {
                let columns = byTable[parent];
                if (!columns)
                    return null;
                options = columns;
            }
            let quoteAfter = quoted && context.state.sliceDoc(context.pos, context.pos + 1) == quoted;
            return {
                from,
                to: quoteAfter ? context.pos + 1 : undefined,
                options: maybeQuoteCompletions(quoted, options),
                span: quoted ? QuotedSpan : Span
            };
        };
    }
    function completeKeywords(keywords, upperCase) {
        let completions = Object.keys(keywords).map(keyword => ({
            label: upperCase ? keyword.toUpperCase() : keyword,
            type: keywords[keyword] == Type ? "type" : keywords[keyword] == Keyword ? "keyword" : "variable",
            boost: -1
        }));
        return ifNotIn(["QuotedIdentifier", "SpecialVar", "String", "LineComment", "BlockComment", "."], completeFromList(completions));
    }

    let parser$6 = /*@__PURE__*/parser$1$1.configure({
        props: [
            /*@__PURE__*/indentNodeProp.add({
                Statement: /*@__PURE__*/continuedIndent()
            }),
            /*@__PURE__*/foldNodeProp.add({
                Statement(tree) { return { from: tree.firstChild.to, to: tree.to }; },
                BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }
            }),
            /*@__PURE__*/styleTags({
                Keyword: tags$1.keyword,
                Type: tags$1.typeName,
                Builtin: /*@__PURE__*/tags$1.standard(tags$1.name),
                Bool: tags$1.bool,
                Null: tags$1.null,
                Number: tags$1.number,
                String: tags$1.string,
                Identifier: tags$1.name,
                QuotedIdentifier: /*@__PURE__*/tags$1.special(tags$1.string),
                SpecialVar: /*@__PURE__*/tags$1.special(tags$1.name),
                LineComment: tags$1.lineComment,
                BlockComment: tags$1.blockComment,
                Operator: tags$1.operator,
                "Semi Punctuation": tags$1.punctuation,
                "( )": tags$1.paren,
                "{ }": tags$1.brace,
                "[ ]": tags$1.squareBracket
            })
        ]
    });
    /**
    Represents an SQL dialect.
    */
    class SQLDialect {
        /**
        @internal
        */
        constructor(
        /**
        @internal
        */
        dialect, 
        /**
        The language for this dialect.
        */
        language) {
            this.dialect = dialect;
            this.language = language;
        }
        /**
        Returns the language for this dialect as an extension.
        */
        get extension() { return this.language.extension; }
        /**
        Define a new dialect.
        */
        static define(spec) {
            let d = dialect(spec, spec.keywords, spec.types, spec.builtin);
            let language = LRLanguage.define({
                parser: parser$6.configure({
                    tokenizers: [{ from: tokens, to: tokensFor(d) }]
                }),
                languageData: {
                    commentTokens: { line: "--", block: { open: "/*", close: "*/" } },
                    closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] }
                }
            });
            return new SQLDialect(d, language);
        }
    }
    /**
    Returns an extension that enables keyword completion for the given
    SQL dialect.
    */
    function keywordCompletion(dialect, upperCase = false) {
        return dialect.language.data.of({
            autocomplete: completeKeywords(dialect.dialect.words, upperCase)
        });
    }
    /**
    Returns an extension that enables schema-based completion for the
    given configuration.
    */
    function schemaCompletion(config) {
        return config.schema ? (config.dialect || StandardSQL).language.data.of({
            autocomplete: completeFromSchema$1(config.schema, config.tables, config.defaultTable)
        }) : [];
    }
    /**
    SQL language support for the given SQL dialect, with keyword
    completion, and, if provided, schema-based completion as extra
    extensions.
    */
    function sql$2(config = {}) {
        let lang = config.dialect || StandardSQL;
        return new LanguageSupport(lang.language, [schemaCompletion(config), keywordCompletion(lang, !!config.upperCaseKeywords)]);
    }
    /**
    The standard SQL dialect.
    */
    const StandardSQL = /*@__PURE__*/SQLDialect.define({});
    /**
    Dialect for [PostgreSQL](https://www.postgresql.org).
    */
    const PostgreSQL = /*@__PURE__*/SQLDialect.define({
        charSetCasts: true,
        operatorChars: "+-*/<>=~!@#%^&|`?",
        specialVar: "",
        keywords: SQLKeywords + "a abort abs absent access according ada admin aggregate alias also always analyse analyze array_agg array_max_cardinality asensitive assert assignment asymmetric atomic attach attribute attributes avg backward base64 begin_frame begin_partition bernoulli bit_length blocked bom c cache called cardinality catalog_name ceil ceiling chain char_length character_length character_set_catalog character_set_name character_set_schema characteristics characters checkpoint class class_origin cluster coalesce cobol collation_catalog collation_name collation_schema collect column_name columns command_function command_function_code comment comments committed concurrently condition_number configuration conflict connection_name constant constraint_catalog constraint_name constraint_schema contains content control conversion convert copy corr cost covar_pop covar_samp csv cume_dist current_catalog current_row current_schema cursor_name database datalink datatype datetime_interval_code datetime_interval_precision db debug defaults defined definer degree delimiter delimiters dense_rank depends derived detach detail dictionary disable discard dispatch dlnewcopy dlpreviouscopy dlurlcomplete dlurlcompleteonly dlurlcompletewrite dlurlpath dlurlpathonly dlurlpathwrite dlurlscheme dlurlserver dlvalue document dump dynamic_function dynamic_function_code element elsif empty enable encoding encrypted end_frame end_partition endexec enforced enum errcode error event every exclude excluding exclusive exp explain expression extension extract family file filter final first_value flag floor following force foreach fortran forward frame_row freeze fs functions fusion g generated granted greatest groups handler header hex hierarchy hint id ignore ilike immediately immutable implementation implicit import include including increment indent index indexes info inherit inherits inline insensitive instance instantiable instead integrity intersection invoker isnull k key_member key_type label lag last_value lead leakproof least length library like_regex link listen ln load location lock locked log logged lower m mapping matched materialized max max_cardinality maxvalue member merge message message_length message_octet_length message_text min minvalue mod mode more move multiset mumps name namespace nfc nfd nfkc nfkd nil normalize normalized nothing notice notify notnull nowait nth_value ntile nullable nullif nulls number occurrences_regex octet_length octets off offset oids operator options ordering others over overlay overriding owned owner p parallel parameter_mode parameter_name parameter_ordinal_position parameter_specific_catalog parameter_specific_name parameter_specific_schema parser partition pascal passing passthrough password percent percent_rank percentile_cont percentile_disc perform period permission pg_context pg_datatype_name pg_exception_context pg_exception_detail pg_exception_hint placing plans pli policy portion position position_regex power precedes preceding prepared print_strict_params procedural procedures program publication query quote raise range rank reassign recheck recovery refresh regr_avgx regr_avgy regr_count regr_intercept regr_r2 regr_slope regr_sxx regr_sxy regr_syy reindex rename repeatable replace replica requiring reset respect restart restore result_oid returned_cardinality returned_length returned_octet_length returned_sqlstate returning reverse routine_catalog routine_name routine_schema routines row_count row_number rowtype rule scale schema_name schemas scope scope_catalog scope_name scope_schema security selective self sensitive sequence sequences serializable server server_name setof share show simple skip slice snapshot source specific_name sqlcode sqlerror sqrt stable stacked standalone statement statistics stddev_pop stddev_samp stdin stdout storage strict strip structure style subclass_origin submultiset subscription substring substring_regex succeeds sum symmetric sysid system system_time t table_name tables tablesample tablespace temp template ties token top_level_count transaction_active transactions_committed transactions_rolled_back transform transforms translate translate_regex trigger_catalog trigger_name trigger_schema trim trim_array truncate trusted type types uescape unbounded uncommitted unencrypted unlink unlisten unlogged unnamed untyped upper uri use_column use_variable user_defined_type_catalog user_defined_type_code user_defined_type_name user_defined_type_schema vacuum valid validate validator value_of var_pop var_samp varbinary variable_conflict variadic verbose version versioning views volatile warning whitespace width_bucket window within wrapper xmlagg xmlattributes xmlbinary xmlcast xmlcomment xmlconcat xmldeclaration xmldocument xmlelement xmlexists xmlforest xmliterate xmlnamespaces xmlparse xmlpi xmlquery xmlroot xmlschema xmlserialize xmltable xmltext xmlvalidate yes",
        types: SQLTypes + "bigint int8 bigserial serial8 varbit bool box bytea cidr circle precision float8 inet int4 json jsonb line lseg macaddr macaddr8 money numeric path pg_lsn point polygon float4 int2 smallserial serial2 serial serial4 text without zone with timetz timestamptz tsquery tsvector txid_snapshot uuid xml"
    });
    const MySQLKeywords = "accessible algorithm analyze asensitive authors auto_increment autocommit avg avg_row_length binlog btree cache catalog_name chain change changed checkpoint checksum class_origin client_statistics coalesce code collations columns comment committed completion concurrent consistent contains contributors convert database databases day_hour day_microsecond day_minute day_second delay_key_write delayed delimiter des_key_file dev_pop dev_samp deviance directory disable discard distinctrow div dual dumpfile enable enclosed ends engine engines enum errors escaped even event events every explain extended fast field fields flush force found_rows fulltext grants handler hash high_priority hosts hour_microsecond hour_minute hour_second ignore ignore_server_ids import index index_statistics infile innodb insensitive insert_method install invoker iterate keys kill linear lines list load lock logs low_priority master master_heartbeat_period master_ssl_verify_server_cert masters max max_rows maxvalue message_text middleint migrate min min_rows minute_microsecond minute_second mod mode modify mutex mysql_errno no_write_to_binlog offline offset one online optimize optionally outfile pack_keys parser partition partitions password phase plugin plugins prev processlist profile profiles purge query quick range read_write rebuild recover regexp relaylog remove rename reorganize repair repeatable replace require resume rlike row_format rtree schedule schema_name schemas second_microsecond security sensitive separator serializable server share show slave slow snapshot soname spatial sql_big_result sql_buffer_result sql_cache sql_calc_found_rows sql_no_cache sql_small_result ssl starting starts std stddev stddev_pop stddev_samp storage straight_join subclass_origin sum suspend table_name table_statistics tables tablespace terminated triggers truncate uncommitted uninstall unlock upgrade use use_frm user_resources user_statistics utc_date utc_time utc_timestamp variables views warnings xa xor year_month zerofill";
    const MySQLTypes = SQLTypes + "bool blob long longblob longtext medium mediumblob mediumint mediumtext tinyblob tinyint tinytext text bigint int1 int2 int3 int4 int8 float4 float8 varbinary varcharacter precision datetime year unsigned signed";
    const MySQLBuiltin = "charset clear connect edit ego exit go help nopager notee nowarning pager print prompt quit rehash source status system tee";
    /**
    [MySQL](https://dev.mysql.com/) dialect.
    */
    const MySQL = /*@__PURE__*/SQLDialect.define({
        operatorChars: "*+-%<>!=&|^",
        charSetCasts: true,
        doubleQuotedStrings: true,
        hashComments: true,
        spaceAfterDashes: true,
        specialVar: "@?",
        identifierQuotes: "`",
        keywords: SQLKeywords + "group_concat " + MySQLKeywords,
        types: MySQLTypes,
        builtin: MySQLBuiltin
    });
    /**
    Variant of [`MySQL`](https://codemirror.net/6/docs/ref/#lang-sql.MySQL) for
    [MariaDB](https://mariadb.org/).
    */
    const MariaSQL = /*@__PURE__*/SQLDialect.define({
        operatorChars: "*+-%<>!=&|^",
        charSetCasts: true,
        doubleQuotedStrings: true,
        hashComments: true,
        spaceAfterDashes: true,
        specialVar: "@?",
        identifierQuotes: "`",
        keywords: SQLKeywords + "always generated groupby_concat hard persistent shutdown soft virtual " + MySQLKeywords,
        types: MySQLTypes,
        builtin: MySQLBuiltin
    });
    /**
    SQL dialect for Microsoft [SQL
    Server](https://www.microsoft.com/en-us/sql-server).
    */
    const MSSQL = /*@__PURE__*/SQLDialect.define({
        keywords: SQLKeywords + "trigger proc view index for add constraint key primary foreign collate clustered nonclustered declare exec go if use index holdlock nolock nowait paglock pivot readcommitted readcommittedlock readpast readuncommitted repeatableread rowlock serializable snapshot tablock tablockx unpivot updlock with",
        types: SQLTypes + "bigint smallint smallmoney tinyint money real text nvarchar ntext varbinary image cursor hierarchyid uniqueidentifier sql_variant xml table",
        builtin: "binary_checksum checksum connectionproperty context_info current_request_id error_line error_message error_number error_procedure error_severity error_state formatmessage get_filestream_transaction_context getansinull host_id host_name isnull isnumeric min_active_rowversion newid newsequentialid rowcount_big xact_state object_id",
        operatorChars: "*+-%<>!=^&|/",
        specialVar: "@"
    });
    /**
    [SQLite](https://sqlite.org/) dialect.
    */
    const SQLite = /*@__PURE__*/SQLDialect.define({
        keywords: SQLKeywords + "abort analyze attach autoincrement conflict database detach exclusive fail glob ignore index indexed instead isnull notnull offset plan pragma query raise regexp reindex rename replace temp vacuum virtual",
        types: SQLTypes + "bool blob long longblob longtext medium mediumblob mediumint mediumtext tinyblob tinyint tinytext text bigint int2 int8 year unsigned signed real",
        builtin: "auth backup bail binary changes check clone databases dbinfo dump echo eqp exit explain fullschema headers help import imposter indexes iotrace limit lint load log mode nullvalue once open output print prompt quit read restore save scanstats schema separator session shell show stats system tables testcase timeout timer trace vfsinfo vfslist vfsname width",
        operatorChars: "*+-%<>!=&|/~",
        identifierQuotes: "`\"",
        specialVar: "@:?$"
    });
    /**
    Dialect for [Cassandra](https://cassandra.apache.org/)'s SQL-ish query language.
    */
    const Cassandra = /*@__PURE__*/SQLDialect.define({
        keywords: "add all allow alter and any apply as asc authorize batch begin by clustering columnfamily compact consistency count create custom delete desc distinct drop each_quorum exists filtering from grant if in index insert into key keyspace keyspaces level limit local_one local_quorum modify nan norecursive nosuperuser not of on one order password permission permissions primary quorum rename revoke schema select set storage superuser table three to token truncate ttl two type unlogged update use user users using values where with writetime infinity NaN",
        types: SQLTypes + "ascii bigint blob counter frozen inet list map static text timeuuid tuple uuid varint",
        slashComments: true
    });
    /**
    [PL/SQL](https://en.wikipedia.org/wiki/PL/SQL) dialect.
    */
    const PLSQL = /*@__PURE__*/SQLDialect.define({
        keywords: SQLKeywords + "abort accept access add all alter and any array arraylen as asc assert assign at attributes audit authorization avg base_table begin between binary_integer body boolean by case cast char char_base check close cluster clusters colauth column comment commit compress connect connected constant constraint crash create current currval cursor data_base database date dba deallocate debugoff debugon decimal declare default definition delay delete desc digits dispose distinct do drop else elseif elsif enable end entry escape exception exception_init exchange exclusive exists exit external fast fetch file for force form from function generic goto grant group having identified if immediate in increment index indexes indicator initial initrans insert interface intersect into is key level library like limited local lock log logging long loop master maxextents maxtrans member minextents minus mislabel mode modify multiset new next no noaudit nocompress nologging noparallel not nowait number_base object of off offline on online only open option or order out package parallel partition pctfree pctincrease pctused pls_integer positive positiven pragma primary prior private privileges procedure public raise range raw read rebuild record ref references refresh release rename replace resource restrict return returning returns reverse revoke rollback row rowid rowlabel rownum rows run savepoint schema segment select separate session set share snapshot some space split sql start statement storage subtype successful synonym tabauth table tables tablespace task terminate then to trigger truncate type union unique unlimited unrecoverable unusable update use using validate value values variable view views when whenever where while with work",
        builtin: "appinfo arraysize autocommit autoprint autorecovery autotrace blockterminator break btitle cmdsep colsep compatibility compute concat copycommit copytypecheck define describe echo editfile embedded escape exec execute feedback flagger flush heading headsep instance linesize lno loboffset logsource long longchunksize markup native newpage numformat numwidth pagesize pause pno recsep recsepchar release repfooter repheader serveroutput shiftinout show showmode size spool sqlblanklines sqlcase sqlcode sqlcontinue sqlnumber sqlpluscompatibility sqlprefix sqlprompt sqlterminator suffix tab term termout time timing trimout trimspool ttitle underline verify version wrap",
        types: SQLTypes + "ascii bfile bfilename bigserial bit blob dec number nvarchar nvarchar2 serial smallint string text uid varchar2 xml",
        operatorChars: "*/+-%<>!=~",
        doubleQuotedStrings: true,
        charSetCasts: true
    });

    var index$6 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Cassandra: Cassandra,
        MSSQL: MSSQL,
        MariaSQL: MariaSQL,
        MySQL: MySQL,
        PLSQL: PLSQL,
        PostgreSQL: PostgreSQL,
        SQLDialect: SQLDialect,
        SQLite: SQLite,
        StandardSQL: StandardSQL,
        keywordCompletion: keywordCompletion,
        schemaCompletion: schemaCompletion,
        sql: sql$2
    });

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const RawString$1 = 1,
      templateArgsEndFallback = 2,
      MacroName = 3;

    const R = 82, L = 76, u = 117, U = 85,
          a = 97, z = 122, A$1 = 65, Z = 90, Underscore = 95,
          Zero$1 = 48,
          Quote$1 = 34,
          ParenL$1 = 40, ParenR = 41,
          Space = 32, GreaterThan$1 = 62;

    const rawString = new ExternalTokenizer(input => {
      // Raw string literals can start with: R, LR, uR, UR, u8R
      if (input.next == L || input.next == U) {
        input.advance();
      } else if (input.next == u) {
        input.advance();
        if (input.next == Zero$1 + 8) input.advance();
      }
      if (input.next != R) return
      input.advance();
      if (input.next != Quote$1) return
      input.advance();

      let marker = "";
      while (input.next != ParenL$1) {
        if (input.next == Space || input.next <= 13 || input.next == ParenR) return
        marker += String.fromCharCode(input.next);
        input.advance();
      }
      input.advance();

      for (;;) {
        if (input.next < 0)
          return input.acceptToken(RawString$1)
        if (input.next == ParenR) {
          let match = true;
          for (let i = 0; match && i < marker.length; i++)
            if (input.peek(i + 1) != marker.charCodeAt(i)) match = false;
          if (match && input.peek(marker.length + 1) == Quote$1)
            return input.acceptToken(RawString$1, 2 + marker.length)
        }
        input.advance();
      }
    });

    const fallback = new ExternalTokenizer(input => {
      if (input.next == GreaterThan$1) {
        // Provide a template-args-closing token when the next characters
        // are ">>", in which case the regular tokenizer will only see a
        // bit shift op.
        if (input.peek(1) == GreaterThan$1)
          input.acceptToken(templateArgsEndFallback, 1);
      } else {
        // Notice all-uppercase identifiers
        let sawLetter = false, i = 0;
        for (;; i++) {
          if (input.next >= A$1 && input.next <= Z) sawLetter = true;
          else if (input.next >= a && input.next <= z) return
          else if (input.next != Underscore && !(input.next >= Zero$1 && input.next <= Zero$1 + 9)) break
          input.advance();
        }
        if (sawLetter && i > 1) input.acceptToken(MacroName);
      }
    }, {extend: true});

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const spec_identifier$3 = {__proto__:null,bool:34, char:34, int:34, float:34, double:34, void:34, size_t:34, ssize_t:34, intptr_t:34, uintptr_t:34, charptr_t:34, int8_t:34, int16_t:34, int32_t:34, int64_t:34, uint8_t:34, uint16_t:34, uint32_t:34, uint64_t:34, char8_t:34, char16_t:34, char32_t:34, char64_t:34, const:68, volatile:70, restrict:72, _Atomic:74, mutable:76, constexpr:78, struct:82, __declspec:86, final:90, override:90, public:94, private:94, protected:94, virtual:154, extern:156, static:158, register:160, inline:162, __attribute__:166, __based:172, __restrict:174, __uptr:174, __sptr:174, _unaligned:174, __unaligned:174, noexcept:188, throw:192, template:248, typename:254, class:256, using:266, __cdecl:274, __clrcall:274, __stdcall:274, __fastcall:274, __thiscall:274, __vectorcall:274, case:284, default:286, if:298, else:304, switch:308, do:312, while:314, for:322, return:326, break:330, continue:334, goto:338, typedef:342, try:356, catch:360, namespace:366, static_assert:372, explicit:382, delete:392, operator:400, friend:420, union:422, enum:430, signed:434, unsigned:434, long:434, short:434, decltype:446, auto:448, sizeof:480, TRUE:734, true:734, FALSE:736, false:736, NULL:488, new:494, nullptr:508, this:510};
    const spec_ = {__proto__:null,"<":139};
    const spec_templateArgsEnd = {__proto__:null,">":143};
    const spec_scopedIdentifier = {__proto__:null,operator:398, new:492, delete:500};
    const parser$5 = LRParser.deserialize({
      version: 13,
      states: "$ArQ!QQVOOP&tOUOOO'fOWO'#CdO+PQUO'#CgO+ZQUO'#FdO-SQbO'#CwO-ZQUO'#CwO.yQUO'#JZO/QQUO'#CvO/]OpO'#DyO/eQ!dO'#DbOOQQ'#IV'#IVO/pQUO'#JxO1aQUO'#IZOOQQ'#IZ'#IZO4fQUO'#JlO7gQUO'#JlO9nQVO'#EZO:OQUO'#EZO:TQUOOO:]QVO'#EhO<pQVO'#EiO<}QUO'#EiO?iQUO'#JpO?sQUO'#JpO?}QVO'#HrOOQQ'#Jp'#JpOAnQUO'#JpOCsQUO'#JpODQQUO'#FWODrQUO'#FbOOQR'#Fd'#FdO,lQUO'#FdOOQR'#J|'#J|OOQR'#J{'#J{ODwQVO'#JQOFrQUO'#KPOGPQUO'#KPOOQR'#Ga'#GaOGtQUO'#KROOQR'#Gi'#GiOOQR'#Gm'#GmOOQR'#Jz'#JzOOQR'#Ij'#IjQ!QQVOOOHPQVO'#F[OOQQ'#Iq'#IqOHWQUO'#G|OOQQ'#JZ'#JZOKoQUO'#JZOL]QUO'#JQONYQVO'#H`ONYQVO'#HcOOQQ'#Hh'#HhOOQQ'#Hi'#HiO!!UQUO'#HqOOQQ'#JQ'#JQO!$YQUO'#JZOOQR'#JY'#JYO!$aQUO'#DWO!$fQUO'#JmOOQQ'#Jm'#JmO!&uQUO'#EQO!&zQUO'#ETO!'PQUO'#G[O!'[QUO'#FfO!'dQUO'#FkO!'iQVO'#FmO!'dQUO'#FqO!*RQUO'#FrO!*WQVO'#FtO!*bQUO'#FvO!*gQUO'#FxO!*lQUO'#FzO!*qQUO'#F|O!+xQVO'#F_O!-cQUO'#F_O!-hQUO'#GTO!-mQVO'#GXO!-tQUO'#GYO!-|QUO'#G]O!0OQUO'#G`O!0]QUO'#GbO!1QQUO'#GjO4fQUO'#FYO!1hQUO'#DUO!1|QUO'#GyO!2bQUO'#GzO!2sQUO'#HQO!3XQUO'#HRO!3|QUO'#HSO!5iQVO'#HeO!5sQUO'#HkO!6kQVO'#HoP!8U{#tO'#CbP!-w{#tO'#CbP!8a{&jO'#CbP!-w{#tO'#CbP!8f{#tO'#CbP!8kOSO'#IPPOOO)CDn)CDnOOOO'#IR'#IRO!8vOWO,59OOOQR,59O,59OO!+xQVO,59UOOQQ,59W,59WONYQVO,5<POOQR,5<O,5<OO!9RQUO,59YONYQVO,5=uOOQR'#H]'#H]OOQR'#H^'#H^OOQR'#H_'#H_ONYQVO,5=vONYQVO,5=vONYQVO,5=vONYQVO,5=vONYQVO,5=vONYQVO,5=vONYQVO,5=vONYQVO,5=vONYQVO,5=vO!;gQVO,5=}OOQQ,5>_,5>_O!<dQVO'#ChO!?|QUO'#CyOOQQ,59c,59cOOQQ,59b,59bOOQQ,5;U,5;UO!1QQUO,5=UO!5sQUO,5>VO!AqQVO,5>ZO!AxQbO,59cO!BWQVO'#EwOOQQ,5>R,5>RONYQVO,59VO!BhO`O,5:eO!BmQbO'#DcO!COQbO'#JaO!C^QbO,59|O!E`QUO'#CsO!GOQbO'#CwO!GTQUO'#CvO!JhQUO'#JZOOQQ-E<T-E<TO!JoQUO,5@dODQQUO,5;rO!JvQUO'#JZO4fQUO,5;tOOQQ-E<X-E<XO!KQQUO,5@WO!KQQUO,5@WOOQR,5@d,5@dO# QQUO'#CgO#!xQUO,5=tO##fQbO'#CwO##wQUO'#EjO##|QUO'#HgO#$UQUO'#CvOOQR'#IS'#ISO#$aQUO,5:uO#$wQUO,5:uO#%sQUO,5:uO#&QQUO'#CtO!&zQUO'#ClOOQQ'#I['#I[O#$wQUO,5:uO#'^QUO,5:vO#)bQVO,5;RO#)lQUO'#EXO#+^QUO,5<[O#,`QUO'#JZO!*qQUO'#C}O#,gQUO,5;SO#,rQUO,5<[O#,wQUO'#C}O#-qQUO,5>OO#.XQUO,5;TO#.fQbO'#CwO#$wQUO'#EZO<}QUO'#EhO#.qQUO'#JpO!-wQUO'#EnO#/fQUO'#CtOOQQ,5;X,5;XO#2QQVO'#C{O#3oQUO'#K]O#5jQUO'#JsO#5qQUO'#JQO#6UQUO,5;YO#6ZQVO'#FpONYQVO'#HYO#8pQVO,5>^O?}QVO'#HrO#8zQUO,5>^O#8}QUO,5>^OOQQ,5>^,5>^O#9SQUO'#GdOOQR,5@k,5@kO#9[QUO,5@kO#9dQUO'#GfO#9lQUO,5;tO#:QQUO'#JyO#:YQUO,5;rO!'iQVO,5;|OOQR'#In'#InO#:_QVO,5<yO#<eQbO'#CwO#<sQUO'#EjOAnQUO,5@kOOQQ'#Io'#IoOOQQ-E<m-E<mOGPQUO,5@kO#9[QUO,5@mO#<xQUO,5@mOOQR,5@m,5@mOOQR,5@n,5@nO#=TQVO,5@nOOQR-E<h-E<hO#>qQVO,5;vOOQR,5;v,5;vOOQQ-E<o-E<oOOQQ,5=h,5=hOOQQ,59`,59`O#>xQUO,5=zO#@xQUO'#JQO#BdQUO,5=}O#CQQUO'#EbO#DoQUO'#EcO#D|QUO'#EcO#EUQVO'#EdO#E`QUO'#EeO#E|QUO'#EfOOQQ'#Jr'#JrO#FdQUO,5>]OOQQ,5>],5>]O!-wQUO,59rO#FoQUO,5;wO!&zQUO,5:lOOQQ,5:o,5:oO#F|QUO,5;pO#GUQUO,5<vO#GZQUO,5<vO#J_QVO'#FhO!'iQVO,5<QO!'dQUO,5<QO!-hQUO,5<VO#JfQUO,5<XO!'iQVO,5<]O#JkQVO,5<^O#MjQUO,5<`OOQR,5<`,5<`O#MqQUO,5<`OOQR,5<b,5<bOOQR,5<d,5<dOOQQ'#Fc'#FcO#MvQUO,5<fO!*qQUO,5<hO#M{QUO,5<hO$ kQUO,5;yO$ rQVO,5;yO$#wQUO,5<oO$%^QUO,5<sOOQR,5<s,5<sOOQQ'#Cg'#CgO$%eQVO'#F^OOQR,5<t,5<tO$%lQUO,5<tONYQVO,5<wO$'UQUO'#JZO$']QUO'#JlO$'|QUO,5<zO$)xQUO'#E}O<}QUO,5<zO$*SQUO,5;gONYQVO,5<|O$*sQUO,5=UODQQUO,5;tOOQQ'#J['#J[O$.^QUO'#J[O$.nQUO'#D[O$.yQUO'#D_O$2PQUO,59pOOQQ,59p,59pO$2jQUO,59pO$2oQUO,59pO$2wQUO,59pO$4yQUO,5=eOOQQ,5=e,5=eO$2jQUO,5=eO$2oQUO,5=eO$5dQUO,5=eO$5uQUO'#HOO$7hQUO,5=fOOQQ,5=f,5=fO$8bQUO,5=fO$:mQUO,5=lOOQQ,5=l,5=lO$2jQUO,5=lO$2oQUO,5=lO$:wQUO,5=lOOQQ,5=m,5=mONYQVO,5=nO$<dQUO,5>PO#6ZQVO'#FpOOQQ,5>P,5>PO$=ZQUO,5>PO$=`QUO,5>VO!5vQUO,5>VO$?cQUO,5>ZO$ApQVO,5>ZP$Aw{#tO,58|P$A|{#tO,58|P$BU{&jO,58|POOO,58|,58|POOO,5>k,5>kP$B^OSO,5>kOOOO-E<P-E<POOQR1G.j1G.jO$BfQUO1G.pO$BmQUO1G1kOOQQ1G1k1G1kO$BwQUO'#CoO$ETQbO'#CwO$E`QUO'#CrO$EeQUO1G.tO#/fQUO'#CqOOQQ1G.t1G.tO$GhQUO1G3aO$IiQUO1G3bO$KdQUO1G3bO$MkQUO1G3bO$MrQUO1G3bO% sQUO1G3bO% zQUO1G3bO%#uQUO1G3bO%$SQUO1G3bO%$aQUO1G3bO%%rQUO1G3bO%&iQUO'#JPO%&sQUO'#JPO%&{QUO,59SO$*sQUO1G2pO%)QQUO1G3qO!5vQUO1G3qO%)XQUO1G3uO%)xQVO1G3uOOQQ1G.}1G.}OOQQ1G.|1G.|OOQQ1G0p1G0pO!1QQUO1G2pO%*PQUO'#JuO?}QVO'#HrO%*ZQUO'#EzOOQQ'#If'#IfO%*`QUO'#ExO%*kQUO'#JuO%*sQUO,5;cO%*xQUO1G.qOOQR1G0P1G0PO%+oQ!dO'#IWO%+tQbO,59}O%.VQ!eO'#DeO%.^Q!dO'#IYO%.cQbO,5?{O%.cQbO,5?{OOQQ1G/h1G/hO%.nQbO1G/hO%0pQUO'#CyO!GOQbO,59cOOQR1G6O1G6OO#9lQUO1G1`O%2]QUO1G1^ODQQUO1G1`O%3YQUO1G5rO%4iQbO,59cOOQR-E<Q-E<QO%5VQUO1G0aO#$aQUO1G0aOOQQ-E<Y-E<YO#$wQUO1G0aOOQQ'#I]'#I]O%6kQUO1G0bO%7mQUO'#EaOOQQ'#I^'#I^O%5dQUO1G0bO%7}QUO'#E]O%9bQUO'#E_O%9gQUO1G0mO%9nQVO1G0mOOQQ1G0m1G0mO%9xQVO1G0mO#FuQUO'#EYO%:nQUO'#EYO%;XQUO'#JoO%;aQUO,5:sOOQQ1G1v1G1vO%;fQUO,59iOOQQ1G0n1G0nO%;fQUO,59iO%<`QUO,59iO%<zQVO1G3jO%=RQUO'#J[O%=YQUO'#JsO%=bQUO'#KVO%=oQUO'#JXO%=}QUO'#JWO%>YQUO,59gONYQVO'#ItO%>bQUO,5@wO!-wQUO'#IbO%>jQUO,5@_OOQQ1G0t1G0tOOQQ1G3x1G3xONYQVO1G3xO%>rQUO'#GeO%>zQUO'#KQOOQQ,5=O,5=OOOQR1G6V1G6VO%?VQUO,5=QO%?[QUO,5=RO%?aQVO'#EXO%FcQVO'#F[O%<zQVO,5;sOOQQ,5;s,5;sODQQUO'#IiO%FsQUO,5@eOOQR1G1`1G1`OOQR1G1^1G1^OOQR1G1h1G1hOOQR-E<l-E<lO#9[QUO1G6VOAnQUO1G6VO#9[QUO1G6XOOQR1G6X1G6XOOQR1G6Y1G6YO#=TQVO1G6YO%F{QUO1G6YO%GSQVO,5=ROOQR1G1b1G1bOOQQ'#I`'#I`O%GZQUO,5:|O%HlQUO,5:|OOQQ'#Ia'#IaO%HsQUO,5:}OOQQ,5:},5:}O%HsQUO,5:}O%IqQVO,5;OO%I{QUO,5;OO%IqQVO,5;OOOQQ,5;O,5;OO%JSQVO,5;OO%JZQUO,5;PO%J}QUO,5;QOOQQ1G3w1G3wO%KUQUO1G/^O/pQUO'#FWOOQR1G1c1G1cO%KZQUO1G0WO!*qQUO1G1[OOQR1G2b1G2bO%K`QUO1G2bO%KeQUO,5<SO#FuQUO'#FWODQQUO'#FWO%KlQUO,5<SONYQVO,5<SO%KtQUO,5<SO%KyQVO1G1lO!'iQVO1G1lOOQR1G1q1G1qO&!vQUO1G1sOOQR1G1w1G1wO&!{QUO1G1xO&#SQUO1G2YO&#tQVO1G1xO&#{QUO1G1xOOQR1G1z1G1zOOQR1G2Q1G2QO#M{QUO1G2SOOQQ'#Cu'#CuO&$QQUO'#GOO&$uQUO'#GOO&$zQUO'#J}O#M{QUO'#GROOQQ'#KO'#KOO&%YQUO1G2SO&%_QVO1G1eODQQUO'#FWOOQR'#Ik'#IkO&%_QVO1G1eO&'dQUO'#FrOOQR'#Im'#ImO&'iQVO1G2ZO&,iQUO'#GVOOQR1G2_1G2_OOQR,5;x,5;xO&,nQVO,5;xOOQR1G2`1G2`O&,uQUO1G2cOOQR1G2f1G2fOOQQ'#Jw'#JwO&-PQUO'#JvO&-[QUO,5;iO&-dQUO'#FOO&-wQUO'#FOO&.[QUO'#FTO&.aQUO1G2fO&.lQUO'#JZOGPQUO'#KPO#9[QUO'#KROOQR'#Gn'#GnOOQR'#Go'#GoO&.vQUO'#FUO&.[QUO'#E{OOQR1G1R1G1RO&.{QUO1G2hO&/SQUO1G2pO&/eQUO1G1`O&/pQUO'#J]OOQQ,59v,59vO&/{QUO'#J]O&0TQUO'#DaO&1QQUO'#JpO&1yQUO'#DaOGPQUO'#KPOOQQ'#Gq'#GqOOQQ'#Gs'#GsOOQQ'#Gt'#GtOOQQ'#J_'#J_OOQQ'#IU'#IUO&2TQUO,59yOOQQ,59y,59yO&3jQUO'#DaO&4|QUO'#GuO&5yQUO'#GxOOQQ1G/[1G/[O$2jQUO1G/[O$2oQUO1G/[O&7oQUO1G/[OOQQ1G3P1G3PO$2jQUO1G3PO$2oQUO1G3PO&9yQUO1G3PO&:dQUO'#HPO&:oQUO'#KUO&:wQUO,5=jO&:|QUO'#KTOOQQ1G3Q1G3QO&;[QUO1G3QO&=hQUO1G3QOOQQ1G3W1G3WO$2jQUO1G3WO$2oQUO1G3WO&?oQUO1G3WO&?yQUO1G3YO&@QQUO,5@tO!-wQUO1G3kONYQVO'#HnOOQQ1G3q1G3qO&@VQUO1G3qO&@^QVO1G3uPOOO1G.h1G.hP&A}{#tO1G.hP&BSQUO'#K_P&B_{&jO1G.hPOOO1G4V1G4VONYQVO7+$[O&BdQUO'#CyOOQQ,59^,59^O&BoQbO,59cOOQQ,59],59]OOQQ7+({7+({O%<zQVO'#IuO&BzQUO,5?kOOQQ1G.n1G.nO&CSQUO7+([OOQQ7+)]7+)]O&EeQUO7+)]O&ElQUO7+)]O&@^QVO7+)aO$*sQUO7+([O&EsQVO'#IgO&FWQUO,5@aO&F`QUO,5;eOOQQ'#Co'#CoOOQQ,5;f,5;fONYQVO'#EyOOQQ-E<d-E<dO%<zQVO,5;dOOQQ1G0}1G0}OOQQ,5>r,5>rOOQQ-E<U-E<UOOQR'#Dk'#DkOOQR'#Dm'#DmOOQR'#Dp'#DpO&FgQ!eO'#JbO&FnQ,XO'#JbO&FuQ!eO'#JbOOQR'#Jb'#JbOOQR'#IX'#IXO&F|Q!eO,5:POOQQ,5:P,5:PO&GTQbO,5>tOOQQ-E<W-E<WO&GcQbO1G5gOOQQ7+%S7+%SOOQR7+&z7+&zOOQR7+&x7+&xO&/eQUO7+&zO&HPQUO7+%{O#$aQUO7+%{OOQQ-E<Z-E<ZO&I_QUO7+%|O&JQQUO,5:{O&KWQUO,5:{OOQQ-E<[-E<[O&K{QVO,5:wO&LSQUO,5:yOOQQ7+&X7+&XO&LZQUO7+&XO&LbQVO7+&XO&MZQUO,5:tO&NrQUO'#EbO' eQUO,5:tO#EUQVO'#EdO' lQUO'#EeO'#UQUO'#EfO'#lQUO,5:tONYQVO,5;ZO'#vQUO'#EqOOQQ,5;[,5;[O'$XQUO'#IcO'$cQUO,5@ZOOQQ1G0_1G0_O'$kQUO1G/TO'%eQUO1G/TO'&PQUO7+)UOOQQ7+)X7+)XOOQQ,5=q,5=qO#/kQVO'#IsO'&pQUO,5?rOOQQ1G/R1G/RO'&{QUO,5?`OOQQ-E<r-E<rOOQQ,5>|,5>|OOQQ-E<`-E<`O''VQUO7+)dO''[QUO,5=PO#9SQUO'#IpO''jQUO,5@lOOQR1G2l1G2lOOQR1G2m1G2mO''uQUO'#JuO?}QVO'#HrO'(SQUO1G1_OOQQ1G1_1G1_O'(^QUO,5?TOOQQ,5?T,5?TOOQQ-E<g-E<gOOQR7++q7++qO#9[QUO7++qOOQR7++s7++sO'(rQUO7++tOOQR7++t7++tOOQQ-E<^-E<^O')bQUO1G0hOOQQ-E<_-E<_OOQQ1G0i1G0iO'*^QUO1G0iO'*kQUO1G0jO'*rQVO1G0jOOQQ1G0j1G0jO'*|QVO1G0jOOQQ1G0k1G0kOOQQ7+$x7+$xOOQQ7+%r7+%rO'+TQUO7+&vOOQR7+'|7+'|OOQR1G1n1G1nODQQUO,5;rO'+kQUO,5<TO'+rQUO1G1nO'+yQUO1G1nO!'iQVO7+'WO',OQVO7+'WONYQVO'#FpO'0{QUO7+'_O'1QQVO7+'dO'1XQUO7+'tO'1cQUO7+'dO'1jQVO7+'dO'1qQUO7+'nO'1vQUO,5<jO&$QQUO,5<jO'2hQUO,5<jO&$QQUO,5<jOOQQ,5<k,5<kO'2yQVO,5<lO#M{QUO'#IlO'3TQUO,5@iO'3]QUO,5<mOOQR7+'n7+'nO'3hQVO7+'PO'1[QUO'#JyOOQR-E<i-E<iO#JkQVO,5<^OOQR-E<k-E<kO!-hQUO,5<qOOQR1G1d1G1dO'5mQUO7+'}O'5rQVO7+'}O$(XQUO'#IhO'5zQUO,5@bOOQQ1G1T1G1TO'6VQUO,5;jO'6pQUO,5;mO'7eQUO,5;nO'7sQUO,5;jO'9vQUO,5;oOOQR7+(Q7+(QO#GPQUO,5;pOOQQ7+(S7+(SO':OQUO'#ITO':ZQUO,5?wO':ZQUO,5?wO':cQUO,5?wO':nQUO,59{O':xQUO,59{OOQQ,5=^,5=^O';oQUO'#ESO'<pQUO'#ESO'=WQUO,59{O'=bQUO'#EtO'=|QUO'#EuOOQQ'#Jn'#JnO'>hQUO'#JnONYQVO'#EvOOQQ,59{,59{O'?VQUO,59{O%<zQVO,59{O'?[QUO,5@kOOQQ-E<S-E<SOOQQ1G/e1G/eO'?cQUO'#J[O'?mQUO'#J[OOQQ,5=a,5=aO'?zQUO,5=aO!2sQUO,5=aO!1hQUO,5=aO!1|QUO,5=aOOQQ,5=d,5=dOOQQ7+$v7+$vO$2jQUO7+$vO$2oQUO7+$vOOQQ7+(k7+(kO$2jQUO7+(kO$2oQUO7+(kONYQVO,5=kO'@PQUO'#IrO'@[QUO,5@pOOQQ1G3U1G3UO'@dQUO,5@oOOQQ,5@o,5@oOOQQ7+(l7+(lO'CxQUO7+(lOOQQ7+(r7+(rO$2jQUO7+(rO$2oQUO7+(rOOQQ7+(t7+(tO'HbQVO1G6`O'I_QUO7+)VO'IdQUO,5>YO'IkQUO7+)aPOOO7+$S7+$SP'J[QUO'#K`P'JdQUO,5@yP'Ji{#tO7+$SO'JnQUO<<GvOOQQ1G.x1G.xO'K_QUO,5?aOOQQ,5?a,5?aOOQQ-E<s-E<sOOQQ<<Lw<<LwO'KiQUO<<LwO'MlQUO<<L{O'N]QUO<<KvO'NnQUO,5?ROOQQ,5?R,5?ROOQQ-E<e-E<eOOQQ1G1P1G1PO'NxQUO,5;eO( PQUO1G1OOOQQ1G1O1G1OOOQR,5?|,5?|O( ZQ!eO,5?|O( bQ,XO,5?|O( iQ!eO,5?|OOQR-E<V-E<VOOQQ1G/k1G/kO( pQ!eO'#DzOOQQ1G4`1G4`OOQR<<Jf<<JfO(!YQUO<<IgOOQQ'#Ec'#EcO(#qQUO1G0gO(#{QUO1G0gO($`QUO1G0cOOQQ1G0c1G0cO($gQUO'#JqO($oQUO1G0eOOQQ<<Is<<IsO(%VQUO1G0`O(%^QUO'#EfO(%nQUO1G0`O(%uQUO'#ISOOQQ,5;^,5;^ONYQVO1G0uO('VQUO1G0uOOQQ,5;],5;]OOQQ,5>},5>}OOQQ-E<a-E<aO('gQUO7+$oO((RQUO'#KXO((`QUO'#KWOOQQ,5?_,5?_OOQQ-E<q-E<qOOQQ<<MO<<MOOOQQ1G2k1G2kOOQQ,5?[,5?[OOQQ-E<n-E<nO&EsQVO,5<POOQR<= ]<= ]OOQR<= `<= `OOQQ7+&T7+&TOOQQ7+&U7+&UO((nQUO7+&UO((uQVO7+&UOOQR<<Jb<<JbO%<zQVO1G1oO((|QUO1G1oOOQR7+'Y7+'YOOQR<<Jr<<JrO!'iQVO<<JrOOQR<<Jy<<JyO()XQUO<<KOO()`QVO<<KOO%<zQVO<<K`O()gQUO<<KOO!'iQVO<<KOO()nQUO<<KOOOQR<<KY<<KYO()sQUO1G2UO'1vQUO1G2UO&$QQUO1G2UO(*UQUO1G2WO(*]QVO1G2WOOQQ1G2W1G2WO(*gQVO1G2WO(*nQUO,5?WOOQQ-E<j-E<jOOQQ1G2X1G2XOOQR1G2]1G2]OOQR<<Ki<<KiO(*|QVO<<KiO(+XQUO<<KiOOQQ,5?S,5?SOOQQ-E<f-E<fO'6pQUO1G1XOOQQ1G1X1G1XOOQQ1G1Y1G1YO(+^QUO'#FOOOQQ1G1Z1G1ZO(+rQUO,5>oO&/{QUO,5>oOOQQ-E<R-E<RO(+}QUO1G5cO(+}QUO1G5cO(,VQUO1G/gOOQQ1G/g1G/gO(,aQUO1G/gO%<zQVO1G/gO(,fQUO1G/gO(,pQUO,5:nO';oQUO,5:nO(-WQUO,5:nO';oQUO,5:nO(.dQUO,5:rO(.zQVO,5;_O'=|QUO'#IeO(/UQUO1G/gO(/gQVO1G/gOOQQ1G2v1G2vO(/nQUO,5;`O(/yQUO,5;aO(0bQUO,5;bO(0iQUO1G/gOOQQ1G2x1G2xOOQQ1G2{1G2{O(2ZQUO1G2{O(2hQUO1G2{O(2oQUO1G2{OOQQ<<Hb<<HbO$2jQUO<<HbOOQQ<<LV<<LVO$2jQUO<<LVO(2vQUO1G3VOOQQ,5?^,5?^OOQQ-E<p-E<pOOQQ<<LW<<LWOOQQ<<L^<<L^O$2jQUO<<L^OOQQ<<Lq<<LqO(3QQUO1G3tP(5TQUO'#IvP(5]QUO,5@zPO{O1G6e1G6ePOOO<<Gn<<GnOOQQANBcANBcOOQR1G5h1G5hO(5eQ!eO,5:fOOQQ,5:f,5:fO(6TQUO7+&ROOQQ7+%}7+%}O!*qQUO'#I_O(7QQUO,5@]OOQQ7+&P7+&PO(7YQUO7+&aOOQQ,5=r,5=rO(7jQUO1G1kOOQQ<<Ip<<IpO(7tQUO7+'ZOOQRAN@^AN@^O(8RQVOAN@jO(8YQUOAN@jO!'iQVOAN@jO(8aQUOAN@jO(8fQUOAN@zO(8mQUOAN@zOOQRAN@jAN@jO(8rQUO7+'pO'1vQUO7+'pOOQQ7+'r7+'rO(9TQUO7+'rO(9[QVO7+'rO(9cQUOANATOOQQ7+&s7+&sO(9hQUO,5;jOOQQ1G4Z1G4ZO(9vQUO1G4ZO(:RQUO7+*}O(:ZQUO7+%ROOQQ7+%R7+%RO(:lQUO7+%RO(/gQVO7+%ROOQQ7+(b7+(bO(:qQUO7+%RO(:xQUO7+%RO%<zQVO7+%RO(;SQUO1G0YO(,pQUO1G0YO';oQUO1G0YOOQQ'#Id'#IdO(<`QUO1G0^O(<vQUO1G0yO(<}QVO1G0yOOQQ1G0y1G0yO(=XQVO1G0yO(=`QUO,5?POOQQ-E<c-E<cOOQQ1G0z1G0zOOQQ7+(g7+(gOOQQAN=|AN=|OOQQANAqANAqOOQQANAxANAxOOQQ7+)`7+)`POQQ,5?b,5?bPOQQ-E<t-E<tOOQQ1G0Q1G0QOOQQ,5>y,5>yOOQQ-E<]-E<]O(=wQUOG26UO!'iQVOG26UO(>OQUOG26UOOQRG26UG26UO!'iQVOG26fO(>TQUO<<K[OOQQ<<K^<<K^OOQRG26oG26oOOQQ7+)u7+)uOOQQ<<Hm<<HmO(>fQUO<<HmO%<zQVO<<HmO(>kQUO<<HmO(>rQUO<<HmO(/gQVO<<HmOOQQ<<K|<<K|O(?TQUO7+%tO(,pQUO7+%tOOQQ-E<b-E<bOOQQ7+&e7+&eO(?lQUO7+&eO(?sQVO7+&eO!'iQVOLD+pOOQRLD+pLD+pOOQRLD,QLD,QOOQQAN>XAN>XO(?zQUOAN>XO(@RQUOAN>XO%<zQVOAN>XO(@WQUO<<I`OOQQ<<JP<<JPOOQR!$( [!$( [OOQQG23sG23sO(@oQUOG23sO(@vQUOG23sOOQQLD)_LD)_O(@{QUO'#CgO'qQUO'#CgO!1hQUO'#DUO!1hQUO'#DUO!1|QUO'#GyO!1|QUO'#GyO(BxQUO'#GzO(CZQUO'#GzO(ClQUO'#GzO!2sQUO'#HQO'6pQUO'#HRO&KWQUO'#HRO(C}QUO'#HRO(DrQUO'#HRO(EgQUO'#HkO(GUQVO'#HoO!+xQVO,5=vO!+xQVO,5=vO!+xQVO,5=vO!+xQVO,5=vO!+xQVO,5=vO!+xQVO,5=vO!+xQVO,5=vO!+xQVO,5=vO!+xQVO,5=vO(G]QVO,5=}O(IvQUO'#CyO(LWQUO'#CyO(MPQUO'#CyO(MaQUO'#CyO) hQUO'#CyO) uQUO'#CyO)#hQUO'#CyO)%_QUO'#CyO(EgQUO,5>VO)%jQVO,5>ZO)%qQbO,59cO)&PQbO,59cO)&_QbO,59cO!+xQVO,59VO)&mQUO'#CgO)(qQUO'#CgO)({QUO'#CgO)+^QUO'#CgO).TQUO'#CgO).eQUO'#CgO)/bQUO'#CgO)2hQUO'#CgO)2uQUO'#CgO)3PQUO,5=tO,qQbO'#CwO)3ZQbO'#CwO)3lQbO'#CwO)3}QbO'#CwO)4`QUO'#CvO)4kQUO,5:uO)5RQUO,5:uO)5RQUO,5:uO)5lQbO'#CwO)5wQbO'#CwO)6SQbO'#CwO)6_QbO'#CwO)5RQUO'#EZO)6jQUO'#EZODQQUO'#EiO)7qQUO'#EiO#3vQUO'#JsO!+xQVO'#HYO)8cQbO'#CwO)8qQbO'#CwO)9PQUO'#CvO)9UQUO'#CvO):tQUO'#JQO):{QUO,5=}O);zQUO'#EbO)=VQUO'#EfO)@SQUO,59pO)AzQUO,59pO)B[QUO,59pO)BcQUO,59pO$2wQUO,59pO$2wQUO,59pO)E]QUO,5=eO)GTQUO,5=eO)GeQUO,5=eO)GlQUO,5=eO$5dQUO,5=eO$5dQUO,5=eO)HuQUO,5=fO$8bQUO,5=fO$8bQUO,5=fO$8bQUO,5=fO)JOQUO,5=lO)LiQUO,5=lO)LyQUO,5=lO$:wQUO,5=lO)MQQUO,5>PO(C}QUO,5>VO)MeQUO,5>ZO)MrQUO'#CoO* hQUO1G3bO*#PQUO1G3bO*$tQUO1G3bO*${QUO1G3bO*&jQUO1G3bO*&qQUO1G3bO*(YQUO1G3bO*(gQUO1G3bO*(tQUO1G3bO**VQUO1G3bO(C}QUO1G3qO**jQUO1G3uO**wQUO1G.qO*+[QbO,59cO*+gQbO,59cO*+rQbO,59cO*+}QbO,59cO*,YQbO,59cO*,eQbO,59cO*,pQbO,59cO)4kQUO1G0aO*,{QUO1G0aO)5RQUO1G0aO)6jQUO1G0aO*-cQUO'#EaO*-yQUO1G0bO*/TQVO1G3jO*/[QUO,5:|O*0UQUO,5:|O*1RQUO,5;QO*3`QUO'#JZO*5aQUO1G/[O*7XQUO1G/[O*7iQUO1G/[O*7pQUO1G/[O*:jQUO1G3PO*<bQUO1G3PO*<rQUO1G3PO*<yQUO1G3PO*>SQUO1G3QO*@rQUO1G3WO*C]QUO1G3WO*CmQUO1G3WO*CtQVO1G3uO!+xQVO7+$[O*EeQUO'#CyO*EsQbO,59cO*CtQVO7+)aO)4kQUO7+%{O*,{QUO7+%{O*F|QUO7+%|O*G^QUO,5:{O!5vQUO,5:{O*GkQUO'#EbO*G{QUO7+)UO*HYQUO1G0hO*IVQVO1G6`O*IpQUO7+)aO*I}QUO<<GvO*J[QUO<<L{O*JiQUO1G0gO*JzQUO1G0gO*KjQUO'#EfO*LZQUO,5:rO*LeQUO,5;aO*LpQUO7+&RO*MRQUO1G0YO*M^QUO1G0^O*MhQUO7+%tO*MsQUO<<I`O!1QQUO'#JlO':xQUO'#JlO*NOQUO'#EZO)9ZQUO'#JQO!+xQVO'#H`O!+xQVO'#HcO!1hQUO'#DUO!1|QUO'#GyO!2sQUO'#HQO+ kQVO'#HeO+ uQUO'#CwO+ zQUO'#EjO+!PQUO'#EjO+!UQUO'#CvO+!ZQUO'#CvO+!`QUO'#CwO+!eQUO'#CwO+!jQUO'#CvO+!uQUO'#CvO+#QQUO'#CvO*,{QUO,5:uO)6jQUO,5:uO)6jQUO,5:uO+$^QUO,5:vO+$nQUO'#JZO+%[QUO'#JZO+%fQUO,5>OO+%kQUO,5;TO#6ZQVO'#FpO+%uQUO'#JZO$2wQUO,59pO$5dQUO,5=eO$:wQUO,5=lO+&YQVO,5>ZO+&aQUO1G.pO+&hQbO'#CwO+&sQUO'#CrO+&xQVO1G3uO+'PQUO1G0aO+'ZQUO1G0bO+'bQUO,5@tO+'gQUO7+%{O'=bQUO'#EuO+'qQUO<<IgO+'{QUO,5:nO+(cQUO,5:nO+(|QUO,5:nO+(cQUO,5:nO+'{QUO1G0YO+(cQUO1G0YO+'{QUO7+%tO!1hQUO'#DUO!1hQUO'#DUO!1hQUO'#DUO!1hQUO'#DUO!1|QUO'#GyO!1|QUO'#GyO!1|QUO'#GyO!1|QUO'#GyO+)XQUO'#GzO!2sQUO'#HQO!2sQUO'#HQO!2sQUO'#HQO+)jQUO'#HRO!5vQUO'#HRO+*_QUO'#HRO++SQUO,5:uO++jQUO,5:uO++jQUO,5:uO++jQUO'#EZO&#SQUO'#EiO$2wQUO,59pO$2wQUO,59pO$2wQUO,59pO$2wQUO,59pO$5dQUO,5=eO$5dQUO,5=eO$5dQUO,5=eO$5dQUO,5=eO$8bQUO,5=fO$:wQUO,5=lO$:wQUO,5=lO$:wQUO,5=lO++SQUO1G0aO++jQUO1G0aO+,TQUO'#EaO!*qQUO'#EaO+,kQUO'#EaO+,{QUO1G0bO++SQUO7+%{O+.PQUO7+%|O+)jQUO,5:{O'6pQUO,5:{O+*_QUO,5:{O+.WQUO'#EZO!+xQVO,59UO+.]QUO,5:uO+.gQUO'#EcO+.}QUO'#EfO#6ZQVO'#FpO+/[QUO,5:|O+/{QUO,5:}O+/{QUO,5:}O+1SQUO,5;QO+1eQUO1G0hO+1vQUO1G0iO+(cQUO'#ESO+2^QUO'#ESO+2cQUO,5:{O+3XQUO1G0gO+3cQUO1G0gO+3vQUO7+&RO+3}QUO'#EZO+4SQUO,5:vO+4ZQUO1G0bO+4bQUO,5:uO+4iQUO,5;TO+4pQUO'#EbO+5aQUO1G0aO+5hQUO,5:|O+5yQUO7+%{O+6QQUO<<Ig",
      stateData: "+6x~O'nOSSOSTOSRPQVPQ&jPQ&lPQ&mPQ&nPQ&oPQ&pPQ&qPQ&rPQ~O)TOS~OPsO]dOa!ZOdjOlTOr![Os![Ot![Ou![Ov![Ow![Oy!wO{!]O!S}O!ZiO!]!UO!^!TO!l!YO!ouO!p!^O!q!_O!r!_O!s!_O!u!`O!x!aO#S!pO#`jO#p!sO#s!{O#t!zO#y!bO#}!vO$S!mO$T!nO$Z!cO$`!dO$b!eO$c!fO$g!gO$i!hO$k!iO$m!jO$o!kO$q!lO$x!oO$}!qO%Q!rO%V!tO%[#PO%`!uO%k!xO%o!yO%q!OO%w!|O%x!QO&T!TO&U!TO&Y!}O&^!YO&a#OO&h!YO&i!YO'oQO'rRO(SYO(VaO(XfO(YeO(ZoO([XO(}!VO)O!WO~OR#VOV#QO&j#RO&l#SO&m#TO&n#TO&o#UO&p#UO&q#SO&r#SO~OX#XO'p#XO'q#ZO~O]ZX]iXdiXlgXpZXpiXriXsiXtiXuiXviXwiX{iX!QZX!SiX!ZZX!ZiX!]ZX!^ZX!`ZX!bZX!cZX!eZX!fZX!gZX!iZX!jZX!kZX!piX!qiX!riX!siX!uiX!xiX#`iX'riX'uZX'v$VX'wZX'xZX(QZX(VZX(ViX(WZX(XZX(XiX(YZX(YiX(ZZX(hZX~O(ZiX!YZX~P'qO]#pO!Q#^O!Z#aO!]#nO!^#eO!`#fO!b#hO!c#iO!e#kO!f#lO!g#lO!i#lO!j#mO'u#[O'w#`O'x#`O(Q#oO(V#bO(W#cO(X#cO(Y#dO(Z#_O~Od#tO#`#tO&`#vO&d#wO'y#qO~O%_#uO~P,qOl#xO~O!S#yO]'}Xd'}Xr'}Xs'}Xt'}Xu'}Xv'}Xw'}X{'}X!Z'}X!p'}X!q'}X!r'}X!s'}X!u'}X!x'}X#`'}X'r'}X(V'}X(X'}X(Y'}X(Z'}X~Ol#xO~P-`Ol#xO!k#{O(h#{O~OX#|O(]#|O~O!W#}O(Q(TP(_(TP~Oa!QOl$ROr![Os![Ot![Ou![Ov![Ow![Oy!wO{!]O!p!_O!q!_O!r!_O!s!_O!u!`O#s!{O#t!zO#}$YO%k!xO%o!yO%q!OO%w!|O%x!QO'r$QO(SYO~O]'cXa&}Xd'cXl&}Xl'cXr&}Xr'cXs&}Xs'cXt&}Xt'cXu&}Xu'cXv&}Xv'cXw&}Xw'cXy&}X{&}X!Z'cX!o'cX!p&}X!p'cX!q&}X!q'cX!r&}X!r'cX!s&}X!s'cX!u&}X!u'cX!x'cX#`'cX#s&}X#t&}X%V'cX%`'cX%k&}X%o&}X%q&}X%w&}X%x&}X'r&}X'r'cX(V'cX(X'cX(Y'cX~Oa!QOl$ROr![Os![Ot![Ou![Ov![Ow![Oy!wO{!]O!p!_O!q!_O!r!_O!s!_O!u!`O#s!{O#t!zO%k!xO%o!yO%q!OO%w!|O%x!QO'r$QO~Or![Os![Ot![Ou![Ov![Ow![O{!]O!p!_O!q!_O!r!_O!s!_O!u!`O](`Xd(`Xl(`X!Z(`X!x(`X#`(`X'r(`X(V(`X(X(`X(Y(`X~O(Z$^O~P6POPsO]dOdjOr![Os![Ot![Ou![Ov![Ow![O!ZiO!]!UO!^!TO!l!YO!x!aO#`jO%[#PO&T!TO&U!TO&Y!}O&^!YO&a#OO&h!YO&i!YO'oQO(VaO(XfO(YeO([XO(}!VO)O!WO~Oa$jOl$aO!y$kO'r$_O~P7nO(V$lO~O]$oO!Z$nO~Oa!ZOl8XOy7VO#s7_O#t7^O%k7XO%o7ZO%q!OO%w!|O%x!QO'r7}O~P7nOPsO]dOdjO!ZiO!]!UO!^!TO!l!YO!x!aO#`jO%[#PO&T!TO&U!TO&Y!}O&^!YO&a#OO&h!YO&i!YO'oQO(VaO(XfO(YeO([XO(}!VO)O!WO~Oa$jOl$aO'r$_O~P;SO]$zOdjOl$xO!Z$|O!x!aO#`jO'r$_O(V$yO(XfO(YfO~Op%PO]'tX](dX!Q'tX!Z'tX!Z(dX!]'tX!^'tX!`'tX!b'tX!c'tX!e'tX!f'tX!g'tX!i'tX!j'tX'u'tX'w'tX'x'tX(Q'tX(V'tX(W'tX(X'tX(Y'tX(Z'tX|'tX|(dX!Y'tX~O!k#{O(h#{O~P=oO!k'tX(h'tX~P=oOPsO]%UOa$jOl$aO!Z%XO![%[O!]!UO!^!TO!l!YO%[#PO&T!TO&U!TO&Y!}O&^!YO&a#OO&h!YO&i!YO'oQO'r$_O(V%VO(Y%WO([XO(h%YO(}!VO)O!WO~O!S}O'v%]O(h%`O](dX!Z(dX~O]'tX!Q'tX!Z'tX!]'tX!^'tX!`'tX!b'tX!c'tX!e'tX!f'tX!g'tX!i'tX!j'tX'u'tX'w'tX'x'tX(Q'tX(V'tX(W'tX(X'tX(Y'tX(Z'tX!k'tX(h'tX|'tX!Y'tX~O](dX!Z(dX|(dX~PBPO]$zOdjOl8aO!Z$|O!x!aO#`jO'r8OO(V8eO(X8gO(Y8gO~O'v%dO~OP%eO'oQO!['tX'v'tXQ'tX!h'tX~PBPO]$zOdjOr![Os![Ot![Ou![Ov![Ow![O!Z$|O!p!_O!q!_O!r!_O!s!_O!u!`O!x!aO#`jO%V!tO%`!uO(V$yO(XfO(YfO~Ol%gO!o%lO'r$_O~PE_O]$zOdjOl%gO!Z$|O!x!aO#`jO%`!uO'r$_O(V$yO(XfO(YfO~O!S}O(Z%pO(h%qO~O!Y%tO~P!QOa%vO%q!OO]%pXd%pXl%pXr%pXs%pXt%pXu%pXv%pXw%pX{%pX!Z%pX!p%pX!q%pX!r%pX!s%pX!u%pX!x%pX#`%pX'r%pX(V%pX(X%pX(Y%pX(Z%pX|%pX!Q%pX!S%pX!]%pX!^%pX!`%pX!b%pX!c%pX!e%pX!f%pX!g%pX!i%pX!j%pX'u%pX'w%pX'x%pX(Q%pX(W%pX!k%pX(h%pXQ%pX!h%pX![%pX'v%pX!Y%pX}%pX#Q%pX#S%pX~Op%POl'}X|'}XQ'}X!Q'}X!h'}X(Q'}X(h'}X~P-`O!k#{O(h#{O]'tX!Q'tX!Z'tX!]'tX!^'tX!`'tX!b'tX!c'tX!e'tX!f'tX!g'tX!i'tX!j'tX'u'tX'w'tX'x'tX(Q'tX(V'tX(W'tX(X'tX(Y'tX(Z'tX|'tX!['tX!Y'tXQ'tX!h'tX~OPsO]%UOa$jOl$aO!Z%XO!]!UO!^!TO!l!YO%[#PO&T!TO&U!TO&Y!}O&^!YO&a#OO&h!YO&i!YO'oQO'r$_O(V%VO(Y%VO([XO(}!VO)O!WO~O]&PO!Z&OO(V%{O(X&QO(Y&QO~O!S}O~P! sO]'}Xd'}Xl'}Xr'}Xs'}Xt'}Xu'}Xv'}Xw'}X{'}X!Z'}X!p'}X!q'}X!r'}X!s'}X!u'}X!x'}X#`'}X'r'}X(V'}X(X'}X(Y'}X(Z'}X|'}XQ'}X!Q'}X!h'}X(Q'}X(h'}X~O]#pO~P!!]O]&UO~O'oQO](aXa(aXd(aXl(aXr(aXs(aXt(aXu(aXv(aXw(aXy(aX{(aX!Z(aX!o(aX!p(aX!q(aX!r(aX!s(aX!u(aX!x(aX#`(aX#s(aX#t(aX%V(aX%`(aX%k(aX%o(aX%q(aX%w(aX%x(aX'r(aX(V(aX(X(aX(Y(aX~O]&WO~O]#pO~Ol8bO$}&[O'r8PO~O]&]Ow&_O~O]&]O~OPsO]%UOa$jOl$aO!S}O!Z%XO!]!UO!^!TO!l!YO#S!pO$S!mO$T!nO$Z!cO$`!dO$b!eO$c!fO$g!gO$i!hO$k!iO$m!jO$o!kO$x!oO%[#PO&T!TO&U!TO&Y!}O&^!YO&a#OO&h!YO&i!YO'oQO'r7TO(V%VO(Y%VO(ZoO([XO(}!VO)O!WO~O]&cO~O!S#yO(Z&eO~PNYO(Z&gO~O(Z&hO~O'r&iO~Oa!QOl$ROr![Os![Ot![Ou![Ov![Ow![Oy7VO#s7_O#t7^O%k7XO%o7ZO%q!OO%w!|O%x!QO'r$QO~OPsO];cOa$jOl8YO!Z%XO!]:zO!^:yO!l!YO%[7dO&T:yO&U:yO&Y;OO&^!YO&a7cO&h!YO&i!YO'oQO'r$_O(V8jO(Y8jO([XO(}!VO)O!WO~O'v&nO~O!S}O~O(Z&qO~PNYO!S&sO'r&rO~O]&vO~O]$zOa!QOdjOr![Os![Ot![Ou![Ov![Ow![Oy!wO{!]O!Z$|O!p!_O!q!_O!r!_O!s!_O!u!`O!x!aO#`jO#s!{O#t!zO%k!xO%o!yO%q!OO%w!|O%x!QO(V$yO(XfO(YfO~Ol8dOp&zO'r8QO~P!.RO]&}Od%UXl%UX!Z%UX!x%UX#`%UX%`%UX'r%UX(V%UX(X%UX(Y%UX~O{!]O!p!_O!q!_O!r!_O!s!_O!u!`O~P!*qOl$RO{!]O}'XO!S'TO'r$QO'v'SO~Ol$RO{!]O}'^O!S'TO'r$QO'v'SO~Ol$ROy'cO!S'`O#t'cO'r$QO~Ol$RO{!]O}'gO!S'TO'r$QO'v'SO~Oa!QOl$ROy!wO#s!{O#t!zO%k!xO%o!yO%q!OO%w!|O%x!QO'r$QO~O]'jO~OPsOa$jOl$aO!Z%XO!]!UO!^!TO!l!YO%[#PO&T!TO&U!TO&Y!}O&^!YO&a#OO&h!YO&i!YO'oQO'r$_O(V%VO(Y%VO([XO(}!VO)O!WO~O]'lO(Q'nO~P!4RO]#pOa!QOl$ROy;{O#s<XO#t<UO%k<PO%o<SO%q!OO%w!|O%x!QO'r$QO~OPsO]%UOa$jOl$aO!Z'rO!]!UO!^!TO!l!YO%[#PO&T!TO&U!TO&Y!}O&^!YO&a#OO&h!YO&i!YO'oQO'r$_O(V%VO(Y%VO([XO(}!VO)O!WO~OY'sO'oQO'r&rO~O&k'sO~O)Q'vO~O]#pO'n'xO'k&sX~OX#XO'p#XO'q'zO~Od(TOl(PO'r(OO~OPsOa$jO!l!YO&^!YO&h!YO&i!YO'oQO'r$_O([XO(}!VO)O!WO]&Va!Z&Va!]&Va!^&Va!`&Va!b&Va!c&Va!e&Va!f&Va!g&Va!i&Va!j&Va'u&Va'w&Va'x&Va(Q&Va(V&Va(W&Va(X&Va(Y&Va!k&Va(h&Va~Ol$aO%[#PO&T!TO&U!TO&Y!}O&a#OO!Q&Va(Z&Va|&Va![&Va!Y&VaQ&Va!h&Va~P!9^O!S#yO|'sP~PNYO]nX]#_XdnXlmXpnXp#_XrnXsnXtnXunXvnXwnX{nX!Q#_X!SnX!ZnX!Z#_X!]#_X!^#_X!`#_X!b#_X!c#_X!e#_X!f#_X!g#_X!i#_X!j#_X!kmX!pnX!qnX!rnX!snX!unX!xnX#`nX'rnX'u#_X'w#_X'x#_X(Q#_X(VnX(V#_X(W#_X(XnX(X#_X(YnX(Y#_X(hmX|nX|#_X~O(ZnX(Z#_X!Y#_X~P!<nOPsO]%UOa$jOl$aO!]!UO!^!TO!l!YO%[#PO&T!TO&U!TO&Y!}O&^!YO&a#OO&h!YO&i!YO'oQO'r$_O(V%VO(Y%VO([XO(}!VO)O!WO~O!Z(hO~P!@ZOd(kO#`(kO%_(lO'y#qO~O!S#yO!Z(nO'w(oO!Y(iP~P!@ZO(^(uO~Ol(vO]!VX!Q!VX(Q!VX(_!VX~O](xO!Q(yO(Q(TX(_(TX~O(Q(}O(_(|O~O]iXdiXlgXpiXriXsiXtiXuiXviXwiX{iX!ZiX!piX!qiX!riX!siX!uiX!xiX#`iX'riX(ViX(XiX(YiX!SiX!QiX(QiX(hiX|iX~O(ZiX}iX'viX!]iX!^iX!`iX!biX!ciX!eiX!fiX!giX!iiX!jiX'uiX'wiX'xiX(WiX!kiX![iXQiX!hiX!YiX#QiX#SiX~P!CfO'y)OO~Ol)PO~O]'}Xd'}Xr'}Xs'}Xt'}Xu'}Xv'}Xw'}X{'}X!Z'}X!p'}X!q'}X!r'}X!s'}X!u'}X!x'}X#`'}X'r'}X(V'}X(X'}X(Y'}X(Z'}X!Q'}X!S'}X!]'}X!^'}X!`'}X!b'}X!c'}X!e'}X!f'}X!g'}X!i'}X!j'}X'u'}X'w'}X'x'}X(Q'}X(W'}X!k'}X(h'}X|'}X!['}X'v'}XQ'}X!h'}X!Y'}X}'}X#Q'}X#S'}X~Ol)PO~P!GYO(Z)QO~P6POp%POl'}X~P!GYOr![Os![Ot![Ou![Ov![Ow![O{!]O!p!_O!q!_O!r!_O!s!_O!u!`O](`ad(`al(`a!Z(`a!x(`a#`(`a'r(`a(V(`a(X(`a(Y(`a|(`a!Q(`a(Q(`a(h(`aQ(`a!h(`a!S(`a'v(`a(Z(`a~O]ZXlgXpZXpiX!QZX!SiX!ZZX!]ZX!^ZX!`ZX!bZX!cZX!eZX!fZX!gZX!iZX!jZX!kZX'uZX'wZX'xZX(QZX(VZX(WZX(XZX(YZX(ZZX(hZX|ZX~O![ZX'vZX!YZXQZX!hZX~P!MTO]#pO!Z#aO'w#`O'x#`O!^%|a!`%|a!b%|a!c%|a!e%|a!f%|a!g%|a!i%|a!j%|a!k%|a'u%|a(Q%|a(V%|a(W%|a(X%|a(Y%|a(h%|a~O!]#nO!Q%|a(Z%|a|%|a![%|a!Y%|aQ%|a!h%|a~P# eOd#tO#`#tO&`#vO&d#wO'y7oO~Ol)VO~Ol)VO!S#yO~Ol)VO!k#{O(h#{O~Or![Os![Ot![Ou![Ov![Ow![O~P<}Or![Os![Ot![Ou![Ov![Ow![O!y$kO~P<}O]$oO!Z$nO(Z!}a!Q!}a(h!}a~O|!}aQ!}a!h!}a~P#%bOp%PO!S#yO~Or![Os![Ot![Ou![Ov![Ow![O})`O!u!`O#Q)bO#S)cO]#Oa!S#Oa!Z#Oa(h#Oa(Z#Oa!Q#Oa~O'x)_O'v#Oa~P#&YOPsO]%UOa$jOl$aOr![Os![Ot![Ou![Ov![Ow![O!Z%XO!]!UO!^!TO!l!YO%[#PO&T!TO&U!TO&Y!}O&^!YO&a#OO&h!YO&i!YO'oQO'r$_O(Y%VO([XO(}!VO)O!WO~O![)fO(V)gO~P#'hO(Q)jO(SYO|(cP~P4fO]#pO!Q#^O!Z#aO!]#nO!^#eO!`#fO!b#hO!c#iO!e#kO!f#lO!g#lO!i#lO!j#mO'u#[O'w#`O'x#`O(Q#oO(V#bO(W#cO(X#cO(Y#dO~O|)lO~P#)yO!S#yO]'}Xr'}Xs'}Xt'}Xu'}Xv'}Xw'}X|'}X!Z'}X(V'}X(X'}X(Y'}X~Ol9jO~P#+eO]$oO|)nO!Z$nO~O|)lO~Or![Os![Ot![Ou![Ov![Ow![O|qXQqX!QqX!hqX(QqX(ZqX~P! sO|)qO~O]$oO!Z$nO(Z#]a!Q#]a(h#]a~O|#]aQ#]a!h#]a~P#-vOd#tO#`#tO'y7oO~Op%PO](dX!Z(dX!Q(dX!S(dX(Z(dX(h(dX|(dX'v(dXQ(dX!h(dX~Op%PO~OPsO]%UOa!ZOl8ZOr![Os![Ot![Ou![Ov![Ow![Oy7VO!Z%XO!]!UO!^!TO!l!YO#s7_O#t7^O%[#PO%k7XO%o7ZO%q!OO%w!|O%x!QO&T!TO&U!TO&Y!}O&^!YO&a#OO&h!YO&i!YO'oQO'r8RO(V%VO(Y%VO([XO(}!VO)O!WO~OQ'zP!h'zP~P#/kO]#pO!Q)xO!Z#aO!]#nO!^#eO!`#fO!b#hO!c#iO!e#kO!f#lO!g#lO!i#lO!j#mO'u#[O'w#`O'x#`O(Q#oO(V#bO(W#cO(X#cO(Y#dO~O![)PX~P#2[Op%PO!Q)zO!k#{O(h#{O]'tX!Z'tX!['tX![(gX!]'tX!^'tX!`'tX!b'tX!c'tX!e'tX!f'tX!g'tX!i'tX!j'tX'u'tX'w'tX'x'tX(Q'tX(V'tX(W'tX(X'tX(Y'tX~O!Q'tX~P#3vOp%PO!['tX'v'tXQ'tX!h'tX~PBPO![)|O~OPsO]%UOa!ZOl8XOr![Os![Ot![Ou![Ov![Ow![Oy7VO!Z%XO!]!UO!^!TO!l!YO#s7_O#t7^O%[#PO%k7XO%o7ZO%q!OO%w!|O%x!QO&T!TO&U!TO&Y!}O&^!YO&a#OO&h!YO&i!YO'oQO'r7}O(V%VO(Y%VO([XO(}!VO)O!WO~O!Q*OO![)}O~PNYO!Q*OO![)}O~Ol;jO'r9[O~O!S}O(h%`O~O$T*TO%[*UO~O]*VO!Q*ZO!S*WO!Z$nO(h*XO(Z(mX~O!Q*ZO(Z(mX~O(Z*^O~OP%eO'oQO]%Ra!Q%Ra!Z%Ra!]%Ra!^%Ra!`%Ra!b%Ra!c%Ra!e%Ra!f%Ra!g%Ra!i%Ra!j%Ra'u%Ra'w%Ra'x%Ra(Q%Ra(V%Ra(W%Ra(X%Ra(Y%Ra(Z%Ra!k%Ra(h%Ra|%Ra![%Ra'v%Ra!Y%RaQ%Ra!h%Ra~Od#tO#`#tO%_#uO'y7oO~Ol7yO~O!S}O(Z*eO(h*fO~OPsO]%UOa$jOl$aO!Z%XO!]!UO!^!TO!l!YO$T*TO%[*hO&T!TO&U!TO&Y!}O&^!YO&a#OO&h!YO&i!YO'oQO'r$_O(V%VO(Y%VO([XO(}!VO)O!WO~O!Y*iO~P!QO]#pO!Z#aO'w#`O'x#`O!Q&Sa!]&Sa!^&Sa!`&Sa!b&Sa!c&Sa!e&Sa!f&Sa!g&Sa!i&Sa!j&Sa'u&Sa(Q&Sa(V&Sa(W&Sa(X&Sa(Y&Sa(Z&Sa!k&Sa(h&Sa|&Sa![&Sa'v&Sa!Y&SaQ&Sa!h&Sa~Op%PO~PL]O]#pO!Z#aO'w#`O'x#`O!^&Va!`&Va!b&Va!c&Va!e&Va!f&Va!g&Va!i&Va!j&Va'u&Va(Q&Va(V&Va(W&Va(X&Va(Y&Va!k&Va(h&Va~O!]#nO!Q&Va(Z&Va|&Va![&Va!Y&VaQ&Va!h&Va~P#APOr![Os![Ot![Ou![Ov![Ow![O|#UXQ#UX!Q#UX!h#UX(Q#UX(Z#UX~P! sOr![Os![Ot![Ou![Ov![Ow![O#Q)bO#S)cO]#VX!Z#VX(Z#VX~O'x9uO!S#VX(h#VX~P#CzO]$oO!Z*qO~O![*tO(V*uO~P#'hO]&PO!Z&OO(Q)jO(SYO(V%{O(X&QO(Y&QO|(cP~P4fO|#YXQ#YX!Q#YX!h#YX(Q#YX(Z#YX~P! sO!S}O](fX!Z(fX~O!S&sO#}!vO(SYO~P4fOp%PO(h*}O~O(Z+OO~Ol8bO'r8PO~OPsO]%UOa!ZOl8[Or![Os![Ot![Ou![Ov![Ow![Oy!wO{!]O!Z%XO!]!UO!^!TO!l!YO!p!_O!q!_O!r!_O!s!_O!u!`O#s!{O#t!zO%[#PO%k!xO%o!yO%q!OO%w!|O%x!QO&T!TO&U!TO&Y!}O&^!YO&a#OO&h!YO&i!YO'oQO(SYO(V%VO(Y%VO(ZoO([XO(}!VO)O!WO~O'r8TO~P#GcO$c+ZO~OPsO]%UOa!ZOl8[Or![Os![Ot![Ou![Ov![Ow![Oy!wO{!]O!Z%XO!]!UO!^!TO!l!YO!p!_O!q!_O!r!_O!s!_O!u!`O#s!{O#t!zO%[#PO%k!xO%o!yO%q!OO%w!|O%x!QO&T!TO&U!TO&Y!}O&^!YO&a#OO&h!YO&i!YO'oQO'r7}O(SYO(V%VO(Y%VO(Z+_O([XO(}!VO)O!WO~O(Z+aO~P#)yO(Z+aO~O(Z+bO~O]+hO!x!aO'r+dO(V+eO~O]#pO!Z#aO!]7nO!^7eO!`7fO!b7hO!c7iO!e7kO!f7lO!g7lO!i7lO!j7mO'u<xO'w#`O'x#`O(Q#oO(V#bO(W#cO(X#cO(Y#dO~O'v+kO~P#NZO!S}O$Z!cO$`!dO$b!eO$c!fO$g+oO$i!hO$k!iO$m!jO$o!kO$q!lO'r7UOd$Ra!o$Ra!x$Ra#S$Ra#`$Ra#p$Ra#y$Ra#}$Ra$S$Ra$T$Ra$x$Ra$}$Ra%Q$Ra%V$Ra%`$Ra'k$Ra(X$Ra!Y$Ra$^$Ra~P#GcO$z+rO~O]#pO!Z#aO!]#nO!^#eO!`#fO!b#hO!c#iO!e#kO!f#lO!g#lO!i#lO!j#mO'u#[O'w#`O'x#`O(Q#oO(V#bO(W#cO(X#cO(Y#dO~O(Z+sO~P$#|O!Y+tO~P!QO!S&sO~O]'}Xd'}Xr'}Xs'}Xt'}Xu'}Xv'}Xw'}X{'}X!Z'}X!p'}X!q'}X!r'}X!s'}X!u'}X!x'}X#`'}X'r'}X(V'}X(X'}X(Y'}X~Ol9mO~P$%qO|(`X!Q(`X(Q(`X(h(`XQ(`X!h(`X!S(`X'v(`X(Z(`X~P6PO]$oO!Z$nO(Z+xO~Oa!QOl$ROr![Os![Ot![Ou![Ov![Ow![Oy!wO{!]O!p!_O!q!_O!r!_O!s!_O!u!`O#p,OO#s+|O#t+}O%k!xO%o!yO%q!OO%w!|O%x!QO'r$QO(SYO~OQ(jP!h(jP~P$(XOl8kO!o,RO#p,WO#y,VO#}!vO%V!tO%`!uO'r8VO(SYO~P!.RO]&PO!Z&OO(V=`O(X<{O(Y<{O~O](OXr(OXs(OXt(OXu(OXv(OXw(OX{(OX}(OX!S(OX!Z(OX!p(OX!q(OX!r(OX!s(OX!u(OX!x(OX'r(OX'v(OX(V(OX(X(OX(Y(OX(Z(OX|(OX!Q(OX(Q(OX!](OX!^(OX!`(OX!b(OX!c(OX!e(OX!f(OX!g(OX!i(OX!j(OX'u(OX'w(OX'x(OX(W(OX!k(OX(h(OXQ(OX!h(OX![(OX!Y(OX#Q(OX#S(OX~Op%POd(OXl(OX#`(OX~P$+UOl$RO!P,_O'r$QO~Oa!QOl8lOy:{O{!]O!P,mO!Y,jO!o,kO#p,WO#s7bO#t:}O#y!bO$q!lO%Q!rO%j,lO%k:|O%o7]O%q!OO%w!|O%x!QO'r8UO(SYO~PE_O},pO!S'TO'v'SO]xadxalxarxasxatxauxavxawxa{xa!Zxa!pxa!qxa!rxa!sxa!uxa!xxa#`xa'rxa(Vxa(Xxa(Yxa~O(Zxa|xa!Qxa(Qxa(hxaQxa!hxa~P$0`O!S'TO~O!S'TO'v'SO~Ol$RO},pO!S'TO'r$QO'v'SO~O},tO!S'TO'v'SO]%mad%mal%mar%mas%mat%mau%mav%maw%ma{%ma!Z%ma!p%ma!q%ma!r%ma!s%ma!u%ma!x%ma#`%ma'r%ma(V%ma(X%ma(Y%ma~O(Z%ma|%ma!Q%ma(Q%ma(h%maQ%ma!h%ma~P$3YOl$RO},tO!S'TO'r$QO'v'SO~O'r&rO!Y(xP~O'v,yO]%nar%nas%nat%nau%nav%naw%na!Z%na(V%na(X%na(Y%na(Z%na|%na!Q%na(Q%na(h%naQ%na!h%na}%na#Q%na#S%na'x%na~O!S'`Od%nal%na{%na!p%na!q%na!r%na!s%na!u%na!x%na#`%na'r%na~P$5}Ol$RO!S'`O'r$QO~O}-PO'v'SO]%tal%tar%tas%tat%tau%tav%taw%ta{%ta!Z%ta!p%ta!q%ta!r%ta!s%ta!u%ta!x%ta#`%ta'r%ta(V%ta(X%ta(Y%ta(Z%ta|%ta!Q%ta(Q%ta(h%taQ%ta!h%ta~O!S'TOd%ta~P$8mOl$RO}-PO!S'TO'r$QO'v'SO~O]#pO!Z#aO'w#`O'x#`O(V#bO!b&Xa!c&Xa!e&Xa!f&Xa!g&Xa!i&Xa'u&Xa(Q&Xa(W&Xa(X&Xa(Y&Xa!k&Xa(h&Xa~O!]#nO!^#eO!`#fO!j#mO!Q&Xa(Z&Xa|&Xa![&Xa!Y&XaQ&Xa!h&Xa~P$;YO]-TO~O]#pO!S#yO!Z-UO!Q&_a!]&_a!^&_a!`&_a!b&_a!c&_a!e&_a!f&_a!g&_a!i&_a!j&_a'u&_a'w&_a'x&_a(Q&_a(V&_a(W&_a(X&_a(Y&_a(Z&_a!k&_a(h&_a|&_a![&_a'v&_a!Y&_aQ&_a!h&_a~O!Q&ca(Z&ca!k&ca(h&ca|&ca![&ca!Y&caQ&ca!h&ca~P$#|OPsO]%UOa$jOl$aO!Z%XO!]!UO!^!TO!l!YO%[#PO&T!TO&U!TO&Y!}O&^!YO&a#OO&h!YO&i!YO'oQO'r$_O(V%VO(Y%WO([XO(h%YO(}!VO)O!WO~O![-XO~P$@SO)Q-YO~O]#pO)Q-YO~O]-[O&k-ZO~O]#pO'k&sa~O'v-_O~P#NZO(Z$Xi|$Xi~P#)yO]cXlgXpcXpiX!QcX!ZcX!]cX!^cX!`cX!bcX!ccX!ecX!fcX!gcX!icX!jcX!kcX'ucX'wcX'xcX(QcX(VcX(WcX(XcX(YcX(ZcX(hcX|cX![cX'vcX!ScX!YcXQcX!hcX~Od-aO#`-aO'y-`O~Ol-bO~Op%PO]bi!Qbi!Zbi!]bi!^bi!`bi!bbi!cbi!ebi!fbi!gbi!ibi!jbi!kbi'ubi'wbi'xbi(Qbi(Vbi(Wbi(Xbi(Ybi(Zbi(hbi|bi![bi'vbi!YbiQbi!hbi~O![-dO~P$#|O]#pO!Z#aO!]#nO!`#fO'w#`O'x#`O(V#bO!Q&Oi!b&Oi!c&Oi!e&Oi!f&Oi!g&Oi!i&Oi!j&Oi'u&Oi(Q&Oi(W&Oi(X&Oi(Y&Oi(Z&Oi!k&Oi(h&Oi|&Oi![&Oi!Y&OiQ&Oi!h&Oi~O!^&Oi~P$GoO]#pO!Z#aO!]#nO'w#`O'x#`O!Q&Oi!b&Oi!c&Oi!e&Oi!f&Oi!g&Oi!i&Oi!j&Oi'u&Oi(Q&Oi(W&Oi(X&Oi(Y&Oi(Z&Oi!k&Oi(h&Oi|&Oi![&Oi!Y&OiQ&Oi!h&Oi~O!^&Oi!`&Oi(V&Oi~P$IpO]#pO!Z#aO!]#nO!^#eO!`#fO!c#iO!e#kO!f#lO!g#lO!i#lO!j#mO'w#`O'x#`O(V#bO(Y#dO!Q&Oi'u&Oi(Q&Oi(W&Oi(X&Oi(Z&Oi!k&Oi(h&Oi|&Oi![&Oi!Y&OiQ&Oi!h&Oi~O!b#hO~P$KqO!b&Oi~P$KqO]#pO!Z#aO!]#nO!^#eO!`#fO!e#kO!f#lO!g#lO!i#lO!j#mO'w#`O'x#`O(V#bO!Q&Oi!b&Oi!c&Oi'u&Oi(Q&Oi(W&Oi(X&Oi(Z&Oi!k&Oi(h&Oi|&Oi![&Oi!Y&OiQ&Oi!h&Oi~O(Y#dO~P$MyO(Y&Oi~P$MyO]#pO!Z#aO!]#nO!^#eO!`#fO!j#mO'w#`O'x#`O(V#bO!Q&Oi!b&Oi!c&Oi!e&Oi'u&Oi(Q&Oi(W&Oi(X&Oi(Y&Oi(Z&Oi!k&Oi(h&Oi|&Oi![&Oi!Y&OiQ&Oi!h&Oi~O!f#lO!g#lO!i#lO~P%!RO!f&Oi!g&Oi!i&Oi~P%!RO!^#eO~P$GoO]#pO!Z#aO!]#nO!^#eO!`#fO!b#hO!c#iO!e#kO!f#lO!g#lO!i#lO!j#mO'w#`O'x#`O(V#bO(W#cO(X#cO(Y#dO~O!Q&Oi'u&Oi(Q&Oi(Z&Oi!k&Oi(h&Oi|&Oi![&Oi!Y&OiQ&Oi!h&Oi~P%$hO!Q-eO|'sX~P$#|O!Q-eO|'sX~O|-gO~O]#pO!S#yO!Q&_i!]&_i!^&_i!`&_i!b&_i!c&_i!e&_i!f&_i!g&_i!i&_i!j&_i'u&_i'w&_i'x&_i(Q&_i(V&_i(W&_i(X&_i(Y&_i(Z&_i!k&_i(h&_i|&_i![&_i'v&_i!Y&_iQ&_i!h&_i~O!Z-UO~P%'QO!Q&ci(Z&ci!k&ci(h&ci|&ci![&ci!Y&ciQ&ci!h&ci~P$#|O![-lO~P$@SO!Q-nO!Y(iX~P$#|O'r-qO~O!Z-sO'w(oO(h-uO~O!Q-nO!Y(iX~O!Y-vO~O(Q#oO!Q_i'u_i(Z_i!k_i(h_i|_i![_i!Y_iQ_i!h_i~P%$hO!W-wO~Ol(vO]!Va!Q!Va(Q!Va(_!Va~OP.PO].OOl.PO!Q.PO!S-|O!W.PO!Z-}O!].PO!^.PO!`.PO!b.PO!c.PO!e.PO!f.PO!g.PO!i.PO!j.PO!k.PO!l.PO'oQO'v.PO'w.PO'x.PO(Q.PO(V-yO(W-zO(X-zO(Y-{O(Z.PO([XO~O|.SO~P%,VO!W#}O~O!Q(yO(Q(Ta(_(Ta~O(_.WO~O]nXdnXlmXpnXrnXsnXtnXunXvnXwnX{nX!ZnX!pnX!qnX!rnX!snX!unX!xnX#`nX'rnX(VnX(XnX(YnX!SnX!QnX(QnX|nXQnX!hnX~O(ZnX}nX'vnX!]nX!^nX!`nX!bnX!cnX!enX!fnX!gnX!inX!jnX'unX'wnX'xnX(WnX!knX(hnX![nX!YnX#QnX#SnX~P%.sO(Z.YO~Or![Os![Ot![Ou![Ov![Ow![O{!]O!p!_O!q!_O!r!_O!s!_O!u!`O~O](`id(`il(`i!Z(`i!x(`i#`(`i'r(`i(V(`i(X(`i(Y(`i|(`i!Q(`i(Q(`i(h(`iQ(`i!h(`i!S(`i'v(`i(Z(`i~P%2bOd(kO#`(kO'y7oO~O]$oO!Z$nO(Z!}i!Q!}i(h!}i~O|!}iQ!}i!h!}i~P%4tOr![Os![Ot![Ou![Ov![Ow![O})`O#Q)bO#S)cO'x)_O]#Oi!S#Oi!Z#Oi'v#Oi(h#Oi(Z#Oi!Q#Oi~O!u!`O~P%5dOa!QOl$ROr![Os![Ot![Ou![Ov![Ow![O#t<VO%q!OO%w!|O%x!QO'r$QO~Oy7WO#s7`O%k7YO%o7[O~P%6rO].cOr#PXs#PXt#PXu#PXv#PXw#PX}#PX!S#PX!Z#PX#Q#PX#S#PX'v#PX'x#PX(h#PX|#PX!Q#PX(Z#PXQ#PX!h#PX(Q#PX~O].dO~O![.eO~P$#|O![.eO(V.gO~P#'hO![.eO~PNYO].lOdjOl8aO!Z.kO!x!aO#`jO'r$_O(Q.pO(V.iO~O(X.mO(Y.mO(h.oO|!|X!Q!|XQ!|X!h!|X~P%:PO!Q.rO|(cX~O|.tO~Or![Os![Ot![Ou![Ov![Ow![O|qaQqa!Qqa!hqa(Qqa(Zqa~P! sO]$oO!Z*qO|qaQqa!Qqa!hqa(Qqa(Zqa~O!S#yO~PNYOl)PO~P$+UO!Q)zO![(gX~OQ(yX!Q(yX!h(yX~P$#|O(Q.yOQ'{X!Q'{X!h'{X~O!Q.zOQ'zX!h'zX~OQ.|O!h.|O~O!Q)xO![)Pa~O!Q)zO![(ga~O]#pO!S#yO~O!Q/TO!S(tX(h(tX~O(Z/VO~O(Z/WO~OPsO]%UOa!ZOl8ZOy!wO!S#yO!Z%XO!]!UO!^!TO!l!YO#s!{O#t!zO%[#PO%k!xO%o!yO%q!OO%w!|O%x!QO&T!TO&U!TO&Y!}O&^!YO&a#OO&h!YO&i!YO'oQO'r8SO(Q)jO(SYO(V%VO(Y%VO([XO(}!VO)O!WO|'sP|(cP~P%2bOPsO]dOa!ZOdjOlTOr![Os![Ot![Ou![Ov![Ow![Oy!wO{!]O!]!UO!^!TO!l!YO!ouO!p!^O!q!_O!r!_O!s!_O!u!`O!x!aO#S!pO#`jO#p!sO#s!{O#t!zO#y!bO#}!vO$S!mO$T!nO$Z!cO$`!dO$b!eO$c!fO$g!gO$i!hO$k!iO$m!jO$o!kO$q!lO$x!oO$}!qO%Q!rO%V!tO%[#PO%`!uO%k!xO%o!yO%q!OO%w!|O%x!QO&T!TO&U!TO&Y!}O&^!YO&a#OO&h!YO&i!YO'oQO'rRO(SYO(VaO(XfO(YeO(ZoO([XO(}!VO)O!WO~O!S*WO!Y%tO!Z/YO'w(oO~P%AuO!Q*ZO(Z(ma~O(Z/dO~P$#|O(Z/WO~P!6kOr![Os![Ot![Ou![Ov![Ow![O|#Ua!Q#UaQ#Ua!h#Ua(Q#Ua(Z#Ua~P! sO]$oO!Z*qO|#Ua!Q#UaQ#Ua!h#Ua(Z#Ua~O(Q#Ua~P%HTOr![Os![Ot![Ou![Ov![Ow![O#Q)bO#S)cO'x9uO]#Va!S#Va!Z#Va(Z#Va(h#Va~O![/lO(V/mO~P#'hO![/lO~P$#|O![/lO~PNYO]$oO|/nO!Z*qO~O]$oO!Z*qO|#Ya!Q#YaQ#Ya!h#Ya(Z#Ya~O(Q#Ya~P%JfO|/oO~O|/pO~O(Z/rO~O|/sO~P+ZO|/sO(Z#_O~O|/sO~O$^/xOP$Yi]$Yia$Yid$Yil$Yir$Yis$Yit$Yiu$Yiv$Yiw$Yiy$Yi{$Yi!S$Yi!Z$Yi!]$Yi!^$Yi!l$Yi!o$Yi!p$Yi!q$Yi!r$Yi!s$Yi!u$Yi!x$Yi#S$Yi#`$Yi#p$Yi#s$Yi#t$Yi#y$Yi#}$Yi$S$Yi$T$Yi$Z$Yi$`$Yi$b$Yi$c$Yi$g$Yi$i$Yi$k$Yi$m$Yi$o$Yi$q$Yi$x$Yi$}$Yi%Q$Yi%V$Yi%[$Yi%`$Yi%k$Yi%o$Yi%q$Yi%w$Yi%x$Yi&T$Yi&U$Yi&Y$Yi&^$Yi&a$Yi&h$Yi&i$Yi'k$Yi'o$Yi'r$Yi(S$Yi(V$Yi(X$Yi(Y$Yi(Z$Yi([$Yi(}$Yi)O$Yi!Y$Yi~O]/zO~O(Z/|O~P#)yO]$zOdjOl8aO!Z$|O!x!aO#`jO'r8OO(V<^O(X<_O(Y<_O~O(Z0PO~PNYO(Z/|O~O]+hOr![Os![Ot![Ou![Ov![Ow![O!x!aO!y$kO'r+dO(V+eO~O(V0UO~O]$oO!Q0XO!Z0WO(Z(qX~O(Z0[O~O!S}O$Z!cO$`!dO$b!eO$c!fO$g+oO$i!hO$k!iO$m!jO$o!kO$q!lO'r7UOd$Ri!o$Ri!x$Ri#S$Ri#`$Ri#p$Ri#y$Ri#}$Ri$S$Ri$T$Ri$x$Ri$}$Ri%Q$Ri%V$Ri%`$Ri'k$Ri(X$Ri!Y$Ri$^$Ri~P#GcO]0`O~O$z+rOP$wi]$wia$wid$wil$wir$wis$wit$wiu$wiv$wiw$wiy$wi{$wi!S$wi!Z$wi!]$wi!^$wi!l$wi!o$wi!p$wi!q$wi!r$wi!s$wi!u$wi!x$wi#S$wi#`$wi#p$wi#s$wi#t$wi#y$wi#}$wi$S$wi$T$wi$Z$wi$`$wi$b$wi$c$wi$g$wi$i$wi$k$wi$m$wi$o$wi$q$wi$x$wi$}$wi%Q$wi%V$wi%[$wi%`$wi%k$wi%o$wi%q$wi%w$wi%x$wi&T$wi&U$wi&Y$wi&^$wi&a$wi&h$wi&i$wi'k$wi'o$wi'r$wi(S$wi(V$wi(X$wi(Y$wi(Z$wi([$wi(}$wi)O$wi!Y$wi$^$wi~O]$oO~O!Y0cO~P!QO|0dO!Q0eO~P$#|O!Q0fOQ(jX!h(jX~OQ0hO!h0hO~O(Q0kO(h0jOQ#rX!Q#rX!h#rX~P!3XO(Q0kO(h0jOQ#rX!Q#rX!h#rX~P!2sOp&zO~O]$oO!Z$nO(Z0nO~Ol7{O(Z'}X~P$%qO'r+dO~O|0pO~P$#|O]$oO!Z*qO!S%^i(Z%^i(h%^i~O]$oO!S}O!Z$nO~O!Q0qO(Q0sO!S(PX~Ol$RO'r$QO~Oa!QOl$ROy:{O!o0vO#s7bO#t:}O%k:|O%o7]O%q!OO%w!|O%x!QO'r$QO(SYO~P%2bO(Z0wO~PAnO]0{Ol(PO!S#yO!x!aO#`0}O'r(OO'v1PO(V0xO(X0|O(Y0|O~O(Z1QO(h1SO~P&1XOa!QOl8lOy:{O{!]O!P,mO!Y1VO!o,kO#p,WO#s7bO#t:}O#y!bO$q!lO%Q!rO%j,lO%k:|O%o7]O%q!OO%w!|O%x!QO'r8UO(SYO~PE_O]$zOa!QOdjOl8lOy:{O!Z$|O!x!aO#`jO#s7bO#t:}O%`!uO%k:|O%o7]O%q!OO%w!|O%x!QO'r8UO(V$yO(XfO(YfO~P%2bOa!QOl$ROy1]O#s!{O#t1[O#}!vO%k1^O%o!yO%q!OO%w!|O%x!QO'r$QO(SYO~P%2bO'v1_O~O}1bO]xilxirxisxitxiuxivxiwxi{xi!Zxi!pxi!qxi!rxi!sxi!uxi!xxi#`xi'rxi(Vxi(Xxi(Yxi(Zxi(Qxi(hxi~O!S'TO'v'SOdxi|xi!QxiQxi!hxi~P&6OO}1eO]%mil%mir%mis%mit%miu%miv%miw%mi{%mi!Z%mi!p%mi!q%mi!r%mi!s%mi!u%mi!x%mi#`%mi'r%mi(V%mi(X%mi(Y%mi(Z%mi(Q%mi(h%mi~O!S'TO'v'SOd%mi|%mi!Q%miQ%mi!h%mi~P&8YO(h1fO!Q%sX!Y%sX~O!Q1gO!Y(xX~O!Y1iO~Oa1kOl$RO%q!OO'r$QO~O!S'`O]%nid%nil%nir%nis%nit%niu%niv%niw%ni{%ni!Z%ni!p%ni!q%ni!r%ni!s%ni!u%ni!x%ni#`%ni'r%ni(V%ni(X%ni(Y%ni(Z%ni|%ni!Q%ni(Q%ni(h%niQ%ni!h%ni}%ni#Q%ni#S%ni'x%ni~O'v,yO~P&;[O}1pO'v'SO]%til%tir%tis%tit%tiu%tiv%tiw%ti{%ti!Z%ti!p%ti!q%ti!r%ti!s%ti!u%ti!x%ti#`%ti'r%ti(V%ti(X%ti(Y%ti(Z%ti|%ti!Q%ti(Q%ti(h%tiQ%ti!h%ti~O!S'TOd%ti~P&=oO|1qO~P$#|O|1rO~O!Z&_i~P%'QOPsOa$jOl$aO!]!UO!^!TO!l!YO%[#PO&T!TO&U!TO&Y!}O&^!YO&a#OO&h!YO&i!YO'oQO'r$_O([XO(}!VO)O!WO]&fa!S&fa!Z&fa(V&fa(X&fa(Y&fa~O)Q1vO~O'r&rO(Q1wO|)SP~O&k1yO~OlmXpnXp%{X~Od1{O#`1{O'y-`O~O!Q-eO|'sa~O]$oO!Z*qO!S%^q(Z%^q(h%^q~O]#pO!S#yO!Q&_q!]&_q!^&_q!`&_q!b&_q!c&_q!e&_q!f&_q!g&_q!i&_q!j&_q'u&_q'w&_q'x&_q(Q&_q(V&_q(W&_q(X&_q(Y&_q(Z&_q!k&_q(h&_q|&_q![&_q'v&_q!Y&_qQ&_q!h&_q~O!Z&_q~P&CeO!Z-UO~P&CeO!S#yO!Z(nO'w(oO!Q'ZX!Y'ZX~P!@ZO!Q-nO!Y(ia~O![2WO~P#2[O!Y2[O~P%,VO![2[O~P%,VO|2[O~P%,VO|2aO~P%,VO]2bO!Q&|a(Q&|a(_&|a~O!Q(yO(Q(Ti(_(Ti~O]$oO!Z$nO(Z!}q!Q!}q(h!}q~O|!}qQ!}q!h!}q~P&GnOr![Os![Ot![Ou![Ov![Ow![O})`O#Q)bO#S)cO]#Oq!S#Oq!Z#Oq(h#Oq(Z#Oq!Q#Oq~O'x)_O'v#Oq~P&H^O]&PO!Z&OO|#Ta!Q#Ta(Z#TaQ#Ta!h#Ta~O(V8qO(X8rO(Y8rOr#Tas#Tat#Tau#Tav#Taw#Ta}#Ta!S#Ta#Q#Ta#S#Ta'v#Ta'x#Ta(h#Ta~P&IiOa!QOl$ROy7WO#s7`O#t<VO%k7YO%o7[O%q!OO%w!|O%x!QO'r$QO~O|2jO~PNYO|(eP~P!*qO![2mO~P$#|O![2mO~PNYO].lOdjOl$xO!Z.kO!x!aO#`jO'r$_O(V:dO(X2oO(Y2oO~O|!|a!Q!|aQ!|a!h!|a~P&LiO].lOdjOr![Os![Ot![Ou![Ov![Ow![O!Z.kO!x!aO!y$kO#`jO'r$_O|#UX!Q#UXQ#UX!h#UX~Ol8aO(V.iO(X:mO(Y:mO~P&MkO]$oO|!|a!Q!|aQ!|a!h!|a~O!Z*qO~P' SO].lOa!QOdjOl8cOy!wO!Z.kO!x!aO#`jO#s!{O#t!zO%k!xO%o!yO%q!OO%w!|O%x!QO'r8QO(Q)jO(SYO(V:dO(X2oO(Y2oO|(cP~P%2bO(X:mO(Y:mO|#YX!Q#YXQ#YX!h#YX~P%:PO!Z$nO(h2sO~P' SO'r&rO|#eX!Q#eXQ#eX!h#eX~O(Q2vO(SYO~P4fO!Q.rO|(ca~Or![Os![Ot![Ou![Ov![Ow![O|qiQqi!Qqi!hqi(Qqi(Zqi~P! sO]$oO!Z*qO|qiQqi!Qqi!hqi(Qqi(Zqi~O!Q&Wq(Z&Wq!k&Wq(h&Wq|&Wq![&Wq!Y&WqQ&Wq!h&Wq~P$#|O!Q.zOQ'za!h'za~O!Q'ha!['ha~P$#|O![2}O~O(Q3OO!Q%Xa!S%Xa(h%Xa~O!Q/TO!S(ta(h(ta~O!Q3RO(Z#_O!Y(iX~P$#|O!Q#{i(Z#{i~P$#|O]*VO!S#yO!Z$nO(h*XO!Q']a(Z']a~O(Z3TO~P$#|O]$oO!Z*qO|#Ui!Q#UiQ#Ui!h#Ui(Z#Ui~O(Q#Ui~P'(yOr![Os![Ot![Ou![Ov![Ow![O#Q)bO#S)cO]#Vi!Z#Vi(Z#Vi~O'x9uO!S#Vi(h#Vi~P')iO![3VO~P$#|O![3VO(V3XO~P#'hO![3VO~PNYO(Z3YO~O]*VO!Q*ZO!S#yO!Z$nO(Z(mX~O(h3ZO~P'+YO|3]O~P#)yO|3]O~O$^3_OP$Yq]$Yqa$Yqd$Yql$Yqr$Yqs$Yqt$Yqu$Yqv$Yqw$Yqy$Yq{$Yq!S$Yq!Z$Yq!]$Yq!^$Yq!l$Yq!o$Yq!p$Yq!q$Yq!r$Yq!s$Yq!u$Yq!x$Yq#S$Yq#`$Yq#p$Yq#s$Yq#t$Yq#y$Yq#}$Yq$S$Yq$T$Yq$Z$Yq$`$Yq$b$Yq$c$Yq$g$Yq$i$Yq$k$Yq$m$Yq$o$Yq$q$Yq$x$Yq$}$Yq%Q$Yq%V$Yq%[$Yq%`$Yq%k$Yq%o$Yq%q$Yq%w$Yq%x$Yq&T$Yq&U$Yq&Y$Yq&^$Yq&a$Yq&h$Yq&i$Yq'k$Yq'o$Yq'r$Yq(S$Yq(V$Yq(X$Yq(Y$Yq(Z$Yq([$Yq(}$Yq)O$Yq!Y$Yq~O(Z3`O~O(Z3bO~PNYO'v3cO(h*XO~P'+YO(Z3bO~P$#|O|3eO~PNYO(Z3gO~O]+hOr![Os![Ot![Ou![Ov![Ow![O!x!aO'r+dO(V+eO~O]$oO!Z0WO!Q$ra(Z$ra|$ra~O![3mO(V3nO~P#'hO!Q0XO(Z(qa~O]$oO|3qO!Z0WO~O!S}O$Z!cO$`!dO$b!eO$c!fO$g+oO$i!hO$k!iO$m!jO$o!kO$q!lO'r7UOd$Rq!o$Rq!x$Rq#S$Rq#`$Rq#p$Rq#y$Rq#}$Rq$S$Rq$T$Rq$x$Rq$}$Rq%Q$Rq%V$Rq%`$Rq'k$Rq(X$Rq!Y$Rq$^$Rq~P#GcO(Z3sO~OP3tO'oQO~O!Q0fOQ(ja!h(ja~Op%PO(h3xOQ#ral'}X!Q#ra!h#ra(Q'}X~P$%qOa!QOl$ROy7VO#s7_O#t7^O%k7XO%o7ZO%q!OO%w!|O%x!QO'r$QO~O'r+dOQ#va!Q#va!h#va~Op%PO(h3xOQ#ra](OXd(OXl(OXr(OXs(OXt(OXu(OXv(OXw(OX{(OX}(OX!Q#ra!S(OX!Z(OX!h#ra!p(OX!q(OX!r(OX!s(OX!u(OX!x(OX#`(OX'r(OX'v(OX(Q(OX(V(OX(X(OX(Y(OX~O#s3{O#t3{O~Ol$RO!P4OO'r$QO~O!Q0qO!S(Pa~O!Q0qO(Q4RO!S(Pa~O(Z4TO(h4VO~P&1XOa!QOl$ROy:{O#s7bO#t:}O%k:|O%o7]O%q!OO%w!|O%x!QO'r$QO~P%2bO]0{Ol(POr![Os![Ot![Ou![Ov![Ow![O!x!aO!y$kO#`0}O'r(OO(V0xO(X0|O(Y0|O~O(V4[O~O]$oO!Q4_O!S*WO!Z4^O'v1PO~O(Z4TO(h4aO~P'<uO]0{Ol(PO!x!aO#`0}O'r(OO(V=TO(X;qO(Y;qO~O]0{Ol(PO!x!aO#`0}O'r(OO(V0xO(X0|O(Y0|O~Op%PO](bX!Q(bX!S(bX!Z(bX'v(bX(Z(bX(h(bX|(bX~O(Z4TO~O(Z4gO~PAnOl)PO(Z(OX~P$%qOp%POl'}X(Z(OX~P$%qO(Z4hO~O'r&rO!Q'fX!Y'fX~O!Q1gO!Y(xa~Op%PO](wad(wal(war(was(wat(wau(wav(waw(wa{(wa!S(wa!Z(wa!p(wa!q(wa!r(wa!s(wa!u(wa!x(wa#`(wa'r(wa(V(wa(X(wa(Y(wa(Z(wa|(wa!Q(wa!](wa!^(wa!`(wa!b(wa!c(wa!e(wa!f(wa!g(wa!i(wa!j(wa'u(wa'w(wa'x(wa(Q(wa(W(wa!k(wa(h(waQ(wa!h(wa![(wa'v(wa!Y(wa}(wa#Q(wa#S(wa~O!S'`O]%nqd%nql%nqr%nqs%nqt%nqu%nqv%nqw%nq{%nq!Z%nq!p%nq!q%nq!r%nq!s%nq!u%nq!x%nq#`%nq'r%nq(V%nq(X%nq(Y%nq(Z%nq|%nq!Q%nq(Q%nq(h%nqQ%nq!h%nq}%nq#Q%nq#S%nq'x%nq~OPsOa$jO!S#yO!l!YO&^!YO&h!YO&i!YO'oQO'r$_O([XO(}!VO)O!WO](|i!Z(|i!](|i!^(|i!`(|i!b(|i!c(|i!e(|i!f(|i!g(|i!i(|i!j(|i'u(|i'w(|i'x(|i(Q(|i(V(|i(W(|i(X(|i(Y(|i!k(|i(h(|i~Ol$aO%[#PO&T!TO&U!TO&Y!}O&a#OO!Q(|i(Z(|i|(|i![(|i!Y(|iQ(|i!h(|i~P'FUO|4vO~O![4wO~P$#|O!Q&cq(Z&cq!k&cq(h&cq|&cq![&cq!Y&cqQ&cq!h&cq~P$#|O!Q4xO|)SX~O|4zO~O)Q4{O~O!Q^y(Z^y!k^y(h^y|^y![^y!Y^yQ^y!h^y~P$#|O|'ia!Q'ia~P$#|O]#pO!S#yO!Q&_y!Z&_y!]&_y!^&_y!`&_y!b&_y!c&_y!e&_y!f&_y!g&_y!i&_y!j&_y'u&_y'w&_y'x&_y(Q&_y(V&_y(W&_y(X&_y(Y&_y(Z&_y!k&_y(h&_y|&_y![&_y'v&_y!Y&_yQ&_y!h&_y~O!Q&cy(Z&cy!k&cy(h&cy|&cy![&cy!Y&cyQ&cy!h&cy~P$#|O]$oO!Z*qO!S%^y(Z%^y(h%^y~O!Q'Za!Y'Za~P$#|O![2WO~P$#|O!Q#li!Y#li~P$#|O!Y4}O~P%,VO![4}O~P%,VO|4}O~P%,VO|5PO~P%,VO]$oO!Z$nO(Z!}y!Q!}y(h!}y~O|!}yQ!}y!h!}y~P( wOr#Tis#Tit#Tiu#Tiv#Tiw#Ti}#Ti!S#Ti#Q#Ti#S#Ti'v#Ti'x#Ti(h#Ti|#Ti!Q#Ti(Z#TiQ#Ti!h#Ti~O]$oO!Z*qO~P(!gO]&PO!Z&OO(V8qO(X8rO(Y8rO~P(!gO|5RO~P$#|O!Q5SO|(eX~O|5UO~O]$oO|!|i!Q!|iQ!|i!h!|i~O!Z*qO~P($tO|#YX!Q#YXQ#YX!h#YX~P&LiO!Z$nO~P($tO]'SXd&vXl&vXr'SXs'SXt'SXu'SXv'SXw'SX|'SX!Q'SX!Z'SX!x&vX#`&vX'r&vX(V'SX(X'SX(Y'SXQ'SX!h'SX~O|#ci!Q#ciQ#ci!h#ci~P$#|O]$oO!Z*qO|qqQqq!Qqq!hqq(Qqq(Zqq~OQ({X!Q({X!h({X~P$#|O(Q5WOQ(zX!Q(zX!h(zX~O![5YO~P$#|O![5YO~PNYO|$]i!Q#{a(Z#{a~O(Z5]O~P$#|O|5_O~PNYO|5_O~P#)yO|5_O~O]$oO!Z0WO!Q$ri(Z$ri|$ri~O![5fO~P$#|O![5fO(V5hO~P#'hO![5fO~PNYO]$oO!Z0WO!Q'`a(Z'`a~OP%eO|5iO'oQO~O|5iO~O'r+dO(Q0kO(h0jOQ#rX!Q#rX!h#rX~O(Q5lO!Q&wa!S&wa~O!Q0qO!S(Pi~O(Z5pO(h5rO~P'<uO(Z5pO~O(Z5pO(h5vO~P&1XOr![Os![Ot![Ou![Ov![Ow![O~P'=|O]$oO!Z4^O!Q!va!S!va'v!va(Z!va(h!va~Or![Os![Ot![Ou![Ov![Ow![O}5zO#Q)bO#S)cO]!za!Z!za~O'x)_O!Q!za!S!za'v!za(Z!za(h!za~P(-oO![6OO(V6PO~P#'hO!Q4_O!S#yO'v1PO(Z5pO(h5vO~O!S#yO~P#=TO]$oO|6SO!Z4^O~O]$oO!Z4^O!Q#ia!S#ia'v#ia(Z#ia(h#ia~O(Z#ja~P$#|O(Z5pO~P$#|O}-PO'v'SO]%tal%tar%tas%tat%tau%tav%taw%ta{%ta!Z%ta!p%ta!q%ta!r%ta!s%ta!u%ta!x%ta#`%ta'r%ta(V%ta(X%ta(Y%ta~O!S'TO(Z6TOd%ta~P(0pO(Z6TO~P$0`O(Z6TO~P$3YO!Q%si!Y%si~P$#|O!Z-UO]&bi!Q&bi!S&bi!]&bi!^&bi!`&bi!b&bi!c&bi!e&bi!f&bi!g&bi!i&bi!j&bi'u&bi'w&bi'x&bi(Q&bi(V&bi(W&bi(X&bi(Y&bi(Z&bi!k&bi(h&bi|&bi![&bi'v&bi!Y&biQ&bi!h&bi~O'r&rO(Q6YO~O!Q4xO|)Sa~O|6[O~P%,VO]$oO!Z*qO|#Tq!Q#Tq(Z#TqQ#Tq!h#Tq~Or#Tqs#Tqt#Tqu#Tqv#Tqw#Tq}#Tq!S#Tq#Q#Tq#S#Tq'v#Tq'x#Tq(h#Tq~P(5lO!Q5SO|(ea~O|#cq!Q#cqQ#cq!h#cq~P$#|O!Y'Za(Z$Xi~P#)yO|$]q!Q#{i(Z#{i~P$#|O|6`O~PNYO|6`O~P#)yO|6`O~O|6cO~P$#|O|6cO~O]$oO!Z0WO!Q$rq(Z$rq|$rq~O![6eO~P$#|O![6eO~PNYO(Z6fO~O(h3xOQ#ra!Q#ra!h#ra~O(Q6gO!Q&wi!S&wi~O!Q0qO!S(Pq~O!Q4_O!S#yO'v1PO(Z6hO(h6jO~O(Z6hO~O(Z6hO~P$#|O(Z6hO(h6mO~P'<uO]$oO!Z4^O!Q!vi!S!vi'v!vi(Z!vi(h!vi~Or![Os![Ot![Ou![Ov![Ow![O}5zO#Q)bO#S)cO]!zi!Z!zi~O'x)_O!Q!zi!S!zi'v!zi(Z!zi(h!zi~P(;kO![6rO~P$#|O![6rO(V6tO~P#'hO![6rO~PNYO]$oO!Z4^O!Q'Xa!S'Xa'v'Xa(Z'Xa(h'Xa~O|6uO~P#)yO|6uO~O]$oO!Z0WO!Q$ry(Z$ry|$ry~O(Z6xO~O(Z6xO~P$#|O!Q4_O!S#yO'v1PO(Z6xO(h6{O~O]$oO!Z4^O!Q!vq!S!vq'v!vq(Z!vq(h!vq~O![6}O~P$#|O![6}O~PNYO(Z7PO~P$#|O(Z7PO~O]$oO!Z4^O!Q!vy!S!vy'v!vy(Z!vy(h!vy~O(Z7SO~P$#|O(Z7SO~O]ZXlgXpZXpiX!QZX!SiX!ZZX!]ZX!^ZX!`ZX!bZX!cZX!eZX!fZX!gZX!iZX!jZX!kZX'uZX'v$VX'wZX'xZX(QZX(VZX(WZX(XZX(YZX(ZZX(hZX~Ol$ROy9QO!S'`O#t9QO'r$QO~Ol$ROy9RO!S'`O#t9RO'r$QO~Ol$ROy9SO!S'`O#t9SO'r$QO~Oa!QOl$ROy;|O#s7aO#t<UO%k<QO%o7[O%q!OO%w!|O%x!QO'r$QO~Oa!QOl$ROy:{O#s7bO#t:}O%k:|O%o7]O%q!OO%w!|O%x!QO'r$QO~O]#pO~P(C}OPsO];cOa$jOl8YO!]:zO!^:yO!l!YO%[7dO&T:yO&U:yO&Y;OO&^!YO&a7cO&h!YO&i!YO'oQO'r$_O(V8jO(Y8jO([XO(}!VO)O!WO~O!Z;hO~P(EnOl8YO%[7dO&T:yO&U:yO&Y;OO&a7cO'v&Va~P!9^O]#_XlmXpnXp#_X!Q#_X!SnX!Z#_X!]#_X!^#_X!`#_X!b#_X!c#_X!e#_X!f#_X!g#_X!i#_X!j#_X!kmX'u#_X'w#_X'x#_X(Q#_X(V#_X(W#_X(X#_X(Y#_X(hmX|#_XQ#_X!h#_X~O(Z#_X![#_X'v#_X!Y#_X~P(GvO]nX]#_XdnXlmXpnXp#_XrnXsnXtnXunXvnXwnX{nX!ZnX!Z#_X!pnX!qnX!rnX!snX!unX!xnX#`nX'rnX(VnX(XnX(YnX|nX|#_X!QnX(QnX~O(ZnX(hnX~P(JWO]#_XlmXpnXp#_X!Q#_X!Z#_X|#_XQ#_X!h#_X~O!S#_X(Z#_X(h#_X'v#_X~P(LbOQnXQ#_X!QnX!hnX!h#_X(QnX~P!<nO]nX]#_XlmXpnXp#_XrnXsnXtnXunXvnXwnX{nX!SnX!Z#_X!pnX!qnX!rnX!snX!unX!xnX#`nX'rnX(VnX(XnX(YnX~O'vnX(ZnX(hnX~P(MwOdnX|#_X!Q#_X!ZnX!]#_X!^#_X!`#_X!b#_X!c#_X!e#_X!f#_X!g#_X!i#_X!j#_X!kmX'u#_X'w#_X'x#_X(Q#_X(V#_X(W#_X(X#_X(Y#_X(Z#_X(hmX~P(MwO]nX]#_XdnXlmXpnXp#_XrnXsnXtnXunXvnXwnX{nX!ZnX!Z#_X!pnX!qnX!rnX!snX!unX!xnX#`nX'rnX(VnX(XnX(YnX(Z#_X~OlmXpnX(Z#_X~O!Z;lO~P(EnOd(kO#`(kO%_(lO'y7oO~Od(kO#`(kO%_(lO'y7sO~Od(kO#`(kO%_(lO'y7pO~O]iXriXsiXtiXuiXviXwiX|iX!ZiX(ViX(XiX(YiXdiX{iX!piX!qiX!riX!siX!uiX!xiX#`iX'riX~P!MTO]ZXlgXpZXpiX!QZX!ZZX(ZZX(hZX~O!SZX'vZX~P)(VOlgXpiX(ZZX(hiX~O]ZX]iXdiXlgXpZXpiXriXsiXtiXuiXviXwiX{iX!ZZX!ZiX!piX!qiX!riX!siX!uiX!xiX#`iX'riX(ViX(XiX(YiX|ZX|iX!QiX(QiX(hiX~O(ZZX~P))ZO]ZX]iXlgXpZXpiXriXsiXtiXuiXviXwiX!QZX!QiX!SiX!ZZX!ZiX!]ZX!^ZX!`ZX!bZX!cZX!eZX!fZX!gZX!iZX!jZX!kZX'uZX'wZX'xZX(QZX(QiX(VZX(ViX(WZX(XZX(XiX(YZX(YiX(hZX~OQZXQiX!hZX!hiX~P)+eOdiX{iX|ZX|iX!piX!qiX!riX!siX!uiX!xiX#`iX'riX(hiX~P)+eO]iXdiXriXsiXtiXuiXviXwiX{iX!ZiX!piX!qiX!riX!siX!uiX!xiX#`iX'riX(ViX(XiX(YiX~P!MTO]ZX]iXlgXpZXpiXriXsiXtiXuiXviXwiX{iX!ZZX!piX!qiX!riX!siX!uiX!xiX#`iX'riX(ViX(XiX(YiX(ZiX~O!SiX'viX(hiX~P)0wOdiX!ZiX~P)0wO!]7nO'v%|a~P# eOd#tO#`#tO&`7wO&d7xO'y7oO~Od#tO#`#tO&`#vO&d#wO'y7rO~Od#tO#`#tO&`#vO&d#wO'y7tO~Ol)VO!k7|O(h7|O~Or![Os![Ot![Ou![Ov![Ow![O~PDQOr![Os![Ot![Ou![Ov![Ow![O!y$kO~PDQOd#tO#`#tO'y7qO~Od#tO#`#tO'y7vO~Od#tO#`#tO'y7pO~Od#tO#`#tO'y7uO~O]$zOdjOl8aOr![Os![Ot![Ou![Ov![Ow![O!Z$|O!x!aO!y$kO#`jO'r$_O(V8fO(X8hO(Y8hO~O]$zOdjOl8aO!Z$|O!x!aO#`jO'r$_O(V8fO(X8hO(Y8hO~Od#tO#`#tO%_#uO'y7pO~Od#tO#`#tO%_#uO'y7sO~Ol7{O~Ol7zO~O!k7|O(h7|O]'tX!Z'tX!]'tX!^'tX!`'tX!b'tX!c'tX!e'tX!f'tX!g'tX!i'tX!j'tX'u'tX'v'tX'w'tX'x'tX(Q'tX(V'tX(W'tX(X'tX(Y'tX~Op%PO~P)9ZO!]7nO'v&Va~P#APO]&POr![Os![Ot![Ou![Ov![Ow![O!Z&OO(V8qO(X8rO(Y8rO~O}#UX!S#UX#Q#UX#S#UX'v#UX'x#UX(h#UX|#UX!Q#UX(Z#UXQ#UX!h#UX~P);VO]&PO!Z&OO(V8qO(X8rO(Y8rO~Or#YXs#YXt#YXu#YXv#YXw#YX}#YX!S#YX#Q#YX#S#YX'v#YX'x#YX(h#YX|#YX!Q#YX(Z#YXQ#YX!h#YX~P)<tO},pO]xa!Sxa!Zxa!]xa!^xa!`xa!bxa!cxa!exa!fxa!gxa!ixa!jxa'uxa'wxa'xxa(Qxa(Vxa(Wxa(Xxa(Yxa(Zxa!kxa(hxa~O'v'SO!Qxa|xa![xa!YxaQxa!hxa~P)>cO'v'SO]xarxasxatxauxavxawxa}xa!Zxa#Qxa#Sxa'xxa(Vxa(Xxa(Yxa(Zxa!Qxa(hxa~O!S'TO|xaQxa!hxa~P)@mO!Sxa~P)@mO'vxalxarxasxatxauxavxawxa{xa!pxa!qxa!rxa!sxa!uxa!xxa#`xa'rxa~P)>cO},tO]%ma!S%ma!Z%ma!]%ma!^%ma!`%ma!b%ma!c%ma!e%ma!f%ma!g%ma!i%ma!j%ma'u%ma'w%ma'x%ma(Q%ma(V%ma(W%ma(X%ma(Y%ma(Z%ma!k%ma(h%ma~O'v'SO!Q%ma|%ma![%ma!Y%maQ%ma!h%ma~P)ClO'v'SO]%mar%mas%mat%mau%mav%maw%ma}%ma!Z%ma#Q%ma#S%ma'x%ma(V%ma(X%ma(Y%ma(Z%ma!Q%ma(h%ma~O!S'TO|%maQ%ma!h%ma~P)EvO!S%ma~P)EvO'v%mal%mar%mas%mat%mau%mav%maw%ma{%ma!p%ma!q%ma!r%ma!s%ma!u%ma!x%ma#`%ma'r%ma~P)ClO!S%na!]%na!^%na!`%na!b%na!c%na!e%na!f%na!g%na!i%na!j%na'u%na'w%na(W%na!k%na![%na!Y%na~P$5}O!S%ta!]%ta!^%ta!`%ta!b%ta!c%ta!e%ta!f%ta!g%ta!i%ta!j%ta'u%ta'w%ta'x%ta(W%ta!k%ta![%ta!Y%ta~P$8mO'v'SO]%tar%tas%tat%tau%tav%taw%ta}%ta!Z%ta#Q%ta#S%ta'x%ta(V%ta(X%ta(Y%ta(Z%ta!Q%ta(h%ta~O!S'TO|%taQ%ta!h%ta~P)K[O!S%ta~P)K[O!]7nO!^7eO!`7fO!j7mO'v&Xa~P$;YO'v&ca!k&ca(h&ca~P#NZO]cXlgXpiX!ScX~O]#pO!Z#aO!]7nO!`7fO'w#`O'x#`O(V#bO!b&Oi!c&Oi!e&Oi!f&Oi!g&Oi!i&Oi!j&Oi'u&Oi'v&Oi(Q&Oi(W&Oi(X&Oi(Y&Oi!k&Oi(h&Oi~O!^&Oi~P)NQO]#pO!Z#aO!]7nO'w#`O'x#`O!b&Oi!c&Oi!e&Oi!f&Oi!g&Oi!i&Oi!j&Oi'u&Oi'v&Oi(Q&Oi(W&Oi(X&Oi(Y&Oi!k&Oi(h&Oi~O!^&Oi!`&Oi(V&Oi~P* oO]#pO!Z#aO!]7nO!^7eO!`7fO!c7iO!e7kO!f7lO!g7lO!i7lO!j7mO'w#`O'x#`O(V#bO(Y#dO'u&Oi'v&Oi(Q&Oi(W&Oi(X&Oi!k&Oi(h&Oi~O!b7hO~P*#^O!b&Oi~P*#^O]#pO!Z#aO!]7nO!^7eO!`7fO!e7kO!f7lO!g7lO!i7lO!j7mO'w#`O'x#`O(V#bO!b&Oi!c&Oi'u&Oi'v&Oi(Q&Oi(W&Oi(X&Oi!k&Oi(h&Oi~O(Y#dO~P*%SO(Y&Oi~P*%SO]#pO!Z#aO!]7nO!^7eO!`7fO!j7mO'w#`O'x#`O(V#bO!b&Oi!c&Oi!e&Oi'u&Oi'v&Oi(Q&Oi(W&Oi(X&Oi(Y&Oi!k&Oi(h&Oi~O!f7lO!g7lO!i7lO~P*&xO!f&Oi!g&Oi!i&Oi~P*&xO!^7eO~P)NQO]#pO!Z#aO!]7nO!^7eO!`7fO!b7hO!c7iO!e7kO!f7lO!g7lO!i7lO!j7mO'w#`O'x#`O(V#bO(W#cO(X#cO(Y#dO~O'u&Oi'v&Oi(Q&Oi!k&Oi(h&Oi~P*({O'v&ci!k&ci(h&ci~P#NZO(Q#oO'u_i'v_i!k_i(h_i~P*({Od(kO#`(kO'y#qO~Od(kO#`(kO'y7qO~Od(kO#`(kO'y7vO~Od(kO#`(kO'y7uO~Od(kO#`(kO'y7pO~Od(kO#`(kO'y7rO~Od(kO#`(kO'y7tO~Or![Os![Ot![Ou![Ov![Ow![O~P)7qOr![Os![Ot![Ou![Ov![Ow![O~P!5vOr![Os![Ot![Ou![Ov![Ow![O})`O#Q)bO#S)cO'x<nO]#Oi!Z#Oi|#Oi(Z#Oi!Q#Oi(h#OiQ#Oi!h#Oi~O!S#yO~P!+xO}#Ua!S#Ua#Q#Ua#S#Ua'v#Ua'x#Ua(h#Ua|#Ua!Q#Ua(Z#UaQ#Ua!h#Ua~P);VOr#Uas#Uat#Uau#Uav#Uaw#Ua}#Ua!S#Ua#Q#Ua#S#Ua'v#Ua'x#Ua(h#Ua~P%HTOr#Yas#Yat#Yau#Yav#Yaw#Ya}#Ya!S#Ya#Q#Ya#S#Ya'v#Ya'x#Ya(h#Ya~P%JfO]'}Xr'}Xs'}Xt'}Xu'}Xv'}Xw'}X{'}X!p'}X!q'}X!r'}X!s'}X!u'}X!x'}X#`'}X'r'}X(V'}X(X'}X(Y'}X(h'}X~Ol7zO!S'}X'v'}X(Z'}X~P*2OO}1bO]xi!Sxi!Zxi!]xi!^xi!`xi!bxi!cxi!exi!fxi!gxi!ixi!jxi'uxi'wxi'xxi(Qxi(Vxi(Wxi(Xxi(Yxi(Zxi!kxi(hxi~O'v'SO!Qxi|xi![xi!YxiQxi!hxi~P*3pO'v'SO]xirxisxitxiuxivxiwxi}xi!Zxi#Qxi#Sxi'xxi(Vxi(Xxi(Yxi(Zxi!Qxi(hxi~O!S'TO|xiQxi!hxi~P*5zO!Sxi~P*5zO!Sxi!]xi!^xi!`xi!bxi!cxi!exi!fxi!gxi!ixi!jxi'uxi'vxi'wxi'xxi(Wxi!kxi~P&6OO}1eO]%mi!S%mi!Z%mi!]%mi!^%mi!`%mi!b%mi!c%mi!e%mi!f%mi!g%mi!i%mi!j%mi'u%mi'w%mi'x%mi(Q%mi(V%mi(W%mi(X%mi(Y%mi(Z%mi!k%mi(h%mi~O'v'SO!Q%mi|%mi![%mi!Y%miQ%mi!h%mi~P*8yO'v'SO]%mir%mis%mit%miu%miv%miw%mi}%mi!Z%mi#Q%mi#S%mi'x%mi(V%mi(X%mi(Y%mi(Z%mi!Q%mi(h%mi~O!S'TO|%miQ%mi!h%mi~P*;TO!S%mi~P*;TO!S%mi!]%mi!^%mi!`%mi!b%mi!c%mi!e%mi!f%mi!g%mi!i%mi!j%mi'u%mi'v%mi'w%mi'x%mi(W%mi!k%mi~P&8YO'v,yO]%ni!Q%ni!S%ni!Z%ni!]%ni!^%ni!`%ni!b%ni!c%ni!e%ni!f%ni!g%ni!i%ni!j%ni'u%ni'w%ni'x%ni(Q%ni(V%ni(W%ni(X%ni(Y%ni(Z%ni!k%ni(h%ni|%ni![%ni!Y%niQ%ni!h%nir%nis%nit%niu%niv%niw%ni}%ni#Q%ni#S%ni~O!S%ti!]%ti!^%ti!`%ti!b%ti!c%ti!e%ti!f%ti!g%ti!i%ti!j%ti'u%ti'w%ti'x%ti(W%ti!k%ti![%ti!Y%ti~P&=oO'v'SO]%tir%tis%tit%tiu%tiv%tiw%ti}%ti!Z%ti#Q%ti#S%ti'x%ti(V%ti(X%ti(Y%ti(Z%ti!Q%ti(h%ti~O!S'TO|%tiQ%ti!h%ti~P*BOO!S%ti~P*BOOPsOa$jOl8YO!]:zO!^:yO!l!YO%[7dO&T:yO&U:yO&Y;OO&^!YO&a7cO&h!YO&i!YO'oQO'r$_O([XO(}!VO)O!WO]&fa!S&fa!Z&fa(V&fa(X&fa(Y&fa~O]%{XlmXpnX!S%{X~Od1{O#`1{O'y:[O~Or![Os![Ot![Ou![Ov![Ow![O})`O#Q)bO#S)cO]#Oq!Z#Oq(Z#Oq!Q#Oq(h#Oq~O'x<nO|#OqQ#Oq!h#Oq~P*FOO!S#Ta(Z#Ta(h#Ta~P$*sOl$xO(V:dO(X2oO(Y2oO~P&MkO'v&Wq!k&Wq(h&Wq~P#NZOr#Uis#Uit#Uiu#Uiv#Uiw#Ui}#Ui!S#Ui#Q#Ui#S#Ui'v#Ui'x#Ui(h#Ui~P'(yOl8YO%[7dO&T:yO&U:yO&Y;OO&a7cO'v(|i~P'FUO'v&cq!k&cq(h&cq~P#NZO'v^y!k^y(h^y~P#NZO'v&cy!k&cy(h&cy~P#NZO]$oO!Z*qO!S#Ti(Z#Ti(h#Ti~O!S#Ti(Z#Ti(h#Ti~P$*sOdjOl8aO!x!aO#`jO'r$_O~O].lO!Z.kO(V.iO(X:mO(Y:mO|#YX!Q#YXQ#YX!h#YX~P*KXO'x<nO|!za~P(-oO]$oO!Z4^O|#ia~O]$oO!Z*qO!S#Tq(Z#Tq(h#Tq~O]$oO!Z4^O|!vi~O'x<nO|!zi~P(;kO]$oO!Z4^O|!vq~O]$oO!Z4^O|!vy~O(V8`O~OPsOa$jOl8YO!Z%XO!]:zO!^:yO!l!YO%[7dO&T:yO&U:yO&Y;OO&^!YO&a7cO&h!YO&i!YO'oQO'r$_O(V8jO(Y8jO([XO(}!VO)O!WO~O]<|O(Q'nO~P*NTOl9jO~Ol9kO~Ol9lO~Ol9mO~Ol9nO~Ol9oO~Ol9pO~Ol9jO!k#{O(h#{O~Ol9oO!k#{O(h#{O~Ol9pO!k#{O(h#{O~Or![Os![Ot![Ou![Ov![Ow![O})`O!u!`O#Q)bO#S)cO]#Oa!Z#Oa(Z#Oa!Q#Oa(h#Oa~O'x<nO|#OaQ#Oa!h#Oa~P+#]Ol9oO!S#yOQ'}X!Q'}X!h'}X(Q'}X|'}X(h'}X~P$%qOl9pO!S#yO~P$%qO|9wO~O!S#]a'v#]a~P#-vOl9nO|'}X!Q'}X(Q'}X(h'}X~P$%qO![:YO~P$@SO'v:ZO~P#NZOd-aO#`-aO'y:[O~Ol:]O~O![:^O~P$@SO!S!}i'v!}i~P%4tO!u!`O~P*-yO|:gO~O!S!}q'v!}q~P&GnO!S!}y'v!}y~P( wOr![Os![Ot![Ou![Ov![Ow![O~P'=bOr![Os![Ot![Ou![Ov![Ow![O!y$kO~P'=bO]$oO!Z4^O|!va~Ol$ROy<hO!S'`O#t<hO'r$QO~Oa!QOl$ROy;zO#s<WO#t<TO%k<OO%o7ZO%q!OO%w!|O%x!QO'r$QO~Oa!QOl$ROy;}O#s<YO#t<VO%k<RO%o<SO%q!OO%w!|O%x!QO'r$QO~Or![Os![Ot![Ou![Ov![Ow![O~P&#SOr![Os![Ot![Ou![Ov![Ow![O!y$kO~P&#SOr![Os![Ot![Ou![Ov![Ow![O~P+)jOy;}O#s<YO%k<RO%o<SO~P%6rOr![Os![Ot![Ou![Ov![Ow![O})`O#Q)bO#S)cO'x<pO]#Oi!Q#Oi!S#Oi!Z#Oi(Z#Oi(h#Oi~O'x<pO~P&H^O(V;]O~O!S!}a'v!}a~P#%bO'x<oO|#VX!Q#VXQ#VX!h#VX(Q#VX~P#CzO!S#YX(Z#YX(h#YX~P$*sOr![Os![Ot![Ou![Ov![Ow![O!S#Ua(Z#Ua(h#Ua~P$*sOr![Os![Ot![Ou![Ov![Ow![O#Q)bO#S)cO'x<oO]#Va|#Va!Z#Va!Q#VaQ#Va!h#Va(Q#Va(Z#Va~O]$oO!Z*qO!S#Ya(Z#Ya(h#Ya~O]$oO!Z*qO!S#Ui(Z#Ui(h#Ui~O'x<oO|#Vi!Q#ViQ#Vi!h#Vi(Q#Vi~P')iO(V;vO~O(V%{O(X&QO(Y&QO(Q#Ta~P&IiO|#Ti!Q#TiQ#Ti!h#Ti(Q#Ti(Z#Ti~O]$oO!Z*qO~P+2sO]&PO!Z&OO(V%{O(X&QO(Y&QO~P+2sO(Q#Tq~P(5lO(V<]O~O'x<pO~P#&YO!u!`O~P+,{O!S!}a~P#%bO!S#]a~P#-vOr![Os![Ot![Ou![Ov![Ow![O!S#UX(Z#UX(h#UX~P$*sO!S!}i~P%4tO]$oO!Z*qO!S#Ua(Z#Ua(h#Ua~O!S!}q~P&GnO!S!}y~P( wOV&j&m'o([!W#`'r'y&n&lST!`!^d!b!l'w&U]&k)T&p&o!j!c&q&r&q~",
      goto: "%2f)TPPPPPP)UP)XPP-W3RP6d6d9wP9w=^P>P>k?XGp!!c!+W!3_P!;z!<p!=fP!>RPPPPPP!>oP!@iPPP!CVPP!EgP!G}!HR!HtP!HzPPPPP!H}P!H}PP!H}PPPPPPPP!IZ!LzPPPPP!L}P>S!N`PP>S#!y#%v#&T#'p#)gP#)gP#*V#*y#+m#*y#*y#*y#&T#&T#&T#,c#1aP#2P#&T#%v#%v#6w#6}>S>S>S#7Q#7e#9l#9t#9t#9{P#:]#:dPP#:d#:d#:k#9{P#:o#;`#;kP#;}#=w#>Q#>ZPP#>p#?Z#?w#@e#>pP#Ar#BOP#>pP#>pPP#BR#>p#>pP#>pP#>pP#>pP#>pP#EcP#Ev#Ev#Ev#Ev#>Z#>ZP#FTP#>Z#=wP#FX#FXP#Ff#=w#=w#I|P#Ja#Jl#Jr#JrP#=w#KhPP#=w#LS#LS!G}!G}!G}!G}!G}!G}PP!G}!>o!>oP#LVP#NS#Nj!>o!>o!>oPP#Np#Ns#Nv$ O9w6d$$]$&a$(R6dPP6d$)y6dP6d6d6dP6dPP$-U6dP$)y$-b6dPPPPPPPPPPP)UP$0m$0s$3w$4W$4^$5Z$5a$5w$6R$7a$8p$9O$9j$9p$:Q$:d$:l$:r$:|$;[$;e$;m$;s$<O$<_$<i$<o$<u$<|$=]$=c$?a$?g$?m$?t$?{PPPPPPPP$@R$@VPPPPP$Gv#Np$Gy$LR$Ns%$UP%$XP%$]%$`PPPPPPPPP%$l%&X%'b%(g%(m%+d%+g%-]P%-c%-g%-j%-p%-|%.W%.a%/`%/{%0R%0l%0|%1P%1a%1n%1z#Np#Ns#Ns%1}PP%2RP%2`%2cR#WP'rsOadei|}!T!U!e!h!m!p!}#P#[#^#a#e#f#g#h#i#j#k#l#m#n#p#w#y#{$n%P%U%V%W%X%d%q%s&O&]&^&b&c&n&s&v&}'j'l'r(h(n)e)g)q)x*O*V*W*X*f*h*q*s*u+U+X+_+k+n+u-U-X-_-e-l-n-s-u.c.g.k.o.z/Y/k/m/x/z/|0P0W0]0`1P1S1f1r2s3R3X3Z3_3b3c3e3l3n4V4^4a5]5_5h5r5v5}6P6`6c6j6m6t6u6{7d7e7f7g7h7i7j7k7l7m7n7x7|8j9w:Y:Z:^:g:y:z;O;c;h;l<x<|U%es%f3tQ&V!^Q's#Qd.P(x-|-}.O.R2]2^2_2b5OR3t0edgOade|}%s&s*W+u#n${fmtu!s$W$f$g$l$y$z%l&{&|'P'T)T)Y)[)i*Z+S+^+l,R,c,i,k.].h.i.l.m/t2o8^8_8`8e8f8g8h9q9r9s9t:_:`:d:m;Z;[;]<Z<[<]<^<_<l<m<rS%Ri/Y&S%y!T!U!e!h!p!}#P#^#a#e#f#g#h#i#j#k#l#m#n#p#w#y#{$n%P%U%V%W%X%d%q&O&]&^&b&c&n&v&}'j'l'r(h(n)e)g)q)x*O*V*X*f*h*q*s*u+U+X+_+k+n-U-X-_-e-l-n-s-u.c.g.o.z/k/m/x/z/|0P0W0]0`1P1S1f1r2s3R3X3Z3_3b3c3e3l3n4V4^4a5]5_5h5r5v5}6P6`6c6j6m6t6u6{;c;h;l<|Q&Z!bQ&u!qQ's#TQ't#QQ'u#RQ)s$|Q*y&UQ+P&[S,v'`1gQ/P)zQ1s-TQ1w-[Q2u.pQ6Y4xQ8i.k!T8o!m#[7d7e7f7g7h7i7j7k7l7m7n7x7|8j9w:Y:Z:^:g:y:z;O<x%b#]S!Z$`$j$p%Q%x%z&d&m&p'k'q'{'|(U(V(W(X(Y(Z([(](^(_(`(a(g(m(t)d)t*g*r+Q+]+w,Y-R-p.f.w.}/X/Z/c/j/v0O1t1u1z1|2R2T2X2Y2i2t2y3W3a3d3k4e4f4p5V5X5Z5^5a5g5t5|6_6k6s6y7Q8W8p9X9Z9]9^9_9`9a9b9c9d9e9f9h9i:e:h:i:j;iQ&X!aQ'p#OQ'w#VQ(f#v[*Y%a)R/]/u/}0^Q*|&WQ-V'oQ-Z'tQ-^'xS-i(e-WQ/S*PS2P-j-kQ4|2QQ9Y7cR9g7w's!YOadei|}!T!U!e!h!m!p!}#P#[#^#a#e#f#g#h#i#j#k#l#m#n#p#w#y#{$n%P%U%V%W%X%d%q%s&O&]&^&b&c&n&s&v&}'j'l'r(h(n)e)g)q)x*O*V*W*X*f*h*q*s*u+U+X+_+k+n+u-U-X-_-e-l-n-s-u.c.g.k.o.z/Y/k/m/x/z/|0P0W0]0`1P1S1f1r2s3R3X3Z3_3b3c3e3l3n4V4^4a5]5_5h5r5v5}6P6`6c6j6m6t6u6{7d7e7f7g7h7i7j7k7l7m7n7x7|8j9w:Y:Z:^:g:y:z;O;c;h;l<x<|&n!SOadei|}!T!U!e!h!p!}#P#^#a#e#f#g#h#i#j#k#l#m#n#p#w#y#{$n%P%U%V%W%X%d%q%s&O&]&^&b&c&n&s&v&}'j'l'r(h(n)e)g)q)x*O*V*W*X*f*h*q*s*u+U+X+_+k+n+u-U-X-_-e-l-n-s-u.c.g.k.o.z/Y/k/m/x/z/|0P0W0]0`1P1S1f1r2s3R3X3Z3_3b3c3e3l3n4V4^4a5]5_5h5r5v5}6P6`6c6j6m6t6u6{;c;h;l<|!T:x!m#[7d7e7f7g7h7i7j7k7l7m7n7x7|8j9w:Y:Z:^:g:y:z;O<xQ(R#`S*P%]/TQ-r(o{1O,b0u0x0{0|4W4X4Y4[4_5x5y6p;q;s;t;v;w;x;y=TQ(T#`{0},b0u0x0{0|4W4X4Y4[4_5x5y6p;q;s;t;v;w;x;y=T|(S#`,b0u0x0{0|4W4X4Y4[4_5x5y6p;q;s;t;v;w;x;y=TT*P%]/T^UO|}%s&s*W+u&W$S[_!l!u!v!w!x!y!z!{#O#u#v$Y$o$r&P&V&k&z'S'Y'_'c'h'p(f(l)_)h*z*}+R+|+},_,`,l,y.a.d.r0f0j0q0v1[1]1^3x4O5S7V7W7X7Y7Z7[7]7^7_7`7a7b7c7w8w8x8}9O9Q9R9S9W9Y9g9u:c:u:v:{:|:};e;f;g;z;{;|;}<O<P<Q<R<S<T<U<V<W<X<Y<`<a<b<c<d<e<f<g<h<i<j<k<n<o<p<t<u<v'`$baefi!T!U!e!h!m!p!}#P#[#^#a#e#f#g#h#i#j#k#l#m#n#p#w#y#{$f$g$l$n$y$z%V%W%X%d%q&O&^&b&v&{&}'j'r(h(n)Y)[)e)g)q)x*O*X*f*h*q*s*u+U+X+_-U-X-_-e-l-n-s-u.].c.g.h.k.o/Y/k/m/x/z/|0P0W1P1S1f1r2o2s3R3X3Z3_3b3c3e3l3n4V4^4a5]5_5h5r5v5}6P6`6c6j6m6t6u6{7d7e7f7g7h7i7j7k7l7m7n7x7|8j9w:Y:Z:^:d:g:y:z;O;h;l<xY%htu%l,R,c|(Q#`,b0u0x0{0|4W4X4Y4[4_5x5y6p;q;s;t;v;w;x;y=TQ8m&|U8n'T,i,kY;Pd%U'l;c<|!l;Qm$W'P)T)i*Z+S+^+l.i.m/t8^8_8`8e8f8g8h9q9r9s9t:_:`:m;Z;[;]<Z<[<]<^<_<l<m<rS;R!b&[Q;S!sQ;T.lU;U%P*V.z^;V&]&c&n+k+n0]0`T;k%]/T^VO|}%s&s*W+uQ$S,y#b$T[_!l!u!v!{#O#u#v$Y$o$r&P&V&k&z'p(f(l)_)h*z*}+R+|,`.a.d.r0f0j0v3x5S7_7`7a7b7c7w9Y9g9u:c:u:v<W<X<Y<n<o<p<t<u<vj$bf$f$g$l$y$z&{)Y)[.].h2o:d&t$caei!T!U!e!h!m!p!}#P#[#^#a#e#f#g#h#i#j#k#l#m#n#p#w#y#{$n%V%W%X%d%q&O&^&b&v&}'j'r(h(n)e)g)q)x*O*X*f*h*q*s*u+U+X+_-U-X-_-e-l-n-s-u.c.g.k.o/Y/k/m/x/z/|0P0W1P1S1f1r2s3R3X3Z3_3b3c3e3l3n4V4^4a5]5_5h5r5v5}6P6`6c6j6m6t6u6{7d7e7f7g7h7i7j7k7l7m7n7x7|8j9w:Y:Z:^:g:y:z;O;h;l<xY$qd%U'l;c<|Y%htu%l,R,cQ&w!sx'Q!w!x!y!z'Y'_'c'h+}1[1]1^7]9S:{:|:};e;f;g|(Q#`,b0u0x0{0|4W4X4Y4[4_5x5y6p;q;s;t;v;w;x;y=T!v)r'S,_0q4O7V7W7X7Y7Z7[7^8w8x8}9O9Q9R9W;z;{;|;}<O<P<Q<R<S<T<U<V<`<a<b<c<d<e<f<g<h<i<j<kQ,Q&|Q1W,lU9{'T,i,k!l;Qm$W'P)T)i*Z+S+^+l.i.m/t8^8_8`8e8f8g8h9q9r9s9t:_:`:m;Z;[;]<Z<[<]<^<_<l<m<rS;R!b&[U;_%P*V.z^;`&]&c&n+k+n0]0`Q;d.lT;k%]/T|!ROd|}%P%U%s&]&c&n&s'l*V*W+k+n+u.z0]0`;c<|#l$X[_!l!s!u!v!{#O#u#v$Y$o$r&P&V&k&z&|'T'p(f(l)_)h*z*}+R,`,i,k.a.d.l.r0f0j0v3x5S7_7`7a7b7c7w9Y9g9u:c:u:v<W<X<Y<n<o<p<t<u<v&t$iaei!T!U!e!h!m!p!}#P#[#^#a#e#f#g#h#i#j#k#l#m#n#p#w#y#{$n%V%W%X%d%q&O&^&b&v&}'j'r(h(n)e)g)q)x*O*X*f*h*q*s*u+U+X+_-U-X-_-e-l-n-s-u.c.g.k.o/Y/k/m/x/z/|0P0W1P1S1f1r2s3R3X3Z3_3b3c3e3l3n4V4^4a5]5_5h5r5v5}6P6`6c6j6m6t6u6{7d7e7f7g7h7i7j7k7l7m7n7x7|8j9w:Y:Z:^:g:y:z;O;h;l<x$f$}fmtu#`$W$f$g$l$y$z%]%l&[&{'P)T)Y)[)i*Z+S+^+l,R,b,c.].h.i.m/T/t0u0x0{0|2o4W4X4Y4[4_5x5y6p8^8_8`8e8f8g8h9q9r9s9t:_:`:d:m;Z;[;];q;s;t;v;w;x;y<Z<[<]<^<_<l<m<r=TQ&Y!b#n'R!w!x!y!z'S'Y'_'c'h,_0q1[1]1^4O7V7W7X7Y7Z7[7]7^8w8x8}9O9Q9R9S9W:{:|:};e;f;g;z;{;|;}<O<P<Q<R<S<T<U<V<`<a<b<c<d<e<f<g<h<i<j<kf+i&l+c+e+h0R0S0U0X3i3j5eQ0i+|Q0l+}Q0o,VQ1X,lQ1j,yQ3z0kR5k3{|!ROd|}%P%U%s&]&c&n&s'l*V*W+k+n+u.z0]0`;c<|#n$X[_!l!s!u!v!{#O#u#v$Y$o$r&P&V&k&z&|'T'p(f(l)_)h*z*}+R+|,`,i,k.a.d.l.r0f0j0v3x5S7_7`7a7b7c7w9Y9g9u:c:u:v<W<X<Y<n<o<p<t<u<v&t$iaei!T!U!e!h!m!p!}#P#[#^#a#e#f#g#h#i#j#k#l#m#n#p#w#y#{$n%V%W%X%d%q&O&^&b&v&}'j'r(h(n)e)g)q)x*O*X*f*h*q*s*u+U+X+_-U-X-_-e-l-n-s-u.c.g.k.o/Y/k/m/x/z/|0P0W1P1S1f1r2s3R3X3Z3_3b3c3e3l3n4V4^4a5]5_5h5r5v5}6P6`6c6j6m6t6u6{7d7e7f7g7h7i7j7k7l7m7n7x7|8j9w:Y:Z:^:g:y:z;O;h;l<x$h$}fmtu!b#`$W$f$g$l$y$z%]%l&[&{'P)T)Y)[)i*Z+S+^+l,R,b,c.].h.i.m/T/t0u0x0{0|2o4W4X4Y4[4_5x5y6p8^8_8`8e8f8g8h9q9r9s9t:_:`:d:m;Z;[;];q;s;t;v;w;x;y<Z<[<]<^<_<l<m<r=T#p'R!w!x!y!z'S'Y'_'c'h+},_0q1[1]1^4O7V7W7X7Y7Z7[7]7^8w8x8}9O9Q9R9S9W:{:|:};e;f;g;z;{;|;}<O<P<Q<R<S<T<U<V<`<a<b<c<d<e<f<g<h<i<j<kQ1X,lR1j,y^WO|}%s&s*W+u&W$S[_!l!u!v!w!x!y!z!{#O#u#v$Y$o$r&P&V&k&z'S'Y'_'c'h'p(f(l)_)h*z*}+R+|+},_,`,l,y.a.d.r0f0j0q0v1[1]1^3x4O5S7V7W7X7Y7Z7[7]7^7_7`7a7b7c7w8w8x8}9O9Q9R9S9W9Y9g9u:c:u:v:{:|:};e;f;g;z;{;|;}<O<P<Q<R<S<T<U<V<W<X<Y<`<a<b<c<d<e<f<g<h<i<j<k<n<o<p<t<u<vj$bf$f$g$l$y$z&{)Y)[.].h2o:d%p$daei!T!U!e!h!p!}#P#^#a#e#f#g#h#i#j#k#l#m#n#p#w#y#{$n%V%W%X%d%q&O&^&b&v&}'j'r(h(n)e)g)q)x*O*X*f*h*q*s*u+U+X+_-U-X-_-e-l-n-s-u.c.g.k.o/Y/k/m/x/z/|0P0W1P1S1f1r2s3R3X3Z3_3b3c3e3l3n4V4^4a5]5_5h5r5v5}6P6`6c6j6m6t6u6{;h;lY%htu%l,R,c|(Q#`,b0u0x0{0|4W4X4Y4[4_5x5y6p;q;s;t;v;w;x;y=T!S8]!m#[7d7e7f7g7h7i7j7k7l7m7n7x7|8j9w:Y:Z:^:g:y:z;O<xQ8m&|U8n'T,i,k!l;Qm$W'P)T)i*Z+S+^+l.i.m/t8^8_8`8e8f8g8h9q9r9s9t:_:`:m;Z;[;]<Z<[<]<^<_<l<m<rS;R!b&[Q;S!sQ;T.lY;Wd%U'l;c<|U;X%P*V.z^;Y&]&c&n+k+n0]0`T;k%]/Tr#rT$R$a$x%g(P8X8Y8Z8[8a8b8c8d8k8l;jo(i#x)P)V-b7y7z7{9j9k9l9m9n9o9p:]r#sT$R$a$x%g(P8X8Y8Z8[8a8b8c8d8k8l;jo(j#x)P)V-b7y7z7{9j9k9l9m9n9o9p:]`%Ogh${%R%S%y8i8od%w!R$X$i$}&Y'R0i0l1X1jV-c(R(S1OS$vd%UQ)u%PQ-S'lQ/q*}Q2k.dQ2z.zQ6]5SQ;a;cR;o<|$o!QO[_d|}!l!s!u!v!{#O#u#v$Y$o$r%P%U%s&P&V&]&c&k&n&s&z&|'T'l'p(f(l)_)h*V*W*z*}+R+k+n+u+|,`,i,k,l.a.d.l.r.z0]0`0f0j0v3x5S7_7`7a7b7c7w9Y9g9u:c:u:v;c<W<X<Y<n<o<p<t<u<v<|#S^O[_`|}!s!u!v#u$V$Y$[$]$o%s&P&V&]&c&n&s&x&z&|'T(l)U)h*V*W*z+R+k+n+u,`,i,k,l.l.r0]0`0f0v:u:vS'Y!w1]S'_!x1^U'h!z+}1[Q8w7VQ8x7WQ8}7XQ9O7YQ9W7^Q;e:{Q;f:|Q;g:}Q<`;zQ<a;{Q<b;|Q<c;}Q<d<OQ<e<PQ<f<QQ<g<RQ<i<TQ<j<UR<k<Vb'W!w1]7V7W:{;z;{;|;}b']!x1^7X7Y:|<O<P<Q<R`'f!z+}1[7^:}<T<U<Vl,o'U'X'Y4j8s8t8u8w8x;e<`<a<b<cl,s'Z'^'_4k8y8z8{8}9O;f<d<e<f<gh-O'd'g'h4i9T9U9V9W;g<i<j<kY1a,p,q9|9}:OY1d,t,u:Q:R:SY1o-P-Q:V:W:XQ4m1bQ4o1eR4u1pb'V!w1]7V7W:{;z;{;|;}b'[!x1^7X7Y:|<O<P<Q<R`'e!z+}1[7^:}<T<U<Vj,n'U'W'X'Y4j8t8w8x;e<`<a<b<cj,r'Z']'^'_4k8z8}9O;f<d<e<f<gf,}'d'f'g'h4i9U9W;g<i<j<kW1`,o,p,q9}W1c,s,t,u:RW1n-O-P-Q:WS4l1a1bS4n1d1eS4t1o1pQ6U4mQ6V4oR6W4uT,g'T,i!aZO[|}$o%s&P&V&]&c&n&s&z&|'T)h*V*W*z+R+k+n+u,`,i,l.l.r0]0`0fQ$OYR.T(yR({$Oe.P(x-|-}.O.R2]2^2_2b5O'r!YOadei|}!T!U!e!h!m!p!}#P#[#^#a#e#f#g#h#i#j#k#l#m#n#p#w#y#{$n%P%U%V%W%X%d%q%s&O&]&^&b&c&n&s&v&}'j'l'r(h(n)e)g)q)x*O*V*W*X*f*h*q*s*u+U+X+_+k+n+u-U-X-_-e-l-n-s-u.c.g.k.o.z/Y/k/m/x/z/|0P0W0]0`1P1S1f1r2s3R3X3Z3_3b3c3e3l3n4V4^4a5]5_5h5r5v5}6P6`6c6j6m6t6u6{7d7e7f7g7h7i7j7k7l7m7n7x7|8j9w:Y:Z:^:g:y:z;O;c;h;l<x<|e.P(x-|-}.O.R2]2^2_2b5OR2c.Td]O|}%s&s&|'T*W+u,i!n^[_`!s!u!v#u$V$Y$[$]$o&P&V&]&c&n&x&z(l)U)h*V*z+R+k+n,`,k,l.l.r0]0`0f0v:u:vQ%jt])]$m)^;^;n=[=]!fbOadeftu|}!s$f$g$l$y$z%l%s&s&{&|'T)Y)[*W+u,R,c,i,k.].h.l2o:df+f&l+c+e+h0R0S0U0X3i3j5eh0y,b0u0x0|4W4X4Y4[4_5x5y6pp:wm$W'P)T*Z+S+l/t8^8_8`8e8g9q9s:_h<w)i.i.m8f8h9r9t:`:m;Z;[;]b=U0{;q;s;t;v;w;x;y=Tc=Z+^<Z<[<]<^<_<l<m<r^$mc/};b;m;p;r<yb%|!X'O(d-m:b:l<{<}=`Y*o2g5Q9y9z:fb*p%},Z-h2S:k:p=Q=R=b^0V+g0T0Z3h3o5d6dQ0b+rY2f.`2h8q8r9xb4]0z4S4Z4d5u5w6Q6o6|[:n4c:o:q:s:t;ud;^$h$s$w&y)X,P.[.n2e2pt<z$u%{&P&Q)i)m)o*k.h.i.l.m.u2o:d:m=V=Xf=P)p*l*v*w.j.v/f2n2x=W=Yi=[%a)R,[.Z/]/u0^=^=_=a=c=dW)j$o&P*V.lS+y&z0fR2v.r$TjOadefmtu|}!s$W$f$g$l$y$z%l%s&s&{&|'P'T)T)Y)[)i*W*Z+S+^+l+u,R,c,i,k.].h.i.l.m/t2o8^8_8`8e8f8g8h9q9r9s9t:_:`:d:m;Z;[;]<Z<[<]<^<_<l<m<r#bjadefm!s$W$f$g$l$y$z&{'P)T)Y)[)i*Z+S+^+l.].h.i.l.m/t2o8^8_8`8e8f8g8h9q9r9s9t:_:`:d:m;Z;[;]<Z<[<]<^<_<l<m<r`kO|}%s&s&|*W+uU%itu,RQ*b%lS,a'T,iT1T,c,kh)`$m)^)a._9v:a;^;n<q<s=[=]`*m%|*n*p/i<z=O=P=SX5z4]5{:n:rh)`$m)^)a._9v:a;^;n<q<s=[=]S*o%|<zW/h*n*p=O=PS3U/i=SX5z4]5{:n:r!c&R!X$u%{&P&Q'O(d)i)m)o*k-m.`.h.i.l.m.u2h2o8q8r9x:b:d:l:m<{<}=V=X=`!`&R$u%{&P&Q'O(d)i)m)o*k-m.`.h.i.l.m.u2h2o8q8r9x:b:d:l:m<{<}=V=X=`R&S!XdhOade|}%s&s*W+u#n${fmtu!s$W$f$g$l$y$z%l&{&|'P'T)T)Y)[)i*Z+S+^+l,R,c,i,k.].h.i.l.m/t2o8^8_8`8e8f8g8h9q9r9s9t:_:`:d:m;Z;[;]<Z<[<]<^<_<l<m<r'^%Si!T!U!e!h!m!p!}#P#[#^#a#e#f#g#h#i#j#k#l#m#n#p#w#y#{$n%P%U%V%W%X%d%q&O&]&^&b&c&n&v&}'j'l'r(h(n)e)g)q)x*O*V*X*f*h*q*s*u+U+X+_+k+n-U-X-_-e-l-n-s-u.c.g.k.o.z/Y/k/m/x/z/|0P0W0]0`1P1S1f1r2s3R3X3Z3_3b3c3e3l3n4V4^4a5]5_5h5r5v5}6P6`6c6j6m6t6u6{7d7e7f7g7h7i7j7k7l7m7n7x7|8j9w:Y:Z:^:g:y:z;O;c;h;l<x<|Q&Z!bR+P&[l#tT$a$x%g8X8Y8Z8[8a8b8c8d8k8li(k#x)V7y7z7{9j9k9l9m9n9o9p#njfmtu!s$W$f$g$l$y$z%l&{&|'P'T)T)Y)[)i*Z+S+^+l,R,c,i,k.].h.i.l.m/t2o8^8_8`8e8f8g8h9q9r9s9t:_:`:d:m;Z;[;]<Z<[<]<^<_<l<m<rdlOade|}%s&s*W+u'_!Yi!T!U!e!h!m!p!}#P#[#^#a#e#f#g#h#i#j#k#l#m#n#p#w#y#{$n%P%U%V%W%X%d%q&O&]&^&b&c&n&v&}'j'l'r(h(n)e)g)q)x*O*V*X*f*h*q*s*u+U+X+_+k+n-U-X-_-e-l-n-s-u.c.g.k.o.z/Y/k/m/x/z/|0P0W0]0`1P1S1f1r2s3R3X3Z3_3b3c3e3l3n4V4^4a5]5_5h5r5v5}6P6`6c6j6m6t6u6{7d7e7f7g7h7i7j7k7l7m7n7x7|8j9w:Y:Z:^:g:y:z;O;c;h;l<x<|Q.q)iR2r.mR.q)iQ1R,bS4U0u0zU5q4S4W4`S6i5o5uR6z6l^#zV!R$c$i$q;_;`Q&f!hS(b#p*VS(r#y*WY*Y%a)R/]/}0^Q-V'oS-i(e-WW.x)q1r9w:gQ/S*PS/[*X3ZQ1R,bQ1}-eS2P-j-kS2U-n3RQ2Z-uQ3[/uU4U0u0z1SQ4|2QQ5b3cY5q4S4V4W4`4aW6i5o5r5u5vU6z6j6l6mR7R6{S(r#y*WT2U-n3RZ(p#y(q*W-n3R^zO|}%s&s*W+uQ,X&|T,g'T,iS&|!s,WR0m,OS+y&z0fR3|0mT+y&z0f^zO|}%s&s*W+uQ*{&VQ+U&]S+_&c0`W+m&n+k+n0]Q,X&|R1Y,l[%bm$W+S+^+l/tR/^*Z^zO|}%s&s*W+uQ*{&VQ,X&|R1Y,l!OqO|}!e%d%s&^&b&n&s*W+X+k+n+u/x0]3_3e5_6`6c6uS%^k,aS%ow,SQ&T!XQ&o!oU*S%_%i1TQ*]%aS*d%m%nQ*x&SQ+Y&`S.X)R,[S/`*a*bQ/b*cQ2d.ZQ3S/aQ3r0bQ4b0zQ5s4SR6n5u_zO|}%s&s*W+uQ&t!qQ*{&VR+v&uwrO|}!e%d%s&^&b&s*W+X+u/x3_3e5_6`6c6u!PqO|}!e%d%s&^&b&n&s*W+X+k+n+u/x0]3_3e5_6`6c6u!OnO|}!e%d%s&^&b&n&s*W+X+k+n+u/x0]3_3e5_6`6c6uR&j!k!OqO|}!e%d%s&^&b&n&s*W+X+k+n+u/x0]3_3e5_6`6c6uR+U&]!OpO|}!e%d%s&^&b&n&s*W+X+k+n+u/x0]3_3e5_6`6c6u[$td%U'l/z;c<|Q&f!hS'}#^3RQ+T&]S+`&c0`Q/w+UQ3f0PQ5`3bR6a5]Q&^!cQ&`!dQ&b!fR+X&_R+V&]&f!SOadei|}!T!U!e!h!p!}#P#^#a#e#f#g#h#i#j#k#l#m#p#w#y#{$n%P%U%V%W%X%d%q%s&O&]&^&b&c&n&s&v&}'j'l'r(h(n)e)g)q)x*O*V*W*X*f*h*q*s*u+U+X+_+k+n+u-U-_-e-n-s-u.c.g.k.o.z/Y/k/m/x/z/|0P0W0]0`1P1S1f2s3R3X3Z3_3b3c3e3l3n4V4^4a5]5_5h5r5v5}6P6`6c6j6m6t6u6{;c;h;l<|Q/{+Z{:x!m#[7d7e7f7g7h7i7j7k7l7m7x7|8j9w:Z:y:z;O<x^zO|}%s&s*W+uW+m&n+k+n0]T,g'T,ig+i&l+c+e+h0R0S0U0X3i3j5eT+p&o+q^zO|}%s&s*W+uT,g'T,i'r!YOadei|}!T!U!e!h!m!p!}#P#[#^#a#e#f#g#h#i#j#k#l#m#n#p#w#y#{$n%P%U%V%W%X%d%q%s&O&]&^&b&c&n&s&v&}'j'l'r(h(n)e)g)q)x*O*V*W*X*f*h*q*s*u+U+X+_+k+n+u-U-X-_-e-l-n-s-u.c.g.k.o.z/Y/k/m/x/z/|0P0W0]0`1P1S1f1r2s3R3X3Z3_3b3c3e3l3n4V4^4a5]5_5h5r5v5}6P6`6c6j6m6t6u6{7d7e7f7g7h7i7j7k7l7m7n7x7|8j9w:Y:Z:^:g:y:z;O;c;h;l<x<|R3u0e^uO|}%s&s*W+uQ%ltQ,R&|T,c'T,iS%_k,aS*a%i1TR/a*bQ*Q%]R3P/TS%^k,aS%ow,SU*S%_%i1TS*d%m%nS/`*a*bQ/b*cQ3S/aQ4b0zQ5s4SR6n5ubwO|}%s&s'T*W+u,iS%mt,RU%nu,c,kQ*c%lR,S&|R,X&|$n!QO[_d|}!l!s!u!v!{#O#u#v$Y$o$r%P%U%s&P&V&]&c&k&n&s&z&|'T'l'p(f(l)_)h*V*W*z*}+R+k+n+u+|,`,i,k,l.a.d.l.r.z0]0`0f0j0v3x5S7_7`7a7b7c7w9Y9g9u:c:u:v;c<W<X<Y<n<o<p<t<u<v<|R1k,yY'b!y7Z7[7]<S[,z'a'c9Q9R9S<hS1l,{,|R4s1mQ,w'`R4q1gR)v%PR2{.zS-a(P;jT1{-b:]&f!SOadei|}!T!U!e!h!p!}#P#^#a#e#f#g#h#i#j#k#l#m#p#w#y#{$n%P%U%V%W%X%d%q%s&O&]&^&b&c&n&s&v&}'j'l'r(h(n)e)g)q)x*O*V*W*X*f*h*q*s*u+U+X+_+k+n+u-U-_-e-n-s-u.c.g.k.o.z/Y/k/m/x/z/|0P0W0]0`1P1S1f2s3R3X3Z3_3b3c3e3l3n4V4^4a5]5_5h5r5v5}6P6`6c6j6m6t6u6{;c;h;l<|{:x!m#[7d7e7f7g7h7i7j7k7l7m7x7|8j9w:Z:y:z;O<x$U#fS$p%Q&d&p'k'q'|(U(V(X(Y(Z([(](^(_(`(a(g(m(t)d)t*g*r+Q+]+w,Y-R-p.f.w.}/X/Z/c/j/v0O1t1u1z1|2R2T2X2Y2i2t2y3W3a3d3k4e4f4p5V5X5Z5^5a5g5t5|6_6k6s6y7Qy7f&m'{9X9Z9]9_9`9a9b9c9d9e9f9h9i:e:h:i:j;i#r#gS$p%Q&d&p'q'|(U(`(a(g(m(t)d)t*g*r+Q+]+w,Y-R-p.f.w.}/X/Z/c/j/v0O1t1u1z1|2R2T2X2Y2i2t2y3W3a3d3k4e4f4p5V5X5Z5^5a5g5t5|6_6k6s6y7Qg7g&m'{9Z9f9h9i:e:h:i:j;i#x#jS$p%Q&d&p'q'|(U(X(Y(Z(`(a(g(m(t)d)t*g*r+Q+]+w,Y-R-p.f.w.}/X/Z/c/j/v0O1t1u1z1|2R2T2X2Y2i2t2y3W3a3d3k4e4f4p5V5X5Z5^5a5g5t5|6_6k6s6y7Qm7j&m'{9Z9_9`9a9f9h9i:e:h:i:j;i'c!YOadei|}!T!U!e!h!m!p!}#P#[#^#a#e#f#g#h#i#j#k#l#m#p#w#y#{$n%P%U%V%W%X%d%q%s&O&]&^&b&c&n&s&v&}'j'l'r(h(n)e)g)q)x*O*V*W*X*f*h*q*s*u+U+X+_+k+n+u-U-_-e-n-s-u.c.g.k.o.z/Y/k/m/x/z/|0P0W0]0`1P1S1f2s3R3X3Z3_3b3c3e3l3n4V4^4a5]5_5h5r5v5}6P6`6c6j6m6t6u6{7d7e7f7g7h7i7j7k7l7m7x7|8j9w:Z:y:z;O;c;h;l<x<|Q-W'oQ-j(eQ2Q-kR6X4w'c!XOadei|}!T!U!e!h!m!p!}#P#[#^#a#e#f#g#h#i#j#k#l#m#p#w#y#{$n%P%U%V%W%X%d%q%s&O&]&^&b&c&n&s&v&}'j'l'r(h(n)e)g)q)x*O*V*W*X*f*h*q*s*u+U+X+_+k+n+u-U-_-e-n-s-u.c.g.k.o.z/Y/k/m/x/z/|0P0W0]0`1P1S1f2s3R3X3Z3_3b3c3e3l3n4V4^4a5]5_5h5r5v5}6P6`6c6j6m6t6u6{7d7e7f7g7h7i7j7k7l7m7x7|8j9w:Z:y:z;O;c;h;l<x<|Q#YQR'y#YU$fa$y:dd$rd%P%U'l*}.d.z5S;c<|Q&k!l!^)W$f$r&k)Y)e)o*s.].u/k0R3i3l4X5e5x5}6p8^9q9r:_:`;Z;s;w;y<Z<l<rS)Y$g$lQ)e$nQ)o$uS*s&O.kQ.])[Q.u)mQ/k*qQ0R+eS3i0S0UQ3l0WQ4X0xQ5e3jS5x4Y4[Q5}4^Q6p5yQ8^8eS9q8_8`S9r;[;]Q:_9sQ:`9tS;Z.i8fQ;s=TS;w;t;vQ;y;xQ<Z<^S<l<[<]R<r<mQ0r,]U4P0r4Q5nS4Q0s0tR5n4RQ,i'TR1U,i`[O|}%s&s&|*W+uY$U[)h*z+R,`^)h$o&P&z*V.l.r0fS*z&V,l^+R&]&c&n+k+n0]0`T,`'T,iQ(w#}R-x(wQ.R(xQ2]-|Q2^-}Q2_.OY2`.R2]2^2_5OR5O2bQ(z$OS.U(z.VR.V({!`_O[|}!s!v$Y$o%s&P&V&]&c&n&s&z&|)h*V*W*z+R+k+n+u,l.l.r0]0`0fY$Z_$])U:u:vU$]`$V&xQ)U$[U:u!u#u(lZ:v'T,`,i,k0vU$ga$y:dl)Z$g)[0S3j4Y5y8_9s9t;[;t;x<[<mQ)[$lQ0S+eQ3j0UQ4Y0xQ5y4[Q8_8eQ9s8`Q9t;]S;[.i8fQ;t=TQ;x;vQ<[<^R<m<]Q)^$mU.^)^;n=]Q;n;^R=]=[Q)a$mQ._)^[.b)a._9v:a<q<sQ9v;^Q:a;nQ<q=[R<s=]Q5T2kR6^5TU*k%{.i:dU/e*k9x<}Q9x8qR<}=`Q*n%|W/g*n/i=O=SQ/i*pQ=O<zR=S=PU){%R)s8iR/Q){Q.s)jR2w.sQ5{4]S6q5{:rR:r:nQ4`0zQ5o4SU6R4`5o6lR6l5uW(q#y*W-n3RR-t(qU-o(m(r/XR2V-oQ0g+zR3w0g[*[%a%b)R/u/}0^R/_*[Q|OU%r|%s+uS%s}*WR+u&sQ+n&nQ0]+kT0_+n0]Q0Y+gR3p0YQ+q&oR0a+qS%fs3tR*`%fdtO|}%s&s&|'T*W+u,iR%ktQ/U*QR3Q/U$p!PO[_d|}!l!s!u!v!{#O#u#v$Y$o$r%P%U%s&P&V&]&c&k&n&s&z&|'T'l'p(f(l)_)h*V*W*z*}+R+k+n+u+|,`,i,k,l,y.a.d.l.r.z0]0`0f0j0v3x5S7_7`7a7b7c7w9Y9g9u:c:u:v;c<W<X<Y<n<o<p<t<u<v<|R%u!PQ1h,wR4r1hQ.{)vR2|.{S)y%Q-pR/O)yS-f(a(bR2O-fQ4y1wR6Z4yT(c#p*V|SO|}!e%d%s&^&b&n&s+X+k+n+u/x0]3_3e5_6`6c6uj$`ae%V%W)g*u.g/m3X3n5h6P6t[$pd%U'l/z;c<|^%Qi%X'r(h*O;h;lS%x!T:yQ%z!UQ&d!hQ&m!mQ&p!pQ'k!}S'q#P*hQ'{#[Q'|#^Q(U#aQ(V#eQ(W#fQ(X#gQ(Y#hQ(Z#iQ([#jQ(]#kQ(^#lQ(_#mQ(`#nS(a#p*VQ(g#wQ(m#yQ(t#{Q)d$nQ)t%PQ*g%qS*r&O.kQ+Q&]S+]&c0`Q+w&vQ,Y&}Q-R'jS-p(n/YQ.f)eS.w)q1rQ.})xQ/X*WQ/Z*XQ/c*fS/j*q*sQ/v+UQ0O+_Q1t-UQ1u-XQ1z-_Q1|-eQ2R-lQ2T-nQ2X-sQ2Y-uQ2i.cQ2t.oQ2y.zQ3W/kQ3a/|Q3d0PQ3k0WQ4e1PQ4f1SQ4p1fQ5V2sQ5X3RQ5Z3ZQ5^3bQ5a3cQ5g3lS5t4V4aQ5|4^Q6_5]S6k5r5vQ6s5}S6y6j6mQ7Q6{Q8W8jQ8p:zQ9X;OQ9Z7dQ9]7eQ9^7fQ9_7gQ9`7hQ9a7iQ9b7jQ9c7kQ9d7lQ9e7mQ9f7nQ9h7xQ9i7|S:e9w:gQ:h:YQ:i:ZQ:j:^R;i<xR)w%Pd]O|}%s&s&|'T*W+u,i!n^[_`!s!u!v#u$V$Y$[$]$o&P&V&]&c&n&x&z(l)U)h*V*z+R+k+n,`,k,l.l.r0]0`0f0v:u:v$b$ead!l$f$g$l$n$r$u$y%P%U&O&k'l)Y)[)e)m)o*q*s*}+e.].d.k.u.z/k0R0S0U0W0x3i3j3l4X4Y4[4^5S5e5x5y5}6p8^8_8`8e8f9q9r9s9t:_:`;Z;[;];c;s;t;v;w;x;y<Z<[<]<^<l<m<r<|=TQ%jth)`$m)^)a._9v:a;^;n<q<s=[=][*j%{*k8q9x<}=``*m%|*n*p/i<z=O=P=SQ.a)_S2q.i:dW5z4]5{:n:rQ:c9uQ<t<nQ<u<oR<v<p``O|}%s&s&|*W+uQ$V[U$[_:u:vd$ud%P%U'l*}.d.z5S;c<|Q&l!l!^&x!s!u!v#u$Y$o&P&V&]&c&n&z'T(l)h*V*z+R+k+n,`,i,k,l.l.r0]0`0f0vb'i!{+|7_7`7a7b<W<X<YS'o#O7cW(e#v'p7w9YQ)m$rQ+c&kS-k(f9gU.`)_<n<pU2h.a<t<vQ3y0jQ5j3xQ:b9uQ:l:cQ=V<oR=X<uS'U!w7VQ'V7WS'Z!x7XQ'[7YS'a!y7ZS'b7[7]U'd!z+}7^Q,]'SQ,n8xS,q'Y8wQ,r9OS,u'_8}S,z9R9SS,|'c9QS-Q'h9WQ0t,_Q1Z,lQ3}0qQ4i1[Q4j1]Q4k1^Q5m4OQ8s;{Q8t;zQ8u;}S8v:{;|Q8y<PQ8z<OQ8{<RS8|:|<QQ9P<SS9T:}<UQ9U<TQ9V<VQ9|<aQ9}<`Q:O<cS:P;e<bQ:Q<eQ:R<dQ:S<gS:T;f<fQ:U<hS:V;g<jQ:W<iR:X<kR,^'ST,h'T,iR$PYe.Q(x-|-}.O.R2]2^2_2b5OdmO|}%s&V&s&|*W+u,lS$W[*zQ&{!sQ'O!uQ'P!vQ(d#uQ)T$Y^)i$o&P&z*V.l.r0fQ+S&]Q+^&cY+l&n+k+n0]0`S,b'T,iQ-m(lQ.h)hQ/t+RS0u,`,kR4W0vd]O|}%s&s&|'T*W+u,i!n^[_`!s!u!v#u$V$Y$[$]$o&P&V&]&c&n&x&z(l)U)h*V*z+R+k+n,`,k,l.l.r0]0`0f0v:u:vR%jtQ0z,bQ4S0uQ4Z0xQ4c0{Q4d0|Q5u4WU5w4X4Y4[Q6Q4_S6o5x5yQ6|6pQ:o;qU:q;s;t;vS:s;w;xQ:t;yR;u=TX)k$o&P*V.lpcOtu|}%l%s&s&|'T*W+u,R,c,i,kY$ha$y.i8f:dU$sd$z.l[$wef.m2o8h:mQ%amQ&y!sQ)R$W[)X$f$g$l;Z;[;]Q,P&{Q,['PQ.Z)TW.[)Y)[9r9tQ.n)iQ/]*ZQ/u+SQ/}+^S0^+l/tS2e.]:`Q2p.hQ;b<_U;m<Z<[<]S;p<l<mQ;r<rQ<y<^Q=^8eQ=_8gU=a8^8_8`S=c9q9sR=d:_R2l.dQ%}!XQ)p$uU*l%{.i:dS*v&P.lW*w&Q.m2o:mQ,Z'OQ-h(dQ.j)iS.v)m)oQ/f*kQ2S-mQ2g.`Q2n.hQ2x.uQ5Q2hQ9y8qQ9z8rQ:f9xQ:k:bQ:p:lQ=Q<{Q=R<}Q=W=VQ=Y=XR=b=`X%Ti$|.k/YT(s#y*WR+{&zQ+z&zR3v0f^zO|}%s&s*W+uR,X&|W%cm+S+^+lT)S$W/t_{O|}%s&s*W+u^zO|}%s&s*W+uQ&a!eQ*_%dQ+W&^Q+[&bQ/y+XQ3^/xQ5[3_Q5c3eQ6b5_Q6v6`Q6w6cR7O6uvrO|}!e%d%s&^&b&s*W+X+u/x3_3e5_6`6c6uX+m&n+k+n0]Q+j&lR0Q+cS+g&l+cQ0T+eQ0Z+hU3h0R0S0UQ3o0XS5d3i3jR6d5e^vO|}%s&s*W+uQ,T&|T,d'T,iR*R%]^xO|}%s&s*W+uQ,U&|T,e'T,i^yO|}%s&s*W+uT,f'T,iQ,z9PQ,{'aQ1l:UR1m,|R,x'`T'm!};O`%Zi%X'r(h(n/Y;h;lR/R*OR-]'uR1x-[",
      nodeNames: "⚠ RawString > MacroName LineComment BlockComment PreprocDirective #include String EscapeSequence SystemLibString Identifier ArgumentList ( ConditionalExpression AssignmentExpression CallExpression PrimitiveType FieldExpression FieldIdentifier DestructorName TemplateMethod ScopedFieldIdentifier NamespaceIdentifier TemplateType TypeIdentifier ScopedTypeIdentifier ScopedNamespaceIdentifier :: NamespaceIdentifier TypeIdentifier TemplateArgumentList < TypeDescriptor const volatile restrict _Atomic mutable constexpr StructSpecifier struct MsDeclspecModifier __declspec ) VirtualSpecifier BaseClassClause Access , FieldDeclarationList { FieldDeclaration Attribute AttributeName Identifier AttributeArgs } [ ] UpdateOp ArithOp ArithOp ArithOp LogicOp BitOp BitOp BitOp CompareOp CompareOp CompareOp > CompareOp BitOp UpdateOp Number CharLiteral AttributeArgs virtual extern static register inline AttributeSpecifier __attribute__ PointerDeclarator MsBasedModifier __based MsPointerModifier FunctionDeclarator ParameterList ParameterDeclaration PointerDeclarator FunctionDeclarator Noexcept noexcept ThrowSpecifier throw TrailingReturnType AbstractPointerDeclarator AbstractFunctionDeclarator AbstractArrayDeclarator AbstractParenthesizedDeclarator AbstractReferenceDeclarator ArrayDeclarator ParenthesizedDeclarator ReferenceDeclarator ScopedIdentifier Identifier OperatorName TemplateFunction StructuredBindingDeclarator OptionalParameterDeclaration VariadicParameterDeclaration VariadicDeclarator ReferenceDeclarator ArrayDeclarator ParenthesizedDeclarator ReferenceDeclarator BitfieldClause InitializerList InitializerPair SubscriptDesignator FieldDesignator TemplateDeclaration template TemplateParameterList TypeParameterDeclaration typename class OptionalTypeParameterDeclaration VariadicTypeParameterDeclaration TemplateTemplateParameterDeclaration AliasDeclaration using Declaration InitDeclarator FunctionDefinition MsCallModifier CompoundStatement LinkageSpecification DeclarationList CaseStatement case default LabeledStatement StatementIdentifier ExpressionStatement CommaExpression IfStatement if ConditionClause Declaration else SwitchStatement switch DoStatement do while ParenthesizedExpression WhileStatement ForStatement for ReturnStatement return BreakStatement break ContinueStatement continue GotoStatement goto TypeDefinition typedef PointerDeclarator FunctionDeclarator ArrayDeclarator ParenthesizedDeclarator ForRangeLoop TryStatement try CatchClause catch ThrowStatement NamespaceDefinition namespace UsingDeclaration StaticAssertDeclaration static_assert ConcatenatedString TemplateInstantiation FunctionDefinition ExplicitFunctionSpecifier explicit FieldInitializerList FieldInitializer DefaultMethodClause DeleteMethodClause delete FunctionDefinition OperatorCast operator operator Declaration FunctionDefinition FunctionDefinition FunctionDefinition FunctionDefinition Declaration FunctionDefinition Declaration FriendDeclaration friend union AccessSpecifier UnionSpecifier EnumSpecifier enum SizedTypeSpecifier TypeSize EnumeratorList Enumerator ClassSpecifier DependentType Decltype decltype auto ParameterPackExpansion ParameterPackExpansion FieldIdentifier PointerExpression SubscriptExpression BinaryExpression ArithOp LogicOp BitOp UnaryExpression LogicOp BitOp UpdateExpression CastExpression SizeofExpression sizeof CompoundLiteralExpression True False NULL NewExpression new new NewDeclarator DeleteExpression delete LambdaExpression LambdaCaptureSpecifier ParameterPackExpansion nullptr this #define PreprocArg #if #ifdef #ifndef #else #endif #elif PreprocDirectiveName Macro Program",
      maxTerm: 373,
      nodeProps: [
        [NodeProp.group, -30,1,8,11,14,15,16,18,74,75,106,109,158,187,228,229,230,234,237,238,239,241,242,243,244,245,249,251,253,254,255,"Expression",-12,17,24,25,26,40,213,214,216,220,221,222,224,"Type",-16,138,141,144,146,148,153,155,159,160,162,164,166,168,176,177,181,"Statement"]
      ],
      skippedNodes: [0,3,4,5,6,7,10,256,257,258,259,260,261,262,263,264,265,302],
      repeatNodeCount: 36,
      tokenData: "%Dt&iR!UOX$eXY'mYZ,iZ]$e]^)k^p$epq'mqr-Prs.ost/^tu$euv!/wvw!1gwx!3Yxy!3wyz!4lz{!5a{|!6[|}!8Q}!O!8u!O!P!:n!P!Q!Nh!Q!R#1{!R![#Ek![!]$.n!]!^$0^!^!_$1R!_!`$;p!`!a$<k!a!b$?X!b!c$e!c!n$?|!n!o$A_!o!w$?|!w!x$A_!x!}$?|!}#O$Cx#O#P$Ee#P#Q%$b#Q#R%%}#R#S$?|#S#T$e#T#c$?|#c#d%&x#d#i$?|#i#j%<Q#j#o$?|#o#p%=i#p#q%>^#q#r%@S#r#s%@w#s~$e!l$nW(]W'pQ&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e!j%_U(]W&k!bOY%WZw%Wwx%qx#O%W#O#P&S#P~%W!b%vS&k!bOY%qZ#O%q#O#P&S#P~%q!b&XV&k!bOY%qYZ%qZ]%q]^&n^#O%q#O#P&S#P~%q!b&sT&k!bOY%qYZ%qZ#O%q#O#P&S#P~%q!d'ZU'pQ&k!bOY'SZr'Srs%qs#O'S#O#P&S#P~'S&i'z^(]W'pQ'n$Z&k!b)T#SOX$eXY'mYZ(vZ]$e]^)k^p$epq'mqr$ers%Wsw$ewx'Sx#O$e#O#P*r#P~$e$Z({T'n$ZXY(vYZ(v]^(vpq(v#O#P)[$Z)_QYZ(v]^)e$Z)hPYZ(v%w)v^(]W'pQ'n$Z&k!bOX$eXY)kYZ(vZ]$e]^)k^p$epq)kqr$ers%Wsw$ewx'Sx#O$e#O#P*r#P~$e%m*wV&k!bOY%qYZ+^Z]%q]^,T^#O%q#O#P&S#P~%q%m+eY'n$Z&k!bOX%qXY+^YZ(vZ]%q]^+^^p%qpq+^q#O%q#O#P*r#P~%q%m,YT&k!bOY%qYZ+^Z#O%q#O#P&S#P~%q${,pT)Qp'n$ZXY(vYZ(v]^(vpq(v#O#P)[%s-[Y&TP(]W'pQ&k!bOY$eZr$ers%Wsw$ewx'Sx!_$e!_!`-z!`#O$e#O#P&S#P~$e%s.VW!e$V(]W'pQ&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e&e.zU(]W'qQ'o$w&k!bOY%WZw%Wwx%qx#O%W#O#P&S#P~%W%w/gd(]W'pQ&k!bOX$eXY/^Zp$epq/^qr$ers%Wsw$ewx'Sx!c$e!c!}0u!}#O$e#O#P&S#P#T$e#T#W0u#W#X2S#X#Y:f#Y#]0u#]#^Hl#^#o0u#o~$e%w1Q`(]W'pQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#o0u#o~$e%w2_b(]W'pQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#X0u#X#Y3g#Y#o0u#o~$e%w3rb(]W'pQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#Y0u#Y#Z4z#Z#o0u#o~$e%w5Vb(]W'pQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#]0u#]#^6_#^#o0u#o~$e%w6jb(]W'pQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#b0u#b#c7r#c#o0u#o~$e%w7}b(]W'pQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#X0u#X#Y9V#Y#o0u#o~$e%w9d`(]W'pQ&j$Z&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#o0u#o~$e%w:qd(]W'pQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#`0u#`#a<P#a#b0u#b#cCQ#c#o0u#o~$e%w<[d(]W'pQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#]0u#]#^=j#^#g0u#g#h@^#h#o0u#o~$e%w=ub(]W'pQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#Y0u#Y#Z>}#Z#o0u#o~$e%w?[`(]W'pQ&k!b&q$Z&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#o0u#o~$e%w@ib(]W'pQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#X0u#X#YAq#Y#o0u#o~$e%wBO`(]W'pQ&k!b&o$Z&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#o0u#o~$e%wC]b(]W'pQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#W0u#W#XDe#X#o0u#o~$e%wDpb(]W'pQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#]0u#]#^Ex#^#o0u#o~$e%wFTb(]W'pQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#Y0u#Y#ZG]#Z#o0u#o~$e%wGj`(]W'pQ&k!b&p$Z&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#o0u#o~$e%wHwd(]W'pQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#Y0u#Y#ZJV#Z#b0u#b#c!'e#c#o0u#o~$e%wJdd(]W'pQ&l$Z&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#W0u#W#XKr#X#b0u#b#c! y#c#o0u#o~$e%wK}b(]W'pQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#X0u#X#YMV#Y#o0u#o~$e%wMbb(]W'pQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#Y0u#Y#ZNj#Z#o0u#o~$e%wNw`(]W'pQ&m$Z&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#o0u#o~$e%w!!Ub(]W'pQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#W0u#W#X!#^#X#o0u#o~$e%w!#ib(]W'pQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#X0u#X#Y!$q#Y#o0u#o~$e%w!$|b(]W'pQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#Y0u#Y#Z!&U#Z#o0u#o~$e%w!&c`(]W'pQ&n$Z&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#o0u#o~$e%w!'pb(]W'pQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#V0u#V#W!(x#W#o0u#o~$e%w!)Tb(]W'pQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#`0u#`#a!*]#a#o0u#o~$e%w!*hb(]W'pQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#i0u#i#j!+p#j#o0u#o~$e%w!+{b(]W'pQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#W0u#W#X!-T#X#o0u#o~$e%w!-`b(]W'pQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#X0u#X#Y!.h#Y#o0u#o~$e%w!.u`(]W'pQV$Z&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#o0u#o~$e%s!0SY(]W'pQ!`$V&k!bOY$eZr$ers%Wsw$ewx'Sx!_$e!_!`!0r!`#O$e#O#P&S#P~$e%s!0}W!k$V(]W'pQ&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e%s!1rZ(Y$V(]W'pQ&k!bOY$eZr$ers%Wsv$evw!2ewx'Sx!_$e!_!`!0r!`#O$e#O#P&S#P~$e%s!2pW(X$V(]W'pQ&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e%o!3eU(^S'pQ([$V&k!bOY'SZr'Srs%qs#O'S#O#P&S#P~'S&i!4SW(]W'pQ]&_&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e!}!4wW|a(]W'pQ&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e%s!5lY(V$V(]W'pQ&k!bOY$eZr$ers%Wsw$ewx'Sx!_$e!_!`!0r!`#O$e#O#P&S#P~$e%s!6g[(]W'pQ!^$V&k!bOY$eZr$ers%Wsw$ewx'Sx{$e{|!7]|!_$e!_!`!0r!`#O$e#O#P&S#P~$e%s!7hW(]W!]$V'pQ&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e%w!8]W!Q$Z(]W'pQ&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e%s!9Q](]W'pQ!^$V&k!bOY$eZr$ers%Wsw$ewx'Sx}$e}!O!7]!O!_$e!_!`!0r!`!a!9y!a#O$e#O#P&S#P~$e%s!:UW'x$V(]W'pQ&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e%w!:y[(]W'pQ'w$V&k!bOY$eZr$ers%Wsw$ewx'Sx!O$e!O!P!;o!P!Q$e!Q![!=]![#O$e#O#P&S#P~$e%w!;xY(]W'pQ&k!bOY$eZr$ers%Wsw$ewx'Sx!O$e!O!P!<h!P#O$e#O#P&S#P~$e%w!<sW(Q$Z(]W'pQ&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e%s!=hl(]W'pQ!l$V&k!bOY$eZr$ers%Wsw$ewx!?`x!Q$e!Q![!=]![!g$e!g!h!HO!h!i!L}!i!n$e!n!o!L}!o!r$e!r!s!HO!s!w$e!w!x!L}!x#O$e#O#P&S#P#X$e#X#Y!HO#Y#Z!L}#Z#`$e#`#a!L}#a#d$e#d#e!HO#e#i$e#i#j!L}#j~$e%k!?gW'pQ&k!bOY'SZr'Srs%qs!Q'S!Q![!@P![#O'S#O#P&S#P~'S%k!@Yl'pQ!l$V&k!bOY'SZr'Srs%qsw'Swx!?`x!Q'S!Q![!@P![!g'S!g!h!BQ!h!i!Fm!i!n'S!n!o!Fm!o!r'S!r!s!BQ!s!w'S!w!x!Fm!x#O'S#O#P&S#P#X'S#X#Y!BQ#Y#Z!Fm#Z#`'S#`#a!Fm#a#d'S#d#e!BQ#e#i'S#i#j!Fm#j~'S%k!BZj'pQ!l$V&k!bOY'SZr'Srs%qs{'S{|!C{|!Q'S!Q![!Dx![!c'S!c!h!Dx!h!i!Dx!i!n'S!n!o!Fm!o!w'S!w!x!Fm!x#O'S#O#P&S#P#T'S#T#Y!Dx#Y#Z!Dx#Z#`'S#`#a!Fm#a#i'S#i#j!Fm#j?Ar'S?Ar?As!C{?As~'S%k!DS['pQ&k!bOY'SZr'Srs%qs!Q'S!Q![!Dx![!c'S!c!i!Dx!i#O'S#O#P&S#P#T'S#T#Z!Dx#Z~'S%k!ERh'pQ!l$V&k!bOY'SZr'Srs%qsw'Swx!C{x!Q'S!Q![!Dx![!c'S!c!h!Dx!h!i!Dx!i!n'S!n!o!Fm!o!w'S!w!x!Fm!x#O'S#O#P&S#P#T'S#T#Y!Dx#Y#Z!Dx#Z#`'S#`#a!Fm#a#i'S#i#j!Fm#j~'S%k!Fvb'pQ!l$V&k!bOY'SZr'Srs%qs!h'S!h!i!Fm!i!n'S!n!o!Fm!o!w'S!w!x!Fm!x#O'S#O#P&S#P#Y'S#Y#Z!Fm#Z#`'S#`#a!Fm#a#i'S#i#j!Fm#j~'S%s!HZl(]W'pQ!l$V&k!bOY$eZr$ers%Wsw$ewx'Sx{$e{|!JR|!Q$e!Q![!KW![!c$e!c!h!KW!h!i!KW!i!n$e!n!o!L}!o!w$e!w!x!L}!x#O$e#O#P&S#P#T$e#T#Y!KW#Y#Z!KW#Z#`$e#`#a!L}#a#i$e#i#j!L}#j?Ar$e?Ar?As!JR?As~$e%s!J[^(]W'pQ&k!bOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![!KW![!c$e!c!i!KW!i#O$e#O#P&S#P#T$e#T#Z!KW#Z~$e%s!Kch(]W'pQ!l$V&k!bOY$eZr$ers%Wsw$ewx!C{x!Q$e!Q![!KW![!c$e!c!h!KW!h!i!KW!i!n$e!n!o!L}!o!w$e!w!x!L}!x#O$e#O#P&S#P#T$e#T#Y!KW#Y#Z!KW#Z#`$e#`#a!L}#a#i$e#i#j!L}#j~$e%s!MYd(]W'pQ!l$V&k!bOY$eZr$ers%Wsw$ewx'Sx!h$e!h!i!L}!i!n$e!n!o!L}!o!w$e!w!x!L}!x#O$e#O#P&S#P#Y$e#Y#Z!L}#Z#`$e#`#a!L}#a#i$e#i#j!L}#j~$e%w!Ns^(]W'pQ!`$V&k!bOY$eZr$ers%Wsw$ewx'Sxz$ez{# o{!P$e!P!Q#,f!Q!_$e!_!`!0r!`#O$e#O#P&S#P~$e%w# xZ(]W'pQ&k!bOY# oYZ#!kZr# ors##`sw# owx#(fxz# oz{#*o{#O# o#O#P#%s#P~# o$Z#!nROz#!kz{#!w{~#!k$Z#!zTOz#!kz{#!w{!P#!k!P!Q##Z!Q~#!k$Z##`OT$Z%u##gX(]W&k!bOY##`YZ#!kZw##`wx#$Sxz##`z{#'P{#O##`#O#P#%s#P~##`%m#$XV&k!bOY#$SYZ#!kZz#$Sz{#$n{#O#$S#O#P#%s#P~#$S%m#$sX&k!bOY#$SYZ#!kZz#$Sz{#$n{!P#$S!P!Q#%`!Q#O#$S#O#P#%s#P~#$S%m#%gST$Z&k!bOY%qZ#O%q#O#P&S#P~%q%m#%xX&k!bOY#$SYZ#$SZ]#$S]^#&e^z#$Sz{#$n{#O#$S#O#P#%s#P~#$S%m#&jV&k!bOY#$SYZ#$SZz#$Sz{#$n{#O#$S#O#P#%s#P~#$S%u#'WZ(]W&k!bOY##`YZ#!kZw##`wx#$Sxz##`z{#'P{!P##`!P!Q#'y!Q#O##`#O#P#%s#P~##`%u#(SU(]WT$Z&k!bOY%WZw%Wwx%qx#O%W#O#P&S#P~%W%o#(mX'pQ&k!bOY#(fYZ#!kZr#(frs#$Ssz#(fz{#)Y{#O#(f#O#P#%s#P~#(f%o#)aZ'pQ&k!bOY#(fYZ#!kZr#(frs#$Ssz#(fz{#)Y{!P#(f!P!Q#*S!Q#O#(f#O#P#%s#P~#(f%o#*]U'pQT$Z&k!bOY'SZr'Srs%qs#O'S#O#P&S#P~'S%w#*x](]W'pQ&k!bOY# oYZ#!kZr# ors##`sw# owx#(fxz# oz{#*o{!P# o!P!Q#+q!Q#O# o#O#P#%s#P~# o%w#+|W(]W'pQT$Z&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e%w#,qW(]W'pQS$Z&k!bOY#,fZr#,frs#-Zsw#,fwx#1`x#O#,f#O#P#.Z#P~#,f%u#-dU(]WS$Z&k!bOY#-ZZw#-Zwx#-vx#O#-Z#O#P#.Z#P~#-Z%m#-}SS$Z&k!bOY#-vZ#O#-v#O#P#.Z#P~#-v%m#.bVS$Z&k!bOY#-vYZ%qZ]#-v]^#.w^#O#-v#O#P#/_#P~#-v%m#/OTS$Z&k!bOY#-vYZ%qZ#O#-v#O#P#.Z#P~#-v%m#/fZS$Z&k!bOY#-vYZ%qZ]#-v]^#.w^#O#-v#O#P#/_#P#b#-v#b#c#-v#c#f#-v#f#g#0X#g~#-v%m#0`SS$Z&k!bOY#-vZ#O#-v#O#P#0l#P~#-v%m#0sXS$Z&k!bOY#-vYZ%qZ]#-v]^#.w^#O#-v#O#P#/_#P#b#-v#b#c#-v#c~#-v%o#1iU'pQS$Z&k!bOY#1`Zr#1`rs#-vs#O#1`#O#P#.Z#P~#1`%s#2Wr(]W'pQ!l$V&k!bOY$eZr$ers%Wsw$ewx#4bx!O$e!O!P#>r!P!Q$e!Q![#Ek![!g$e!g!h!HO!h!i!L}!i!n$e!n!o!L}!o!r$e!r!s!HO!s!w$e!w!x!L}!x#O$e#O#P&S#P#U$e#U#V#Gt#V#X$e#X#Y!HO#Y#Z!L}#Z#`$e#`#a!L}#a#d$e#d#e!HO#e#i$e#i#j!L}#j#l$e#l#m$*s#m~$e%k#4iW'pQ&k!bOY'SZr'Srs%qs!Q'S!Q![#5R![#O'S#O#P&S#P~'S%k#5[n'pQ!l$V&k!bOY'SZr'Srs%qsw'Swx#4bx!O'S!O!P#7Y!P!Q'S!Q![#5R![!g'S!g!h!BQ!h!i!Fm!i!n'S!n!o!Fm!o!r'S!r!s!BQ!s!w'S!w!x!Fm!x#O'S#O#P&S#P#X'S#X#Y!BQ#Y#Z!Fm#Z#`'S#`#a!Fm#a#d'S#d#e!BQ#e#i'S#i#j!Fm#j~'S%k#7cl'pQ!l$V&k!bOY'SZr'Srs%qs!Q'S!Q![#9Z![!c'S!c!g#9Z!g!h#<_!h!i#9Z!i!n'S!n!o!Fm!o!r'S!r!s!BQ!s!w'S!w!x!Fm!x#O'S#O#P&S#P#T'S#T#X#9Z#X#Y#<_#Y#Z#9Z#Z#`'S#`#a!Fm#a#d'S#d#e!BQ#e#i'S#i#j!Fm#j~'S%k#9dn'pQ!l$V&k!bOY'SZr'Srs%qsw'Swx#;bx!Q'S!Q![#9Z![!c'S!c!g#9Z!g!h#<_!h!i#9Z!i!n'S!n!o!Fm!o!r'S!r!s!BQ!s!w'S!w!x!Fm!x#O'S#O#P&S#P#T'S#T#X#9Z#X#Y#<_#Y#Z#9Z#Z#`'S#`#a!Fm#a#d'S#d#e!BQ#e#i'S#i#j!Fm#j~'S%k#;i['pQ&k!bOY'SZr'Srs%qs!Q'S!Q![#9Z![!c'S!c!i#9Z!i#O'S#O#P&S#P#T'S#T#Z#9Z#Z~'S%k#<hr'pQ!l$V&k!bOY'SZr'Srs%qsw'Swx#;bx{'S{|!C{|!Q'S!Q![#9Z![!c'S!c!g#9Z!g!h#<_!h!i#9Z!i!n'S!n!o!Fm!o!r'S!r!s!BQ!s!w'S!w!x!Fm!x#O'S#O#P&S#P#T'S#T#X#9Z#X#Y#<_#Y#Z#9Z#Z#`'S#`#a!Fm#a#d'S#d#e!BQ#e#i'S#i#j!Fm#j?Ar'S?Ar?As!C{?As~'S%s#>}n(]W'pQ!l$V&k!bOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![#@{![!c$e!c!g#@{!g!h#CU!h!i#@{!i!n$e!n!o!L}!o!r$e!r!s!HO!s!w$e!w!x!L}!x#O$e#O#P&S#P#T$e#T#X#@{#X#Y#CU#Y#Z#@{#Z#`$e#`#a!L}#a#d$e#d#e!HO#e#i$e#i#j!L}#j~$e%s#AWn(]W'pQ!l$V&k!bOY$eZr$ers%Wsw$ewx#;bx!Q$e!Q![#@{![!c$e!c!g#@{!g!h#CU!h!i#@{!i!n$e!n!o!L}!o!r$e!r!s!HO!s!w$e!w!x!L}!x#O$e#O#P&S#P#T$e#T#X#@{#X#Y#CU#Y#Z#@{#Z#`$e#`#a!L}#a#d$e#d#e!HO#e#i$e#i#j!L}#j~$e%s#Car(]W'pQ!l$V&k!bOY$eZr$ers%Wsw$ewx#;bx{$e{|!JR|!Q$e!Q![#@{![!c$e!c!g#@{!g!h#CU!h!i#@{!i!n$e!n!o!L}!o!r$e!r!s!HO!s!w$e!w!x!L}!x#O$e#O#P&S#P#T$e#T#X#@{#X#Y#CU#Y#Z#@{#Z#`$e#`#a!L}#a#d$e#d#e!HO#e#i$e#i#j!L}#j?Ar$e?Ar?As!JR?As~$e%s#Evn(]W'pQ!l$V&k!bOY$eZr$ers%Wsw$ewx#4bx!O$e!O!P#>r!P!Q$e!Q![#Ek![!g$e!g!h!HO!h!i!L}!i!n$e!n!o!L}!o!r$e!r!s!HO!s!w$e!w!x!L}!x#O$e#O#P&S#P#X$e#X#Y!HO#Y#Z!L}#Z#`$e#`#a!L}#a#d$e#d#e!HO#e#i$e#i#j!L}#j~$e%s#G}](]W'pQ&k!bOY$eZr$ers%Wsw$ewx'Sx!O$e!O!P#Hv!P!Q$e!Q!R#Io!R![#Ek![#O$e#O#P&S#P~$e%s#IPY(]W'pQ&k!bOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![!=]![#O$e#O#P&S#P~$e%s#Izr(]W'pQ!l$V&k!bOY$eZr$ers%Wsw$ewx#4bx!O$e!O!P#>r!P!Q$e!Q![#Ek![!g$e!g!h!HO!h!i!L}!i!n$e!n!o!L}!o!r$e!r!s!HO!s!w$e!w!x!L}!x#O$e#O#P&S#P#U$e#U#V#LU#V#X$e#X#Y!HO#Y#Z!L}#Z#`$e#`#a!L}#a#d$e#d#e!HO#e#i$e#i#j!L}#j#l$e#l#m#L}#m~$e%s#L_Y(]W'pQ&k!bOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![#Ek![#O$e#O#P&S#P~$e%s#MW^(]W'pQ&k!bOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![#NS![!c$e!c!i#NS!i#O$e#O#P&S#P#T$e#T#Z#NS#Z~$e%s#N_p(]W'pQ!l$V&k!bOY$eZr$ers%Wsw$ewx$!cx!O$e!O!P#>r!P!Q$e!Q![#NS![!c$e!c!g#NS!g!h$(W!h!i#NS!i!n$e!n!o!L}!o!r$e!r!s!HO!s!w$e!w!x!L}!x#O$e#O#P&S#P#T$e#T#X#NS#X#Y$(W#Y#Z#NS#Z#`$e#`#a!L}#a#d$e#d#e!HO#e#i$e#i#j!L}#j~$e%k$!j['pQ&k!bOY'SZr'Srs%qs!Q'S!Q![$#`![!c'S!c!i$#`!i#O'S#O#P&S#P#T'S#T#Z$#`#Z~'S%k$#ip'pQ!l$V&k!bOY'SZr'Srs%qsw'Swx$!cx!O'S!O!P#7Y!P!Q'S!Q![$#`![!c'S!c!g$#`!g!h$%m!h!i$#`!i!n'S!n!o!Fm!o!r'S!r!s!BQ!s!w'S!w!x!Fm!x#O'S#O#P&S#P#T'S#T#X$#`#X#Y$%m#Y#Z$#`#Z#`'S#`#a!Fm#a#d'S#d#e!BQ#e#i'S#i#j!Fm#j~'S%k$%vt'pQ!l$V&k!bOY'SZr'Srs%qsw'Swx$!cx{'S{|!C{|!O'S!O!P#7Y!P!Q'S!Q![$#`![!c'S!c!g$#`!g!h$%m!h!i$#`!i!n'S!n!o!Fm!o!r'S!r!s!BQ!s!w'S!w!x!Fm!x#O'S#O#P&S#P#T'S#T#X$#`#X#Y$%m#Y#Z$#`#Z#`'S#`#a!Fm#a#d'S#d#e!BQ#e#i'S#i#j!Fm#j?Ar'S?Ar?As!C{?As~'S%s$(ct(]W'pQ!l$V&k!bOY$eZr$ers%Wsw$ewx$!cx{$e{|!JR|!O$e!O!P#>r!P!Q$e!Q![#NS![!c$e!c!g#NS!g!h$(W!h!i#NS!i!n$e!n!o!L}!o!r$e!r!s!HO!s!w$e!w!x!L}!x#O$e#O#P&S#P#T$e#T#X#NS#X#Y$(W#Y#Z#NS#Z#`$e#`#a!L}#a#d$e#d#e!HO#e#i$e#i#j!L}#j?Ar$e?Ar?As!JR?As~$e%s$*|a(]W'pQ&k!bOY$eZr$ers%Wsw$ewx'Sx!O$e!O!P#Hv!P!Q$e!Q!R$,R!R![#NS![!c$e!c!i#NS!i#O$e#O#P&S#P#T$e#T#Z#NS#Z~$e%s$,^t(]W'pQ!l$V&k!bOY$eZr$ers%Wsw$ewx$!cx!O$e!O!P#>r!P!Q$e!Q![#NS![!c$e!c!g#NS!g!h$(W!h!i#NS!i!n$e!n!o!L}!o!r$e!r!s!HO!s!w$e!w!x!L}!x#O$e#O#P&S#P#T$e#T#U#NS#U#V#NS#V#X#NS#X#Y$(W#Y#Z#NS#Z#`$e#`#a!L}#a#d$e#d#e!HO#e#i$e#i#j!L}#j#l$e#l#m#L}#m~$e%w$.yY'v$V(]W'pQ&k!bOY$eZr$ers%Wsw$ewx'Sx![$e![!]$/i!]#O$e#O#P&S#P~$e%w$/tWl$Z(]W'pQ&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e%s$0iW(Z$V(]W'pQ&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e&e$1^[p$V(]W'pQ&k!bOY$2SZr$2Srs$2{sw$2Swx$6{x!^$2S!^!_$8|!_!`$:u!`!a$8X!a#O$2S#O#P$4h#P~$2S#^$2]Y(]W'pQ&k!bOY$2SZr$2Srs$2{sw$2Swx$6{x!`$2S!`!a$8X!a#O$2S#O#P$4h#P~$2S#[$3SW(]W&k!bOY$2{Zw$2{wx$3lx!`$2{!`!a$6`!a#O$2{#O#P$4h#P~$2{#S$3qU&k!bOY$3lZ!`$3l!`!a$4T!a#O$3l#O#P$4h#P~$3l#S$4[SYp&k!bOY%qZ#O%q#O#P&S#P~%q#S$4mV&k!bOY$3lYZ$3lZ]$3l]^$5S^#O$3l#O#P$5n#P~$3l#S$5XV&k!bOY$3lYZ%qZ!`$3l!`!a$4T!a#O$3l#O#P$4h#P~$3l#S$5sX&k!bOY$3lYZ%qZ]$3l]^$5S^!`$3l!`!a$4T!a#O$3l#O#P$4h#P~$3l#[$6iUYp(]W&k!bOY%WZw%Wwx%qx#O%W#O#P&S#P~%W#U$7SW'pQ&k!bOY$6{Zr$6{rs$3ls!`$6{!`!a$7l!a#O$6{#O#P$4h#P~$6{#U$7uUYp'pQ&k!bOY'SZr'Srs%qs#O'S#O#P&S#P~'S#^$8dWYp(]W'pQ&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e&e$9XZ(]W'pQ&k!b!j$VOY$2SZr$2Srs$2{sw$2Swx$6{x!_$2S!_!`$9z!`!a$8X!a#O$2S#O#P$4h#P~$2S&e$:VY!k$V(]W'pQ&k!bOY$2SZr$2Srs$2{sw$2Swx$6{x!`$2S!`!a$8X!a#O$2S#O#P$4h#P~$2S&e$;QY!f$V(]W'pQ&k!bOY$2SZr$2Srs$2{sw$2Swx$6{x!`$2S!`!a$8X!a#O$2S#O#P$4h#P~$2S%s$;{Y(hP(]W'pQ&k!bOY$eZr$ers%Wsw$ewx'Sx!_$e!_!`-z!`#O$e#O#P&S#P~$e%s$<vZ(]W'pQ!h$V&k!bOY$eZr$ers%Wsw$ewx'Sx!_$e!_!`$=i!`!a$>^!a#O$e#O#P&S#P~$e%s$=tW!f$V(]W'pQ&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e%s$>iY(]W'pQ&k!b!j$VOY$eZr$ers%Wsw$ewx'Sx!_$e!_!`!0r!`#O$e#O#P&S#P~$e!m$?dW'uP(]W'pQ&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e&i$@]`(]W'pQ!W$U'rq'yS&k!bOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![$?|![!c$e!c!}$?|!}#O$e#O#P&S#P#R$e#R#S$?|#S#T$e#T#o$?|#o~$e&i$An`(]W'pQ!W$U'rq'yS&k!bOY$eZr$ers$Bpsw$ewx$C]x!Q$e!Q![$?|![!c$e!c!}$?|!}#O$e#O#P&S#P#R$e#R#S$?|#S#T$e#T#o$?|#o~$e&c$ByU(]W'o$w&k!bOY%WZw%Wwx%qx#O%W#O#P&S#P~%W%k$CfU'pQ([$V&k!bOY'SZr'Srs%qs#O'S#O#P&S#P~'S%s$DTX!Z$V(]W'pQ&k!bOY$eZr$ers%Wsw$ewx'Sx!}$e!}#O$Dp#O#P&S#P~$e!m$D{W(SP(]W'pQ&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e%w$Ej_&k!bOY$FiYZ$F|Z]$Fi]^$Gu^!Q$Fi!Q![$H]![!w$Fi!w!x$Ia!x#O$Fi#O#P% e#P#i$Fi#i#j$Lc#j#l$Fi#l#m%!R#m~$Fi!l$FpSXY&k!bOY%qZ#O%q#O#P&S#P~%q%w$GVYXY'n$Z&k!bOX%qXY+^YZ(vZ]%q]^+^^p%qpq+^q#O%q#O#P*r#P~%q%w$G|TXY&k!bOY%qYZ+^Z#O%q#O#P&S#P~%q!l$HdUXY&k!bOY%qZ!Q%q!Q![$Hv![#O%q#O#P&S#P~%q!l$H}UXY&k!bOY%qZ!Q%q!Q![$Fi![#O%q#O#P&S#P~%q!l$IfY&k!bOY%qZ!Q%q!Q![$JU![!c%q!c!i$JU!i#O%q#O#P&S#P#T%q#T#Z$JU#Z~%q!l$JZY&k!bOY%qZ!Q%q!Q![$Jy![!c%q!c!i$Jy!i#O%q#O#P&S#P#T%q#T#Z$Jy#Z~%q!l$KOY&k!bOY%qZ!Q%q!Q![$Kn![!c%q!c!i$Kn!i#O%q#O#P&S#P#T%q#T#Z$Kn#Z~%q!l$KsY&k!bOY%qZ!Q%q!Q![$Lc![!c%q!c!i$Lc!i#O%q#O#P&S#P#T%q#T#Z$Lc#Z~%q!l$LhY&k!bOY%qZ!Q%q!Q![$MW![!c%q!c!i$MW!i#O%q#O#P&S#P#T%q#T#Z$MW#Z~%q!l$M]Y&k!bOY%qZ!Q%q!Q![$M{![!c%q!c!i$M{!i#O%q#O#P&S#P#T%q#T#Z$M{#Z~%q!l$NQY&k!bOY%qZ!Q%q!Q![$Np![!c%q!c!i$Np!i#O%q#O#P&S#P#T%q#T#Z$Np#Z~%q!l$NuY&k!bOY%qZ!Q%q!Q![$Fi![!c%q!c!i$Fi!i#O%q#O#P&S#P#T%q#T#Z$Fi#Z~%q!l% lVXY&k!bOY%qYZ%qZ]%q]^&n^#O%q#O#P&S#P~%q!l%!WY&k!bOY%qZ!Q%q!Q![%!v![!c%q!c!i%!v!i#O%q#O#P&S#P#T%q#T#Z%!v#Z~%q!l%!{Y&k!bOY%qZ!Q%q!Q![%#k![!c%q!c!i%#k!i#O%q#O#P&S#P#T%q#T#Z%#k#Z~%q!l%#rYXY&k!bOY%qZ!Q%q!Q![%#k![!c%q!c!i%#k!i#O%q#O#P&S#P#T%q#T#Z%#k#Z~%q%w%$mX![#u(]W'pQ&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P#Q%%Y#Q~$e#Q%%eW(_d(]W'pQ&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e%s%&YY(]W'pQ&k!b!c$VOY$eZr$ers%Wsw$ewx'Sx!_$e!_!`!0r!`#O$e#O#P&S#P~$e&i%'Xb(]W'pQ!W$U'rq'yS&k!bOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![$?|![!c$e!c!}$?|!}#O$e#O#P&S#P#R$e#R#S$?|#S#T$e#T#d$?|#d#e%(a#e#o$?|#o~$e&i%(pb(]W'pQ!W$U'rq'yS&k!bOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![$?|![!c$e!c!}$?|!}#O$e#O#P&S#P#R$e#R#S$?|#S#T$e#T#X$?|#X#Y%)x#Y#o$?|#o~$e&i%*Xb(]W'pQ!W$U'rq'yS&k!bOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![$?|![!c$e!c!}$?|!}#O$e#O#P&S#P#R$e#R#S$?|#S#T$e#T#f$?|#f#g%+a#g#o$?|#o~$e&i%+pa(]W'pQ!W$U'rq'yS&k!bOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![$?|![!c$e!c!}$?|!}#O$e#O#P&S#P#R$e#R#S$?|#S#T$e#T#U%,u#U#o$?|#o~$e&i%-Ub(]W'pQ!W$U'rq'yS&k!bOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![$?|![!c$e!c!}$?|!}#O$e#O#P&S#P#R$e#R#S$?|#S#T$e#T#h$?|#h#i%.^#i#o$?|#o~$e&i%.mb(]W'pQ!W$U'rq'yS&k!bOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![$?|![!c$e!c!}$?|!}#O$e#O#P&S#P#R$e#R#S$?|#S#T$e#T#c$?|#c#d%/u#d#o$?|#o~$e&i%0Ub(]W'pQ!W$U'rq'yS&k!bOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![$?|![!c$e!c!}$?|!}#O$e#O#P&S#P#R$e#R#S$?|#S#T$e#T#f$?|#f#g%1^#g#o$?|#o~$e&i%1ms(]W'pQ!W$U'rq'yS&k!bOY$eZq$eqr%3zrs%Wsu$euv%3zvw%5jwx'Sxy%6hyz$ez{%3z{|%3z|}$e}!O%7a!O!P$e!P!Q%3z!Q![$?|![!^$e!^!_%8_!_!`%3z!`!a%9]!a!c$e!c!}$?|!}#O%:Z#O#P&S#P#Q$e#Q#R%3z#R#S$?|#S#T$e#T#o$?|#o#p$e#p#q%;P#q#r$e#r#s%4u#s~$e!q%4VY(]W'pQ#`T&k!bOY$eZr$ers%Wsw$ewx'Sx!_$e!_!`%4u!`#O$e#O#P&S#P~$e!q%5QW(]W'pQ#`T&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e!q%5uZ(]W'pQ#`T&k!bOY$eZr$ers%Wsv$evw%4uwx'Sx!_$e!_!`%4u!`#O$e#O#P&S#P~$e!q%6qY(]W'pQ&k!bOY$eZr$ers%Wsw$ewx'Sxy$eyz%4uz#O$e#O#P&S#P~$e!q%7lZ(]W'pQ#`T&k!bOY$eZr$ers%Wsw$ewx'Sx!_$e!_!`%4u!`!a%4u!a#O$e#O#P&S#P~$e!q%8jZ(]W'pQ#`T&k!bOY$eZr$ers%Wsw$ewx'Sx!^$e!^!_%3z!_!`%4u!`#O$e#O#P&S#P~$e!q%9hZ(]W'pQ#`T&k!bOY$eZr$ers%Wsw$ewx'Sx!_$e!_!`%4u!`!a%3z!a#O$e#O#P&S#P~$e!q%:dX(]W'pQ&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P#Q%4u#Q~$e!q%;[[(]W'pQ#`T&k!bOY$eZr$ers%Wsw$ewx'Sx!_$e!_!`%4u!`#O$e#O#P&S#P#p$e#p#q%4u#q~$e&i%<ab(]W'pQ!W$U'rq'yS&k!bOY$eZr$ers$Bpsw$ewx$C]x!Q$e!Q!Y$?|!Y!Z$A_!Z![$?|![!c$e!c!}$?|!}#O$e#O#P&S#P#R$e#R#S$?|#S#T$e#T#o$?|#o~$e%s%=tW!S$V(]W'pQ&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e%s%>i[(]W'pQ!b$V&k!bOY$eZr$ers%Wsw$ewx'Sx!_$e!_!`!0r!`#O$e#O#P&S#P#p$e#p#q%?_#q~$e%s%?jW(W$V(]W'pQ&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e!}%@_W!Ya(]W'pQ&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e!q%ASa(]W'pQ&UP&k!bOX$eXY%BXZp$epq%BXqr$ers%Wsw$ewx'Sx!c$e!c!}%Cg!}#O$e#O#P&S#P#R$e#R#S%Cg#S#T$e#T#o%Cg#o~$e!q%Bba(]W'pQ&k!bOX$eXY%BXZp$epq%BXqr$ers%Wsw$ewx'Sx!c$e!c!}%Cg!}#O$e#O#P&S#P#R$e#R#S%Cg#S#T$e#T#o%Cg#o~$e!q%Cr`(]W'pQdT&k!bOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![%Cg![!c$e!c!}%Cg!}#O$e#O#P&S#P#R$e#R#S%Cg#S#T$e#T#o%Cg#o~$e",
      tokenizers: [rawString, fallback, 0, 1, 2, 3, 4, 5, 6, 7],
      topRules: {"Program":[0,266]},
      dynamicPrecedences: {"84":1,"91":1,"98":1,"104":-10,"105":1,"110":-1,"116":-10,"117":1,"172":1,"175":-10,"221":-1,"225":2,"226":2,"265":-10,"319":3,"363":1,"364":3,"365":1,"366":1},
      specialized: [{term: 310, get: value => spec_identifier$3[value] || -1},{term: 32, get: value => spec_[value] || -1},{term: 70, get: value => spec_templateArgsEnd[value] || -1},{term: 317, get: value => spec_scopedIdentifier[value] || -1}],
      tokenPrec: 22135
    });

    /**
    A language provider based on the [Lezer C++
    parser](https://github.com/lezer-parser/cpp), extended with
    highlighting and indentation information.
    */
    const cppLanguage = /*@__PURE__*/LRLanguage.define({
        parser: /*@__PURE__*/parser$5.configure({
            props: [
                /*@__PURE__*/indentNodeProp.add({
                    IfStatement: /*@__PURE__*/continuedIndent({ except: /^\s*({|else\b)/ }),
                    TryStatement: /*@__PURE__*/continuedIndent({ except: /^\s*({|catch)\b/ }),
                    LabeledStatement: flatIndent,
                    CaseStatement: context => context.baseIndent + context.unit,
                    BlockComment: () => -1,
                    Statement: /*@__PURE__*/continuedIndent({ except: /^{/ })
                }),
                /*@__PURE__*/foldNodeProp.add({
                    "DeclarationList CompoundStatement EnumeratorList FieldDeclarationList InitializerList": foldInside$1,
                    BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }
                }),
                /*@__PURE__*/styleTags({
                    "typedef struct union enum class typename decltype auto template operator friend noexcept namespace using __attribute__ __declspec __based": tags$1.definitionKeyword,
                    "extern MsCallModifier MsPointerModifier extern static register inline const volatile restrict _Atomic mutable constexpr virtual explicit VirtualSpecifier Access": tags$1.modifier,
                    "if else switch for while do case default return break continue goto throw try catch": tags$1.controlKeyword,
                    "new sizeof delete static_assert": tags$1.operatorKeyword,
                    "NULL nullptr": tags$1.null,
                    this: tags$1.self,
                    "True False": tags$1.bool,
                    "TypeSize PrimitiveType": /*@__PURE__*/tags$1.standard(tags$1.typeName),
                    TypeIdentifier: tags$1.typeName,
                    FieldIdentifier: tags$1.propertyName,
                    "CallExpression/FieldExpression/FieldIdentifier": /*@__PURE__*/tags$1.function(tags$1.propertyName),
                    StatementIdentifier: tags$1.labelName,
                    Identifier: tags$1.variableName,
                    "CallExpression/Identifier": /*@__PURE__*/tags$1.function(tags$1.variableName),
                    "CallExpression/ScopedIdentifier/Identifier": /*@__PURE__*/tags$1.function(tags$1.variableName),
                    DestructorName: tags$1.name,
                    NamespaceIdentifier: tags$1.namespace,
                    OperatorName: tags$1.operator,
                    ArithOp: tags$1.arithmeticOperator,
                    LogicOp: tags$1.logicOperator,
                    BitOp: tags$1.bitwiseOperator,
                    CompareOp: tags$1.compareOperator,
                    AssignOp: tags$1.definitionOperator,
                    UpdateOp: tags$1.updateOperator,
                    LineComment: tags$1.lineComment,
                    BlockComment: tags$1.blockComment,
                    Number: tags$1.number,
                    String: tags$1.string,
                    "RawString SystemLibString": /*@__PURE__*/tags$1.special(tags$1.string),
                    CharLiteral: tags$1.character,
                    EscapeSequence: tags$1.escape,
                    PreProcArg: tags$1.meta,
                    "PreprocDirectiveName #include #ifdef #ifndef #if #define #else #endif #elif": tags$1.processingInstruction,
                    MacroName: /*@__PURE__*/tags$1.special(tags$1.name),
                    "( )": tags$1.paren,
                    "[ ]": tags$1.squareBracket,
                    "{ }": tags$1.brace,
                    "< >": tags$1.angleBracket,
                    ". ->": tags$1.derefOperator,
                    ", ;": tags$1.separator
                })
            ]
        }),
        languageData: {
            commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
            indentOnInput: /^\s*(?:case |default:|\{|\})$/
        }
    });
    /**
    Language support for C++.
    */
    function cpp$1() {
        return new LanguageSupport(cppLanguage);
    }

    var index$5 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        cpp: cpp$1,
        cppLanguage: cppLanguage
    });

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const spec_identifier$2 = {__proto__:null,true:34, false:34, null:40, void:44, byte:46, short:46, int:46, long:46, char:46, float:46, double:46, boolean:46, extends:60, super:62, class:74, this:76, new:82, public:98, protected:100, private:102, abstract:104, static:106, final:108, strictfp:110, default:112, synchronized:114, native:116, transient:118, volatile:120, throws:148, implements:158, interface:164, enum:174, instanceof:234, open:263, module:265, requires:270, transitive:272, exports:274, to:276, opens:278, uses:280, provides:282, with:284, package:288, import:292, if:304, else:306, while:310, for:314, var:321, assert:328, switch:332, case:338, do:342, break:346, continue:350, return:354, throw:360, try:364, catch:368, finally:376};
    const parser$4 = LRParser.deserialize({
      version: 13,
      states: "# rQ]QPOOO&qQQO'#HYO(uQQO'#CbOOQO'#Cb'#CbO(|QPO'#CaOOQO'#H_'#H_OOQO'#Ct'#CtO*iQPO'#D^O+SQQO'#HfOOQO'#Hf'#HfO-hQQO'#HaO-oQQO'#HaOOQO'#Ha'#HaOOQO'#H`'#H`O/pQPO'#DTO/}QPO'#GjO2uQPO'#D^O2|QPO'#DyO(|QPO'#EZO3oQPO'#EZOOQO'#DU'#DUO4}QQO'#H]O7UQQO'#EdO7]QPO'#EcO7bQPO'#EeOOQO'#H^'#H^O5eQQO'#H^O8eQQO'#FfO8lQPO'#EvO8qQPO'#E{O8qQPO'#E}OOQO'#H]'#H]OOQO'#HU'#HUOOQO'#Ge'#GeOOQO'#HT'#HTO:OQPO'#FgOOQO'#HS'#HSOOQO'#Gd'#GdQ]QPOOOOQO'#Hl'#HlO:TQPO'#HlO:YQPO'#DzO:YQPO'#EUO:YQPO'#EPO:bQPO'#HiO:sQQO'#EeO(|QPO'#C`O:{QPO'#C`O(|QPO'#FaO;QQPO'#FcO;]QPO'#FiO;]QPO'#FlO:YQPO'#FqO;bQPO'#FnO8qQPO'#FuO;]QPO'#FwO]QPO'#F|O;gQPO'#GOO;rQPO'#GQO;}QPO'#GSO;]QPO'#GUO8qQPO'#GVO<UQPO'#GXOOQO'#HY'#HYO<uQQO,58{OOQO'#HW'#HWOOQO'#Hb'#HbO?PQPO,59dO@RQPO,59xOOQO-E:c-E:cO(|QPO,58zO@uQPO,58zO(|QPO,5;{O@zQPO'#DPOAPQPO'#DPOOQO'#Gg'#GgOBPQQO,59iOOQO'#Dl'#DlOChQPO'#HnOCrQPO'#DkODQQPO'#HmODYQPO,5<]OD_QPO,59]ODxQPO'#CwOOQO,59b,59bOEPQPO,59aOGXQQO'#HYOIlQQO'#CbOJSQPO'#D^OKXQQO'#HfOKiQQO,59oOKpQPO'#DuOLOQPO'#HuOLWQPO,5:_OL]QPO,5:_OLsQPO,5;lOMOQPO'#H|OMZQPO,5;cOM`QPO,5=UOOQO-E:h-E:hOOQO,5:e,5:eONvQPO,5:eON}QPO,5:uO! SQPO,5<]O(|QPO,5:uO:YQPO,5:fO:YQPO,5:pO:YQPO,5:kO:YQPO,5<]O! sQPO,59pO8qQPO,5:|O! zQPO,5;PO8qQPO,59TO!!YQPO'#DWOOQO,5:},5:}OOQO'#Ek'#EkOOQO'#Em'#EmO8qQPO,5;TO8qQPO,5;TO8qQPO,5;TO8qQPO,5;TO8qQPO,5;TO8qQPO,5;TO8qQPO,5;dOOQO,5;g,5;gOOQO,5<Q,5<QO!!aQPO,5;`O!!rQPO,5;bO!!aQPO'#CxO!!yQQO'#HfO!#XQQO,5;iO]QPO,5<ROOQO-E:b-E:bOOQO,5>W,5>WO!$iQPO,5:fO!$wQPO,5:pO!%PQPO,5:kO!%[QPO,5>TOKpQPO,5>TO! bQPO,59UO!%gQQO,58zO!%oQQO,5;{O!%wQQO,5;}O(|QPO,5;}O8qQPO'#DTO]QPO,5<TO]QPO,5<WO!&PQPO'#FpO]QPO,5<YO]QPO,5<_O!&aQQO,5<aO!&kQPO,5<cO!&pQPO,5<hOOQO'#Fh'#FhOOQO,5<j,5<jO!&uQPO,5<jOOQO,5<l,5<lO!&zQPO,5<lO!'PQQO,5<nOOQO,5<n,5<nO<XQPO,5<pO!'WQQO,5<qO!'_QPO'#GbO!(bQPO,5<sO<XQPO,5<{O(|QPO,58}O!,]QPO'#ChOOQO1G.k1G.kO!,gQPO,59iO!%gQQO1G.fO(|QPO1G.fO!,tQQO1G1gOOQO,59k,59kO!,|QPO,59kOOQO-E:e-E:eO!-RQPO,5>YO!-jQPO,5:VO:YQPO'#GlO!-qQPO,5>XOOQO1G1w1G1wOOQO1G.w1G.wO!.[QPO'#CxO!.zQPO'#HfO!/UQPO'#CyO!/dQPO'#HeO!/lQPO,59cOOQO1G.{1G.{OEPQPO1G.{O!0SQPO,59dO!0aQQO'#HYO!0rQQO'#CbOOQO,5:a,5:aO:YQPO,5:bOOQO,5:`,5:`O!1TQQO,5:`OOQO1G/Z1G/ZO!1YQPO,5:aO!1kQPO'#GoO!2OQPO,5>aOOQO1G/y1G/yO!2WQPO'#DuO!2iQPO'#D^O!2pQPO1G/yO!!aQPO'#GmO!2uQPO1G1WO8qQPO1G1WO:YQPO'#GuO!2}QPO,5>hOOQO1G0}1G0}OOQO1G0P1G0PO!3VQPO'#E[OOQO1G0a1G0aO!3vQPO1G1wON}QPO1G0aO!$iQPO1G0QO!$wQPO1G0[O!%PQPO1G0VOOQO1G/[1G/[O!3{QQO1G.pO7]QPO1G0iO(|QPO1G0iO:bQPO'#HiO!5oQQO1G.pOOQO1G.p1G.pO!5tQQO1G0hOOQO1G0k1G0kO!5{QPO1G0kO!6WQQO1G.oO!6nQQO'#HjO!6{QPO,59rO!8[QQO1G0oO!9sQQO1G0oO!;RQQO1G0oO!;`QQO1G0oO!<eQQO1G0oO!<{QQO1G0oO!=VQQO1G1OO!=^QQO'#HfOOQO1G0z1G0zO!>aQQO1G0|OOQO1G0|1G0|OOQO1G1m1G1mO! VQPO'#DpO!@bQPO'#DZO!!aQPO'#D{O!!aQPO'#D|OOQO1G0Q1G0QO!@iQPO1G0QO!@nQPO1G0QO!@vQPO1G0QO!ARQPO'#EWOOQO1G0[1G0[O!AfQPO1G0[O!AkQPO'#ESO!!aQPO'#EROOQO1G0V1G0VO!BeQPO1G0VO!BjQPO1G0VO!BrQPO'#EgO!ByQPO'#EgOOQO'#Gt'#GtO!CRQQO1G0lO!DrQQO1G3oO7]QPO1G3oO!FqQPO'#FVOOQO1G.f1G.fOOQO1G1g1G1gO!FxQPO1G1iOOQO1G1i1G1iO!GTQQO1G1iO!G]QPO1G1oOOQO1G1r1G1rO)UQPO'#D^O+SQQO,5<`O!KQQPO,5<`O!KcQPO,5<[O!KjQPO,5<[OOQO1G1t1G1tOOQO1G1y1G1yOOQO1G1{1G1{O8qQPO1G1{O# ZQPO'#FyOOQO1G1}1G1}O;]QPO1G2SOOQO1G2U1G2UOOQO1G2W1G2WOOQO1G2Y1G2YOOQO1G2[1G2[OOQO1G2]1G2]O# bQQO'#HYO#!]QQO'#CbO+SQQO'#HfO##WQQOOO##tQQO'#EdO##cQQO'#H^OKpQPO'#GcO##{QPO,5<|OOQO'#G|'#G|O#$TQPO1G2_O#(OQPO'#GZO<XQPO'#G_OOQO1G2_1G2_O#(TQPO1G2gOOQO1G.i1G.iO#-VQQO'#EdO#-gQQO'#H[O#-wQPO'#FROOQO'#H['#H[O#.RQPO'#H[O#.pQPO'#IPO#.xQPO,59SOOQO7+$Q7+$QO!%gQQO7+$QOOQO7+'R7+'ROOQO1G/V1G/VO#.}QPO'#DnO#/XQQO'#HoOOQO'#Ho'#HoOOQO1G/q1G/qOOQO,5=W,5=WOOQO-E:j-E:jO#/iQSO,58{O#/pQPO,59eOOQO,59e,59eO!!aQPO'#HhODdQPO'#GfO#0OQPO,5>POOQO1G.}1G.}OOQO7+$g7+$gOOQO1G/z1G/zO#0WQQO1G/zOOQO1G/|1G/|O#0]QPO1G/zOOQO1G/{1G/{O:YQPO1G/|OOQO,5=Z,5=ZOOQO-E:m-E:mOOQO7+%e7+%eOOQO,5=X,5=XOOQO-E:k-E:kO8qQPO7+&rOOQO7+&r7+&rOOQO,5=a,5=aOOQO-E:s-E:sO#0bQPO'#ETO#0pQPO'#ETOOQO'#Gs'#GsO#1XQPO,5:vOOQO,5:v,5:vOOQO7+'c7+'cOOQO7+%{7+%{OOQO7+%l7+%lO!@iQPO7+%lO!@nQPO7+%lO!@vQPO7+%lOOQO7+%v7+%vO!AfQPO7+%vOOQO7+%q7+%qO!BeQPO7+%qO!BjQPO7+%qOOQO7+&T7+&TOOQO'#Ed'#EdO7]QPO7+&TO7]QPO,5>TO#1xQPO7+$[OOQO7+&S7+&SOOQO7+&V7+&VO8qQPO'#GhO#2WQPO,5>UOOQO1G/^1G/^O8qQPO7+&jO#2cQQO,59dO#3fQPO'#DqO! VQPO'#DqO#3qQPO'#HrO#3yQPO,5:[O#4dQQO'#HbO#5PQQO'#CtO! SQPO'#HqO#5oQPO'#DoO#5yQPO'#HqO#6[QPO'#DoO#6dQPO'#HzO#6iQPO'#E_OOQO'#Hk'#HkOOQO'#Gi'#GiO#6qQPO,59uOOQO,59u,59uO#6xQPO'#HlOOQO,5:g,5:gO#8`QPO'#HwOOQO'#EO'#EOOOQO,5:h,5:hO#8kQPO'#EXO:YQPO'#EXO#8|QPO'#HxO#9XQPO,5:rO! SQPO'#HqO!!aQPO'#HqO#9aQPO'#DoOOQO'#Gq'#GqO#9hQPO,5:nOOQO,5:n,5:nOOQO,5:m,5:mOOQO,5;R,5;RO#:bQQO,5;RO#:iQPO,5;ROOQO-E:r-E:rOOQO7+&W7+&WOOQO7+)Z7+)ZO#:pQQO7+)ZOOQO'#Gx'#GxO#<^QPO,5;qOOQO,5;q,5;qO#<eQPO'#FWO(|QPO'#FWO(|QPO'#FWO(|QPO'#FWO#<sQPO7+'TO#<xQPO7+'TOOQO7+'T7+'TO]QPO7+'ZO#=TQPO1G1zO! SQPO1G1zO#=cQQO1G1vO!!YQPO1G1vO#=jQPO1G1vO#=qQQO7+'gOOQO'#G{'#G{O#=xQPO,5<eOOQO,5<e,5<eO#>PQPO'#HlO8qQPO'#FzO#>XQPO7+'nO#>^QPO,5<}O! SQPO,5<}O#>cQPO1G2hO#?iQPO1G2hOOQO1G2h1G2hOOQO-E:z-E:zOOQO7+'y7+'yO!1kQPO'#G]O<XQPO,5<uOOQO,5<y,5<yO#?qQPO7+(ROOQO7+(R7+(RO#ClQPO,59TO#CsQPO'#IOO#C{QPO,5;mO(|QPO'#GwO#DQQPO,5>kOOQO1G.n1G.nOOQO<<Gl<<GlO#DYQPO'#HpO#DbQPO,5:YOOQO1G/P1G/POOQO,5>S,5>SOOQO,5=Q,5=QOOQO-E:d-E:dO#DgQPO7+%fOOQO7+%f7+%fOOQO7+%h7+%hOOQO<<J^<<J^O#D}QPO'#HYO#EUQPO'#CbO#E]QPO,5:oO#EbQPO,5:wO#0bQPO,5:oOOQO-E:q-E:qOOQO1G0b1G0bOOQO<<IW<<IWO!@iQPO<<IWO!@nQPO<<IWOOQO<<Ib<<IbOOQO<<I]<<I]O!BeQPO<<I]OOQO<<Io<<IoO#EgQQO<<GvO7]QPO<<IoO(|QPO<<IoOOQO<<Gv<<GvO#GZQQO,5=SOOQO-E:f-E:fO#GhQQO<<JUOOQO,5:],5:]O!!aQPO'#DrO#HOQPO,5:]O! VQPO'#GnO#HZQPO,5>^OOQO1G/v1G/vO#HcQPO'#HnO#HjQPO,59wO#HoQPO,5>]O! SQPO,59wO#HzQPO,5:ZO#6iQPO,5:yO! SQPO,5>]O!!aQPO,5>]O#6dQPO,5>fOOQO,5:Z,5:ZOL]QPO'#DsOOQO,5>f,5>fO#ISQPO'#E`OOQO,5:y,5:yO#LQQPO,5:yO!!aQPO'#DwOOQO-E:g-E:gOOQO1G/a1G/aOOQO,5:x,5:xO!!aQPO'#GpO#LVQPO,5>cOOQO,5:s,5:sO#LbQPO,5:sO#LpQPO,5:sO#MRQPO'#GrO#MiQPO,5>dO#MtQPO'#EYOOQO1G0^1G0^O#M{QPO1G0^O! SQPO,5:oOOQO-E:o-E:oOOQO1G0Y1G0YOOQO1G0m1G0mO#NQQQO1G0mOOQO<<Lu<<LuOOQO-E:v-E:vOOQO1G1]1G1]O#NXQQO,5;rOOQO'#Gy'#GyO#<eQPO,5;rOOQO'#IQ'#IQO#NaQQO,5;rO#NrQQO,5;rOOQO<<Jo<<JoO#NzQPO<<JoOOQO<<Ju<<JuO8qQPO7+'fO$ PQPO7+'fO!!YQPO7+'bO$ _QPO7+'bO$ dQQO7+'bOOQO<<KR<<KROOQO-E:y-E:yOOQO1G2P1G2POOQO,5<f,5<fO$ kQQO,5<fOOQO<<KY<<KYO8qQPO1G2iO$ rQPO1G2iOOQO,5=j,5=jOOQO7+(S7+(SO$ wQPO7+(SOOQO-E:|-E:|O$#cQSO'#HaO$!}QSO'#HaO$#jQPO'#G^O:YQPO,5<wOKpQPO,5<wOOQO1G2a1G2aOOQO<<Km<<KmO$#{QQO1G.oOOQO1G1Y1G1YO$$VQPO'#GvO$$dQPO,5>jOOQO1G1X1G1XO$$lQPO'#FSOOQO,5=c,5=cOOQO-E:u-E:uO$$qQPO'#GkO$%OQPO,5>[OOQO1G/t1G/tOOQO<<IQ<<IQOOQO1G0Z1G0ZO$%WQPO1G0cO$%]QPO1G0ZO$%bQPO1G0cOOQOAN>rAN>rO!@iQPOAN>rOOQOAN>wAN>wOOQOAN?ZAN?ZO7]QPOAN?ZO$%gQPO,5:^OOQO1G/w1G/wOOQO,5=Y,5=YOOQO-E:l-E:lO$%rQPO,5>`OOQO1G/c1G/cOOQO1G3w1G3wO$&TQPO1G/cOOQO1G/u1G/uOOQO1G0e1G0eO#LQQPO1G0eO#6dQPO'#HtO$&YQPO1G3wO! SQPO1G3wOOQO1G4Q1G4QOJsQPO'#DuOJSQPO'#D^OOQO,5:z,5:zO$&eQPO,5:zO$&eQPO,5:zO$&lQQO'#H]O$&sQQO'#H^O$&}QQO'#EaO$'YQPO'#EaOOQO,5:c,5:cOOQO,5=[,5=[OOQO-E:n-E:nOOQO1G0_1G0_O$'bQPO1G0_OOQO,5=^,5=^OOQO-E:p-E:pO$'pQPO,5:tOOQO7+%x7+%xOOQO7+&X7+&XOOQO1G1^1G1^O$'wQQO1G1^OOQO-E:w-E:wO$(PQQO'#IRO$'zQPO1G1^O#NgQPO1G1^O(|QPO1G1^OOQOAN@ZAN@ZO$([QQO<<KQO8qQPO<<KQO$(cQPO<<J|OOQO<<J|<<J|O!!YQPO<<J|OOQO1G2Q1G2QO$(hQQO7+(TO8qQPO7+(TOOQO<<Kn<<KnP!'_QPO'#HOOKpQPO'#G}O$(rQPO,5<xO$(}QPO1G2cO:YQPO1G2cOOQO,5=b,5=bOOQO-E:t-E:tO#ClQPO,5;nOOQO,5=V,5=VOOQO-E:i-E:iO$)SQPO7+%}OOQO7+%u7+%uO$)bQPO7+%}OOQOG24^G24^OOQOG24uG24uO$)gQPO1G/xO$)rQPO1G3zOOQO7+$}7+$}OOQO7+&P7+&POOQO7+)c7+)cO$*TQPO7+)cO!/qQPO,5:`OOQO1G0f1G0fO$*`QPO1G0fO$*gQPO,59pO$*{QPO,5:{O7]QPO,5:{OOQO7+%y7+%yOOQO7+&x7+&xO(|QPO'#GzO$+QQPO,5>mO$+YQPO7+&xO$+_QQO'#ISOOQOAN@lAN@lO$+jQQOAN@lOOQOAN@hAN@hO$+qQPOAN@hO$+vQQO<<KoO$,QQPO,5=iOOQO-E:{-E:{OOQO7+'}7+'}O$,cQPO7+'}O$,hQPO<<IiOOQO<<Ii<<IiO#ClQPO<<IiO$,hQPO<<IiOOQO<<L}<<L}OOQO7+&Q7+&QO$,vQPO1G0iO$-RQQO1G0gOOQO1G0g1G0gO$-ZQPO1G0gO$-`QQO,5=fOOQO-E:x-E:xOOQO<<Jd<<JdO$-kQPO,5>nOOQOG26WG26WOOQOG26SG26SOOQO<<Ki<<KiOOQOAN?TAN?TO#ClQPOAN?TO$-sQPOAN?TO$-xQPOAN?TO7]QPO7+&RO$.WQPO7+&ROOQO7+&R7+&RO$.]QPOG24oOOQOG24oG24oO#ClQPOG24oO$.bQPO<<ImOOQO<<Im<<ImOOQOLD*ZLD*ZO$.gQPOLD*ZOOQOAN?XAN?XOOQO!$'Mu!$'MuO(|QPO'#CaO$.lQQO'#HYO$/PQQO'#CbO!!aQPO'#Cx",
      stateData: "$/g~OPOSQOS%uOS~OZ^O_TO`TOaTObTOcTOdTOf[Og[Oo}OuyOviOy|O|aO!OtO!RwO!SwO!TwO!UwO!VwO!WwO!XwO!YxO!Z!^O![wO!]wO!^wO!t{O!yzO#dnO#pmO#rnO#snO#w!PO#x!OO$U!QO$W!RO$^!SO$a!TO$c!VO$f!UO$j!WO$l!XO$q!YO$s!ZO$u![O$w!]O$z!_O$|!`O%ySO%{QO%}PO&mbO~OWhXW%|XZ%|XthXt%|X!O%|X!a%|X#[%|X#^%|X#`%|X#b%|X#c%|X#d%|X#e%|X#f%|X#g%|X#i%|X#m%|X#p%|X%yhX%{hX%}hX&V%|X&WhX&W%|X&g%|X&ohX&o%|X&q!`X~O#n$[X~P$tOWUXW&UXZUXtUXt&UX!OUX!aUX#[UX#^UX#`UX#bUX#cUX#dUX#eUX#fUX#gUX#iUX#mUX#pUX%y&UX%{&UX%}&UX&VUX&WUX&W&UX&gUX&oUX&o&UX&q!`X~O#n$[X~P&xO%{RO%}!aO~Of[Og[O!RwO!SwO!TwO!UwO!VwO!WwO!XwO!YxO![wO!]wO!^wO%ySO%{!dO%}UOf!QXg!QX$f!QX%{!QX%}!QX~O#w!iO#x!hO$U!jOu!QX!t!QX!y!QX&m!QX~P)UOW!tOt!kO%ySO%{!oO%}!oO&o&YX~OW!wOt&TX%y&TX%{&TX%}&TX&o&TXY&TXv&TX&g&TX&j&TXZ&TXp&TX&V&TX!O&TX#^&TX#`&TX#b&TX#c&TX#d&TX#e&TX#f&TX#g&TX#i&TX#m&TX#p&TX|&TX!q&TX#n&TXr&TX{&TX~O&W!uO~P+hO&W&TX~P+hOZ^O_TO`TOaTObTOcTOdTOf[Og[Oo}OviOy|O!RwO!SwO!TwO!UwO!VwO!WwO!XwO!YxO![wO!]wO!^wO#dnO#pmO#rnO#snO%ySO~O%{!yO%}!xOY&iP~P-vO%ySOf%^Xg%^Xu%^X!R%^X!S%^X!T%^X!U%^X!V%^X!W%^X!X%^X!Y%^X![%^X!]%^X!^%^X!t%^X!y%^X$f%^X%{%^X%}%^X&m%^X&W%^X~O!RwO!SwO!TwO!UwO!VwO!WwO!XwO!YxO![wO!]wO!^wOf!QXg!QXu!QX!t!QX!y!QX%{!QX%}!QX&m!QX&W!QX~O$f!QX~P1eO{#WO~P]Of[Og[Ou#]O!t#_O!y#^O%{!dO%}UO&m#[O~O$f#`O~P3TOt#bO&o#cO!O&PX#^&PX#`&PX#b&PX#c&PX#d&PX#e&PX#f&PX#g&PX#i&PX#m&PX#p&PX&V&PX&W&PX&g&PX~OW#aOY&PX#n&PXr&PXp&PX{&PX~P3vO!a#dO#[#dOW&QXt&QX!O&QX#^&QX#`&QX#b&QX#c&QX#d&QX#e&QX#f&QX#g&QX#i&QX#m&QX#p&QX&V&QX&W&QX&g&QX&o&QXY&QX#n&QXr&QXp&QX{&QX~OZ#WX~P5eOZ#eO~O&o#cO~O#^#iO#`#jO#b#kO#c#kO#d#lO#e#mO#f#nO#g#nO#i#rO#m#oO#p#pO&V#gO&W#gO&g#hO~O!O#qO~P7gO&q#sO~OZ^O_TO`TOaTObTOcTOdTOf[Og[Oo}OviOy|O#dnO#pmO#rnO#snO%ySO%{0cO%}0bO~O#n#wO~O!Z#yO~O%{!oO%}!oO~Of[Og[O%{!dO%}UO&W!uO~OW$PO&o#cO~O#x!hO~O!V$TO%{RO%}!aO~OZ$UO~OZ$XO~O!O$`O%{$_O%}$_O~O!O$bO%{$_O%}$_O~O!O$eO~P8qOZ$hO|aO~OW$kOZ$lOfTagTa%yTa%{Ta%}Ta~OuTa!RTa!STa!TTa!UTa!VTa!WTa!XTa!YTa![Ta!]Ta!^Ta!tTa!yTa#wTa#xTa$UTa$fTa&mTatTaYTa&WTapTa{Ta!OTa~P<^Ot!kO%ySOpla&VlaYla&gla!Ola~O&ola|la!qla~P>hO!RwO!SwO!TwO!UwO!VwO!WwO!XwO!YxO![wO!]wO!^wO~Of!Qag!Qau!Qa!t!Qa!y!Qa$f!Qa%{!Qa%}!Qa&m!Qa&W!Qa~P?^O#x$pO~Or$rO~Ot$sO%ySO~Ot!kO%yqa%{qa%}qa&oqaYqavqa&gqa&jqa!Oqa&Vqapqa~OWqa#^qa#`qa#bqa#cqa#dqa#eqa#fqa#gqa#iqa#mqa#pqa&Wqa#nqarqa{qa~PAXOt!kO%ySOp&bX!O&bX!a&bX~OY&bX#n&bX~PCVO!a$vOp!_X!O!_XY!_X~Op$wO!O&aX~O!O$yO~Ou$zO~Of[Og[O%y0aO%{!dO%}UO&Z$}O~O&V&XP~PDdO%ySO%{!dO%}UO~OWhXW%|XY%|XZ%|XthXt%|X!a%|X#[%|X#^%|X#`%|X#b%|X#c%|X#d%|X#e%|X#f%|X#g%|X#i%|X#m%|X#p%|X%yhX%{hX%}hX&V%|X&WhX&W%|X&g%|X&ohX&o%|X&q!`X~OYhXY!`Xp!`XvhX&ghX&jhX~PE[OWUXW&UXYUXZUXtUXt&UX!aUX#[UX#^UX#`UX#bUX#cUX#dUX#eUX#fUX#gUX#iUX#mUX#pUX%y&UX%{&UX%}&UX&VUX&WUX&W&UX&gUX&oUX&o&UX&q!`X~OY!`XY&UXp!`Xv&UX&g&UX&j&UX~PGoOf[Og[O%ySO%{!dO%}UOf!QXg!QX%{!QX%}!QX~P?^Ot!kOv%XO%ySO%{%UO%}%TO&j%WO~OW!tOY&YX&g&YX&o&YX~PJsOY%ZO~P7gOf[Og[O%{!dO%}UO~Op%]OY&iX~OY%_O~Of[Og[O%ySO%{!dO%}UOY&iP~P?^OY%eO&g%cO&o#cO~Op%fO&q#sOY&pX~OY%hO~O%ySOf%^ag%^au%^a!R%^a!S%^a!T%^a!U%^a!V%^a!W%^a!X%^a!Y%^a![%^a!]%^a!^%^a!t%^a!y%^a$f%^a%{%^a%}%^a&m%^a&W%^a~O{%iO~P]O|%jO~Ot!kO%ySO%{!oO%}!oO~Oo%vOv%wO%{RO%}!aO&W!uO~Oy%uO~P! bOy%yO%{RO%}!aO&W!uO~OY&^P~P8qOf[Og[O%ySO%{!dO%}UO~O|aO~P8qOW!tOt!kO%ySO&o&YX~O#p#pO!O#qa#^#qa#`#qa#b#qa#c#qa#d#qa#e#qa#f#qa#g#qa#i#qa#m#qa&V#qa&W#qa&g#qaY#qa#n#qar#qap#qa{#qa~On&^O|&]O!q&_O&W&[O~O|&dO!q&_O~On&hO|&gO&W&[O~OZ#eOt&lO%ySO~OW$kO|&rO~OW$kO!O&tO~OW&uO!O&vO~O$f!UO%{0cO%}0bO!O&^P~P-vO!O'RO#n'SO~P7gO|'TO~O$a'VO~O!O'WO~O!O'XO~O!O'YO~P7gO!O'[O~P7gOZ$UO_TO`TOaTObTOcTOdTOf[Og[Oo}OviOy|O%ySO%{'^O%}']O~P?^O%O'gO%S'hOZ${a_${a`${aa${ab${ac${ad${af${ag${ao${au${av${ay${a|${a!O${a!R${a!S${a!T${a!U${a!V${a!W${a!X${a!Y${a!Z${a![${a!]${a!^${a!t${a!y${a#d${a#p${a#r${a#s${a#w${a#x${a$U${a$W${a$^${a$a${a$c${a$f${a$j${a$l${a$q${a$s${a$u${a$w${a$z${a$|${a%s${a%y${a%{${a%}${a&m${a{${a$_${a$o${a~O|'nOY&sP~P8qO|qa!qqa&wqa~PAXOW$kO!O'uO~Or'vO~Ot!kO%ySOp&ba!O&ba!a&baY&ba#n&ba~O|'wO~P8qOp$wO!O&aa~Of[Og[O%y0aO%{!dO%}UO~O&Z(OO~P!-yOt!kO%ySOp&YX&V&YXY&YX&g&YX!O&YX~O|&YX!q&YX~P!.cOn(QOo(QOpmX&VmX~Op(RO&V&XX~O&V(TO~Ot!kOv(VO%ySO%{RO%}!aO~OYla&gla&ola~P!/qOW%|XY!`Xp!`Xt!`X%y!`X~OWUXY!`Xp!`Xt!`X%y!`X~OW(YO~Ot!kO%ySO%{!oO%}!oO&j([O~Of[Og[O%ySO%{!dO%}UO~P?^Op%]OY&ia~Ot!kO%ySO%{!oO%}!oO&j%WO~O%ySO~P1eOY(_O~OY(bO&g%cO~Op%fOY&pa~Of[Og[OuyO{(jO!t{O%ySO%{!dO%}UO&mbO~P?^O!O(kO~OW^iZ#WXt^i!O^i!a^i#[^i#^^i#`^i#b^i#c^i#d^i#e^i#f^i#g^i#i^i#m^i#p^i&V^i&W^i&g^i&o^iY^i#n^ir^ip^i{^i~OW(zO~Or({O~P7gOy(|O%{RO%}!aO~O!O]iY]i#n]ir]ip]i{]i~P7gOp(}OY&^X!O&^X~P7gOY)PO~O#p#pO!O#]i#^#]i#`#]i#b#]i#c#]i#d#]i#e#]i#i#]i#m#]i&V#]i&W#]i&g#]iY#]i#n#]ir#]ip#]i{#]i~O#f#nO#g#nO~P!7QO#^#iO#e#mO#f#nO#g#nO#i#rO#p#pO&V#gO&W#gO!O#]i#`#]i#b#]i#c#]i#m#]i&g#]iY#]i#n#]ir#]ip#]i{#]i~O#d#lO~P!8fO#^#iO#e#mO#f#nO#g#nO#i#rO#p#pO&V#gO&W#gO!O#]i#b#]i#c#]i#m#]iY#]i#n#]ir#]ip#]i{#]i~O#`#jO#d#lO&g#hO~P!9zO#d#]i~P!8fO#p#pO!O#]i#`#]i#b#]i#c#]i#d#]i#e#]i#m#]i&g#]iY#]i#n#]ir#]ip#]i{#]i~O#^#iO#f#nO#g#nO#i#rO&V#gO&W#gO~P!;gO#f#]i#g#]i~P!7QO#n)QO~P7gO#^&YX#`&YX#b&YX#c&YX#d&YX#e&YX#f&YX#g&YX#i&YX#m&YX#p&YX&W&YX#n&YXr&YX{&YX~P!.cO!O#jiY#ji#n#jir#jip#ji{#ji~P7gOf[Og[OuyO|aO!O)`O!RwO!SwO!TwO!UwO!V)dO!WwO!XwO!YxO![wO!]wO!^wO!t{O!yzO%ySO%{)WO%})XO&W&[O&mbO~O{)cO~P!>wO|&]O~O|&]O!q&_O~On&^O|&]O!q&_O~O%ySO%{!oO%}!oO{&lP!O&lP~P?^O|&dO~Of[Og[OuyO{)rO!O)pO!t{O!yzO%ySO%{!dO%}UO&W&[O&mbO~P?^O|&gO~On&hO|&gO~Or)tO~P8qOt)vO%ySO~Ot&lO|'wO%ySOW#Yi!O#Yi#^#Yi#`#Yi#b#Yi#c#Yi#d#Yi#e#Yi#f#Yi#g#Yi#i#Yi#m#Yi#p#Yi&V#Yi&W#Yi&g#Yi&o#YiY#Yi#n#Yir#Yip#Yi{#Yi~O|&]OW&]it&]i!O&]i#^&]i#`&]i#b&]i#c&]i#d&]i#e&]i#f&]i#g&]i#i&]i#m&]i#p&]i&V&]i&W&]i&g&]i&o&]iY&]i#n&]ir&]ip&]i{&]i~O#{*OO#}*PO$P*PO$Q*QO$R*RO~O{)}O~P!F`O$X*SO%{RO%}!aO~OW*TO!O*UO~O$_*VOZ$]i_$]i`$]ia$]ib$]ic$]id$]if$]ig$]io$]iu$]iv$]iy$]i|$]i!O$]i!R$]i!S$]i!T$]i!U$]i!V$]i!W$]i!X$]i!Y$]i!Z$]i![$]i!]$]i!^$]i!t$]i!y$]i#d$]i#p$]i#r$]i#s$]i#w$]i#x$]i$U$]i$W$]i$^$]i$a$]i$c$]i$f$]i$j$]i$l$]i$q$]i$s$]i$u$]i$w$]i$z$]i$|$]i%s$]i%y$]i%{$]i%}$]i&m$]i{$]i$o$]i~Of[Og[O$f#`O%{!dO%}UO~O!O*ZO~P8qO!O*[O~OZ^O_TO`TOaTObTOcTOdTOf[Og[Oo}OuyOviOy|O|aO!OtO!RwO!SwO!TwO!UwO!VwO!WwO!XwO!Y*aO!Z!^O![wO!]wO!^wO!t{O!yzO#dnO#pmO#rnO#snO#w!PO#x!OO$U!QO$W!RO$^!SO$a!TO$c!VO$f!UO$j!WO$l!XO$o*bO$q!YO$s!ZO$u![O$w!]O$z!_O$|!`O%ySO%{QO%}PO&mbO~O{*`O~P!KoOWhXW%|XY%|XZ%|XthXt%|X!O%|X%yhX%{hX%}hX&WhX&ohX&o%|X~OWUXW&UXYUXZUXtUXt&UX!OUX%y&UX%{&UX%}&UX&W&UX&oUX&o&UX~OW#aOt#bO&o#cO~OW&QXY%VXt&QX!O%VX&o&QX~OZ#WX~P##cOY*hO!O*fO~O%O'gO%S'hOZ${i_${i`${ia${ib${ic${id${if${ig${io${iu${iv${iy${i|${i!O${i!R${i!S${i!T${i!U${i!V${i!W${i!X${i!Y${i!Z${i![${i!]${i!^${i!t${i!y${i#d${i#p${i#r${i#s${i#w${i#x${i$U${i$W${i$^${i$a${i$c${i$f${i$j${i$l${i$q${i$s${i$u${i$w${i$z${i$|${i%s${i%y${i%{${i%}${i&m${i{${i$_${i$o${i~OZ*kO~O%O'gO%S'hOZ%Ti_%Ti`%Tia%Tib%Tic%Tid%Tif%Tig%Tio%Tiu%Tiv%Tiy%Ti|%Ti!O%Ti!R%Ti!S%Ti!T%Ti!U%Ti!V%Ti!W%Ti!X%Ti!Y%Ti!Z%Ti![%Ti!]%Ti!^%Ti!t%Ti!y%Ti#d%Ti#p%Ti#r%Ti#s%Ti#w%Ti#x%Ti$U%Ti$W%Ti$^%Ti$a%Ti$c%Ti$f%Ti$j%Ti$l%Ti$q%Ti$s%Ti$u%Ti$w%Ti$z%Ti$|%Ti%s%Ti%y%Ti%{%Ti%}%Ti&m%Ti{%Ti$_%Ti$o%Ti~OW&QXt&QX#^&QX#`&QX#b&QX#c&QX#d&QX#e&QX#f&QX#g&QX#i&QX#m&QX#p&QX&V&QX&W&QX&g&QX&o&QX~O!a*pO#[#dOY&QXZ#WX~P#,OOY&OXp&OX{&OX!O&OX~P7gO|'nO{&rP~P8qOY&OXf%XXg%XX%y%XX%{%XX%}%XXp&OX{&OX!O&OX~Op*sOY&sX~OY*uO~O|'wO{&dP~P8qOp&cX!O&cX{&cXY&cX~P7gO&ZTa~P<^On(QOo(QOpma&Vma~Op(RO&V&Xa~OW*}O~Ov+OO~Ot!kO%ySO%{+SO%}+RO~Of[Og[Ou#]O!t#_O%{!dO%}UO&m#[O~Of[Og[OuyO{+XO!t{O%ySO%{!dO%}UO&mbO~P?^Ov+dO%{RO%}!aO&W!uO~Op(}OY&^a!O&^a~O#^la#`la#bla#cla#dla#ela#fla#gla#ila#mla#pla&Wla#nlarla{la~P>hOn+iOp!eX&V!eX~Op+kO&V&fX~O&V+mO~OW&UXt&UX%y&UX%{&UX%}&UX&W&UX~OZ!`X~P#4OOWhXthX%yhX%{hX%}hX&WhX~OZ!`X~P#4kOf[Og[Ou#]O!t#_O!y#^O&W&[O&m#[O~O%{)WO%})XO~P#5WOf[Og[O%ySO%{)WO%})XO~O|aO!O+wO~OZ+xO~O|+zO!l+}O~O{,PO~P!>wO|aOf&`Xg&`Xu&`X!R&`X!S&`X!T&`X!U&`X!V&`X!W&`X!X&`X!Y&`X![&`X!]&`X!^&`X!t&`X!y&`X%y&`X%{&`X%}&`X&W&`X&m&`X~Op,RO|&kX!O&kX~OZ#eO|&]Op!{X{!{X!O!{X~Op,WO{&lX!O&lX~O{,ZO!O,YO~O&W&[O~P3TOf[Og[OuyO{,_O!O)pO!t{O!yzO%ySO%{!dO%}UO&W&[O&mbO~P?^Or,`O~P7gOr,`O~P8qO|&]OW&]qt&]q!O&]q#^&]q#`&]q#b&]q#c&]q#d&]q#e&]q#f&]q#g&]q#i&]q#m&]q#p&]q&V&]q&W&]q&g&]q&o&]qY&]q#n&]qr&]qp&]q{&]q~O{,dO~P!F`O!V,hO#|,hO%{RO%}!aO~O!O,kO~O$X,lO%{RO%}!aO~O!a$vO#n,nOp!_X!O!_X~O!O,pO~P7gO!O,pO~P8qO!O,sO~P7gO{,uO~P!KoO!Z#yO#n,vO~O!O,xO~O!a,yO~OY,|OZ$UO_TO`TOaTObTOcTOdTOf[Og[Oo}OviOy|O%ySO%{'^O%}']O~P?^OY,|O!O,}O~O%O'gO%S'hOZ%Tq_%Tq`%Tqa%Tqb%Tqc%Tqd%Tqf%Tqg%Tqo%Tqu%Tqv%Tqy%Tq|%Tq!O%Tq!R%Tq!S%Tq!T%Tq!U%Tq!V%Tq!W%Tq!X%Tq!Y%Tq!Z%Tq![%Tq!]%Tq!^%Tq!t%Tq!y%Tq#d%Tq#p%Tq#r%Tq#s%Tq#w%Tq#x%Tq$U%Tq$W%Tq$^%Tq$a%Tq$c%Tq$f%Tq$j%Tq$l%Tq$q%Tq$s%Tq$u%Tq$w%Tq$z%Tq$|%Tq%s%Tq%y%Tq%{%Tq%}%Tq&m%Tq{%Tq$_%Tq$o%Tq~O|'nO~P8qOp-YO{&rX~O{-[O~Op*sOY&sa~Op-`O{&dX~O{-bO~Ov-cO~Op!`Xt!`X!O!`X!a!`X%y!`X~OZ%|X~P#DlOZUX~P#DlO!O-dO~OZ-eO~OW^yZ#WXt^y!O^y!a^y#[^y#^^y#`^y#b^y#c^y#d^y#e^y#f^y#g^y#i^y#m^y#p^y&V^y&W^y&g^y&o^yY^y#n^yr^yp^y{^y~OY%[ap%[a!O%[a~P7gO!O#lyY#ly#n#lyr#lyp#ly{#ly~P7gOn+iOp!ea&V!ea~Op+kO&V&fa~OZ+xO~PCVO!O-rO~O!l+}O|&ea!O&ea~O|aO!O-uO~OZ^O_TO`TOaTObTOcTOdTOf[Og[Oo.TOuyOv.SOy|O{.OO|aO!OtO!Z!^O!t{O!yzO#dnO#pmO#rnO#snO#w!PO#x!OO$U!QO$W!RO$^!SO$a!TO$c!VO$f!UO$j!WO$l!XO$q!YO$s!ZO$u![O$w!]O$z!_O$|!`O%ySO%{QO%}PO&W!uO&mbO~P?^O|+zO~Op,RO|&ka!O&ka~O|&]Op!{a{!{a!O!{a~OZ#eO|&]Op!{a{!{a!O!{a~O%ySO%{!oO%}!oOp%fX{%fX!O%fX~P?^Op,WO{&la!O&la~O{!|X~P!>wO{._O~Or.`O~P7gOW$kO!O.aO~OW$kO$O.fO%{RO%}!aO!O&uP~OW$kO$S.gO~O!O.hO~O!a$vO#n.jOp!_X!O!_X~OY.lO~O!O.mO~P7gO#n.nO~P7gO!a.pO~OY.qOZ$UO_TO`TOaTObTOcTOdTOf[Og[Oo}OviOy|O%ySO%{'^O%}']O~P?^OW!wOt&TX%y&TX%{&TX%}&TX&w&TX~O&W!uO~P$!}Ot!kO%ySO&w.sO%{%QX%}%QX~OY&OXp&OX~P7gO|'nOp%jX{%jX~P8qOp-YO{&ra~O!a.yO~O|'wOp%_X{%_X~P8qOp-`O{&da~OY.|O~O!O.}O~OZ/OO~O&g%cOp!fa&V!fa~Ot!kO%ySO|&ha!O&ha!l&ha~O!O/TO~O!l+}O|&ei!O&ei~O{/YO~P]OW/[O~P3vOZ#eO!O&QX~P#,OOW$POZ#eO&o#cO~Oo/^Ov/^O~O|&]Op!{i{!{i!O!{i~O{!|a~P!>wOW$kO!O/`O~OW$kOp/aO!O&uX~OY/eO~P7gOY/gO~OY%Vq!O%Vq~P7gO&w.sO%{%Qa%}%Qa~OY/lO~Ot!kO!O/oO!Y/pO%ySO~OY/qO~O&g%cOp!fi&V!fi~Ot!kO%ySO|&hi!O&hi!l&hi~O!l+}O|&eq!O&eq~O{/sO~P]Oo/uOv%wOy%uO%{RO%}!aO&W!uO~O!O/vO~Op/aO!O&ua~O!O/zO~OW$kOp/aO!O&vX~OY/|O~P7gOY/}O~OY%Vy!O%Vy~P7gOt!kO%ySO%{%qa%}%qa&w%qa~OY0OO~Ot!kO!O0PO!Y0QO%ySO~Oo0TO%{RO%}!aO~OW(zOZ#eO~O!O0VO~OW$kOp%na!O%na~Op/aO!O&va~O!O0XO~Ot!kO!O0XO!Y0YO%ySO~O!O0[O~O!O0]O~O!O0_O~O!O0`O~O#n%|XY%|Xr%|Xp%|X{%|X~P$tO#nUXYUXrUXpUX{UX~P&xO`#e~",
      goto: "#&b&wPPPP&x']*l-oP']PP.T.X/mPPPPPP1XPP2q5b7{:f;O<sPPP<yP?_PPP@X1XPBQPPB{PCrCxPPPPPPPPPPPPEREjPHpHxISIlIrIxKhKlKlKtPLTMZM|NWPNmMZPNsN}! ^! fP!!T!!_!!eMZ!!h!!nCrCr!!r!!|!#P1X!$k1X1X!&dP.XP!&hP!'XPPPPPP.XP.X!'u.XPP.XP.XPP.X!)Z!)ePP!)k!)tPPPPPPPP&xP&xPP!)x!)x!*]!)xPP!)xP!)xP!*v!*yP!)x!+a!)xP!)xP!+d!+gP!)xP!)xP!)xP!)xP!)x!)xP!)xP!+kP!+q!+t!+zP!)x!,W!,Z!,c!,u!0r!0x!2O!2U!2`!3d!3j!3p!3z!4Q!4W!4^!4d!4j!4p!4v!4|!5S!5Y!5`!5f!5p!5v!6Q!6WPPP!6^!)x!7RP!:dP!;hP!=y!>a!A]1X!By!Fe!ISPP!Km!KpP!My!NP# m# |#!S##S##l#$g#$p#$s#%PP#%S#%`P#%g#%nP#%qP#%zP#%}#&Q#&T#&X#&_srOav!Y#X#w$V$W$Y$Z'T*V*_+z.P.Q/Z'kpOVW^_amnv!W!Y!]!_!e!l!p!u!w!z!{#Q#U#X#Z#b#d#e#i#j#k#l#m#n#o#r#s#t#u#w#}$U$V$W$X$Y$Z$h$l$u$v${$|%R%S%[%]%`%a%c%e%j&V&[&]&^&_&d&g&h&l&m&o&z&{&}'S'T'_'n'w(Q(R(b(f(i(})Q)R)T)Y)[)b)m)n)q)v*V*X*Z*[*_*b*e*f*k*p+V+i+k+n+q+t+u+x+z+},R,W,Y,],n,p,y,}-R-Y-`-q-z-|-}.P.Q.^.j.m.p.r.y.|/S/X/Z/j/n/p/q0Q0S0Y0d#rfO^amnv!W!Y!]!_#X#b#d#e#i#j#k#l#m#n#o#s#w$U$V$W$X$Y$Z$v%e&l&}'S'T'n'w(b(})Q)v*V*Z*[*_*b*p+z,n,p,y-Y-`.P.Q.j.m.p.y/Z/p0Q0Yt!cS!O!Q!R!h!j$T$p*O*P*Q*R,g,i.f.g/a0aQ#YbS%Y!{-|Q%m#[U%r#a$P/[Q%y#cW'a$h*f,}.rU'k$k&u*TQ'l$lS(W%S/XU(w%t+c/tQ(|%zQ+U(fQ+a(zQ-]*sR-g+Vu!cS!O!Q!R!h!j$T$p*O*P*Q*R,g,i.f.g/a0aT$m!b'}#uoO^amnv!W!Y!]!_#X#b#d#e#i#j#k#l#m#n#o#s#w$U$V$W$X$Y$Z$l$v%e&l&}'S'T'n'w(b(})Q)v*V*Z*[*_*b*p+z,n,p,y-Y-`.P.Q.j.m.p.y/Z/p0Q0Y#tjO^amnv!W!Y!]!_#X#b#d#e#i#j#k#l#m#n#o#s#w$U$V$W$X$Y$Z$l$v%e&l&}'S'T'n'w(b(})Q)v*V*Z*[*_*b*p+z,n,p,y-Y-`.P.Q.j.m.p.y/Z/p0Q0YX'b$h*f,}.r#}iO^amnv!W!Y!]!_#X#b#d#e#i#j#k#l#m#n#o#s#w$U$V$W$X$Y$Z$h$l$v%e&l&}'S'T'n'w(b(})Q)v*V*Z*[*_*b*f*p+z,n,p,y,}-Y-`.P.Q.j.m.p.r.y/Z/p0Q0Y%tYOV^acmnv|!W!Y!]!_!u!z!}#Q#X#b#d#e#i#j#k#l#m#n#o#r#s#t#w$O$U$V$W$X$Y$Z$h$l$v${%]%c%e%j%u&]&^&_&g&h&l&z&|&}'S'T'c'n'w(Q(R(b(g(i(})Q)Z)[)b)n)o)q)v*V*Z*[*_*b*f*p+i+u+x+z+},R,Y,n,p,y,}-Y-`-}.P.Q.^.j.m.p.r.y/Z/p0Q0Y0dQ%Q!wQ(U%RV-P*k-T.s%tYOV^acmnv|!W!Y!]!_!u!z!}#Q#X#b#d#e#i#j#k#l#m#n#o#r#s#t#w$O$U$V$W$X$Y$Z$h$l$v${%]%c%e%j%u&]&^&_&g&h&l&z&|&}'S'T'c'n'w(Q(R(b(g(i(})Q)Z)[)b)n)o)q)v*V*Z*[*_*b*f*p+i+u+x+z+},R,Y,n,p,y,}-Y-`-}.P.Q.^.j.m.p.r.y/Z/p0Q0Y0dV-P*k-T.s%tZOV^acmnv|!W!Y!]!_!u!z!}#Q#X#b#d#e#i#j#k#l#m#n#o#r#s#t#w$O$U$V$W$X$Y$Z$h$l$v${%]%c%e%j%u&]&^&_&g&h&l&z&|&}'S'T'c'n'w(Q(R(b(g(i(})Q)Z)[)b)n)o)q)v*V*Z*[*_*b*f*p+i+u+x+z+},R,Y,n,p,y,}-Y-`-}.P.Q.^.j.m.p.r.y/Z/p0Q0Y0dV-Q*k-T.sS!vY-PS$O|%uS%t#a$PQ%z#cQ+c(zQ.U+zR/t/[$eXO^amnv!W!Y!]!_!u#X#b#d#e#i#j#k#l#m#n#o#r#s#w$U$V$W$X$Y$Z$h$l$v%c%e&^&_&h&l&}'S'T'n'w(Q(R(b(})Q)v*V*Z*[*_*b*f*p+i+z+},R,n,p,y,}-Y-`.P.Q.j.m.p.r.y/Z/p0Q0YQ%O!uR*{(R%u]OV^acmnv!W!Y!]!_!u!z!}#Q#X#b#d#e#i#j#k#l#m#n#o#r#s#t#w$U$V$W$X$Y$Z$h$l$v${%]%c%e%j&]&^&_&g&h&l&z&|&}'S'T'c'n'w(Q(R(b(g(i(})Q)Z)[)b)n)o)q)v*V*Z*[*_*b*f*k*p+i+u+x+z+},R,Y,n,p,y,}-T-Y-`-}.P.Q.^.j.m.p.r.s.y/Z/p0Q0Y0d!o!mW!e!n!p!{#Z#u$n$u$|%S%[%`&V&{'_(f)R)Y)m*X*e+V+n+q+t,]-R-q-z-|.|/S/X/j/n/q0S#|iO^amnv!W!Y!]!_#X#b#d#e#i#j#k#l#m#n#o#s#w$U$V$W$X$Y$Z$h$l$v%e&l&}'S'T'n'w(b(})Q)v*V*Z*[*_*b*f*p+z,n,p,y,}-Y-`.P.Q.j.m.p.r.y/Z/p0Q0YQ$V!SQ$W!TQ$]!XQ$f!^R*c'VQ#fgS&p#}(yQ(v%sQ)z&qQ+`(xQ,U)iQ-k+bQ.Z,VQ/Q-lS/].S.TQ/w/^Q0U/uR0Z0TQ&`#zW(m%n&a&b&cQ)y&pU+Y(n(o(pQ,T)iQ,b)zS-h+Z+[S.Y,U,VQ/P-iR/_.ZX)`&])b,Y.^rcOav!Y#X#w$V$W$Y$Z'T*V*_+z.P.Q/ZW!}^#Q%]+xQ&|$XW'c$h*f,}.rS(g%j(iW)Z&])b,Y.^S)j&d,WS)o&g)qR-T*kh!rW!U#Z#`&{(f)Y)m*X+V+q,]Q'{$wQ(X%WR+P([#rlOamnv!W!Y!]!_#X#b#d#e#i#j#k#l#m#n#o#s#w$U$V$W$X$Y$Z$l$v%e&l&}'S'T'n'w(b(})Q)v*V*Z*[*_*b*p+z,n,p,y-Y-`.P.Q.j.m.p.y/Z/p0Q0Yv!pW!U!{#Z#`$w%W%[%`&{'_([(f*X*e+V-S-|.vQ#S^Q#zyQ#{zQ#|{Q%n#]Q%o#^Q%p#_Q(d%fS)S&[+kY)^&])Z)b,Y.^S)i&d,WQ+j)TW+n)Y)m+q,]Q+v)[Q,V)jT-x+t-zU'y$v'w-`R)x&oW)`&])b,Y.^T)p&g)qQ&c#zQ&k#|Q(p%nQ(u%pY)[&])Z)b,Y.^V)n&g)o)qQ)U&[R-o+kQ+h)SR-n+j#tlO^amnv!W!Y!]!_#X#b#d#e#i#j#k#l#m#n#o#s#w$U$V$W$X$Y$Z$l$v%e&l&}'S'T'n'w(b(})Q)v*V*Z*[*_*b*p+z,n,p,y-Y-`.P.Q.j.m.p.y/Z/p0Q0YQ+y)^S-q+n-xR-{+vT#Q^+xU#O^#Q+xR(]%]Q+|)_Q-s+pQ-w+sQ/V-yR/r/WrtOav!Y#X#w$V$W$Y$Z'T*V*_+z.P.Q/ZQ$i!`Q&Y#sQ'Z$fQ'j$jW)`&])b,Y.^Q*m'hQ+w)]Q,Q)dQ-U*lR-u+rrrOav!Y#X#w$V$W$Y$Z'T*V*_+z.P.Q/ZS(h%j(iW)`&])b,Y.^T)p&g)qQ&b#zS(o%n&cR+[(pQ&a#zQ&f#{U(n%n&b&cQ(r%oS+Z(o(pR-i+[Q)h&_R)s&hQ&j#|S(t%p&kR+_(uQ&i#|U(s%p&j&kS+^(t(uR-j+_S(h%j(iT)p&g)qrrOav!Y#X#w$V$W$Y$Z'T*V*_+z.P.Q/ZW)`&])b,Y.^T)p&g)qQ&e#{S(q%o&fR+](rQ)k&dR.[,WR,[)lQ%k#YR(l%mT(h%j(iQ+{)_S-v+s+|R/U-wR.Q+zWi$h*f,}.r#ujO^amnv!W!Y!]!_#X#b#d#e#i#j#k#l#m#n#o#s#w$U$V$W$X$Y$Z$l$v%e&l&}'S'T'n'w(b(})Q)v*V*Z*[*_*b*p+z,n,p,y-Y-`.P.Q.j.m.p.y/Z/p0Q0Y#|gO^amnv!W!Y!]!_#X#b#d#e#i#j#k#l#m#n#o#s#w$U$V$W$X$Y$Z$h$l$v%e&l&}'S'T'n'w(b(})Q)v*V*Z*[*_*b*f*p+z,n,p,y,}-Y-`.P.Q.j.m.p.r.y/Z/p0Q0YU%s#a$P/[S(x%t/tQ+b(zR-l+cT&n#}&o!]#ik!|$[$d$g%x%{%|&P&Q&R&S&U&X'm'x)u*Y*]+e+g,a,r,w-W.i.o/f/i!V#jk!|$[$d$g%x%{%|&Q&U&X'm'x)u*Y*]+e+g,a,r,w-W.i.o/f/i#ulO^amnv!W!Y!]!_#X#b#d#e#i#j#k#l#m#n#o#s#w$U$V$W$X$Y$Z$l$v%e&l&}'S'T'n'w(b(})Q)v*V*Z*[*_*b*p+z,n,p,y-Y-`.P.Q.j.m.p.y/Z/p0Q0Ya'o$l'n*p-Y.y/p0Q0YQ'q$lR-^*sQ&s$QQ's$oR*v'tT){&r)|stOav!Y#X#w$V$W$Y$Z'T*V*_+z.P.Q/ZrsOav!Y#X#w$V$W$Y$Z'T*V*_+z.P.Q/ZQ$a!ZR$c![R$Y!VrtOav!Y#X#w$V$W$Y$Z'T*V*_+z.P.Q/ZR&}$XR$Z!VR'U$]T*^'T*_X'e$i'f'j*nR*l'gQ-S*kR.v-TQ'i$iQ*j'fQ*o'jR-V*nR$j!`Q'd$hV,{*f,}.rQvOQ#XaW#xv#X.P/ZQ.P+zR/Z.QrVOav!Y#X#w$V$W$Y$Z'T*V*_+z.P.Q/Zl!gV!l!z#U#t${%R%a&m&z)T+u-}0d!j!lW!e!p!{#Z#u$u$|%S%[%`&V&{'_(f)R)Y)m*X*e+V+n+q+t,]-R-q-z-|.|/S/X/j/n/q0SQ!z^Q#U_#^#tmn!W!]!_#b#d#e#i#j#k#l#m#n#o#s$U$l$v%c%e&^&_&h&l&}'S'n'w(Q(b(})Q)v*Z*[*b*p+i+},R,n,p,y-Y-`.j.m.p.y/p0Q0YS${!u(RQ%R!wj%a#Q%]%j&]&d&g(i)b)q*k,W,Y.^S&m#}&oY&z$X$h*f,}.rS)T&[+kS+u)[)nQ-}+xR0d#rQ(S%OR*|(S^!nW!{#u&V&{'_)Rx$n!e#Z$|%S%[%`(f)Y)m*X*e+V+q+t,]-R-z-|/X/j[$t!n$n$u/S/n0SS$u!p+nQ/S-qQ/n.|R0S/qQ)O%|R+f)OQ)b&]S,O)b.^R.^,Y!l`O^av!Y#Q#X#w$V$W$X$Y$Z$h%]%j&]&d&g'T(i)b)q*V*_*f*k+x+z,W,Y,}.P.Q.^.r/ZY!fV!z%a&z-}T#V`!fQ-a*wR.{-aQ$x!rR'|$xQ%d#RS(a%d/RR/R-mQ+l)UR-p+lQ%^#OR(^%^Q,S)fR.X,SQ)q&gR,^)qQ,X)kR.],XQ(i%jR+W(iQ&o#}R)w&oQ%g#SR(e%gQ-Z*qR.x-ZQ*t'qR-_*tQ)|&rR,c)|Q,g*OR.c,gQ/b.dS/y/b/{R/{/dQ*_'TR,t*_Q'f$iS*i'f*nR*n'jQ.t-RR/k.tQ*g'dR-O*g`uOav#X+z.P.Q/ZQ$^!YQ&Z#wQ&x$VQ&y$WQ'P$YQ'Q$ZS*^'T*_R,m*V'YqOVW^_amnv!W!Y!]!_!e!l!p!u!w!z!{#Q#U#X#Z#b#d#e#i#j#k#l#m#n#o#r#s#t#u#w#}$U$V$W$X$Y$Z$h$u$v${$|%R%S%[%]%`%a%c%e%j&V&[&]&^&_&d&g&h&l&m&o&z&{&}'S'T'_'w(Q(R(b(f(i(})Q)R)T)Y)[)b)m)n)q)v*V*X*Z*[*_*b*e*f*k+V+i+k+n+q+t+u+x+z+},R,W,Y,],n,p,y,}-R-`-q-z-|-}.P.Q.^.j.m.p.r.|/S/X/Z/j/n/q0S0da'p$l'n*p-Y.y/p0Q0YQ!bSQ$Q!OQ$R!QQ$S!RQ$o!hQ$q!jQ&w$TQ't$pQ'}0aS,e*O*QQ,i*PQ,j*RQ.b,gS.d,i.fQ/d.gR/x/a%oROS^abmnv!O!Q!R!W!Y!]!_!h!j!{#X#[#a#b#c#d#e#i#j#k#l#m#n#o#s#w$P$T$U$V$W$X$Y$Z$h$k$l$p$v%S%e%t%z&l&u&}'S'T'n'w(b(f(z(})Q)v*O*P*Q*R*T*V*Z*[*_*b*f*p*s+V+c+z,g,i,n,p,y,}-Y-`-|.P.Q.f.g.j.m.p.r.y/X/Z/[/a/p/t0Q0Y0aQ'r$lQ*q'nS-X*p.yQ.w-YQ0R/pQ0W0QR0^0YrkOav!Y#X#w$V$W$Y$Z'T*V*_+z.P.Q/ZS!|^$UQ#pmQ#vnQ$[!WQ$d!]Q$g!_Q%x#bQ%{#dY%|#e$X*Z,p.mQ&O#iQ&P#jQ&Q#kQ&R#lQ&S#mQ&T#nQ&U#oQ&X#s^'m$l'n-Y.y/p0Q0YU'x$v'w-`Q(c%eQ)u&lQ*Y&}Q*]'SQ+Q(bQ+e(}Q+g)QQ,a)vQ,r*[Q,w*bQ-W*pQ.i,nQ.o,yQ/f.jR/i.p#reO^amnv!W!Y!]!_#X#b#d#e#i#j#k#l#m#n#o#s#w$U$V$W$X$Y$Z$l$v%e&l&}'S'T'n'w(b(})Q)v*V*Z*[*_*b*p,n,p,y-Y-`.P.Q.j.m.p.y/Z/p0Q0YW'`$h*f,}.rR.R+zrWOav!Y#X#w$V$W$Y$Z'T*V*_+z.P.Q/ZW!eV#t${&zQ!{^Q#Zc!|#umn!W!]!_#b#d#e#i#j#k#l#m#n#o#s$U$l$v%e&l&}'S'n'w(b(})Q)v*Z*[*b*p,n,p,y-Y-`.j.m.p.y/p0Q0Yd$|!u%c&^&_&h(Q(R+i+},RQ%S!zQ%[!}S%`#Q%]Q&V#rQ&{$XW'_$h*f,}.rS(f%j(iQ)R0dW)Y&])b,Y.^S)m&g)qQ*X&|Q*e'cQ+V(gQ+q)ZS+t)[)nQ,])oS-R*k-TQ-z+uQ-|+xQ/X-}R/j.s%t]OV^acmnv!W!Y!]!_!u!z!}#Q#X#b#d#e#i#j#k#l#m#n#o#r#s#t#w$U$V$W$X$Y$Z$h$l$v${%]%c%e%j&]&^&_&g&h&l&z&|&}'S'T'c'n'w(Q(R(b(g(i(})Q)Z)[)b)n)o)q)v*V*Z*[*_*b*f*k*p+i+u+x+z+},R,Y,n,p,y,}-T-Y-`-}.P.Q.^.j.m.p.r.s.y/Z/p0Q0Y0dQ#}|Q&q$OR(y%u&PUOV^acmnv|!W!Y!]!_!u!w!z!}#Q#X#b#d#e#i#j#k#l#m#n#o#r#s#t#w$O$U$V$W$X$Y$Z$h$l$v${%R%]%c%e%j%u&]&^&_&g&h&l&z&|&}'S'T'c'n'w(Q(R(b(g(i(})Q)Z)[)b)n)o)q)v*V*Z*[*_*b*f*k*p+i+u+x+z+},R,Y,n,p,y,}-T-Y-`-}.P.Q.^.j.m.p.r.s.y/Z/p0Q0Y0dR%P!u#zhOamnv!W!Y!]!_#X#b#d#e#i#j#k#l#m#n#o#s#w$U$V$W$X$Y$Z$h$l$v%e&l&}'S'T'n'w(b(})Q)v*V*Z*[*_*b*f*p+z,n,p,y,}-Y-`.P.Q.j.m.p.r.y/Z/p0Q0YQ#R^Q%O!uQ&W#rQ(`%cQ)e&^U)f&_&h+}Q*z(QQ*{(RQ-m+iR.W,RQ(P$}R*y(O#|dO^amnv!W!Y!]!_#X#b#d#e#i#j#k#l#m#n#o#s#w$U$V$W$X$Y$Z$h$l$v%e&l&}'S'T'n'w(b(})Q)v*V*Z*[*_*b*f*p+z,n,p,y,}-Y-`.P.Q.j.m.p.r.y/Z/p0Q0YT%q#a/[Q%}#eQ'O$XQ,q*ZQ.k,pR/h.mX)a&])b,Y.^!{_OV^`av!Y!f!z#Q#X#w$V$W$X$Y$Z$h%]%a%j&]&d&g&z'T(i)b)q*V*_*f*k+x+z,W,Y,}-}.P.Q.^.r/ZU!sW!U&{U%l#Z#`*XS+T(f)mQ+o)YS-f+V,]R-t+qj!qW!U#Z#`$w%W([(f)Y)m+V+q,]U%V!{%`-|Q(Z%[Q*W&{Q*d'_Q,o*XQ,z*eQ.u-SR/m.vQ'z$vQ*w'wR.z-`R*x'w[)]&]&g)b)q,Y.^T+r)Z)oR)V&[W+p)Y)m+q,]Q-y+tR/W-zS#P^+xR%b#QS)g&_&hR.V+}R)l&dW)_&])b,Y.^R+s)ZR#T^R*r'nR'r$lT,f*O,gQ.e,iR/c.fR/c.g",
      nodeNames: "⚠ LineComment BlockComment Program ModuleDeclaration MarkerAnnotation Identifier ScopedIdentifier . Annotation ) ( AnnotationArgumentList AssignmentExpression FieldAccess IntegerLiteral FloatingPointLiteral BooleanLiteral CharacterLiteral StringLiteral null ClassLiteral void PrimitiveType TypeName ScopedTypeName GenericType TypeArguments AnnotatedType Wildcard extends super , ArrayType ] Dimension [ class this ParenthesizedExpression ObjectCreationExpression new ArgumentList } { ClassBody ; FieldDeclaration Modifiers public protected private abstract static final strictfp default synchronized native transient volatile VariableDeclarator Definition AssignOp ArrayInitializer MethodDeclaration TypeParameters TypeParameter TypeBound FormalParameters ReceiverParameter FormalParameter SpreadParameter Throws throws Block ClassDeclaration Superclass SuperInterfaces implements InterfaceTypeList InterfaceDeclaration interface ExtendsInterfaces InterfaceBody ConstantDeclaration EnumDeclaration enum EnumBody EnumConstant EnumBodyDeclarations AnnotationTypeDeclaration AnnotationTypeBody AnnotationTypeElementDeclaration StaticInitializer ConstructorDeclaration ConstructorBody ExplicitConstructorInvocation ArrayAccess MethodInvocation MethodName MethodReference ArrayCreationExpression Dimension AssignOp BinaryExpression CompareOp CompareOp LogicOp BitOp BitOp LogicOp ArithOp ArithOp ArithOp BitOp InstanceofExpression instanceof LambdaExpression InferredParameters TernaryExpression LogicOp : UpdateExpression UpdateOp UnaryExpression LogicOp BitOp CastExpression ElementValueArrayInitializer ElementValuePair open module ModuleBody ModuleDirective requires transitive exports to opens uses provides with PackageDeclaration package ImportDeclaration import Asterisk ExpressionStatement LabeledStatement Label IfStatement if else WhileStatement while ForStatement for ForSpec LocalVariableDeclaration var EnhancedForStatement ForSpec AssertStatement assert SwitchStatement switch SwitchBlock SwitchLabel case DoStatement do BreakStatement break ContinueStatement continue ReturnStatement return SynchronizedStatement ThrowStatement throw TryStatement try CatchClause catch CatchFormalParameter CatchType FinallyClause finally TryWithResourcesStatement ResourceSpecification Resource",
      maxTerm: 269,
      nodeProps: [
        [NodeProp.group, -26,4,46,75,76,81,86,91,143,145,148,149,151,154,156,159,161,163,165,170,172,174,176,178,179,181,189,"Statement",-24,6,13,14,15,16,17,18,19,20,21,38,39,40,98,99,101,102,105,116,118,120,123,125,128,"Expression",-7,22,23,24,25,26,28,33,"Type"],
        [NodeProp.openedBy, 10,"(",43,"{"],
        [NodeProp.closedBy, 11,")",44,"}"]
      ],
      skippedNodes: [0,1,2],
      repeatNodeCount: 27,
      tokenData: "7q~R{X^#xpq#xqr$mrs$ztu%ruv&Wvw&ewx&uxy(Pyz(Uz{(Z{|(e|}(u}!O(z!O!P)_!P!Q+j!Q!R,x!R![.n![!]3Z!]!^3h!^!_3m!_!`4Q!`!a4Y!a!b4p!b!c4w!c!}6W!}#O6l#P#Q6q#Q#R6v#R#S%r#T#o%r#o#p7O#p#q7T#q#r7g#r#s7l#y#z#x$f$g#x#BY#BZ#x$IS$I_#x$I|$JO#x$JT$JU#x$KV$KW#x&FU&FV#x~#}Y%u~X^#xpq#x#y#z#x$f$g#x#BY#BZ#x$IS$I_#x$I|$JO#x$JT$JU#x$KV$KW#x&FU&FV#xR$rP#rP!_!`$uQ$zO#^Q~$}UOY$zZr$zrs%as#O$z#O#P%f#P~$z~%fOc~~%iROY$zYZ$zZ~$z~%wT%{~tu%r!Q![%r!c!}%r#R#S%r#T#o%r~&]P#f~!_!`&`Q&eO#[Q~&jQ&g~vw&p!_!`&`~&uO#`~~&xTOY'XZw'Xx#O'X#O#P's#P~'X~'[UOY'XZw'Xwx'nx#O'X#O#P's#P~'X~'sOb~~'vROY'XYZ'XZ~'X~(UOZ~~(ZOY~R(bP$XP#eQ!_!`&`~(jQ#d~{|(p!_!`&`~(uO#p~~(zOp~~)PR#d~}!O(p!_!`&`!`!a)Y~)_O&q~~)dQWU!O!P)j!Q![)u~)mP!O!P)p~)uO&j~P)zW`P!Q![)u!f!g*d!g!h*i!h!i*d#R#S+d#W#X*d#X#Y*i#Y#Z*dP*iO`PP*lR{|*u}!O*u!Q![*{P*xP!Q![*{P+QU`P!Q![*{!f!g*d!h!i*d#R#S*u#W#X*d#Y#Z*dP+gP!Q![)u~+oR#eQz{+x!P!Q,m!_!`&`~+{ROz+xz{,U{~+x~,XTOz+xz{,U{!P+x!P!Q,h!Q~+x~,mOQ~~,rQP~OY,mZ~,m~,}a_~!O!P.S!Q![.n!d!e/q!f!g*d!g!h*i!h!i*d!n!o/f!q!r0`!z!{0w#R#S/k#U#V/q#W#X*d#X#Y*i#Y#Z*d#`#a/f#c#d0`#l#m0wP.XV`P!Q![)u!f!g*d!g!h*i!h!i*d#W#X*d#X#Y*i#Y#Z*d~.sZ_~!O!P.S!Q![.n!f!g*d!g!h*i!h!i*d!n!o/f#R#S/k#W#X*d#X#Y*i#Y#Z*d#`#a/f~/kO_~~/nP!Q![.n~/tQ!Q!R/z!R!S/z~0PT_~!Q!R/z!R!S/z!n!o/f#R#S/q#`#a/f~0cP!Q!Y0f~0kS_~!Q!Y0f!n!o/f#R#S0`#`#a/f~0zS!O!P1W!Q![1y!c!i1y#T#Z1yP1ZR!Q![1d!c!i1d#T#Z1dP1gU!Q![1d!c!i1d!r!s*i#R#S1W#T#Z1d#d#e*i~2OX_~!O!P2k!Q![1y!c!i1y!n!o/f!r!s*i#R#S2}#T#Z1y#`#a/f#d#e*iP2nT!Q![1d!c!i1d!r!s*i#T#Z1d#d#e*i~3QR!Q![1y!c!i1y#T#Z1y~3`P#n~![!]3c~3hO&o~~3mO!O~~3rQ&W~!^!_3x!_!`$u~3}P#g~!_!`&`~4VP!a~!_!`$u~4_Q&V~!_!`$u!`!a4e~4jQ#g~!_!`&`!`!a3xV4wO&ZT#mQ~4|P%y~#]#^5P~5SP#b#c5V~5YP#h#i5]~5`P#X#Y5c~5fP#f#g5i~5lP#Y#Z5o~5rP#T#U5u~5xP#V#W5{~6OP#X#Y6R~6WO&m~~6]T%}~tu6W!Q![6W!c!}6W#R#S6W#T#o6W~6qOt~~6vOr~Q6{P#bQ!_!`&`~7TO|~V7[Q&wT#bQ!_!`&`#p#q7bQ7gO#cQ~7lO{~~7qO#s~",
      tokenizers: [0, 1, 2],
      topRules: {"Program":[0,3]},
      dynamicPrecedences: {"26":1,"228":-1,"236":-1},
      specialized: [{term: 227, get: value => spec_identifier$2[value] || -1}],
      tokenPrec: 7012
    });

    /**
    A language provider based on the [Lezer Java
    parser](https://github.com/lezer-parser/java), extended with
    highlighting and indentation information.
    */
    const javaLanguage = /*@__PURE__*/LRLanguage.define({
        parser: /*@__PURE__*/parser$4.configure({
            props: [
                /*@__PURE__*/indentNodeProp.add({
                    IfStatement: /*@__PURE__*/continuedIndent({ except: /^\s*({|else\b)/ }),
                    TryStatement: /*@__PURE__*/continuedIndent({ except: /^\s*({|catch|finally)\b/ }),
                    LabeledStatement: flatIndent,
                    SwitchBlock: context => {
                        let after = context.textAfter, closed = /^\s*\}/.test(after), isCase = /^\s*(case|default)\b/.test(after);
                        return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;
                    },
                    BlockComment: () => -1,
                    Statement: /*@__PURE__*/continuedIndent({ except: /^{/ })
                }),
                /*@__PURE__*/foldNodeProp.add({
                    ["Block SwitchBlock ClassBody ElementValueArrayInitializer ModuleBody EnumBody " +
                        "ConstructorBody InterfaceBody ArrayInitializer"]: foldInside$1,
                    BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }
                }),
                /*@__PURE__*/styleTags({
                    null: tags$1.null,
                    instanceof: tags$1.operatorKeyword,
                    this: tags$1.self,
                    "new super assert open to with void": tags$1.keyword,
                    "class interface extends implements module package import enum": tags$1.definitionKeyword,
                    "switch while for if else case default do break continue return try catch finally throw": tags$1.controlKeyword,
                    ["requires exports opens uses provides public private protected static transitive abstract final " +
                        "strictfp synchronized native transient volatile throws"]: tags$1.modifier,
                    IntegerLiteral: tags$1.integer,
                    FloatLiteral: tags$1.float,
                    StringLiteral: tags$1.string,
                    CharacterLiteral: tags$1.character,
                    LineComment: tags$1.lineComment,
                    BlockComment: tags$1.blockComment,
                    BooleanLiteral: tags$1.bool,
                    PrimitiveType: /*@__PURE__*/tags$1.standard(tags$1.typeName),
                    TypeName: tags$1.typeName,
                    Identifier: tags$1.variableName,
                    "MethodName/Identifier": /*@__PURE__*/tags$1.function(tags$1.variableName),
                    Definition: /*@__PURE__*/tags$1.definition(tags$1.variableName),
                    ArithOp: tags$1.arithmeticOperator,
                    LogicOp: tags$1.logicOperator,
                    BitOp: tags$1.bitwiseOperator,
                    CompareOp: tags$1.compareOperator,
                    AssignOp: tags$1.definitionOperator,
                    UpdateOp: tags$1.updateOperator,
                    Asterisk: tags$1.punctuation,
                    Label: tags$1.labelName,
                    "( )": tags$1.paren,
                    "[ ]": tags$1.squareBracket,
                    "{ }": tags$1.brace,
                    ".": tags$1.derefOperator,
                    ", ;": tags$1.separator
                })
            ]
        }),
        languageData: {
            commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
            indentOnInput: /^\s*(?:case |default:|\{|\})$/
        }
    });
    /**
    Java language support.
    */
    function java$1() {
        return new LanguageSupport(javaLanguage);
    }

    var index$4 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        java: java$1,
        javaLanguage: javaLanguage
    });

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const parser$3 = LRParser.deserialize({
      version: 13,
      states: "$bOVQPOOOOQO'#Cb'#CbOnQPO'#CeOvQPO'#CjOOQO'#Cp'#CpQOQPOOOOQO'#Cg'#CgO}QPO'#CfO!SQPO'#CrOOQO,59P,59PO![QPO,59PO!aQPO'#CuOOQO,59U,59UO!iQPO,59UOVQPO,59QOqQPO'#CkO!nQPO,59^OOQO1G.k1G.kOVQPO'#ClO!vQPO,59aOOQO1G.p1G.pOOQO1G.l1G.lOOQO,59V,59VOOQO-E6i-E6iOOQO,59W,59WOOQO-E6j-E6j",
      stateData: "#O~OcOS~OQSORSOSSOTSOWQO]ROePO~OVXOeUO~O[[O~PVOg^O~Oh_OVfX~OVaO~OhbO[iX~O[dO~Oh_OVfa~OhbO[ia~O",
      goto: "!kjPPPPPPkPPkqwPPk{!RPPP!XP!ePP!hXSOR^bQWQRf_TVQ_Q`WRg`QcZRicQTOQZRQe^RhbRYQR]R",
      nodeNames: "⚠ JsonText True False Null Number String } { Object Property PropertyName ] [ Array",
      maxTerm: 25,
      nodeProps: [
        [NodeProp.openedBy, 7,"{",12,"["],
        [NodeProp.closedBy, 8,"}",13,"]"]
      ],
      skippedNodes: [0],
      repeatNodeCount: 2,
      tokenData: "(p~RaXY!WYZ!W]^!Wpq!Wrs!]|}$i}!O$n!Q!R$w!R![&V![!]&h!}#O&m#P#Q&r#Y#Z&w#b#c'f#h#i'}#o#p(f#q#r(k~!]Oc~~!`Upq!]qr!]rs!rs#O!]#O#P!w#P~!]~!wOe~~!zXrs!]!P!Q!]#O#P!]#U#V!]#Y#Z!]#b#c!]#f#g!]#h#i!]#i#j#g~#jR!Q![#s!c!i#s#T#Z#s~#vR!Q![$P!c!i$P#T#Z$P~$SR!Q![$]!c!i$]#T#Z$]~$`R!Q![!]!c!i!]#T#Z!]~$nOh~~$qQ!Q!R$w!R![&V~$|RT~!O!P%V!g!h%k#X#Y%k~%YP!Q![%]~%bRT~!Q![%]!g!h%k#X#Y%k~%nR{|%w}!O%w!Q![%}~%zP!Q![%}~&SPT~!Q![%}~&[ST~!O!P%V!Q![&V!g!h%k#X#Y%k~&mOg~~&rO]~~&wO[~~&zP#T#U&}~'QP#`#a'T~'WP#g#h'Z~'^P#X#Y'a~'fOR~~'iP#i#j'l~'oP#`#a'r~'uP#`#a'x~'}OS~~(QP#f#g(T~(WP#i#j(Z~(^P#X#Y(a~(fOQ~~(kOW~~(pOV~",
      tokenizers: [0],
      topRules: {"JsonText":[0,1]},
      tokenPrec: 0
    });

    /**
    Calls
    [`JSON.parse`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse)
    on the document and, if that throws an error, reports it as a
    single diagnostic.
    */
    const jsonParseLinter = () => (view) => {
        try {
            JSON.parse(view.state.doc.toString());
        }
        catch (e) {
            if (!(e instanceof SyntaxError))
                throw e;
            const pos = getErrorPosition(e, view.state.doc);
            return [{
                    from: pos,
                    message: e.message,
                    severity: 'error',
                    to: pos
                }];
        }
        return [];
    };
    function getErrorPosition(error, doc) {
        let m;
        if (m = error.message.match(/at position (\d+)/))
            return Math.min(+m[1], doc.length);
        if (m = error.message.match(/at line (\d+) column (\d+)/))
            return Math.min(doc.line(+m[1]).from + (+m[2]) - 1, doc.length);
        return 0;
    }

    /**
    A language provider that provides JSON parsing.
    */
    const jsonLanguage = /*@__PURE__*/LRLanguage.define({
        parser: /*@__PURE__*/parser$3.configure({
            props: [
                /*@__PURE__*/indentNodeProp.add({
                    Object: /*@__PURE__*/continuedIndent({ except: /^\s*\}/ }),
                    Array: /*@__PURE__*/continuedIndent({ except: /^\s*\]/ })
                }),
                /*@__PURE__*/foldNodeProp.add({
                    "Object Array": foldInside$1
                }),
                /*@__PURE__*/styleTags({
                    String: tags$1.string,
                    Number: tags$1.number,
                    "True False": tags$1.bool,
                    PropertyName: tags$1.propertyName,
                    null: tags$1.null,
                    ",": tags$1.separator,
                    "[ ]": tags$1.squareBracket,
                    "{ }": tags$1.brace
                })
            ]
        }),
        languageData: {
            closeBrackets: { brackets: ["[", "{", '"'] },
            indentOnInput: /^\s*[\}\]]$/
        }
    });
    /**
    JSON language support.
    */
    function json$1() {
        return new LanguageSupport(jsonLanguage);
    }

    var index$3 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        json: json$1,
        jsonLanguage: jsonLanguage,
        jsonParseLinter: jsonParseLinter
    });

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const printKeyword = 1,
      indent$2 = 162,
      dedent$2 = 163,
      newline$1 = 164,
      newlineBracketed = 165,
      newlineEmpty = 166,
      eof = 167,
      ParenthesizedExpression = 21,
      ParenL = 22,
      TupleExpression = 47,
      ComprehensionExpression = 48,
      ArrayExpression = 52,
      BracketL = 53,
      ArrayComprehensionExpression = 55,
      DictionaryExpression = 56,
      BraceL = 57,
      DictionaryComprehensionExpression = 59,
      SetExpression = 60,
      SetComprehensionExpression = 61,
      ArgList = 63,
      subscript = 203,
      FormatReplacement = 71,
      importList = 228,
      ParamList = 121;

    const newline = 10, carriageReturn = 13, space = 32, tab = 9, hash = 35, parenOpen = 40, dot = 46;

    const bracketed$1 = [
      ParenthesizedExpression, TupleExpression, ComprehensionExpression, importList, ArgList, ParamList,
      ArrayExpression, ArrayComprehensionExpression, subscript,
      SetExpression, SetComprehensionExpression,
      DictionaryExpression, DictionaryComprehensionExpression, FormatReplacement
    ];

    const newlines = new ExternalTokenizer((input, stack) => {
      if (input.next < 0) {
        input.acceptToken(eof);
      } else if (input.next != newline && input.next != carriageReturn) ; else if (stack.context.depth < 0) {
        input.acceptToken(newlineBracketed, 1);
      } else {
        input.advance();
        let spaces = 0;
        while (input.next == space || input.next == tab) { input.advance(); spaces++; }
        let empty = input.next == newline || input.next == carriageReturn || input.next == hash;
        input.acceptToken(empty ? newlineEmpty : newline$1, -spaces);
      }
    }, {contextual: true, fallback: true});

    const indentation = new ExternalTokenizer((input, stack) => {
      let cDepth = stack.context.depth;
      if (cDepth < 0) return
      let prev = input.peek(-1);
      if ((prev == newline || prev == carriageReturn) && stack.context.depth >= 0) {
        let depth = 0, chars = 0;
        for (;;) {
          if (input.next == space) depth++;
          else if (input.next == tab) depth += 8 - (depth % 8);
          else break
          input.advance();
          chars++;
        }
        if (depth != cDepth &&
            input.next != newline && input.next != carriageReturn && input.next != hash) {
          if (depth < cDepth) input.acceptToken(dedent$2, -chars);
          else input.acceptToken(indent$2);
        }
      }
    });

    function IndentLevel(parent, depth) {
      this.parent = parent;
      // -1 means this is not an actual indent level but a set of brackets
      this.depth = depth;
      this.hash = (parent ? parent.hash + parent.hash << 8 : 0) + depth + (depth << 4);
    }

    const topIndent = new IndentLevel(null, 0);

    const trackIndent = new ContextTracker({
      start: topIndent,
      reduce(context, term) {
        return context.depth < 0 && bracketed$1.indexOf(term) > -1 ? context.parent : context
      },
      shift(context, term, stack, input) {
        if (term == indent$2) return new IndentLevel(context, stack.pos - input.pos)
        if (term == dedent$2) return context.parent
        if (term == ParenL || term == BracketL || term == BraceL) return new IndentLevel(context, -1)
        return context
      },
      hash(context) { return context.hash }
    });

    const legacyPrint = new ExternalTokenizer(input => {
      for (let i = 0; i < 5; i++) {
        if (input.next != "print".charCodeAt(i)) return
        input.advance();
      }
      if (/\w/.test(String.fromCharCode(input.next))) return
      for (let off = 0;; off++) {
        let next = input.peek(off);
        if (next == space || next == tab) continue
        if (next != parenOpen && next != dot && next != newline && next != carriageReturn && next != hash)
          input.acceptToken(printKeyword);
        return
      }
    });

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const spec_identifier$1 = {__proto__:null,await:40, or:48, and:50, in:54, not:56, is:58, if:64, else:66, lambda:70, yield:88, from:90, async:98, for:100, None:152, True:154, False:154, del:168, pass:172, break:176, continue:180, return:184, raise:192, import:196, as:198, global:202, nonlocal:204, assert:208, elif:218, while:222, try:228, except:230, finally:232, with:236, def:240, class:250};
    const parser$2 = LRParser.deserialize({
      version: 13,
      states: "!?pO`Q$IXOOO%cQ$I[O'#GaOOQ$IS'#Cm'#CmOOQ$IS'#Cn'#CnO'RQ$IWO'#ClO(tQ$I[O'#G`OOQ$IS'#Ga'#GaOOQ$IS'#DR'#DROOQ$IS'#G`'#G`O)bQ$IWO'#CqO)rQ$IWO'#DbO*SQ$IWO'#DfOOQ$IS'#Ds'#DsO*gO`O'#DsO*oOpO'#DsO*wO!bO'#DtO+SO#tO'#DtO+_O&jO'#DtO+jO,UO'#DtO-lQ$I[O'#GQOOQ$IS'#GQ'#GQO'RQ$IWO'#GPO/OQ$I[O'#GPOOQ$IS'#E]'#E]O/gQ$IWO'#E^OOQ$IS'#GO'#GOO/qQ$IWO'#F}OOQ$IV'#F}'#F}O/|Q$IWO'#FPOOQ$IS'#Fr'#FrO0RQ$IWO'#FOOOQ$IV'#H]'#H]OOQ$IV'#F|'#F|OOQ$IT'#FR'#FRQ`Q$IXOOO'RQ$IWO'#CoO0aQ$IWO'#CzO0hQ$IWO'#DOO0vQ$IWO'#GeO1WQ$I[O'#EQO'RQ$IWO'#EROOQ$IS'#ET'#ETOOQ$IS'#EV'#EVOOQ$IS'#EX'#EXO1lQ$IWO'#EZO2SQ$IWO'#E_O/|Q$IWO'#EaO2gQ$I[O'#EaO/|Q$IWO'#EdO/gQ$IWO'#EgO/gQ$IWO'#EkO/gQ$IWO'#EnO2rQ$IWO'#EpO2yQ$IWO'#EuO3UQ$IWO'#EqO/gQ$IWO'#EuO/|Q$IWO'#EwO/|Q$IWO'#E|OOQ$IS'#Cc'#CcOOQ$IS'#Cd'#CdOOQ$IS'#Ce'#CeOOQ$IS'#Cf'#CfOOQ$IS'#Cg'#CgOOQ$IS'#Ch'#ChOOQ$IS'#Cj'#CjO'RQ$IWO,58|O'RQ$IWO,58|O'RQ$IWO,58|O'RQ$IWO,58|O'RQ$IWO,58|O'RQ$IWO,58|O3ZQ$IWO'#DmOOQ$IS,5:W,5:WO3nQ$IWO'#GoOOQ$IS,5:Z,5:ZO3{Q%1`O,5:ZO4QQ$I[O,59WO0aQ$IWO,59_O0aQ$IWO,59_O0aQ$IWO,59_O6pQ$IWO,59_O6uQ$IWO,59_O6|Q$IWO,59gO7TQ$IWO'#G`O8ZQ$IWO'#G_OOQ$IS'#G_'#G_OOQ$IS'#DX'#DXO8rQ$IWO,59]O'RQ$IWO,59]O9QQ$IWO,59]O9VQ$IWO,5:PO'RQ$IWO,5:POOQ$IS,59|,59|O9eQ$IWO,59|O9jQ$IWO,5:VO'RQ$IWO,5:VO'RQ$IWO,5:TOOQ$IS,5:Q,5:QO9{Q$IWO,5:QO:QQ$IWO,5:UOOOO'#FZ'#FZO:VO`O,5:_OOQ$IS,5:_,5:_OOOO'#F['#F[O:_OpO,5:_O:gQ$IWO'#DuOOOO'#F]'#F]O:wO!bO,5:`OOQ$IS,5:`,5:`OOOO'#F`'#F`O;SO#tO,5:`OOOO'#Fa'#FaO;_O&jO,5:`OOOO'#Fb'#FbO;jO,UO,5:`OOQ$IS'#Fc'#FcO;uQ$I[O,5:dO>gQ$I[O,5<kO?QQ%GlO,5<kO?qQ$I[O,5<kOOQ$IS,5:x,5:xO@YQ$IXO'#FkOAiQ$IWO,5;TOOQ$IV,5<i,5<iOAtQ$I[O'#HXOB]Q$IWO,5;kOOQ$IS-E9p-E9pOOQ$IV,5;j,5;jO3PQ$IWO'#EwOOQ$IT-E9P-E9POBeQ$I[O,59ZODlQ$I[O,59fOEVQ$IWO'#GbOEbQ$IWO'#GbO/|Q$IWO'#GbOEmQ$IWO'#DQOEuQ$IWO,59jOEzQ$IWO'#GfO'RQ$IWO'#GfO/gQ$IWO,5=POOQ$IS,5=P,5=PO/gQ$IWO'#D|OOQ$IS'#D}'#D}OFiQ$IWO'#FeOFyQ$IWO,58zOGXQ$IWO,58zO)eQ$IWO,5:jOG^Q$I[O'#GhOOQ$IS,5:m,5:mOOQ$IS,5:u,5:uOGqQ$IWO,5:yOHSQ$IWO,5:{OOQ$IS'#Fh'#FhOHbQ$I[O,5:{OHpQ$IWO,5:{OHuQ$IWO'#H[OOQ$IS,5;O,5;OOITQ$IWO'#HWOOQ$IS,5;R,5;RO3UQ$IWO,5;VO3UQ$IWO,5;YOIfQ$I[O'#H^O'RQ$IWO'#H^OIpQ$IWO,5;[O2rQ$IWO,5;[O/gQ$IWO,5;aO/|Q$IWO,5;cOIuQ$IXO'#ElOKOQ$IZO,5;]ONaQ$IWO'#H_O3UQ$IWO,5;aONlQ$IWO,5;cONqQ$IWO,5;hO!#fQ$I[O1G.hO!#mQ$I[O1G.hO!&^Q$I[O1G.hO!&hQ$I[O1G.hO!)RQ$I[O1G.hO!)fQ$I[O1G.hO!)yQ$IWO'#GnO!*XQ$I[O'#GQO/gQ$IWO'#GnO!*cQ$IWO'#GmOOQ$IS,5:X,5:XO!*kQ$IWO,5:XO!*pQ$IWO'#GpO!*{Q$IWO'#GpO!+`Q$IWO,5=ZOOQ$IS'#Dq'#DqOOQ$IS1G/u1G/uOOQ$IS1G.y1G.yO!,`Q$I[O1G.yO!,gQ$I[O1G.yO0aQ$IWO1G.yO!-SQ$IWO1G/ROOQ$IS'#DW'#DWO/gQ$IWO,59qOOQ$IS1G.w1G.wO!-ZQ$IWO1G/cO!-kQ$IWO1G/cO!-sQ$IWO1G/dO'RQ$IWO'#GgO!-xQ$IWO'#GgO!-}Q$I[O1G.wO!._Q$IWO,59fO!/eQ$IWO,5=VO!/uQ$IWO,5=VO!/}Q$IWO1G/kO!0SQ$I[O1G/kOOQ$IS1G/h1G/hO!0dQ$IWO,5=QO!1ZQ$IWO,5=QO/gQ$IWO1G/oO!1xQ$IWO1G/qO!1}Q$I[O1G/qO!2_Q$I[O1G/oOOQ$IS1G/l1G/lOOQ$IS1G/p1G/pOOOO-E9X-E9XOOQ$IS1G/y1G/yOOOO-E9Y-E9YO!2oQ$IWO'#G{O/gQ$IWO'#G{O!2}Q$IWO,5:aOOOO-E9Z-E9ZOOQ$IS1G/z1G/zOOOO-E9^-E9^OOOO-E9_-E9_OOOO-E9`-E9`OOQ$IS-E9a-E9aO!3YQ%GlO1G2VO!3yQ$I[O1G2VO'RQ$IWO,5<OOOQ$IS,5<O,5<OOOQ$IS-E9b-E9bOOQ$IS,5<V,5<VOOQ$IS-E9i-E9iOOQ$IV1G0o1G0oO/|Q$IWO'#FgO!4bQ$I[O,5=sOOQ$IS1G1V1G1VO!4yQ$IWO1G1VOOQ$IS'#DS'#DSO/gQ$IWO,5<|OOQ$IS,5<|,5<|O!5OQ$IWO'#FSO!5ZQ$IWO,59lO!5cQ$IWO1G/UO!5mQ$I[O,5=QOOQ$IS1G2k1G2kOOQ$IS,5:h,5:hO!6^Q$IWO'#GPOOQ$IS,5<P,5<POOQ$IS-E9c-E9cO!6oQ$IWO1G.fOOQ$IS1G0U1G0UO!6}Q$IWO,5=SO!7_Q$IWO,5=SO/gQ$IWO1G0eO/gQ$IWO1G0eO/|Q$IWO1G0gOOQ$IS-E9f-E9fO!7pQ$IWO1G0gO!7{Q$IWO1G0gO!8QQ$IWO,5=vO!8`Q$IWO,5=vO!8nQ$IWO,5=rO!9UQ$IWO,5=rO!9gQ$IZO1G0qO!<uQ$IZO1G0tO!@QQ$IWO,5=xO!@[Q$IWO,5=xO!@dQ$I[O,5=xO/gQ$IWO1G0vO!@nQ$IWO1G0vO3UQ$IWO1G0{ONlQ$IWO1G0}OOQ$IV,5;W,5;WO!@sQ$IYO,5;WO!@xQ$IZO1G0wO!DZQ$IWO'#FoO3UQ$IWO1G0wO3UQ$IWO1G0wO!DhQ$IWO,5=yO!DuQ$IWO,5=yO/|Q$IWO,5=yOOQ$IV1G0{1G0{O!D}Q$IWO'#EyO!E`Q%1`O1G0}OOQ$IV1G1S1G1SO3UQ$IWO1G1SOOQ$IS,5=Y,5=YOOQ$IS'#Dn'#DnO/gQ$IWO,5=YO!EhQ$IWO,5=XO!E{Q$IWO,5=XOOQ$IS1G/s1G/sO!FTQ$IWO,5=[O!FeQ$IWO,5=[O!FmQ$IWO,5=[O!GQQ$IWO,5=[O!GbQ$IWO,5=[OOQ$IS1G2u1G2uOOQ$IS7+$e7+$eO!5cQ$IWO7+$mO!ITQ$IWO1G.yO!I[Q$IWO1G.yOOQ$IS1G/]1G/]OOQ$IS,5;p,5;pO'RQ$IWO,5;pOOQ$IS7+$}7+$}O!IcQ$IWO7+$}OOQ$IS-E9S-E9SOOQ$IS7+%O7+%OO!IsQ$IWO,5=RO'RQ$IWO,5=ROOQ$IS7+$c7+$cO!IxQ$IWO7+$}O!JQQ$IWO7+%OO!JVQ$IWO1G2qOOQ$IS7+%V7+%VO!JgQ$IWO1G2qO!JoQ$IWO7+%VOOQ$IS,5;o,5;oO'RQ$IWO,5;oO!JtQ$IWO1G2lOOQ$IS-E9R-E9RO!KkQ$IWO7+%ZOOQ$IS7+%]7+%]O!KyQ$IWO1G2lO!LhQ$IWO7+%]O!LmQ$IWO1G2rO!L}Q$IWO1G2rO!MVQ$IWO7+%ZO!M[Q$IWO,5=gO!MrQ$IWO,5=gO!MrQ$IWO,5=gO!NQO!LQO'#DwO!N]OSO'#G|OOOO1G/{1G/{O!NbQ$IWO1G/{O!NjQ%GlO7+'qO# ZQ$I[O1G1jP# tQ$IWO'#FdOOQ$IS,5<R,5<ROOQ$IS-E9e-E9eOOQ$IS7+&q7+&qOOQ$IS1G2h1G2hOOQ$IS,5;n,5;nOOQ$IS-E9Q-E9QOOQ$IS7+$p7+$pO#!RQ$IWO,5<kO#!lQ$IWO,5<kO#!}Q$I[O,5;qO##bQ$IWO1G2nOOQ$IS-E9T-E9TOOQ$IS7+&P7+&PO##rQ$IWO7+&POOQ$IS7+&R7+&RO#$QQ$IWO'#HZO/|Q$IWO'#HYO#$fQ$IWO7+&ROOQ$IS,5<U,5<UO#$qQ$IWO1G3bOOQ$IS-E9h-E9hOOQ$IS,5<Q,5<QO#%PQ$IWO1G3^OOQ$IS-E9d-E9dO#%gQ$IZO7+&]O!DZQ$IWO'#FmO3UQ$IWO7+&]O3UQ$IWO7+&`O#(uQ$I[O,5<YO'RQ$IWO,5<YO#)PQ$IWO1G3dOOQ$IS-E9l-E9lO#)ZQ$IWO1G3dO3UQ$IWO7+&bO/gQ$IWO7+&bOOQ$IV7+&g7+&gO!E`Q%1`O7+&iO#)cQ$IXO1G0rOOQ$IV-E9m-E9mO3UQ$IWO7+&cO3UQ$IWO7+&cOOQ$IV,5<Z,5<ZO#+UQ$IWO,5<ZOOQ$IV7+&c7+&cO#+aQ$IZO7+&cO#.lQ$IWO,5<[O#.wQ$IWO1G3eOOQ$IS-E9n-E9nO#/UQ$IWO1G3eO#/^Q$IWO'#HaO#/lQ$IWO'#HaO/|Q$IWO'#HaOOQ$IS'#Ha'#HaO#/wQ$IWO'#H`OOQ$IS,5;e,5;eO#0PQ$IWO,5;eO/gQ$IWO'#E{OOQ$IV7+&i7+&iO3UQ$IWO7+&iOOQ$IV7+&n7+&nOOQ$IS1G2t1G2tOOQ$IS,5;s,5;sO#0UQ$IWO1G2sOOQ$IS-E9V-E9VO#0iQ$IWO,5;tO#0tQ$IWO,5;tO#1XQ$IWO1G2vOOQ$IS-E9W-E9WO#1iQ$IWO1G2vO#1qQ$IWO1G2vO#2RQ$IWO1G2vO#1iQ$IWO1G2vOOQ$IS<<HX<<HXO#2^Q$I[O1G1[OOQ$IS<<Hi<<HiP#2kQ$IWO'#FUO6|Q$IWO1G2mO#2xQ$IWO1G2mO#2}Q$IWO<<HiOOQ$IS<<Hj<<HjO#3_Q$IWO7+(]OOQ$IS<<Hq<<HqO#3oQ$I[O1G1ZP#4`Q$IWO'#FTO#4mQ$IWO7+(^O#4}Q$IWO7+(^O#5VQ$IWO<<HuO#5[Q$IWO7+(WOOQ$IS<<Hw<<HwO#6RQ$IWO,5;rO'RQ$IWO,5;rOOQ$IS-E9U-E9UOOQ$IS<<Hu<<HuOOQ$IS,5;x,5;xO/gQ$IWO,5;xO#6WQ$IWO1G3ROOQ$IS-E9[-E9[O#6nQ$IWO1G3ROOOO'#F_'#F_O#6|O!LQO,5:cOOOO,5=h,5=hOOOO7+%g7+%gO#7XQ$IWO1G2VO#7rQ$IWO1G2VP'RQ$IWO'#FVO/gQ$IWO<<IkO#8TQ$IWO,5=uO#8fQ$IWO,5=uO/|Q$IWO,5=uO#8wQ$IWO,5=tOOQ$IS<<Im<<ImP/|Q$IWO'#FjP/gQ$IWO'#FfOOQ$IV-E9k-E9kO3UQ$IWO<<IwOOQ$IV,5<X,5<XO3UQ$IWO,5<XOOQ$IV<<Iw<<IwOOQ$IV<<Iz<<IzO#8|Q$I[O1G1tP#9WQ$IWO'#FnO#9_Q$IWO7+)OO#9iQ$IZO<<I|O3UQ$IWO<<I|OOQ$IV<<JT<<JTO3UQ$IWO<<JTOOQ$IV'#Fl'#FlO#<tQ$IZO7+&^OOQ$IV<<I}<<I}O#>mQ$IZO<<I}OOQ$IV1G1u1G1uO/|Q$IWO1G1uO3UQ$IWO<<I}O/|Q$IWO1G1vP/gQ$IWO'#FpO#AxQ$IWO7+)PO#BVQ$IWO7+)POOQ$IS'#Ez'#EzO/gQ$IWO,5={O#B_Q$IWO,5={OOQ$IS,5={,5={O#BjQ$IWO,5=zO#B{Q$IWO,5=zOOQ$IS1G1P1G1POOQ$IS,5;g,5;gP#CTQ$IWO'#FXO#CeQ$IWO1G1`O#CxQ$IWO1G1`O#DYQ$IWO1G1`P#DeQ$IWO'#FYO#DrQ$IWO7+(bO#ESQ$IWO7+(bO#ESQ$IWO7+(bO#E[Q$IWO7+(bO#ElQ$IWO7+(XO6|Q$IWO7+(XOOQ$ISAN>TAN>TO#FVQ$IWO<<KxOOQ$ISAN>aAN>aO/gQ$IWO1G1^O#FgQ$I[O1G1^P#FqQ$IWO'#FWOOQ$IS1G1d1G1dP#GOQ$IWO'#F^O#G]Q$IWO7+(mOOOO-E9]-E9]O#GsQ$IWO7+'qOOQ$ISAN?VAN?VO#H^Q$IWO,5<TO#HrQ$IWO1G3aOOQ$IS-E9g-E9gO#ITQ$IWO1G3aOOQ$IS1G3`1G3`OOQ$IVAN?cAN?cOOQ$IV1G1s1G1sO3UQ$IWOAN?hO#IfQ$IZOAN?hOOQ$IVAN?oAN?oOOQ$IV-E9j-E9jOOQ$IV<<Ix<<IxO3UQ$IWOAN?iO3UQ$IWO7+'aOOQ$IVAN?iAN?iOOQ$IS7+'b7+'bO#LqQ$IWO<<LkOOQ$IS1G3g1G3gO/gQ$IWO1G3gOOQ$IS,5<],5<]O#MOQ$IWO1G3fOOQ$IS-E9o-E9oO#MaQ$IWO7+&zO#MqQ$IWO7+&zOOQ$IS7+&z7+&zO#M|Q$IWO<<K|O#N^Q$IWO<<K|O#N^Q$IWO<<K|O#NfQ$IWO'#GiOOQ$IS<<Ks<<KsO#NpQ$IWO<<KsOOQ$IS7+&x7+&xO/|Q$IWO1G1oP/|Q$IWO'#FiO$ ZQ$IWO7+({O$ lQ$IWO7+({OOQ$IVG25SG25SO3UQ$IWOG25SOOQ$IVG25TG25TOOQ$IV<<J{<<J{OOQ$IS7+)R7+)RP$ }Q$IWO'#FqOOQ$IS<<Jf<<JfO$!]Q$IWO<<JfO$!mQ$IWOANAhO$!}Q$IWOANAhO$#VQ$IWO'#GjOOQ$IS'#Gj'#GjO0hQ$IWO'#DaO$#pQ$IWO,5=TOOQ$ISANA_ANA_OOQ$IS7+'Z7+'ZO$$XQ$IWO<<LgOOQ$IVLD*nLD*nOOQ$ISAN@QAN@QO$$jQ$IWOG27SO$$zQ$IWO,59{OOQ$IS1G2o1G2oO#NfQ$IWO1G/gOOQ$IS7+%R7+%RO6|Q$IWO'#CzO6|Q$IWO,59_O6|Q$IWO,59_O6|Q$IWO,59_O$%PQ$I[O,5<kO6|Q$IWO1G.yO/gQ$IWO1G/UO/gQ$IWO7+$mP$%dQ$IWO'#FdO'RQ$IWO'#GPO$%qQ$IWO,59_O$%vQ$IWO,59_O$%}Q$IWO,59jO$&SQ$IWO1G/RO0hQ$IWO'#DOO6|Q$IWO,59g",
      stateData: "$&j~O$oOS$lOS$kOSQOS~OPhOTeOdsOfXOltOp!SOsuO|vO}!PO!R!VO!S!UO!VYO!ZZO!fdO!mdO!ndO!odO!vxO!xyO!zzO!|{O#O|O#S}O#U!OO#X!QO#Y!QO#[!RO#c!TO#f!WO#j!XO#l!YO#q!ZO#tlO$jqO$zQO${QO%PRO%QVO%f[O%g]O%j^O%m_O%s`O%vaO%xbO~OT!aO]!aO_!bOf!iO!V!kO!d!mO$u![O$v!]O$w!^O$x!_O$y!_O$z!`O${!`O$|!aO$}!aO%O!aO~Oh%TXi%TXj%TXk%TXl%TXm%TXp%TXw%TXx%TX!s%TX#^%TX$j%TX$m%TX%V%TX!O%TX!R%TX!S%TX%W%TX!W%TX![%TX}%TX#V%TXq%TX!j%TX~P$_OdsOfXO!VYO!ZZO!fdO!mdO!ndO!odO$zQO${QO%PRO%QVO%f[O%g]O%j^O%m_O%s`O%vaO%xbO~Ow%SXx%SX#^%SX$j%SX$m%SX%V%SX~Oh!pOi!qOj!oOk!oOl!rOm!sOp!tO!s%SX~P(`OT!zOl-dOs-rO|vO~P'ROT!}Ol-dOs-rO!W#OO~P'ROT#RO_#SOl-dOs-rO![#TO~P'RO%h#WO%i#YO~O%k#ZO%l#YO~O!Z#]O%n#^O%r#`O~O!Z#]O%t#aO%u#`O~O!Z#]O%i#`O%w#cO~O!Z#]O%l#`O%y#eO~OT$tX]$tX_$tXf$tXh$tXi$tXj$tXk$tXl$tXm$tXp$tXw$tX!V$tX!d$tX$u$tX$v$tX$w$tX$x$tX$y$tX$z$tX${$tX$|$tX$}$tX%O$tX!O$tX!R$tX!S$tX~O%f[O%g]O%j^O%m_O%s`O%vaO%xbOx$tX!s$tX#^$tX$j$tX$m$tX%V$tX%W$tX!W$tX![$tX}$tX#V$tXq$tX!j$tX~P+uOw#jOx$sX!s$sX#^$sX$j$sX$m$sX%V$sX~Ol-dOs-rO~P'RO#^#mO$j#oO$m#oO~O%QVO~O!R#tO#l!YO#q!ZO#tlO~OltO~P'ROT#yO_#zO%QVOxtP~OT$OOl-dOs-rO}$PO~P'ROx$RO!s$WO%V$SO#^!tX$j!tX$m!tX~OT$OOl-dOs-rO#^!}X$j!}X$m!}X~P'ROl-dOs-rO#^#RX$j#RX$m#RX~P'RO!d$^O!m$^O%QVO~OT$hO~P'RO!S$jO#j$kO#l$lO~Ox$mO~OT${O_${Ol-dOs-rO!O$}O~P'ROl-dOs-rOx%QO~P'RO%e%SO~O_!bOf!iO!V!kO!d!mOT`a]`ah`ai`aj`ak`al`am`ap`aw`ax`a!s`a#^`a$j`a$m`a$u`a$v`a$w`a$x`a$y`a$z`a${`a$|`a$}`a%O`a%V`a!O`a!R`a!S`a%W`a!W`a![`a}`a#V`aq`a!j`a~Ok%XO~Ol%XO~P'ROl-dO~P'ROh-fOi-gOj-eOk-eOl-nOm-oOp-sO!O%SX!R%SX!S%SX%W%SX!W%SX![%SX}%SX#V%SX!j%SX~P(`O%W%ZOw%RX!O%RX!R%RX!S%RX!W%RXx%RX~Ow%^O!O%]O!R%bO!S%aO~O!O%]O~Ow%eO!R%bO!S%aO!W%_X~O!W%iO~Ow%jOx%lO!R%bO!S%aO![%YX~O![%pO~O![%qO~O%h#WO%i%sO~O%k#ZO%l%sO~OT%vOl-dOs-rO|vO~P'RO!Z#]O%n#^O%r%yO~O!Z#]O%t#aO%u%yO~O!Z#]O%i%yO%w#cO~O!Z#]O%l%yO%y#eO~OT!la]!la_!laf!lah!lai!laj!lak!lal!lam!lap!law!lax!la!V!la!d!la!s!la#^!la$j!la$m!la$u!la$v!la$w!la$x!la$y!la$z!la${!la$|!la$}!la%O!la%V!la!O!la!R!la!S!la%W!la!W!la![!la}!la#V!laq!la!j!la~P#vOw&OOx$sa!s$sa#^$sa$j$sa$m$sa%V$sa~P$_OT&QOltOsuOx$sa!s$sa#^$sa$j$sa$m$sa%V$sa~P'ROw&OOx$sa!s$sa#^$sa$j$sa$m$sa%V$sa~OPhOTeOltOsuO|vO}!PO!vxO!xyO!zzO!|{O#O|O#S}O#U!OO#X!QO#Y!QO#[!RO#^$_X$j$_X$m$_X~P'RO#^#mO$j&VO$m&VO~O!d&WOf%{X$j%{X#V%{X#^%{X$m%{X#U%{X~Of!iO$j&YO~Ohcaicajcakcalcamcapcawcaxca!sca#^ca$jca$mca%Vca!Oca!Rca!Sca%Wca!Wca![ca}ca#Vcaqca!jca~P$_Opnawnaxna#^na$jna$mna%Vna~Oh!pOi!qOj!oOk!oOl!rOm!sO!sna~PDTO%V&[Ow%UXx%UX~O%QVOw%UXx%UX~Ow&_OxtX~Ox&aO~Ow%jO#^%YX$j%YX$m%YX!O%YXx%YX![%YX!j%YX%V%YX~OT-mOl-dOs-rO|vO~P'RO%V$SO#^Sa$jSa$mSa~O%V$SO~Ow&jO#^%[X$j%[X$m%[Xk%[X~P$_Ow&mO}&lO#^#Ra$j#Ra$m#Ra~O#V&nO#^#Ta$j#Ta$m#Ta~O!d$^O!m$^O#U&pO%QVO~O#U&pO~Ow&rO#^&OX$j&OX$m&OX~Ow&tO#^%zX$j%zX$m%zXx%zX~Ow&xOk&QX~P$_Ok&{O~OPhOTeOltOsuO|vO}!PO!vxO!xyO!zzO!|{O#O|O#S}O#U!OO#X!QO#Y!QO#[!RO$j'QO~P'ROq'UO#g'SO#h'TOP#eaT#ead#eaf#eal#eap#eas#ea|#ea}#ea!R#ea!S#ea!V#ea!Z#ea!f#ea!m#ea!n#ea!o#ea!v#ea!x#ea!z#ea!|#ea#O#ea#S#ea#U#ea#X#ea#Y#ea#[#ea#c#ea#f#ea#j#ea#l#ea#q#ea#t#ea$g#ea$j#ea$z#ea${#ea%P#ea%Q#ea%f#ea%g#ea%j#ea%m#ea%s#ea%v#ea%x#ea$i#ea$m#ea~Ow'VO#V'XOx&RX~Of'ZO~Of!iOx$mO~OT!aO]!aO_!bOf!iO!V!kO!d!mO$w!^O$x!_O$y!_O$z!`O${!`O$|!aO$}!aO%O!aOhUiiUijUikUilUimUipUiwUixUi!sUi#^Ui$jUi$mUi$uUi%VUi!OUi!RUi!SUi%WUi!WUi![Ui}Ui#VUiqUi!jUi~O$v!]O~PNyO$vUi~PNyOT!aO]!aO_!bOf!iO!V!kO!d!mO$z!`O${!`O$|!aO$}!aO%O!aOhUiiUijUikUilUimUipUiwUixUi!sUi#^Ui$jUi$mUi$uUi$vUi$wUi%VUi!OUi!RUi!SUi%WUi!WUi![Ui}Ui#VUiqUi!jUi~O$x!_O$y!_O~P!#tO$xUi$yUi~P!#tO_!bOf!iO!V!kO!d!mOhUiiUijUikUilUimUipUiwUixUi!sUi#^Ui$jUi$mUi$uUi$vUi$wUi$xUi$yUi$zUi${Ui%VUi!OUi!RUi!SUi%WUi!WUi![Ui}Ui#VUiqUi!jUi~OT!aO]!aO$|!aO$}!aO%O!aO~P!&rOTUi]Ui$|Ui$}Ui%OUi~P!&rO!R%bO!S%aOw%bX!O%bX~O%V'`O%W'`O~P+uOw'bO!O%aX~O!O'dO~Ow'eOx'gO!W%dX~Ol-dOs-rOw'eOx'hO!W%dX~P'RO!W'jO~Oj!oOk!oOl!rOm!sOhgipgiwgixgi!sgi#^gi$jgi$mgi%Vgi~Oi!qO~P!+eOigi~P!+eOh-fOi-gOj-eOk-eOl-nOm-oO~Oq'lO~P!,nOT'qOl-dOs-rO!O'rO~P'ROw'sO!O'rO~O!O'uO~O!S'wO~Ow'sO!O'xO!R%bO!S%aO~P$_Oh-fOi-gOj-eOk-eOl-nOm-oO!Ona!Rna!Sna%Wna!Wna![na}na#Vnaqna!jna~PDTOT'qOl-dOs-rO!W%_a~P'ROw'{O!W%_a~O!W'|O~Ow'{O!R%bO!S%aO!W%_a~P$_OT(QOl-dOs-rO![%Ya#^%Ya$j%Ya$m%Ya!O%Yax%Ya!j%Ya%V%Ya~P'ROw(RO![%Ya#^%Ya$j%Ya$m%Ya!O%Yax%Ya!j%Ya%V%Ya~O![(UO~Ow(RO!R%bO!S%aO![%Ya~P$_Ow(XO!R%bO!S%aO![%`a~P$_Ow([Ox%oX![%oX!j%oX~Ox(_O![(aO!j(bO~OT&QOltOsuOx$si!s$si#^$si$j$si$m$si%V$si~P'ROw(cOx$si!s$si#^$si$j$si$m$si%V$si~O!d&WOf%{a$j%{a#V%{a#^%{a$m%{a#U%{a~O$j(hO~OT#yO_#zO%QVO~Ow&_Oxta~OltOsuO~P'ROw(RO#^%Ya$j%Ya$m%Ya!O%Yax%Ya![%Ya!j%Ya%V%Ya~P$_Ow(mO#^$sX$j$sX$m$sX%V$sX~O%V$SO#^Si$jSi$mSi~O#^%[a$j%[a$m%[ak%[a~P'ROw(pO#^%[a$j%[a$m%[ak%[a~OT(tOf(vO%QVO~O#U(wO~O%QVO#^&Oa$j&Oa$m&Oa~Ow(yO#^&Oa$j&Oa$m&Oa~Ol-dOs-rO#^%za$j%za$m%zax%za~P'ROw(|O#^%za$j%za$m%zax%za~Oq)QO#a)POP#_iT#_id#_if#_il#_ip#_is#_i|#_i}#_i!R#_i!S#_i!V#_i!Z#_i!f#_i!m#_i!n#_i!o#_i!v#_i!x#_i!z#_i!|#_i#O#_i#S#_i#U#_i#X#_i#Y#_i#[#_i#c#_i#f#_i#j#_i#l#_i#q#_i#t#_i$g#_i$j#_i$z#_i${#_i%P#_i%Q#_i%f#_i%g#_i%j#_i%m#_i%s#_i%v#_i%x#_i$i#_i$m#_i~Oq)ROP#biT#bid#bif#bil#bip#bis#bi|#bi}#bi!R#bi!S#bi!V#bi!Z#bi!f#bi!m#bi!n#bi!o#bi!v#bi!x#bi!z#bi!|#bi#O#bi#S#bi#U#bi#X#bi#Y#bi#[#bi#c#bi#f#bi#j#bi#l#bi#q#bi#t#bi$g#bi$j#bi$z#bi${#bi%P#bi%Q#bi%f#bi%g#bi%j#bi%m#bi%s#bi%v#bi%x#bi$i#bi$m#bi~OT)TOk&Qa~P'ROw)UOk&Qa~Ow)UOk&Qa~P$_Ok)YO~O$h)]O~Oq)`O#g'SO#h)_OP#eiT#eid#eif#eil#eip#eis#ei|#ei}#ei!R#ei!S#ei!V#ei!Z#ei!f#ei!m#ei!n#ei!o#ei!v#ei!x#ei!z#ei!|#ei#O#ei#S#ei#U#ei#X#ei#Y#ei#[#ei#c#ei#f#ei#j#ei#l#ei#q#ei#t#ei$g#ei$j#ei$z#ei${#ei%P#ei%Q#ei%f#ei%g#ei%j#ei%m#ei%s#ei%v#ei%x#ei$i#ei$m#ei~Ol-dOs-rOx$mO~P'ROl-dOs-rOx&Ra~P'ROw)fOx&Ra~OT)jO_)kO!O)nO$|)lO%QVO~Ox$mO&U)pO~OT${O_${Ol-dOs-rO!O%aa~P'ROw)vO!O%aa~Ol-dOs-rOx)yO!W%da~P'ROw)zO!W%da~Ol-dOs-rOw)zOx)}O!W%da~P'ROl-dOs-rOw)zO!W%da~P'ROw)zOx)}O!W%da~Oj-eOk-eOl-nOm-oOhgipgiwgi!Ogi!Rgi!Sgi%Wgi!Wgixgi![gi#^gi$jgi$mgi}gi#Vgiqgi!jgi%Vgi~Oi-gO~P!GmOigi~P!GmOT'qOl-dOs-rO!O*SO~P'ROk*UO~Ow*WO!O*SO~O!O*XO~OT'qOl-dOs-rO!W%_i~P'ROw*YO!W%_i~O!W*ZO~OT(QOl-dOs-rO![%Yi#^%Yi$j%Yi$m%Yi!O%Yix%Yi!j%Yi%V%Yi~P'ROw*^O!R%bO!S%aO![%`i~Ow*aO![%Yi#^%Yi$j%Yi$m%Yi!O%Yix%Yi!j%Yi%V%Yi~O![*bO~O_*dOl-dOs-rO![%`i~P'ROw*^O![%`i~O![*fO~OT*hOl-dOs-rOx%oa![%oa!j%oa~P'ROw*iOx%oa![%oa!j%oa~O!Z#]O%q*lO![!kX~O![*nO~Ox(_O![*oO~OT&QOltOsuOx$sq!s$sq#^$sq$j$sq$m$sq%V$sq~P'ROw$Wix$Wi!s$Wi#^$Wi$j$Wi$m$Wi%V$Wi~P$_OT&QOltOsuO~P'ROT&QOl-dOs-rO#^$sa$j$sa$m$sa%V$sa~P'ROw*pO#^$sa$j$sa$m$sa%V$sa~Ow#ya#^#ya$j#ya$m#yak#ya~P$_O#^%[i$j%[i$m%[ik%[i~P'ROw*sO#^#Rq$j#Rq$m#Rq~Ow*tO#V*vO#^%}X$j%}X$m%}X!O%}X~OT*xOf(vO%QVO~O%QVO#^&Oi$j&Oi$m&Oi~Ol-dOs-rO#^%zi$j%zi$m%zix%zi~P'ROq*|O#a)POP#_qT#_qd#_qf#_ql#_qp#_qs#_q|#_q}#_q!R#_q!S#_q!V#_q!Z#_q!f#_q!m#_q!n#_q!o#_q!v#_q!x#_q!z#_q!|#_q#O#_q#S#_q#U#_q#X#_q#Y#_q#[#_q#c#_q#f#_q#j#_q#l#_q#q#_q#t#_q$g#_q$j#_q$z#_q${#_q%P#_q%Q#_q%f#_q%g#_q%j#_q%m#_q%s#_q%v#_q%x#_q$i#_q$m#_q~Ok$baw$ba~P$_OT)TOk&Qi~P'ROw+TOk&Qi~OPhOTeOltOp!SOsuO|vO}!PO!R!VO!S!UO!vxO!xyO!zzO!|{O#O|O#S}O#U!OO#X!QO#Y!QO#[!RO#c!TO#f!WO#j!XO#l!YO#q!ZO#tlO~P'ROw+_Ox$mO#V+_O~O#h+`OP#eqT#eqd#eqf#eql#eqp#eqs#eq|#eq}#eq!R#eq!S#eq!V#eq!Z#eq!f#eq!m#eq!n#eq!o#eq!v#eq!x#eq!z#eq!|#eq#O#eq#S#eq#U#eq#X#eq#Y#eq#[#eq#c#eq#f#eq#j#eq#l#eq#q#eq#t#eq$g#eq$j#eq$z#eq${#eq%P#eq%Q#eq%f#eq%g#eq%j#eq%m#eq%s#eq%v#eq%x#eq$i#eq$m#eq~O#V+aOw$dax$da~Ol-dOs-rOx&Ri~P'ROw+cOx&Ri~Ox$RO%V+eOw&TX!O&TX~O%QVOw&TX!O&TX~Ow+iO!O&SX~O!O+kO~OT${O_${Ol-dOs-rO!O%ai~P'ROx+nOw#|a!W#|a~Ol-dOs-rOx+oOw#|a!W#|a~P'ROl-dOs-rOx)yO!W%di~P'ROw+rO!W%di~Ol-dOs-rOw+rO!W%di~P'ROw+rOx+uO!W%di~Ow#xi!O#xi!W#xi~P$_OT'qOl-dOs-rO~P'ROk+wO~OT'qOl-dOs-rO!O+xO~P'ROT'qOl-dOs-rO!W%_q~P'ROw#wi![#wi#^#wi$j#wi$m#wi!O#wix#wi!j#wi%V#wi~P$_OT(QOl-dOs-rO~P'RO_*dOl-dOs-rO![%`q~P'ROw+yO![%`q~O![+zO~OT(QOl-dOs-rO![%Yq#^%Yq$j%Yq$m%Yq!O%Yqx%Yq!j%Yq%V%Yq~P'ROx+{O~OT*hOl-dOs-rOx%oi![%oi!j%oi~P'ROw,QOx%oi![%oi!j%oi~O!Z#]O%q*lO![!ka~OT&QOl-dOs-rO#^$si$j$si$m$si%V$si~P'ROw,SO#^$si$j$si$m$si%V$si~O%QVO#^%}a$j%}a$m%}a!O%}a~Ow,VO#^%}a$j%}a$m%}a!O%}a~O!O,YO~Ok$biw$bi~P$_OT)TO~P'ROT)TOk&Qq~P'ROq,]OP#dyT#dyd#dyf#dyl#dyp#dys#dy|#dy}#dy!R#dy!S#dy!V#dy!Z#dy!f#dy!m#dy!n#dy!o#dy!v#dy!x#dy!z#dy!|#dy#O#dy#S#dy#U#dy#X#dy#Y#dy#[#dy#c#dy#f#dy#j#dy#l#dy#q#dy#t#dy$g#dy$j#dy$z#dy${#dy%P#dy%Q#dy%f#dy%g#dy%j#dy%m#dy%s#dy%v#dy%x#dy$i#dy$m#dy~OPhOTeOltOp!SOsuO|vO}!PO!R!VO!S!UO!vxO!xyO!zzO!|{O#O|O#S}O#U!OO#X!QO#Y!QO#[!RO#c!TO#f!WO#j!XO#l!YO#q!ZO#tlO$i,aO$m,aO~P'RO#h,bOP#eyT#eyd#eyf#eyl#eyp#eys#ey|#ey}#ey!R#ey!S#ey!V#ey!Z#ey!f#ey!m#ey!n#ey!o#ey!v#ey!x#ey!z#ey!|#ey#O#ey#S#ey#U#ey#X#ey#Y#ey#[#ey#c#ey#f#ey#j#ey#l#ey#q#ey#t#ey$g#ey$j#ey$z#ey${#ey%P#ey%Q#ey%f#ey%g#ey%j#ey%m#ey%s#ey%v#ey%x#ey$i#ey$m#ey~Ol-dOs-rOx&Rq~P'ROw,fOx&Rq~O%V+eOw&Ta!O&Ta~OT)jO_)kO$|)lO%QVO!O&Sa~Ow,jO!O&Sa~OT${O_${Ol-dOs-rO~P'ROl-dOs-rOx,lOw#|i!W#|i~P'ROl-dOs-rOw#|i!W#|i~P'ROx,lOw#|i!W#|i~Ol-dOs-rOx)yO~P'ROl-dOs-rOx)yO!W%dq~P'ROw,oO!W%dq~Ol-dOs-rOw,oO!W%dq~P'ROp,rO!R%bO!S%aO!O%Zq!W%Zq![%Zqw%Zq~P!,nO_*dOl-dOs-rO![%`y~P'ROw#zi![#zi~P$_O_*dOl-dOs-rO~P'ROT*hOl-dOs-rO~P'ROT*hOl-dOs-rOx%oq![%oq!j%oq~P'ROT&QOl-dOs-rO#^$sq$j$sq$m$sq%V$sq~P'RO#V,vOw$]a#^$]a$j$]a$m$]a!O$]a~O%QVO#^%}i$j%}i$m%}i!O%}i~Ow,xO#^%}i$j%}i$m%}i!O%}i~Oq,{OP#d!RT#d!Rd#d!Rf#d!Rl#d!Rp#d!Rs#d!R|#d!R}#d!R!R#d!R!S#d!R!V#d!R!Z#d!R!f#d!R!m#d!R!n#d!R!o#d!R!v#d!R!x#d!R!z#d!R!|#d!R#O#d!R#S#d!R#U#d!R#X#d!R#Y#d!R#[#d!R#c#d!R#f#d!R#j#d!R#l#d!R#q#d!R#t#d!R$g#d!R$j#d!R$z#d!R${#d!R%P#d!R%Q#d!R%f#d!R%g#d!R%j#d!R%m#d!R%s#d!R%v#d!R%x#d!R$i#d!R$m#d!R~Ol-dOs-rOx&Ry~P'ROT)jO_)kO$|)lO%QVO!O&Si~Ol-dOs-rOw#|q!W#|q~P'ROx-ROw#|q!W#|q~Ol-dOs-rOx)yO!W%dy~P'ROw-SO!W%dy~Ol-dOs-WO~P'ROp,rO!R%bO!S%aO!O%Zy!W%Zy![%Zyw%Zy~P!,nO%QVO#^%}q$j%}q$m%}q!O%}q~Ow-[O#^%}q$j%}q$m%}q!O%}q~OT)jO_)kO$|)lO%QVO~Ol-dOs-rOw#|y!W#|y~P'ROl-dOs-rOx)yO!W%d!R~P'ROw-_O!W%d!R~Op%^X!O%^X!R%^X!S%^X!W%^X![%^Xw%^X~P!,nOp,rO!R%bO!S%aO!O%]a!W%]a![%]aw%]a~O%QVO#^%}y$j%}y$m%}y!O%}y~Ol-dOs-rOx)yO!W%d!Z~P'ROx-bO~Ow*pO#^$sa$j$sa$m$sa%V$sa~P$_OT&QOl-dOs-rO~P'ROk-iO~Ol-iO~P'ROx-jO~Oq-kO~P!,nO%g%j%v%x%f!Z%n%t%w%y%m%s%m%Q~",
      goto: "!-g&UPPPP&VP&_)p*V*m+U+n,XP,sP&_-a-a&_P&_P0rPPPPPP0r3bPP3bP5n5w:zPP:};];`PPP&_&_PP;l&_PP&_&_PP&_&_&_&_;p<d&_P<gP<j<j@PP@e&_PPP@i@o&VP&V&VP&VP&VP&VP&VP&V&V&VP&VPP&VPP&VP@uP@|ASP@|P@|@|PPP@|PB{PCUC[CbB{P@|ChPCoCuC{DXDkDqD{EREoEuE{FRF]FcFiFoFuF{G_GiGoGuG{HVH]HcHiHoHyIPIZIaPPPPPPPPPIjIrI{JVJbPPPPPPPPPPPPNw! a!%o!({PP!)T!)c!)l!*b!*X!*k!*q!*t!*w!*z!+S!+pPPPPPPPPPP!+s!+vPPPPPPPPP!+|!,Y!,f!,l!,u!,x!-O!-U!-[!-_]iOr#m$m)]+Z'odOSXYZehrstvx|}!R!S!T!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z!}#R#S#]#j#m$O$P$R$T$W$h$j$k$m${%Q%X%[%^%a%e%j%l%v&O&Q&]&a&j&l&m&t&x&{'S'V'a'b'e'g'h'l'q's'w'{(Q(R(X([(c(e(m(p(|)P)T)U)Y)])f)p)v)y)z)}*T*U*W*Y*]*^*a*d*h*i*p*r*s*z+S+T+Z+b+c+f+m+n+o+q+r+u+w+y+{+},P,Q,S,f,h,l,o,r-R-S-_-b-d-e-f-g-i-j-k-l-m-o-sw!cP#i#v$X$g%c%h%n%o&b&z(d(o)S*R*[+R+|-hy!dP#i#v$X$g$s%c%h%n%o&b&z(d(o)S*R*[+R+|-h{!eP#i#v$X$g$s$t%c%h%n%o&b&z(d(o)S*R*[+R+|-h}!fP#i#v$X$g$s$t$u%c%h%n%o&b&z(d(o)S*R*[+R+|-h!P!gP#i#v$X$g$s$t$u$v%c%h%n%o&b&z(d(o)S*R*[+R+|-h!R!hP#i#v$X$g$s$t$u$v$w%c%h%n%o&b&z(d(o)S*R*[+R+|-h!V!hP!n#i#v$X$g$s$t$u$v$w$x%c%h%n%o&b&z(d(o)S*R*[+R+|-h'oSOSXYZehrstvx|}!R!S!T!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z!}#R#S#]#j#m$O$P$R$T$W$h$j$k$m${%Q%X%[%^%a%e%j%l%v&O&Q&]&a&j&l&m&t&x&{'S'V'a'b'e'g'h'l'q's'w'{(Q(R(X([(c(e(m(p(|)P)T)U)Y)])f)p)v)y)z)}*T*U*W*Y*]*^*a*d*h*i*p*r*s*z+S+T+Z+b+c+f+m+n+o+q+r+u+w+y+{+},P,Q,S,f,h,l,o,r-R-S-_-b-d-e-f-g-i-j-k-l-m-o-s&ZUOXYZhrtv|}!R!S!T!X!i!k!o!p!q!s!t#]#j#m$P$R$T$W$k$m${%Q%X%[%^%e%j%l%v&O&]&a&l&m&t&{'S'V'a'b'e'g'h'l's'{(R(X([(c(e(m(|)P)Y)])f)p)v)y)z)}*T*U*W*Y*]*^*a*h*i*p*s*z+Z+b+c+f+m+n+o+q+r+u+w+y+{+},P,Q,S,f,h,l,o,r-R-S-_-b-d-e-f-g-i-j-k-l-o-s%eWOXYZhrv|}!R!S!T!X!i!k#]#j#m$P$R$T$W$k$m${%Q%[%^%e%j%l%v&O&]&a&l&m&t&{'S'V'a'b'e'g'h'l's'{(R(X([(c(e(m(|)P)Y)])f)p)v)y)z)}*T*W*Y*]*^*a*h*i*p*s*z+Z+b+c+f+m+n+o+q+r+u+y+{+},P,Q,S,f,h,l,o-R-S-_-j-k-lQ#|uQ-`-WR-p-r'fdOSXYZehrstvx|}!R!S!T!U!X!c!d!e!f!g!h!k!o!p!q!s!t!z!}#R#S#]#j#m$O$P$R$T$W$h$j$k$m${%Q%X%[%^%a%e%j%l%v&O&Q&]&a&j&l&m&t&x&{'S'V'a'e'g'h'l'q's'w'{(Q(R(X([(c(e(m(p(|)P)T)U)Y)])f)p)y)z)}*T*U*W*Y*]*^*a*d*h*i*p*r*s*z+S+T+Z+b+c+f+n+o+q+r+u+w+y+{+},P,Q,S,f,h,l,o,r-R-S-_-b-d-e-f-g-i-j-k-l-m-o-sW#pl!O!P$_W#xu&_-W-rQ$a!QQ$q!YQ$r!ZW$z!i'b)v+mS&^#y#zQ'O$lQ(f&WQ(t&nU(u&p(v(wU(x&r(y*yQ)h'XW)i'Z+i,j-PS+h)j)kY,U*t,V,w,x-[Q,X*vQ,c+_Q,e+aR-Z,vR&]#xi!wXY!S!T%^%e's'{)P*T*W*YR%[!vQ!{XQ%w#]Q&f$TR&i$WT-V,r-b!U!jP!n#i#v$X$g$s$t$u$v$w$x%c%h%n%o&b&z(d(o)S*R*[+R+|-hQ&Z#qR'^$rR'a$zR%T!m'ncOSXYZehrstvx|}!R!S!T!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z!}#R#S#]#j#m$O$P$R$T$W$h$j$k$m${%Q%X%[%^%a%e%j%l%v&O&Q&]&a&j&l&m&t&x&{'S'V'a'b'e'g'h'l'q's'w'{(Q(R(X([(c(e(m(p(|)P)T)U)Y)])f)p)v)y)z)}*T*U*W*Y*]*^*a*d*h*i*p*r*s*z+S+T+Z+b+c+f+m+n+o+q+r+u+w+y+{+},P,Q,S,f,h,l,o,r-R-S-_-b-d-e-f-g-i-j-k-l-m-o-sT#gc#hS#^_#_S#a`#bS#ca#dS#eb#fT*l(_*mT(`%w(bQ$VwR+g)iX$Tw$U$V&hZkOr$m)]+ZXoOr)]+ZQ$n!WQ&v$eQ&w$fQ'Y$pQ']$rQ)Z&}Q)a'SQ)c'TQ)d'UQ)q'[Q)s'^Q*})PQ+P)QQ+Q)RQ+U)XS+W)[)rQ+[)_Q+])`Q+^)bQ,Z*|Q,[+OQ,^+VQ,_+XQ,d+`Q,z,]Q,|,bQ,},cR-],{WoOr)]+ZR#snQ'[$qR)['OQ+f)iR,h+gQ)r'[R+X)[ZmOnr)]+ZQrOR#urQ&`#{R(k&`S%k#Q#}S(S%k(VT(V%n&bQ%_!yQ%f!|W't%_%f'y'}Q'y%cR'}%hQ&k$XR(q&kQ(Y%oQ*_(TT*e(Y*_Q'c$|R)w'cS'f%P%QY){'f)|+s,p-TU)|'g'h'iU+s)}*O*PS,p+t+uR-T,qQ#X]R%r#XQ#[^R%t#[Q#__R%x#_Q(]%uS*j(]*kR*k(^Q*m(_R,R*mQ#b`R%z#bQ#daR%{#dQ#fbR%|#fQ#hcR%}#hQ#kfQ&P#iW&S#k&P(n*qQ(n&eR*q-hQ$UwS&g$U&hR&h$VQ&u$cR(}&uQ&X#pR(g&XQ$_!PR&o$_Q*u(uS,W*u,yR,y,XQ&s$aR(z&sQ#njR&U#nQ+Z)]R,`+ZQ)O&vR*{)OQ&y$gS)V&y)WR)W&zQ'R$nR)^'RQ'W$oS)g'W+dR+d)hQ+j)mR,k+jWnOr)]+ZR#rnSqOrT+Y)]+ZWpOr)]+ZR'P$mYjOr$m)]+ZR&T#m[wOr#m$m)]+ZR&f$T&YPOXYZhrtv|}!R!S!T!X!i!k!o!p!q!s!t#]#j#m$P$R$T$W$k$m${%Q%X%[%^%e%j%l%v&O&]&a&l&m&t&{'S'V'a'b'e'g'h'l's'{(R(X([(c(e(m(|)P)Y)])f)p)v)y)z)}*T*U*W*Y*]*^*a*h*i*p*s*z+Z+b+c+f+m+n+o+q+r+u+w+y+{+},P,Q,S,f,h,l,o,r-R-S-_-b-d-e-f-g-i-j-k-l-o-sQ!nSQ#ieQ#vsU$Xx%a'wS$g!U$jQ$s!cQ$t!dQ$u!eQ$v!fQ$w!gQ$x!hQ%c!zQ%h!}Q%n#RQ%o#SQ&b$OQ&z$hQ(d&QU(o&j(p*rW)S&x)U+S+TQ*R'qQ*[(QQ+R)TQ+|*dR-h-mQ!yXQ!|YQ$e!SQ$f!T^'p%^%e's'{*T*W*YR+O)P[fOr#m$m)]+Zh!vXY!S!T%^%e's'{)P*T*W*YQ#QZQ#lhS#}v|Q$[}W$c!R$W&{)YS$o!X$kW$y!i'b)v+mQ%P!kQ%u#]`&R#j&O(c(e(m*p,S-lQ&c$PQ&d$RQ&e$TQ'_${Q'i%QQ'o%[W(P%j(R*]*aQ(T%lQ(^%vQ(i&]S(l&a-jQ(r&lQ(s&mU({&t(|*zQ)b'SY)e'V)f+b+c,fQ)t'a^)x'e)z+q+r,o-S-_Q*O'gQ*P'hS*Q'l-kW*c(X*^+y+}W*g([*i,P,QQ+l)pQ+p)yQ+t)}Q,O*hQ,T*sQ,g+fQ,m+nQ,n+oQ,q+uQ,u+{Q-O,hQ-Q,lR-^-RhTOr#j#m$m&O&a'l(c(e)]+Z$z!uXYZhv|}!R!S!T!X!i!k#]$P$R$T$W$k${%Q%[%^%e%j%l%v&]&l&m&t&{'S'V'a'b'e'g'h's'{(R(X([(m(|)P)Y)f)p)v)y)z)}*T*W*Y*]*^*a*h*i*p*s*z+b+c+f+m+n+o+q+r+u+y+{+},P,Q,S,f,h,l,o-R-S-_-j-k-lQ#wtW%U!o!s-e-oQ%V!pQ%W!qQ%Y!tQ%d-dS'k%X-iQ'm-fQ'n-gQ+v*UQ,t+wS-U,r-bR-q-sU#{u-W-rR(j&_[gOr#m$m)]+ZX!xX#]$T$WQ#VZQ$QvR$Z|Q%`!yQ%g!|Q%m#QQ'_$yQ'z%cQ(O%hQ(W%nQ(Z%oQ*`(TQ,s+vQ-Y,tR-a-XQ$YxQ'v%aR*V'wQ-X,rR-c-bR#PYR#UZR%O!iQ$|!iV)u'b)v+m!V!lP!n#i#v$X$g$s$t$u$v$w$x%c%h%n%o&b&z(d(o)S*R*[+R+|-hR%R!kR%w#]Q(a%wR*o(bQ$d!RQ&i$WQ)X&{R+V)YQ#qlQ$]!OQ$`!PR&q$_Q(t&pR*x(wQ(t&pQ*w(vR*x(wR$b!QXpOr)]+ZQ$i!UR&|$jQ$p!XR&}$kR)o'ZQ)m'ZV,i+i,j-P",
      nodeNames: "⚠ print Comment Script AssignStatement * BinaryExpression BitOp BitOp BitOp BitOp ArithOp ArithOp @ ArithOp ** UnaryExpression ArithOp BitOp AwaitExpression await ParenthesizedExpression ( BinaryExpression or and CompareOp in not is UnaryExpression ConditionalExpression if else LambdaExpression lambda ParamList VariableName AssignOp , : NamedExpression AssignOp YieldExpression yield from ) TupleExpression ComprehensionExpression async for LambdaExpression ArrayExpression [ ] ArrayComprehensionExpression DictionaryExpression { } DictionaryComprehensionExpression SetExpression SetComprehensionExpression CallExpression ArgList AssignOp MemberExpression . PropertyName Number String FormatString FormatReplacement FormatConversion FormatSpec ContinuedString Ellipsis None Boolean TypeDef AssignOp UpdateStatement UpdateOp ExpressionStatement DeleteStatement del PassStatement pass BreakStatement break ContinueStatement continue ReturnStatement return YieldStatement PrintStatement RaiseStatement raise ImportStatement import as ScopeStatement global nonlocal AssertStatement assert StatementGroup ; IfStatement Body elif WhileStatement while ForStatement TryStatement try except finally WithStatement with FunctionDefinition def ParamList AssignOp TypeDef ClassDefinition class DecoratedStatement Decorator At",
      maxTerm: 236,
      context: trackIndent,
      nodeProps: [
        [NodeProp.group, -14,4,80,82,83,85,87,89,91,93,94,95,97,100,103,"Statement Statement",-22,6,16,19,21,37,47,48,52,55,56,59,60,61,62,65,68,69,70,74,75,76,77,"Expression",-9,105,107,110,112,113,117,119,124,126,"Statement"]
      ],
      skippedNodes: [0,2],
      repeatNodeCount: 32,
      tokenData: "&AaMgR!^OX$}XY!#xY[$}[]!#x]p$}pq!#xqr!&Srs!)yst!C{tu$}uv$+}vw$.awx$/mxy$Lgyz$Mmz{$Ns{|%#c|}%$o}!O%%u!O!P%([!P!Q%3b!Q!R%6Q!R![%:S![!]%EO!]!^%Gb!^!_%Hh!_!`%KW!`!a%Ld!a!b$}!b!c& P!c!d&!_!d!e&$P!e!h&!_!h!i&.R!i!t&!_!t!u&7g!u!w&!_!w!x&,a!x!}&!_!}#O&9q#O#P!%b#P#Q&:w#Q#R&;}#R#S&!_#S#T$}#T#U&!_#U#V&$P#V#Y&!_#Y#Z&.R#Z#f&!_#f#g&7g#g#i&!_#i#j&,a#j#o&!_#o#p&=Z#p#q&>P#q#r&?]#r#s&@Z#s$g$}$g~&!_<r%`Z%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}9[&^Z%q7[%hS%n`%w!bOr'PrsCxsw'Pwx(Px#O'P#O#P>v#P#o'P#o#pCU#p#q'P#q#r?[#r~'P9['^Z%q7[%hS%kW%n`%w!bOr'Prs&Rsw'Pwx(Px#O'P#O#P>v#P#o'P#o#pCU#p#q'P#q#r?[#r~'P8z(WZ%q7[%kWOr(yrs)wsw(ywx;bx#O(y#O#P2V#P#o(y#o#p7n#p#q(y#q#r2k#r~(y8z)UZ%q7[%hS%kW%w!bOr(yrs)wsw(ywx(Px#O(y#O#P2V#P#o(y#o#p7n#p#q(y#q#r2k#r~(y8z*QZ%q7[%hS%w!bOr(yrs*ssw(ywx(Px#O(y#O#P2V#P#o(y#o#p7n#p#q(y#q#r2k#r~(y8z*|Z%q7[%hS%w!bOr(yrs+osw(ywx(Px#O(y#O#P2V#P#o(y#o#p7n#p#q(y#q#r2k#r~(y8r+xX%q7[%hS%w!bOw+owx,ex#O+o#O#P.V#P#o+o#o#p0^#p#q+o#q#r.k#r~+o8r,jX%q7[Ow+owx-Vx#O+o#O#P.V#P#o+o#o#p0^#p#q+o#q#r.k#r~+o8r-[X%q7[Ow+owx-wx#O+o#O#P.V#P#o+o#o#p0^#p#q+o#q#r.k#r~+o7[-|R%q7[O#o-w#p#q-w#r~-w8r.[T%q7[O#o+o#o#p.k#p#q+o#q#r.k#r~+o!f.rV%hS%w!bOw.kwx/Xx#O.k#O#P0W#P#o.k#o#p0^#p~.k!f/[VOw.kwx/qx#O.k#O#P0W#P#o.k#o#p0^#p~.k!f/tUOw.kx#O.k#O#P0W#P#o.k#o#p0^#p~.k!f0ZPO~.k!f0cV%hSOw0xwx1^x#O0x#O#P2P#P#o0x#o#p.k#p~0xS0}T%hSOw0xwx1^x#O0x#O#P2P#P~0xS1aTOw0xwx1px#O0x#O#P2P#P~0xS1sSOw0xx#O0x#O#P2P#P~0xS2SPO~0x8z2[T%q7[O#o(y#o#p2k#p#q(y#q#r2k#r~(y!n2tX%hS%kW%w!bOr2krs3asw2kwx4wx#O2k#O#P7h#P#o2k#o#p7n#p~2k!n3hX%hS%w!bOr2krs4Tsw2kwx4wx#O2k#O#P7h#P#o2k#o#p7n#p~2k!n4[X%hS%w!bOr2krs.ksw2kwx4wx#O2k#O#P7h#P#o2k#o#p7n#p~2k!n4|X%kWOr2krs3asw2kwx5ix#O2k#O#P7h#P#o2k#o#p7n#p~2k!n5nX%kWOr2krs3asw2kwx6Zx#O2k#O#P7h#P#o2k#o#p7n#p~2kW6`T%kWOr6Zrs6os#O6Z#O#P7b#P~6ZW6rTOr6Zrs7Rs#O6Z#O#P7b#P~6ZW7USOr6Zs#O6Z#O#P7b#P~6ZW7ePO~6Z!n7kPO~2k!n7uX%hS%kWOr8brs9Osw8bwx:Ux#O8b#O#P;[#P#o8b#o#p2k#p~8b[8iV%hS%kWOr8brs9Osw8bwx:Ux#O8b#O#P;[#P~8b[9TV%hSOr8brs9jsw8bwx:Ux#O8b#O#P;[#P~8b[9oV%hSOr8brs0xsw8bwx:Ux#O8b#O#P;[#P~8b[:ZV%kWOr8brs9Osw8bwx:px#O8b#O#P;[#P~8b[:uV%kWOr8brs9Osw8bwx6Zx#O8b#O#P;[#P~8b[;_PO~8b8z;iZ%q7[%kWOr(yrs)wsw(ywx<[x#O(y#O#P2V#P#o(y#o#p7n#p#q(y#q#r2k#r~(y7d<cX%q7[%kWOr<[rs=Os#O<[#O#P>b#P#o<[#o#p6Z#p#q<[#q#r6Z#r~<[7d=TX%q7[Or<[rs=ps#O<[#O#P>b#P#o<[#o#p6Z#p#q<[#q#r6Z#r~<[7d=uX%q7[Or<[rs-ws#O<[#O#P>b#P#o<[#o#p6Z#p#q<[#q#r6Z#r~<[7d>gT%q7[O#o<[#o#p6Z#p#q<[#q#r6Z#r~<[9[>{T%q7[O#o'P#o#p?[#p#q'P#q#r?[#r~'P#O?gX%hS%kW%n`%w!bOr?[rs@Ssw?[wx4wx#O?[#O#PCO#P#o?[#o#pCU#p~?[#O@]X%hS%n`%w!bOr?[rs@xsw?[wx4wx#O?[#O#PCO#P#o?[#o#pCU#p~?[#OARX%hS%n`%w!bOr?[rsAnsw?[wx4wx#O?[#O#PCO#P#o?[#o#pCU#p~?[!vAwV%hS%n`%w!bOwAnwx/Xx#OAn#O#PB^#P#oAn#o#pBd#p~An!vBaPO~An!vBiV%hSOw0xwx1^x#O0x#O#P2P#P#o0x#o#pAn#p~0x#OCRPO~?[#OC]X%hS%kWOr8brs9Osw8bwx:Ux#O8b#O#P;[#P#o8b#o#p?[#p~8b9[DTZ%q7[%hS%n`%w!bOr'PrsDvsw'Pwx(Px#O'P#O#P>v#P#o'P#o#pCU#p#q'P#q#r?[#r~'P9SERX%q7[%hS%n`%w!bOwDvwx,ex#ODv#O#PEn#P#oDv#o#pBd#p#qDv#q#rAn#r~Dv9SEsT%q7[O#oDv#o#pAn#p#qDv#q#rAn#r~Dv<bF_Z%q7[%kW%tp%y#tOrGQrs)wswGQwxM^x#OGQ#O#PHS#P#oGQ#o#pLj#p#qGQ#q#rHh#r~GQ<bGaZ%q7[%hS%kW%tp%w!b%y#tOrGQrs)wswGQwxFSx#OGQ#O#PHS#P#oGQ#o#pLj#p#qGQ#q#rHh#r~GQ<bHXT%q7[O#oGQ#o#pHh#p#qGQ#q#rHh#r~GQ&UHuX%hS%kW%tp%w!b%y#tOrHhrs3aswHhwxIbx#OHh#O#PLd#P#oHh#o#pLj#p~Hh&UIkX%kW%tp%y#tOrHhrs3aswHhwxJWx#OHh#O#PLd#P#oHh#o#pLj#p~Hh&UJaX%kW%tp%y#tOrHhrs3aswHhwxJ|x#OHh#O#PLd#P#oHh#o#pLj#p~Hh$nKVX%kW%tp%y#tOrJ|rs6oswJ|wxJ|x#OJ|#O#PKr#P#oJ|#o#pKx#p~J|$nKuPO~J|$nK}V%kWOr6Zrs6os#O6Z#O#P7b#P#o6Z#o#pJ|#p~6Z&ULgPO~Hh&ULqX%hS%kWOr8brs9Osw8bwx:Ux#O8b#O#P;[#P#o8b#o#pHh#p~8b<bMiZ%q7[%kW%tp%y#tOrGQrs)wswGQwxN[x#OGQ#O#PHS#P#oGQ#o#pLj#p#qGQ#q#rHh#r~GQ:zNgZ%q7[%kW%tp%y#tOrN[rs=OswN[wxN[x#ON[#O#P! Y#P#oN[#o#pKx#p#qN[#q#rJ|#r~N[:z! _T%q7[O#oN[#o#pJ|#p#qN[#q#rJ|#r~N[<r! sT%q7[O#o$}#o#p!!S#p#q$}#q#r!!S#r~$}&f!!cX%hS%kW%n`%tp%w!b%y#tOr!!Srs@Ssw!!SwxIbx#O!!S#O#P!#O#P#o!!S#o#p!#U#p~!!S&f!#RPO~!!S&f!#]X%hS%kWOr8brs9Osw8bwx:Ux#O8b#O#P;[#P#o8b#o#p!!S#p~8bMg!$]a%q7[%hS%kW$o1s%n`%tp%w!b%y#tOX$}XY!#xY[$}[]!#x]p$}pq!#xqr$}rs&Rsw$}wxFSx#O$}#O#P!%b#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Mg!%gX%q7[OY$}YZ!#xZ]$}]^!#x^#o$}#o#p!!S#p#q$}#q#r!!S#r~$}<u!&eb%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx!_$}!_!`!'m!`#O$}#O#P! n#P#T$}#T#U!(s#U#f$}#f#g!(s#g#h!(s#h#o$}#o#p!#U#p#q$}#q#r!!S#r~$}<u!(QZjR%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}<u!)WZ!jR%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{!*Y_%up%q7[%hS%f,X%n`%w!bOY!+XYZ'PZ]!+X]^'P^r!+Xrs!BPsw!+Xwx!-gx#O!+X#O#P!>e#P#o!+X#o#p!@}#p#q!+X#q#r!>y#r~!+XDe!+h_%q7[%hS%kW%f,X%n`%w!bOY!+XYZ'PZ]!+X]^'P^r!+Xrs!,gsw!+Xwx!-gx#O!+X#O#P!>e#P#o!+X#o#p!@}#p#q!+X#q#r!>y#r~!+XDe!,tZ%q7[%hS%f,X%n`%w!bOr'PrsCxsw'Pwx(Px#O'P#O#P>v#P#o'P#o#pCU#p#q'P#q#r?[#r~'PDT!-p_%q7[%kW%f,XOY!.oYZ(yZ]!.o]^(y^r!.ors!/{sw!.owx!;Rx#O!.o#O#P!0y#P#o!.o#o#p!6m#p#q!.o#q#r!1_#r~!.oDT!.|_%q7[%hS%kW%f,X%w!bOY!.oYZ(yZ]!.o]^(y^r!.ors!/{sw!.owx!-gx#O!.o#O#P!0y#P#o!.o#o#p!6m#p#q!.o#q#r!1_#r~!.oDT!0WZ%q7[%hS%f,X%w!bOr(yrs*ssw(ywx(Px#O(y#O#P2V#P#o(y#o#p7n#p#q(y#q#r2k#r~(yDT!1OT%q7[O#o!.o#o#p!1_#p#q!.o#q#r!1_#r~!.o-w!1j]%hS%kW%f,X%w!bOY!1_YZ2kZ]!1_]^2k^r!1_rs!2csw!1_wx!3Xx#O!1_#O#P!6g#P#o!1_#o#p!6m#p~!1_-w!2lX%hS%f,X%w!bOr2krs4Tsw2kwx4wx#O2k#O#P7h#P#o2k#o#p7n#p~2k-w!3`]%kW%f,XOY!1_YZ2kZ]!1_]^2k^r!1_rs!2csw!1_wx!4Xx#O!1_#O#P!6g#P#o!1_#o#p!6m#p~!1_-w!4`]%kW%f,XOY!1_YZ2kZ]!1_]^2k^r!1_rs!2csw!1_wx!5Xx#O!1_#O#P!6g#P#o!1_#o#p!6m#p~!1_,a!5`X%kW%f,XOY!5XYZ6ZZ]!5X]^6Z^r!5Xrs!5{s#O!5X#O#P!6a#P~!5X,a!6QT%f,XOr6Zrs7Rs#O6Z#O#P7b#P~6Z,a!6dPO~!5X-w!6jPO~!1_-w!6v]%hS%kW%f,XOY!7oYZ8bZ]!7o]^8b^r!7ors!8ksw!7owx!9Xx#O!7o#O#P!:{#P#o!7o#o#p!1_#p~!7o,e!7xZ%hS%kW%f,XOY!7oYZ8bZ]!7o]^8b^r!7ors!8ksw!7owx!9Xx#O!7o#O#P!:{#P~!7o,e!8rV%hS%f,XOr8brs9jsw8bwx:Ux#O8b#O#P;[#P~8b,e!9`Z%kW%f,XOY!7oYZ8bZ]!7o]^8b^r!7ors!8ksw!7owx!:Rx#O!7o#O#P!:{#P~!7o,e!:YZ%kW%f,XOY!7oYZ8bZ]!7o]^8b^r!7ors!8ksw!7owx!5Xx#O!7o#O#P!:{#P~!7o,e!;OPO~!7oDT!;[_%q7[%kW%f,XOY!.oYZ(yZ]!.o]^(y^r!.ors!/{sw!.owx!<Zx#O!.o#O#P!0y#P#o!.o#o#p!6m#p#q!.o#q#r!1_#r~!.oBm!<d]%q7[%kW%f,XOY!<ZYZ<[Z]!<Z]^<[^r!<Zrs!=]s#O!<Z#O#P!>P#P#o!<Z#o#p!5X#p#q!<Z#q#r!5X#r~!<ZBm!=dX%q7[%f,XOr<[rs=ps#O<[#O#P>b#P#o<[#o#p6Z#p#q<[#q#r6Z#r~<[Bm!>UT%q7[O#o!<Z#o#p!5X#p#q!<Z#q#r!5X#r~!<ZDe!>jT%q7[O#o!+X#o#p!>y#p#q!+X#q#r!>y#r~!+X.X!?W]%hS%kW%f,X%n`%w!bOY!>yYZ?[Z]!>y]^?[^r!>yrs!@Psw!>ywx!3Xx#O!>y#O#P!@w#P#o!>y#o#p!@}#p~!>y.X!@[X%hS%f,X%n`%w!bOr?[rs@xsw?[wx4wx#O?[#O#PCO#P#o?[#o#pCU#p~?[.X!@zPO~!>y.X!AW]%hS%kW%f,XOY!7oYZ8bZ]!7o]^8b^r!7ors!8ksw!7owx!9Xx#O!7o#O#P!:{#P#o!7o#o#p!>y#p~!7oGZ!B^Z%q7[%hS%f,X%n`%w!bOr'Prs!CPsw'Pwx(Px#O'P#O#P>v#P#o'P#o#pCU#p#q'P#q#r?[#r~'PGZ!C`X%l#|%q7[%hS%j,X%n`%w!bOwDvwx,ex#ODv#O#PEn#P#oDv#o#pBd#p#qDv#q#rAn#r~DvMg!D`_Q1s%q7[%hS%kW%n`%tp%w!b%y#tOY!C{YZ$}Z]!C{]^$}^r!C{rs!E_sw!C{wx#Hqx#O!C{#O#P$(i#P#o!C{#o#p$*{#p#q!C{#q#r$)]#r~!C{JP!El_Q1s%q7[%hS%n`%w!bOY!FkYZ'PZ]!Fk]^'P^r!Fkrs#Eksw!Fkwx!Gyx#O!Fk#O#P#=u#P#o!Fk#o#p#Di#p#q!Fk#q#r#>i#r~!FkJP!Fz_Q1s%q7[%hS%kW%n`%w!bOY!FkYZ'PZ]!Fk]^'P^r!Fkrs!E_sw!Fkwx!Gyx#O!Fk#O#P#=u#P#o!Fk#o#p#Di#p#q!Fk#q#r#>i#r~!FkIo!HS_Q1s%q7[%kWOY!IRYZ(yZ]!IR]^(y^r!IRrs!J_sw!IRwx#8wx#O!IR#O#P#*R#P#o!IR#o#p#2}#p#q!IR#q#r#*u#r~!IRIo!I`_Q1s%q7[%hS%kW%w!bOY!IRYZ(yZ]!IR]^(y^r!IRrs!J_sw!IRwx!Gyx#O!IR#O#P#*R#P#o!IR#o#p#2}#p#q!IR#q#r#*u#r~!IRIo!Jj_Q1s%q7[%hS%w!bOY!IRYZ(yZ]!IR]^(y^r!IRrs!Kisw!IRwx!Gyx#O!IR#O#P#*R#P#o!IR#o#p#2}#p#q!IR#q#r#*u#r~!IRIo!Kt_Q1s%q7[%hS%w!bOY!IRYZ(yZ]!IR]^(y^r!IRrs!Lssw!IRwx!Gyx#O!IR#O#P#*R#P#o!IR#o#p#2}#p#q!IR#q#r#*u#r~!IRIg!MO]Q1s%q7[%hS%w!bOY!LsYZ+oZ]!Ls]^+o^w!Lswx!Mwx#O!Ls#O#P#!y#P#o!Ls#o#p#&m#p#q!Ls#q#r##m#r~!LsIg!NO]Q1s%q7[OY!LsYZ+oZ]!Ls]^+o^w!Lswx!Nwx#O!Ls#O#P#!y#P#o!Ls#o#p#&m#p#q!Ls#q#r##m#r~!LsIg# O]Q1s%q7[OY!LsYZ+oZ]!Ls]^+o^w!Lswx# wx#O!Ls#O#P#!y#P#o!Ls#o#p#&m#p#q!Ls#q#r##m#r~!LsHP#!OXQ1s%q7[OY# wYZ-wZ]# w]^-w^#o# w#o#p#!k#p#q# w#q#r#!k#r~# w1s#!pRQ1sOY#!kZ]#!k^~#!kIg##QXQ1s%q7[OY!LsYZ+oZ]!Ls]^+o^#o!Ls#o#p##m#p#q!Ls#q#r##m#r~!Ls3Z##vZQ1s%hS%w!bOY##mYZ.kZ]##m]^.k^w##mwx#$ix#O##m#O#P#&X#P#o##m#o#p#&m#p~##m3Z#$nZQ1sOY##mYZ.kZ]##m]^.k^w##mwx#%ax#O##m#O#P#&X#P#o##m#o#p#&m#p~##m3Z#%fZQ1sOY##mYZ.kZ]##m]^.k^w##mwx#!kx#O##m#O#P#&X#P#o##m#o#p#&m#p~##m3Z#&^TQ1sOY##mYZ.kZ]##m]^.k^~##m3Z#&tZQ1s%hSOY#'gYZ0xZ]#'g]^0x^w#'gwx#(Zx#O#'g#O#P#)m#P#o#'g#o#p##m#p~#'g1w#'nXQ1s%hSOY#'gYZ0xZ]#'g]^0x^w#'gwx#(Zx#O#'g#O#P#)m#P~#'g1w#(`XQ1sOY#'gYZ0xZ]#'g]^0x^w#'gwx#({x#O#'g#O#P#)m#P~#'g1w#)QXQ1sOY#'gYZ0xZ]#'g]^0x^w#'gwx#!kx#O#'g#O#P#)m#P~#'g1w#)rTQ1sOY#'gYZ0xZ]#'g]^0x^~#'gIo#*YXQ1s%q7[OY!IRYZ(yZ]!IR]^(y^#o!IR#o#p#*u#p#q!IR#q#r#*u#r~!IR3c#+Q]Q1s%hS%kW%w!bOY#*uYZ2kZ]#*u]^2k^r#*urs#+ysw#*uwx#-}x#O#*u#O#P#2i#P#o#*u#o#p#2}#p~#*u3c#,S]Q1s%hS%w!bOY#*uYZ2kZ]#*u]^2k^r#*urs#,{sw#*uwx#-}x#O#*u#O#P#2i#P#o#*u#o#p#2}#p~#*u3c#-U]Q1s%hS%w!bOY#*uYZ2kZ]#*u]^2k^r#*urs##msw#*uwx#-}x#O#*u#O#P#2i#P#o#*u#o#p#2}#p~#*u3c#.U]Q1s%kWOY#*uYZ2kZ]#*u]^2k^r#*urs#+ysw#*uwx#.}x#O#*u#O#P#2i#P#o#*u#o#p#2}#p~#*u3c#/U]Q1s%kWOY#*uYZ2kZ]#*u]^2k^r#*urs#+ysw#*uwx#/}x#O#*u#O#P#2i#P#o#*u#o#p#2}#p~#*u1{#0UXQ1s%kWOY#/}YZ6ZZ]#/}]^6Z^r#/}rs#0qs#O#/}#O#P#2T#P~#/}1{#0vXQ1sOY#/}YZ6ZZ]#/}]^6Z^r#/}rs#1cs#O#/}#O#P#2T#P~#/}1{#1hXQ1sOY#/}YZ6ZZ]#/}]^6Z^r#/}rs#!ks#O#/}#O#P#2T#P~#/}1{#2YTQ1sOY#/}YZ6ZZ]#/}]^6Z^~#/}3c#2nTQ1sOY#*uYZ2kZ]#*u]^2k^~#*u3c#3W]Q1s%hS%kWOY#4PYZ8bZ]#4P]^8b^r#4Prs#4{sw#4Pwx#6ox#O#4P#O#P#8c#P#o#4P#o#p#*u#p~#4P2P#4YZQ1s%hS%kWOY#4PYZ8bZ]#4P]^8b^r#4Prs#4{sw#4Pwx#6ox#O#4P#O#P#8c#P~#4P2P#5SZQ1s%hSOY#4PYZ8bZ]#4P]^8b^r#4Prs#5usw#4Pwx#6ox#O#4P#O#P#8c#P~#4P2P#5|ZQ1s%hSOY#4PYZ8bZ]#4P]^8b^r#4Prs#'gsw#4Pwx#6ox#O#4P#O#P#8c#P~#4P2P#6vZQ1s%kWOY#4PYZ8bZ]#4P]^8b^r#4Prs#4{sw#4Pwx#7ix#O#4P#O#P#8c#P~#4P2P#7pZQ1s%kWOY#4PYZ8bZ]#4P]^8b^r#4Prs#4{sw#4Pwx#/}x#O#4P#O#P#8c#P~#4P2P#8hTQ1sOY#4PYZ8bZ]#4P]^8b^~#4PIo#9Q_Q1s%q7[%kWOY!IRYZ(yZ]!IR]^(y^r!IRrs!J_sw!IRwx#:Px#O!IR#O#P#*R#P#o!IR#o#p#2}#p#q!IR#q#r#*u#r~!IRHX#:Y]Q1s%q7[%kWOY#:PYZ<[Z]#:P]^<[^r#:Prs#;Rs#O#:P#O#P#=R#P#o#:P#o#p#/}#p#q#:P#q#r#/}#r~#:PHX#;Y]Q1s%q7[OY#:PYZ<[Z]#:P]^<[^r#:Prs#<Rs#O#:P#O#P#=R#P#o#:P#o#p#/}#p#q#:P#q#r#/}#r~#:PHX#<Y]Q1s%q7[OY#:PYZ<[Z]#:P]^<[^r#:Prs# ws#O#:P#O#P#=R#P#o#:P#o#p#/}#p#q#:P#q#r#/}#r~#:PHX#=YXQ1s%q7[OY#:PYZ<[Z]#:P]^<[^#o#:P#o#p#/}#p#q#:P#q#r#/}#r~#:PJP#=|XQ1s%q7[OY!FkYZ'PZ]!Fk]^'P^#o!Fk#o#p#>i#p#q!Fk#q#r#>i#r~!Fk3s#>v]Q1s%hS%kW%n`%w!bOY#>iYZ?[Z]#>i]^?[^r#>irs#?osw#>iwx#-}x#O#>i#O#P#DT#P#o#>i#o#p#Di#p~#>i3s#?z]Q1s%hS%n`%w!bOY#>iYZ?[Z]#>i]^?[^r#>irs#@ssw#>iwx#-}x#O#>i#O#P#DT#P#o#>i#o#p#Di#p~#>i3s#AO]Q1s%hS%n`%w!bOY#>iYZ?[Z]#>i]^?[^r#>irs#Awsw#>iwx#-}x#O#>i#O#P#DT#P#o#>i#o#p#Di#p~#>i3k#BSZQ1s%hS%n`%w!bOY#AwYZAnZ]#Aw]^An^w#Awwx#$ix#O#Aw#O#P#Bu#P#o#Aw#o#p#CZ#p~#Aw3k#BzTQ1sOY#AwYZAnZ]#Aw]^An^~#Aw3k#CbZQ1s%hSOY#'gYZ0xZ]#'g]^0x^w#'gwx#(Zx#O#'g#O#P#)m#P#o#'g#o#p#Aw#p~#'g3s#DYTQ1sOY#>iYZ?[Z]#>i]^?[^~#>i3s#Dr]Q1s%hS%kWOY#4PYZ8bZ]#4P]^8b^r#4Prs#4{sw#4Pwx#6ox#O#4P#O#P#8c#P#o#4P#o#p#>i#p~#4PJP#Ex_Q1s%q7[%hS%n`%w!bOY!FkYZ'PZ]!Fk]^'P^r!Fkrs#Fwsw!Fkwx!Gyx#O!Fk#O#P#=u#P#o!Fk#o#p#Di#p#q!Fk#q#r#>i#r~!FkIw#GU]Q1s%q7[%hS%n`%w!bOY#FwYZDvZ]#Fw]^Dv^w#Fwwx!Mwx#O#Fw#O#P#G}#P#o#Fw#o#p#CZ#p#q#Fw#q#r#Aw#r~#FwIw#HUXQ1s%q7[OY#FwYZDvZ]#Fw]^Dv^#o#Fw#o#p#Aw#p#q#Fw#q#r#Aw#r~#FwMV#IO_Q1s%q7[%kW%tp%y#tOY#I}YZGQZ]#I}]^GQ^r#I}rs!J_sw#I}wx$%]x#O#I}#O#P#K_#P#o#I}#o#p$$Z#p#q#I}#q#r#LR#r~#I}MV#J`_Q1s%q7[%hS%kW%tp%w!b%y#tOY#I}YZGQZ]#I}]^GQ^r#I}rs!J_sw#I}wx#Hqx#O#I}#O#P#K_#P#o#I}#o#p$$Z#p#q#I}#q#r#LR#r~#I}MV#KfXQ1s%q7[OY#I}YZGQZ]#I}]^GQ^#o#I}#o#p#LR#p#q#I}#q#r#LR#r~#I}6y#Lb]Q1s%hS%kW%tp%w!b%y#tOY#LRYZHhZ]#LR]^Hh^r#LRrs#+ysw#LRwx#MZx#O#LR#O#P$#u#P#o#LR#o#p$$Z#p~#LR6y#Mf]Q1s%kW%tp%y#tOY#LRYZHhZ]#LR]^Hh^r#LRrs#+ysw#LRwx#N_x#O#LR#O#P$#u#P#o#LR#o#p$$Z#p~#LR6y#Nj]Q1s%kW%tp%y#tOY#LRYZHhZ]#LR]^Hh^r#LRrs#+ysw#LRwx$ cx#O#LR#O#P$#u#P#o#LR#o#p$$Z#p~#LR5c$ n]Q1s%kW%tp%y#tOY$ cYZJ|Z]$ c]^J|^r$ crs#0qsw$ cwx$ cx#O$ c#O#P$!g#P#o$ c#o#p$!{#p~$ c5c$!lTQ1sOY$ cYZJ|Z]$ c]^J|^~$ c5c$#SZQ1s%kWOY#/}YZ6ZZ]#/}]^6Z^r#/}rs#0qs#O#/}#O#P#2T#P#o#/}#o#p$ c#p~#/}6y$#zTQ1sOY#LRYZHhZ]#LR]^Hh^~#LR6y$$d]Q1s%hS%kWOY#4PYZ8bZ]#4P]^8b^r#4Prs#4{sw#4Pwx#6ox#O#4P#O#P#8c#P#o#4P#o#p#LR#p~#4PMV$%j_Q1s%q7[%kW%tp%y#tOY#I}YZGQZ]#I}]^GQ^r#I}rs!J_sw#I}wx$&ix#O#I}#O#P#K_#P#o#I}#o#p$$Z#p#q#I}#q#r#LR#r~#I}Ko$&v_Q1s%q7[%kW%tp%y#tOY$&iYZN[Z]$&i]^N[^r$&irs#;Rsw$&iwx$&ix#O$&i#O#P$'u#P#o$&i#o#p$!{#p#q$&i#q#r$ c#r~$&iKo$'|XQ1s%q7[OY$&iYZN[Z]$&i]^N[^#o$&i#o#p$ c#p#q$&i#q#r$ c#r~$&iMg$(pXQ1s%q7[OY!C{YZ$}Z]!C{]^$}^#o!C{#o#p$)]#p#q!C{#q#r$)]#r~!C{7Z$)n]Q1s%hS%kW%n`%tp%w!b%y#tOY$)]YZ!!SZ]$)]]^!!S^r$)]rs#?osw$)]wx#MZx#O$)]#O#P$*g#P#o$)]#o#p$*{#p~$)]7Z$*lTQ1sOY$)]YZ!!SZ]$)]]^!!S^~$)]7Z$+U]Q1s%hS%kWOY#4PYZ8bZ]#4P]^8b^r#4Prs#4{sw#4Pwx#6ox#O#4P#O#P#8c#P#o#4P#o#p$)]#p~#4PGz$,b]$}Q%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gz$-nZ!s,W%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gz$.t]$wQ%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{$/|_%r`%q7[%kW%f,X%tp%y#tOY$0{YZGQZ]$0{]^GQ^r$0{rs$2]sw$0{wx$Jex#O$0{#O#P$Fw#P#o$0{#o#p$Ic#p#q$0{#q#r$G]#r~$0{Gk$1^_%q7[%hS%kW%f,X%tp%w!b%y#tOY$0{YZGQZ]$0{]^GQ^r$0{rs$2]sw$0{wx$Ewx#O$0{#O#P$Fw#P#o$0{#o#p$Ic#p#q$0{#q#r$G]#r~$0{DT$2h_%q7[%hS%f,X%w!bOY$3gYZ(yZ]$3g]^(y^r$3grs$Basw$3gwx$4sx#O$3g#O#P$5o#P#o$3g#o#p$={#p#q$3g#q#r$6T#r~$3gDT$3t_%q7[%hS%kW%f,X%w!bOY$3gYZ(yZ]$3g]^(y^r$3grs$2]sw$3gwx$4sx#O$3g#O#P$5o#P#o$3g#o#p$={#p#q$3g#q#r$6T#r~$3gDT$4|Z%q7[%kW%f,XOr(yrs)wsw(ywx;bx#O(y#O#P2V#P#o(y#o#p7n#p#q(y#q#r2k#r~(yDT$5tT%q7[O#o$3g#o#p$6T#p#q$3g#q#r$6T#r~$3g-w$6`]%hS%kW%f,X%w!bOY$6TYZ2kZ]$6T]^2k^r$6Trs$7Xsw$6Twx$=Rx#O$6T#O#P$=u#P#o$6T#o#p$={#p~$6T-w$7b]%hS%f,X%w!bOY$6TYZ2kZ]$6T]^2k^r$6Trs$8Zsw$6Twx$=Rx#O$6T#O#P$=u#P#o$6T#o#p$={#p~$6T-w$8d]%hS%f,X%w!bOY$6TYZ2kZ]$6T]^2k^r$6Trs$9]sw$6Twx$=Rx#O$6T#O#P$=u#P#o$6T#o#p$={#p~$6T-o$9fZ%hS%f,X%w!bOY$9]YZ.kZ]$9]]^.k^w$9]wx$:Xx#O$9]#O#P$:s#P#o$9]#o#p$:y#p~$9]-o$:^V%f,XOw.kwx/qx#O.k#O#P0W#P#o.k#o#p0^#p~.k-o$:vPO~$9]-o$;QZ%hS%f,XOY$;sYZ0xZ]$;s]^0x^w$;swx$<gx#O$;s#O#P$<{#P#o$;s#o#p$9]#p~$;s,]$;zX%hS%f,XOY$;sYZ0xZ]$;s]^0x^w$;swx$<gx#O$;s#O#P$<{#P~$;s,]$<lT%f,XOw0xwx1px#O0x#O#P2P#P~0x,]$=OPO~$;s-w$=YX%kW%f,XOr2krs3asw2kwx5ix#O2k#O#P7h#P#o2k#o#p7n#p~2k-w$=xPO~$6T-w$>U]%hS%kW%f,XOY$>}YZ8bZ]$>}]^8b^r$>}rs$?ysw$>}wx$Amx#O$>}#O#P$BZ#P#o$>}#o#p$6T#p~$>},e$?WZ%hS%kW%f,XOY$>}YZ8bZ]$>}]^8b^r$>}rs$?ysw$>}wx$Amx#O$>}#O#P$BZ#P~$>},e$@QZ%hS%f,XOY$>}YZ8bZ]$>}]^8b^r$>}rs$@ssw$>}wx$Amx#O$>}#O#P$BZ#P~$>},e$@zZ%hS%f,XOY$>}YZ8bZ]$>}]^8b^r$>}rs$;ssw$>}wx$Amx#O$>}#O#P$BZ#P~$>},e$AtV%kW%f,XOr8brs9Osw8bwx:px#O8b#O#P;[#P~8b,e$B^PO~$>}DT$Bl_%q7[%hS%f,X%w!bOY$3gYZ(yZ]$3g]^(y^r$3grs$Cksw$3gwx$4sx#O$3g#O#P$5o#P#o$3g#o#p$={#p#q$3g#q#r$6T#r~$3gC{$Cv]%q7[%hS%f,X%w!bOY$CkYZ+oZ]$Ck]^+o^w$Ckwx$Dox#O$Ck#O#P$Ec#P#o$Ck#o#p$:y#p#q$Ck#q#r$9]#r~$CkC{$DvX%q7[%f,XOw+owx-Vx#O+o#O#P.V#P#o+o#o#p0^#p#q+o#q#r.k#r~+oC{$EhT%q7[O#o$Ck#o#p$9]#p#q$Ck#q#r$9]#r~$CkGk$FUZ%q7[%kW%f,X%tp%y#tOrGQrs)wswGQwxM^x#OGQ#O#PHS#P#oGQ#o#pLj#p#qGQ#q#rHh#r~GQGk$F|T%q7[O#o$0{#o#p$G]#p#q$0{#q#r$G]#r~$0{1_$Gl]%hS%kW%f,X%tp%w!b%y#tOY$G]YZHhZ]$G]]^Hh^r$G]rs$7Xsw$G]wx$Hex#O$G]#O#P$I]#P#o$G]#o#p$Ic#p~$G]1_$HpX%kW%f,X%tp%y#tOrHhrs3aswHhwxJWx#OHh#O#PLd#P#oHh#o#pLj#p~Hh1_$I`PO~$G]1_$Il]%hS%kW%f,XOY$>}YZ8bZ]$>}]^8b^r$>}rs$?ysw$>}wx$Amx#O$>}#O#P$BZ#P#o$>}#o#p$G]#p~$>}Gk$JrZ%q7[%kW%f,X%tp%y#tOrGQrs)wswGQwx$Kex#OGQ#O#PHS#P#oGQ#o#pLj#p#qGQ#q#rHh#r~GQGk$KtZ%i!f%q7[%kW%g,X%tp%y#tOrN[rs=OswN[wxN[x#ON[#O#P! Y#P#oN[#o#pKx#p#qN[#q#rJ|#r~N[G{$LzZf,X%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}<u$NQZ!OR%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{% W_T,X%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSxz$}z{%!V{!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%!j]_R%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%#v]$z,X%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}<u%%SZwR%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Mg%&Y^${,X%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`!a%'U!a#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}B^%'iZ&U&j%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%(o_!dQ%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx!O$}!O!P%)n!P!Q$}!Q![%,O![#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%*P]%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx!O$}!O!P%*x!P#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%+]Z!m,X%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%,cg!f,V%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx!Q$}!Q![%,O![!g$}!g!h%-z!h!l$}!l!m%2[!m#O$}#O#P! n#P#R$}#R#S%,O#S#X$}#X#Y%-z#Y#^$}#^#_%2[#_#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%.]a%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx{$}{|%/b|}$}}!O%/b!O!Q$}!Q![%0l![#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%/s]%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx!Q$}!Q![%0l![#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%1Pc!f,V%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx!Q$}!Q![%0l![!l$}!l!m%2[!m#O$}#O#P! n#P#R$}#R#S%0l#S#^$}#^#_%2[#_#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%2oZ!f,V%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%3u_$|R%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx!P$}!P!Q%4t!Q!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gz%5X]%OQ%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%6eu!f,V%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx!O$}!O!P%8x!P!Q$}!Q![%:S![!d$}!d!e%<U!e!g$}!g!h%-z!h!l$}!l!m%2[!m!q$}!q!r%?O!r!z$}!z!{%Ar!{#O$}#O#P! n#P#R$}#R#S%:S#S#U$}#U#V%<U#V#X$}#X#Y%-z#Y#^$}#^#_%2[#_#c$}#c#d%?O#d#l$}#l#m%Ar#m#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%9Z]%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx!Q$}!Q![%,O![#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%:gi!f,V%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx!O$}!O!P%8x!P!Q$}!Q![%:S![!g$}!g!h%-z!h!l$}!l!m%2[!m#O$}#O#P! n#P#R$}#R#S%:S#S#X$}#X#Y%-z#Y#^$}#^#_%2[#_#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%<g`%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx!Q$}!Q!R%=i!R!S%=i!S#O$}#O#P! n#P#R$}#R#S%=i#S#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%=|`!f,V%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx!Q$}!Q!R%=i!R!S%=i!S#O$}#O#P! n#P#R$}#R#S%=i#S#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%?a_%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx!Q$}!Q!Y%@`!Y#O$}#O#P! n#P#R$}#R#S%@`#S#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%@s_!f,V%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx!Q$}!Q!Y%@`!Y#O$}#O#P! n#P#R$}#R#S%@`#S#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%BTc%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx!Q$}!Q![%C`![!c$}!c!i%C`!i#O$}#O#P! n#P#R$}#R#S%C`#S#T$}#T#Z%C`#Z#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%Csc!f,V%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx!Q$}!Q![%C`![!c$}!c!i%C`!i#O$}#O#P! n#P#R$}#R#S%C`#S#T$}#T#Z%C`#Z#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Mg%Ec]x1s%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx!_$}!_!`%F[!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}<u%FoZ%WR%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%GuZ#^,X%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%H{_jR%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx!^$}!^!_%Iz!_!`!'m!`!a!'m!a#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gz%J_]$xQ%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%Kk]%V,X%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx!_$}!_!`!'m!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%Lw^jR%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx!_$}!_!`!'m!`!a%Ms!a#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gz%NW]$yQ%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{& f]]Q#tP%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Mg&!tc%q7[%hS%kW%e&j%n`%tp%w!b%y#t%Q,XOr$}rs&Rsw$}wxFSx!Q$}!Q![&!_![!c$}!c!}&!_!}#O$}#O#P! n#P#R$}#R#S&!_#S#T$}#T#o&!_#o#p!#U#p#q$}#q#r!!S#r$g$}$g~&!_Mg&$fg%q7[%hS%kW%e&j%n`%tp%w!b%y#t%Q,XOr$}rs&%}sw$}wx&)Tx!Q$}!Q![&!_![!c$}!c!t&!_!t!u&,a!u!}&!_!}#O$}#O#P! n#P#R$}#R#S&!_#S#T$}#T#f&!_#f#g&,a#g#o&!_#o#p!#U#p#q$}#q#r!!S#r$g$}$g~&!_De&&[_%q7[%hS%f,X%n`%w!bOY!+XYZ'PZ]!+X]^'P^r!+Xrs&'Zsw!+Xwx!-gx#O!+X#O#P!>e#P#o!+X#o#p!@}#p#q!+X#q#r!>y#r~!+XDe&'hZ%q7[%hS%f,X%n`%w!bOr'Prs&(Zsw'Pwx(Px#O'P#O#P>v#P#o'P#o#pCU#p#q'P#q#r?[#r~'PD]&(hX%q7[%hS%j,X%n`%w!bOwDvwx,ex#ODv#O#PEn#P#oDv#o#pBd#p#qDv#q#rAn#r~DvGk&)b_%q7[%kW%f,X%tp%y#tOY$0{YZGQZ]$0{]^GQ^r$0{rs$2]sw$0{wx&*ax#O$0{#O#P$Fw#P#o$0{#o#p$Ic#p#q$0{#q#r$G]#r~$0{Gk&*nZ%q7[%kW%f,X%tp%y#tOrGQrs)wswGQwx&+ax#OGQ#O#PHS#P#oGQ#o#pLj#p#qGQ#q#rHh#r~GQFT&+nZ%q7[%kW%g,X%tp%y#tOrN[rs=OswN[wxN[x#ON[#O#P! Y#P#oN[#o#pKx#p#qN[#q#rJ|#r~N[Mg&,vc%q7[%hS%kW%e&j%n`%tp%w!b%y#t%Q,XOr$}rs&%}sw$}wx&)Tx!Q$}!Q![&!_![!c$}!c!}&!_!}#O$}#O#P! n#P#R$}#R#S&!_#S#T$}#T#o&!_#o#p!#U#p#q$}#q#r!!S#r$g$}$g~&!_Mg&.hg%q7[%hS%kW%e&j%n`%tp%w!b%y#t%Q,XOr$}rs&0Psw$}wx&2wx!Q$}!Q![&!_![!c$}!c!t&!_!t!u&5u!u!}&!_!}#O$}#O#P! n#P#R$}#R#S&!_#S#T$}#T#f&!_#f#g&5u#g#o&!_#o#p!#U#p#q$}#q#r!!S#r$g$}$g~&!_De&0^Z%q7[%hS%n`%w!b%s,XOr'Prs&1Psw'Pwx(Px#O'P#O#P>v#P#o'P#o#pCU#p#q'P#q#r?[#r~'PDe&1[Z%q7[%hS%n`%w!bOr'Prs&1}sw'Pwx(Px#O'P#O#P>v#P#o'P#o#pCU#p#q'P#q#r?[#r~'PD]&2[X%q7[%hS%x,X%n`%w!bOwDvwx,ex#ODv#O#PEn#P#oDv#o#pBd#p#qDv#q#rAn#r~DvGk&3UZ%q7[%kW%tp%y#t%m,XOrGQrs)wswGQwx&3wx#OGQ#O#PHS#P#oGQ#o#pLj#p#qGQ#q#rHh#r~GQGk&4SZ%q7[%kW%tp%y#tOrGQrs)wswGQwx&4ux#OGQ#O#PHS#P#oGQ#o#pLj#p#qGQ#q#rHh#r~GQFT&5SZ%q7[%kW%v,X%tp%y#tOrN[rs=OswN[wxN[x#ON[#O#P! Y#P#oN[#o#pKx#p#qN[#q#rJ|#r~N[Mg&6[c%q7[%hS%kW%e&j%n`%tp%w!b%y#t%Q,XOr$}rs&0Psw$}wx&2wx!Q$}!Q![&!_![!c$}!c!}&!_!}#O$}#O#P! n#P#R$}#R#S&!_#S#T$}#T#o&!_#o#p!#U#p#q$}#q#r!!S#r$g$}$g~&!_Mg&7|k%q7[%hS%kW%e&j%n`%tp%w!b%y#t%Q,XOr$}rs&%}sw$}wx&)Tx!Q$}!Q![&!_![!c$}!c!h&!_!h!i&5u!i!t&!_!t!u&,a!u!}&!_!}#O$}#O#P! n#P#R$}#R#S&!_#S#T$}#T#U&!_#U#V&,a#V#Y&!_#Y#Z&5u#Z#o&!_#o#p!#U#p#q$}#q#r!!S#r$g$}$g~&!_G{&:UZ!V,X%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}<u&;[Z!WR%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gz&<b]$vQ%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy&=dX%hS%kW!ZGmOr8brs9Osw8bwx:Ux#O8b#O#P;[#P#o8b#o#p!!S#p~8bGz&>d]$uQ%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}<u&?nX![7_%hS%kW%n`%tp%w!b%y#tOr!!Srs@Ssw!!SwxIbx#O!!S#O#P!#O#P#o!!S#o#p!#U#p~!!SGy&@nZ%P,V%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}",
      tokenizers: [legacyPrint, indentation, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, newlines],
      topRules: {"Script":[0,3]},
      specialized: [{term: 186, get: value => spec_identifier$1[value] || -1}],
      tokenPrec: 6589
    });

    function indentBody(context, node) {
        let base = context.lineIndent(node.from);
        let line = context.lineAt(context.pos, -1), to = line.from + line.text.length;
        // Don't consider blank, deindented lines at the end of the
        // block part of the block
        if (!/\S/.test(line.text) &&
            context.node.to < to + 100 &&
            !/\S/.test(context.state.sliceDoc(to, context.node.to)) &&
            context.lineIndent(context.pos, -1) <= base)
            return null;
        // A normally deindenting keyword that appears at a higher
        // indentation than the block should probably be handled by the next
        // level
        if (/^\s*(else:|elif |except |finally:)/.test(context.textAfter) && context.lineIndent(context.pos, -1) > base)
            return null;
        return base + context.unit;
    }
    /**
    A language provider based on the [Lezer Python
    parser](https://github.com/lezer-parser/python), extended with
    highlighting and indentation information.
    */
    const pythonLanguage = /*@__PURE__*/LRLanguage.define({
        parser: /*@__PURE__*/parser$2.configure({
            props: [
                /*@__PURE__*/indentNodeProp.add({
                    Body: context => { var _a; return (_a = indentBody(context, context.node)) !== null && _a !== void 0 ? _a : context.continue(); },
                    IfStatement: cx => /^\s*(else:|elif )/.test(cx.textAfter) ? cx.baseIndent : cx.continue(),
                    TryStatement: cx => /^\s*(except |finally:)/.test(cx.textAfter) ? cx.baseIndent : cx.continue(),
                    "TupleExpression ComprehensionExpression ParamList ArgList ParenthesizedExpression": /*@__PURE__*/delimitedIndent({ closing: ")" }),
                    "DictionaryExpression DictionaryComprehensionExpression SetExpression SetComprehensionExpression": /*@__PURE__*/delimitedIndent({ closing: "}" }),
                    "ArrayExpression ArrayComprehensionExpression": /*@__PURE__*/delimitedIndent({ closing: "]" }),
                    Script: context => {
                        if (context.pos + /\s*/.exec(context.textAfter)[0].length >= context.node.to) {
                            let endBody = null;
                            for (let cur = context.node, to = cur.to;;) {
                                cur = cur.lastChild;
                                if (!cur || cur.to != to)
                                    break;
                                if (cur.type.name == "Body")
                                    endBody = cur;
                            }
                            if (endBody) {
                                let bodyIndent = indentBody(context, endBody);
                                if (bodyIndent != null)
                                    return bodyIndent;
                            }
                        }
                        return context.continue();
                    }
                }),
                /*@__PURE__*/foldNodeProp.add({
                    "Body ArrayExpression DictionaryExpression": foldInside$1
                }),
                /*@__PURE__*/styleTags({
                    "async '*' '**' FormatConversion": tags$1.modifier,
                    "for while if elif else try except finally return raise break continue with pass assert await yield": tags$1.controlKeyword,
                    "in not and or is del": tags$1.operatorKeyword,
                    "import from def class global nonlocal lambda": tags$1.definitionKeyword,
                    "with as print": tags$1.keyword,
                    self: tags$1.self,
                    Boolean: tags$1.bool,
                    None: tags$1.null,
                    VariableName: tags$1.variableName,
                    "CallExpression/VariableName": /*@__PURE__*/tags$1.function(tags$1.variableName),
                    "FunctionDefinition/VariableName": /*@__PURE__*/tags$1.function(/*@__PURE__*/tags$1.definition(tags$1.variableName)),
                    "ClassDefinition/VariableName": /*@__PURE__*/tags$1.definition(tags$1.className),
                    PropertyName: tags$1.propertyName,
                    "CallExpression/MemberExpression/PropertyName": /*@__PURE__*/tags$1.function(tags$1.propertyName),
                    Comment: tags$1.lineComment,
                    Number: tags$1.number,
                    String: tags$1.string,
                    FormatString: /*@__PURE__*/tags$1.special(tags$1.string),
                    UpdateOp: tags$1.updateOperator,
                    ArithOp: tags$1.arithmeticOperator,
                    BitOp: tags$1.bitwiseOperator,
                    CompareOp: tags$1.compareOperator,
                    AssignOp: tags$1.definitionOperator,
                    Ellipsis: tags$1.punctuation,
                    At: tags$1.meta,
                    "( )": tags$1.paren,
                    "[ ]": tags$1.squareBracket,
                    "{ }": tags$1.brace,
                    ".": tags$1.derefOperator,
                    ", ;": tags$1.separator
                })
            ],
        }),
        languageData: {
            closeBrackets: { brackets: ["(", "[", "{", "'", '"', "'''", '"""'] },
            commentTokens: { line: "#" },
            indentOnInput: /^\s*([\}\]\)]|else:|elif |except |finally:)$/
        }
    });
    /**
    Python language support.
    */
    function python$2() {
        return new LanguageSupport(pythonLanguage);
    }

    var index$2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        python: python$2,
        pythonLanguage: pythonLanguage
    });

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const closureParamDelim = 1,
      tpOpen = 2,
      tpClose = 3,
      RawString = 4,
      Float = 5;

    const _b = 98, _e = 101, _f = 102, _r = 114, _E = 69, Zero = 48,
          Dot = 46, Plus = 43, Minus = 45, Hash = 35, Quote = 34, Pipe = 124, LessThan = 60, GreaterThan = 62;

    function isNum(ch) { return ch >= 48 && ch <= 57 }
    function isNum_(ch) { return isNum(ch) || ch == 95 }

    const literalTokens = new ExternalTokenizer((input, stack) => {
      if (isNum(input.next)) {
        let isFloat = false;
        do { input.advance(); } while (isNum_(input.next))
        if (input.next == Dot) {
          isFloat = true;
          input.advance();
          if (isNum(input.next)) {
            do { input.advance(); } while (isNum_(input.next))
          } else if (input.next == Dot || input.next > 0x7f || /\w/.test(String.fromCharCode(input.next))) {
            return
          }
        }
        if (input.next == _e || input.next == _E) {
          isFloat = true;
          input.advance();
          if (input.next == Plus || input.next == Minus) input.advance();
          if (!isNum_(input.next)) return
          do { input.advance(); } while (isNum_(input.next))
        }
        if (input.next == _f) {
          let after = input.peek(1);
          if (after == Zero + 3 && input.peek(2) == Zero + 2 ||
              after == Zero + 6 && input.peek(2) == Zero + 4) {
            input.advance(3);
            isFloat = true;
          } else {
            return
          }
        }
        if (isFloat) input.acceptToken(Float);
      } else if (input.next == _b || input.next == _r) {
        if (input.next == _b) input.advance();
        if (input.next != _r) return
        input.advance();
        let count = 0;
        while (input.next == Hash) { count++; input.advance(); }
        if (input.next != Quote) return
        input.advance();
        content: for (;;) {
          if (input.next < 0) return
          let isQuote = input.next == Quote;
          input.advance();
          if (isQuote) {
            for (let i = 0; i < count; i++) {
              if (input.next != Hash) continue content
              input.advance();
            }
            input.acceptToken(RawString);
            return
          }
        }
      }
    });

    const closureParam = new ExternalTokenizer(input => {
      if (input.next == Pipe) input.acceptToken(closureParamDelim, 1);
    });

    const tpDelim = new ExternalTokenizer(input => {
      if (input.next == LessThan) input.acceptToken(tpOpen, 1);
      else if (input.next == GreaterThan) input.acceptToken(tpClose, 1);
    });

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const spec_identifier = {__proto__:null,self:28, super:32, crate:34, impl:46, true:72, false:72, pub:88, in:92, const:96, unsafe:104, async:108, move:110, if:114, let:118, ref:142, mut:144, _:198, else:200, match:204, as:248, return:252, await:262, break:270, continue:276, while:312, loop:316, for:320, macro_rules:327, mod:334, extern:342, struct:346, where:364, union:379, enum:382, type:390, default:395, fn:396, trait:412, use:420, static:438, dyn:476};
    const parser$1 = LRParser.deserialize({
      version: 13,
      states: "$3tQ]Q_OOP$wOWOOO&sQWO'#CnO)WQWO'#IaOOQP'#Ia'#IaOOQQ'#If'#IfO)hO`O'#C}OOQR'#Ii'#IiO)sQWO'#IvOOQO'#Hk'#HkO)xQWO'#DpOOQR'#Ix'#IxO)xQWO'#DpO*ZQWO'#DpOOQO'#Iw'#IwO,SQWO'#J`O,ZQWO'#EiOOQV'#Hp'#HpO,cQYO'#F{OOQV'#El'#ElOOQV'#Em'#EmOOQV'#En'#EnO.YQ_O'#EkO0_Q_O'#EoO2gQWOOO4QQ_O'#FPO7hQWO'#J`OOQV'#FY'#FYO7{Q_O'#F^O:WQ_O'#FaOOQO'#F`'#F`O=sQ_O'#FcO=}Q_O'#FbO@VQWO'#FgOOQO'#J`'#J`OOQV'#Ip'#IpOA]Q_O'#IoOEPQWO'#IoOOQV'#Fw'#FwOF[QWO'#JuOFcQWO'#F|OOQO'#IO'#IOOGrQWO'#GhOOQV'#In'#InOOQV'#Im'#ImOOQV'#Hj'#HjQGyQ_OOOKeQ_O'#DUOKlQYO'#CqOOQP'#I`'#I`OOQV'#Hg'#HgQ]Q_OOOLuQWO'#IaONsQYO'#DXO!!eQWO'#JuO!!lQWO'#JuO!!vQ_O'#DfO!%]Q_O'#E}O!(sQ_O'#FWO!,ZQWO'#FZO!.^QXO'#FbO!.cQ_O'#EeO!!vQ_O'#FmO!0uQWO'#FoO!0zQWO'#FoO!1PQ^O'#FqO!1WQWO'#JuO!1_QWO'#FtO!1dQWO'#FxO!2WQWO'#JjO!2_QWO'#GOO!2_QWO'#G`O!2_QWO'#GbO!2_QWO'#GsOOQO'#Ju'#JuO!2dQWO'#GhO!2lQYO'#GpO!2_QWO'#GqO!3uQ^O'#GtO!3|QWO'#GuO!4hQWO'#HOP!4sOpO'#CcPOOO)CDO)CDOOOOO'#Hi'#HiO!5OO`O,59iOOQV,59i,59iO!5ZQYO,5?bOOQO-E;i-E;iOOQO,5:[,5:[OOQP,59Z,59ZO)xQWO,5:[O)xQWO,5:[O!5oQWO,5?lO!5zQYO,5;qO!6PQYO,5;TO!6hQWO,59QO!7kQXO'#CnO!7rQXO'#IaO!8vQWO'#CoO,^QWO'#EiOOQV-E;n-E;nO!9XQWO'#FsOOQV,5<g,5<gO!8vQWO'#CoO!9^QWO'#CoO!9cQWO'#IaO! yQWO'#JuO!9mQWO'#J`O!:TQWO,5;VOOQO'#Io'#IoO!0zQWO'#DaO!<TQWO'#DcO!<]QWO,5;ZO.YQ_O,5;ZOOQO,5;[,5;[OOQV'#Er'#ErOOQV'#Es'#EsOOQV'#Et'#EtOOQV'#Eu'#EuOOQV'#Ev'#EvOOQV'#Ew'#EwOOQV'#Ex'#ExOOQV'#Ey'#EyO.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;fO!<sQ_O,5;kO!@ZQ_O'#FROOQO,5;l,5;lO!BfQWO,5;pO.YQ_O,5;wOKlQYO,5;gO!DRQWO,5;kO!DrQWO,5;xOOQO,5;x,5;xO!EPQWO,5;xO!EUQ_O,5;xO!GaQWO'#CfO!GfQWO,5<QO!GpQ_O,5<QOOQO,5;{,5;{O!J^QXO'#CnO!KoQXO'#IaOOQS'#Dk'#DkOOQP'#Is'#IsO!LiQ[O'#IsO!LqQXO'#DjO!MoQWO'#DnO!MoQWO'#DnO!NQQWO'#DnOOQP'#Iu'#IuO!NVQXO'#IuO# QQ^O'#DoO# [QWO'#DrO# dQ^O'#DzO# nQ^O'#D|O# uQWO'#EPO#!QQXO'#FdOOQP'#ES'#ESOOQP'#Ir'#IrO#!`QXO'#JfOOQP'#Je'#JeO#!hQXO,5;}O#!mQXO'#IaO!1PQ^O'#DyO!1PQ^O'#FdO##gQWO,5;|OOQO,5;|,5;|OKlQYO,5;|O##}QWO'#FhOOQO,5<R,5<ROOQV,5=l,5=lO#&SQYO'#FzOOQV,5<h,5<hO#&ZQWO,5<hO#&bQWO,5=SO!1WQWO,59rO!1dQWO,5<dO#&iQWO,5=iO!2_QWO,5<jO!2_QWO,5<zO!2_QWO,5<|O!2_QWO,5=QO#&pQWO,5=]O#&wQWO,5=SO!2_QWO,5=]O!3|QWO,5=aO#'PQWO,5=jOOQO-E;|-E;|O#'[QWO'#JjOOQV-E;h-E;hO#'sQWO'#HRO#'zQ_O,59pOOQV,59p,59pO#(RQWO,59pO#(WQ_O,59pO#(vQZO'#CuO#+OQZO'#CvOOQV'#C|'#C|O#-kQWO'#HTO#-rQYO'#IeOOQO'#Hh'#HhO#-zQWO'#CwO#-zQWO'#CwO#.]QWO'#CwOOQR'#Id'#IdO#.bQZO'#IcO#0wQYO'#HTO#1eQYO'#H[O#2qQYO'#H_OKlQYO'#H`OOQR'#Hb'#HbO#3}QWO'#HeO#4SQYO,59]OOQR'#Ic'#IcO#4sQZO'#CtO#7OQYO'#HUO#7TQWO'#HTO#7YQYO'#CrO#7yQWO'#H]O#7YQYO'#HcOOQV-E;e-E;eO#8RQWO,59sOOQV,59{,59{O#8aQYO,5=[OOQV,59},59}O!0zQWO,59}O#;TQWO'#IqOOQO'#Iq'#IqO!1PQ^O'#DhO!0zQWO,5:QO#;[QWO,5;iO#;rQWO,5;rO#<YQ_O,5;rOOQO,5;u,5;uO#?sQ_O,5;|O#A{QWO,5;PO!0zQWO,5<XO#BSQWO,5<ZOOQV,5<Z,5<ZO#B_QWO,5<]O!1PQ^O'#EOOOQQ'#D_'#D_O#BgQWO,59rO#BlQWO,5<`O#BqQWO,5<dOOQO,5@U,5@UO#ByQWO,5=iOOQQ'#Cv'#CvO#COQYO,5<jO#CaQYO,5<zO#ClQYO,5<|O#CwQYO,5=_O#DVQYO,5=SO#EoQYO'#GQO#E|QYO,5=[O#FaQWO,5=[O#FoQYO,5=[O#GxQYO,5=]O#HWQWO,5=`O!1PQ^O,5=`O#HfQWO'#CnO#HwQWO'#IaOOQO'#Jy'#JyO#IYQWO'#IQO#I_QWO'#GwOOQO'#Jz'#JzO#IvQWO'#GzOOQO'#G|'#G|OOQO'#Jx'#JxO#I_QWO'#GwO#I}QWO'#GxO#JSQWO,5=aO#JXQWO,5=jO!1dQWO,5=jO#'SQWO,5=jPOOO'#Hf'#HfP#J^OpO,58}POOO,58},58}OOOO-E;g-E;gOOQV1G/T1G/TO#JiQWO1G4|O#JnQ^O'#CyPOQQ'#Cx'#CxOOQO1G/v1G/vOOQP1G.u1G.uO)xQWO1G/vO#MwQ!fO'#EUO#NOQ!fO'#EVO#NVQ!fO'#ETO$ _QWO1G5WO$!RQ_O1G5WOOQO1G1]1G1]O$%uQWO1G0oO$%zQWO'#CiO!7rQXO'#IaO!6PQYO1G.lO!5oQWO,5<_O!8vQWO,59ZO!8vQWO,59ZO!5oQWO,5?lO$&]QWO1G0uO$(jQWO1G0wO$*bQWO1G0wO$*xQWO1G0wO$,|QWO1G0wO$-TQWO1G0wO$/UQWO1G0wO$/]QWO1G0wO$1^QWO1G0wO$1eQWO1G0wO$2|QWO1G1QO$4}QWO1G1VO$5nQ_O'#JcO$7vQWO'#JcOOQO'#Jb'#JbO$8QQWO,5;mOOQO'#Dw'#DwOOQO1G1[1G1[OOQO1G1Y1G1YO$8VQWO1G1cOOQO1G1R1G1RO$8^Q_O'#HrO$:lQWO,5@OO.YQ_O1G1dOOQO1G1d1G1dO$:tQWO1G1dO$;RQWO1G1dO$;WQWO1G1eOOQO1G1l1G1lO$;`QWO1G1lOOQP,5?_,5?_O$;jQ^O,5:kO$<TQXO,5:YO!MoQWO,5:YO!MoQWO,5:YO!1PQ^O,5:gO$=UQWO'#IzOOQO'#Iy'#IyO$=dQWO,5:ZO# QQ^O,5:ZO$=iQWO'#DsOOQP,5:^,5:^O$=zQWO,5:fOOQP,5:h,5:hO!1PQ^O,5:hO!1PQ^O,5:mO$>PQYO,5<OO$>ZQ_O'#HsO$>hQXO,5@QOOQV1G1i1G1iOOQP,5:e,5:eO$>pQXO,5<OO$?OQWO1G1hO$?WQWO'#CnO$?cQWO'#FiOOQO'#Fi'#FiO$?kQWO'#FjO.YQ_O'#FkOOQO'#Ji'#JiO$?pQWO'#JhOOQO'#Jg'#JgO$?xQWO,5<SOOQQ'#Hv'#HvO$?}QYO,5<fOOQV,5<f,5<fO$@UQYO,5<fOOQV1G2S1G2SO$@]QWO1G2nO$@eQWO1G/^O$@jQWO1G2OO#ByQWO1G3TO$@rQYO1G2UO#CaQYO1G2fO#ClQYO1G2hO$ATQYO1G2lO!2_QWO1G2wO#DVQYO1G2nO#GxQYO1G2wO$A]QWO1G2{O$AbQWO1G3UO!1dQWO1G3UO$AgQWO1G3UOOQV1G/[1G/[O$AoQWO1G/[O$AtQ_O1G/[O#7TQWO,5=oO$A{QYO,5?PO$BaQWO,5?PO$BfQZO'#IfOOQO-E;f-E;fOOQR,59c,59cO#-zQWO,59cO#-zQWO,59cOOQR,5=n,5=nO$ERQYO'#HVO$FkQZO,5=oO!5oQWO,5={O$H}QWO,5=oO$IUQZO,5=vO$KeQYO,5=vO$>PQYO,5=vO$KuQWO'#KRO$LQQWO,5=xOOQR,5=y,5=yO$LVQWO,5=zO$>PQYO,5>PO$>PQYO,5>POOQO1G.w1G.wO$>PQYO1G.wO$LbQYO,5=pO$LjQZO,59^OOQR,59^,59^O$>PQYO,5=wO$N|QZO,5=}OOQR,5=},5=}O%#`QWO1G/_O!6PQYO1G/_O#E|QYO1G2vO%#eQWO1G2vO%#sQYO1G2vOOQV1G/i1G/iO%$|QWO,5:SO%%UQ_O1G/lO%*_QWO1G1^O%*uQWO1G1hOOQO1G1h1G1hO$>PQYO1G1hO%+]Q^O'#EgOOQV1G0k1G0kOOQV1G1s1G1sO!!vQ_O1G1sO!0zQWO1G1uO!1PQ^O1G1wO!.cQ_O1G1wOOQP,5:j,5:jO$>PQYO1G/^OOQO'#Cn'#CnO%+jQWO1G1zOOQV1G2O1G2OO%+rQWO'#CnO%+zQWO1G3TO%,PQWO1G3TO%,UQYO'#GQO%,gQWO'#G]O%,xQYO'#G_O%.[QYO'#GXOOQV1G2U1G2UO%/kQWO1G2UO%/pQWO1G2UO$@uQWO1G2UOOQV1G2f1G2fO%/kQWO1G2fO#CdQWO1G2fO%/xQWO'#GdOOQV1G2h1G2hO%0ZQWO1G2hO#CoQWO1G2hO%0`QYO'#GSO$>PQYO1G2lO$AWQWO1G2lOOQV1G2y1G2yO%1lQWO1G2yO%3[Q^O'#GkO%3fQWO1G2nO#DYQWO1G2nO%3tQYO,5<lO%4OQYO,5<lO%4^QYO,5<lO%4{QYO,5<lOOQQ,5<l,5<lO!1WQWO'#JuO%5WQYO,5<lO%5`QWO1G2vOOQV1G2v1G2vO%5hQWO1G2vO$>PQYO1G2vOOQV1G2w1G2wO%5hQWO1G2wO%5mQWO1G2wO#G{QWO1G2wOOQV1G2z1G2zO.YQ_O1G2zO$>PQYO1G2zO%5uQWO1G2zOOQO,5>l,5>lOOQO-E<O-E<OOOQO,5=c,5=cOOQO,5=e,5=eOOQO,5=g,5=gOOQO,5=h,5=hO%6TQWO'#J|OOQO'#J{'#J{O%6]QWO,5=fO%6bQWO,5=cO!1dQWO,5=dOOQV1G2{1G2{O$>PQYO1G3UPOOO-E;d-E;dPOOO1G.i1G.iOOQO7+*h7+*hO%6yQYO'#IdO%7bQYO'#IgO%7mQYO'#IgO%7uQYO'#IgO%8QQYO,59eOOQO7+%b7+%bOOQP7+$a7+$aOOQV,5:p,5:pO%8VQ!fO,5:pO%8^Q!fO'#JTOOQS'#EZ'#EZOOQS'#E['#E[OOQS'#E]'#E]OOQS'#JT'#JTO%;PQWO'#EYOOQS'#Eb'#EbOOQS'#JR'#JROOQS'#Hn'#HnOOQV,5:q,5:qO%;UQ!fO,5:qO%;]Q!fO,5:oOOQV,5:o,5:oOOQV7+'e7+'eOOQV7+&Z7+&ZO%;dQ[O,59TO%;xQ^O,59TO%<cQWO7+$WO%<hQWO1G1yOOQV1G1y1G1yO!8vQWO1G.uOOQP1G5W1G5WO%<mQWO,5?}O%<wQ_O'#HqO%?SQWO,5?}OOQO1G1X1G1XOOQO7+&}7+&}O%?[QWO,5>^OOQO-E;p-E;pO%?iQWO7+'OO%?pQ_O7+'OOOQO7+'O7+'OOOQO7+'P7+'PO%ArQWO7+'POOQO7+'W7+'WOOQP1G0V1G0VO%AzQXO1G/tO!MoQWO1G/tO%B{QXO1G0RO%CsQ^O'#HlO%DTQWO,5?fOOQP1G/u1G/uO%D`QWO1G/uO%DeQWO'#D_OOQO'#Dt'#DtO%DpQWO'#DtO%DuQWO'#I|OOQO'#I{'#I{O%D}QWO,5:_O%ESQWO'#DtO%EXQWO'#DtOOQP1G0Q1G0QOOQP1G0S1G0SOOQP1G0X1G0XO%EaQXO1G1jO%ElQXO'#FeOOQP,5>_,5>_O!1PQ^O'#FeOOQP-E;q-E;qO$>PQYO1G1jOOQO7+'S7+'SOOQO,5<T,5<TO%EzQWO,5<UO%?pQ_O,5<UO%FPQWO,5<VO%FZQWO'#HtO%FlQWO,5@SOOQO1G1n1G1nOOQQ-E;t-E;tOOQV1G2Q1G2QO%FtQYO1G2QO#DVQYO7+(YO$>PQYO7+$xOOQV7+'j7+'jO%F{QWO7+(oO%GQQWO7+(oOOQV7+'p7+'pO%/kQWO7+'pO%GVQWO7+'pO%G_QWO7+'pOOQV7+(Q7+(QO%/kQWO7+(QO#CdQWO7+(QOOQV7+(S7+(SO%0ZQWO7+(SO#CoQWO7+(SO$>PQYO7+(WO%GmQWO7+(WO#GxQYO7+(cO%GrQWO7+(YO#DYQWO7+(YOOQV7+(c7+(cO%5hQWO7+(cO%5mQWO7+(cO#G{QWO7+(cOOQV7+(g7+(gO$>PQYO7+(pO%HQQWO7+(pO!1dQWO7+(pOOQV7+$v7+$vO%HVQWO7+$vO%H[QZO1G3ZO%JnQWO1G4kOOQO1G4k1G4kOOQR1G.}1G.}O#-zQWO1G.}O%JsQWO'#KQOOQO'#HW'#HWO%KUQWO'#HXO%KaQWO'#KQOOQO'#KP'#KPO%KiQWO,5=qO%KnQYO'#H[O%LzQWO'#GmO%MVQYO'#CtO%MaQWO'#GmO$>PQYO1G3ZOOQR1G3g1G3gO#7TQWO1G3ZO%MfQZO1G3bO$>PQYO1G3bO& uQYO'#IVO&!VQWO,5@mOOQR1G3d1G3dOOQR1G3f1G3fO%?pQ_O1G3fOOQR1G3k1G3kO&!_QYO7+$cO&!gQYO'#KOOOQQ'#J}'#J}O&!oQYO1G3[O&!tQZO1G3cOOQQ7+$y7+$yO&%TQWO7+$yO&%YQWO7+(bOOQV7+(b7+(bO%5hQWO7+(bO$>PQYO7+(bO#E|QYO7+(bO&%bQWO7+(bO!.cQ_O1G/nO&%pQWO7+%WO$?OQWO7+'SO&%xQWO'#EhO&&TQ^O'#EhOOQU'#Ho'#HoO&&TQ^O,5;ROOQV,5;R,5;RO&&_QWO,5;RO&&dQ^O,5;RO!0zQWO7+'_OOQV7+'a7+'aO&&qQWO7+'cO&&yQWO7+'cO&'QQWO7+$xO&)uQ!fO7+'fO&)|Q!fO7+'fOOQV7+(o7+(oO!1dQWO7+(oO&*TQYO,5<lO&*`QYO,5<lO!1dQWO'#GWO&*nQWO'#JpO&*|QWO'#G^O!BlQWO'#G^O&+RQWO'#JpOOQO'#Jo'#JoO&+ZQWO,5<wOOQO'#DX'#DXO&+`QYO'#JrO&,oQWO'#JrO$>PQYO'#JrOOQO'#Jq'#JqO&,zQWO,5<yO&-PQWO'#GZO#DQQWO'#G[O&-XQWO'#G[O&-aQWO'#JmOOQO'#Jl'#JlO&-lQYO'#GTOOQO,5<s,5<sO&-qQWO7+'pO&-vQWO'#JtO&.UQWO'#GeO#BlQWO'#GeO&.gQWO'#JtOOQO'#Js'#JsO&.oQWO,5=OO$>PQYO'#GUO&.tQYO'#JkOOQQ,5<n,5<nO&/]QWO7+(WOOQV7+(e7+(eO&/eQ^O'#D|O&0kQWO'#GlO&0sQ^O'#JwOOQO'#Gn'#GnO&0zQWO'#JwOOQO'#Jv'#JvO&1SQWO,5=VO&1XQWO'#IaO&1iQ^O'#GmO&2lQWO'#IrO&2zQWO'#GmOOQV7+(Y7+(YO&3SQWO7+(YO$>PQYO7+(YO&3[QYO'#HxO&3pQYO1G2WOOQQ1G2W1G2WOOQQ,5<m,5<mO$>PQYO,5<qO&3xQWO,5<rO&3}QWO7+(bO&4YQWO7+(fO&4aQWO7+(fOOQV7+(f7+(fO%?pQ_O7+(fO$>PQYO7+(fO&4lQWO'#IRO&4vQWO,5@hOOQO1G3Q1G3QOOQO1G2}1G2}OOQO1G3P1G3POOQO1G3R1G3ROOQO1G3S1G3SOOQO1G3O1G3OO&5OQWO7+(pO$>PQYO,59fO&5ZQ^O'#ISO&6QQYO,5?ROOQR1G/P1G/POOQV1G0[1G0[OOQS-E;l-E;lO&6YQ!bO,5:rO&6_Q!fO,5:tOOQV1G0]1G0]OOQV1G0Z1G0ZOOQO1G.o1G.oO&6fQWO'#KTOOQO'#KS'#KSO&6nQWO1G.oOOQV<<Gr<<GrO&6sQWO1G5iO&6{Q_O,5>]O&9QQWO,5>]OOQO-E;o-E;oOOQO<<Jj<<JjO&9[QWO<<JjOOQO<<Jk<<JkO&9cQXO7+%`O&:dQWO,5>WOOQO-E;j-E;jOOQP7+%a7+%aO!1PQ^O,5:`O&:rQWO'#HmO&;WQWO,5?hOOQP1G/y1G/yOOQO,5:`,5:`O&;`QWO,5:`O%ESQWO,5:`O$>PQYO,5<PO&;eQXO,5<PO&;sQXO7+'UO%?pQ_O1G1pO&<OQWO1G1pOOQO,5>`,5>`OOQO-E;r-E;rOOQV7+'l7+'lO&<YQWO<<KtO#DYQWO<<KtO&<hQWO<<HdOOQV<<LZ<<LZO!1dQWO<<LZOOQV<<K[<<K[O&<sQWO<<K[O%/kQWO<<K[O&<xQWO<<K[OOQV<<Kl<<KlO%/kQWO<<KlOOQV<<Kn<<KnO%0ZQWO<<KnO&=QQWO<<KrO$>PQYO<<KrOOQV<<K}<<K}O%5hQWO<<K}O%5mQWO<<K}O#G{QWO<<K}OOQV<<Kt<<KtO&=YQWO<<KtO$>PQYO<<KtO&=bQWO<<L[O$>PQYO<<L[O&=mQWO<<L[OOQV<<Hb<<HbO$>PQYO7+(uOOQO7+*V7+*VOOQR7+$i7+$iO&=rQWO,5@lOOQO'#Gm'#GmO&=zQWO'#GmO&>VQYO'#IUO&=rQWO,5@lOOQR1G3]1G3]O&?rQYO,5=vO&ARQYO,5=XO&A]QWO,5=XOOQO,5=X,5=XOOQR7+(u7+(uO&AbQZO7+(uO&CtQZO7+(|O&FTQWO,5>qOOQO-E<T-E<TO&F`QWO7+)QOOQO<<G}<<G}O&FgQYO'#ITO&FrQYO,5@jOOQQ7+(v7+(vOOQQ<<He<<HeO$>PQYO<<K|OOQV<<K|<<K|O&3}QWO<<K|O&FzQWO<<K|O%5hQWO<<K|O&GSQWO7+%YOOQV<<Hr<<HrOOQO<<Jn<<JnO%?pQ_O,5;SO&GZQWO,5;SO%?pQ_O'#EjO&G`QWO,5;SOOQU-E;m-E;mO&GkQWO1G0mOOQV1G0m1G0mO&&TQ^O1G0mOOQV<<Jy<<JyO!.cQ_O<<J}OOQV<<J}<<J}OOQV<<Hd<<HdO%?pQ_O<<HdO&GpQWO'#JTO&GxQWO'#FvO&G}QWO<<KQO&HVQ!fO<<KQO&H^QWO<<KQO&HcQWO<<KQO&HkQ!fO<<KQOOQV<<KQ<<KQO&HrQWO<<LZO&HwQWO,5@[O$>PQYO,5<xO&IPQWO,5<xO&IUQWO'#H{O&HwQWO,5@[OOQV1G2c1G2cO&IjQWO,5@^O$>PQYO,5@^O&IuQYO'#H|O&K[QWO,5@^OOQO1G2e1G2eO%,bQWO,5<uOOQO,5<v,5<vO&KdQYO'#HzO&LvQWO,5@XO%,UQYO,5=pO$>PQYO,5<oO&MRQWO,5@`O%?pQ_O,5=PO&MZQWO,5=PO&MfQWO,5=PO&MwQWO'#H}O&MRQWO,5@`OOQV1G2j1G2jO&N]QYO,5<pO%0`QYO,5>PO&NtQYO,5@VOOQV<<Kr<<KrO' ]QWO,5=XO' mQ^O,5:hO'!pQWO,5=XO$>PQYO,5=WO'!xQWO,5@cO'#QQWO,5@cO'#`Q^O'#IPO'!xQWO,5@cOOQO1G2q1G2qO'$rQWO,5=WO'$zQWO<<KtO'%YQYO,5>oO'%eQYO,5>dO'%sQYO,5>dOOQQ,5>d,5>dOOQQ-E;v-E;vOOQQ7+'r7+'rO'&OQYO1G2]O$>PQYO1G2^OOQV<<LQ<<LQO%?pQ_O<<LQO'&ZQWO<<LQO'&bQWO<<LQOOQO,5>m,5>mOOQO-E<P-E<POOQV<<L[<<L[O%?pQ_O<<L[O'&mQYO1G/QO'&xQYO,5>nOOQQ,5>n,5>nO''TQYO,5>nOOQQ-E<Q-E<QOOQS1G0^1G0^O')cQ!fO1G0`O')pQ!fO1G0`O')wQ^O'#IWO'*eQWO,5@oOOQO7+$Z7+$ZO'*mQWO1G3wOOQOAN@UAN@UO'*wQWO1G/zOOQO,5>X,5>XOOQO-E;k-E;kO!1PQ^O1G/zOOQO1G/z1G/zO'+SQWO1G/zO'+XQXO1G1kO$>PQYO1G1kO'+dQWO7+'[OOQVANA`ANA`O'+nQWOANA`O$>PQYOANA`O'+vQWOANA`OOQVAN>OAN>OO%?pQ_OAN>OO',UQWOANAuOOQVAN@vAN@vO',ZQWOAN@vOOQVANAWANAWOOQVANAYANAYOOQVANA^ANA^O',`QWOANA^OOQVANAiANAiO%5hQWOANAiO%5mQWOANAiO',hQWOANA`OOQVANAvANAvO%?pQ_OANAvO',vQWOANAvO$>PQYOANAvOOQR<<La<<LaO'-RQWO1G6WO%JsQWO,5>pOOQO'#HY'#HYO'-ZQWO'#HZOOQO,5>p,5>pOOQO-E<S-E<SO'-fQYO1G2sO'-pQWO1G2sOOQO1G2s1G2sO$>PQYO<<LaOOQR<<Ll<<LlOOQQ,5>o,5>oOOQQ-E<R-E<RO&3}QWOANAhOOQVANAhANAhO%5hQWOANAhO$>PQYOANAhO'-uQWO1G1rO'.iQ^O1G0nO%?pQ_O1G0nO'0_QWO,5;UO'0fQWO1G0nP'0kQWO'#ERP&&TQ^O'#HpOOQV7+&X7+&XO'0vQWO7+&XO&&yQWOAN@iO'0{QWOAN>OO!5oQWO,5<bOOQS,5>a,5>aO'1SQWOAN@lO'1XQWOAN@lOOQS-E;s-E;sOOQVAN@lAN@lO'1aQWOAN@lOOQVANAuANAuO'1iQWO1G5vO'1qQWO1G2dO$>PQYO1G2dO&*nQWO,5>gOOQO,5>g,5>gOOQO-E;y-E;yO'1|QWO1G5xO'2UQWO1G5xO&+`QYO,5>hO'2aQWO,5>hO$>PQYO,5>hOOQO-E;z-E;zO'2lQWO'#JnOOQO1G2a1G2aOOQO,5>f,5>fOOQO-E;x-E;xO&*TQYO,5<lO'2zQYO1G2ZO'3fQWO1G5zO'3nQWO1G2kO%?pQ_O1G2kO'3xQWO1G2kO&-vQWO,5>iOOQO,5>i,5>iOOQO-E;{-E;{OOQQ,5>c,5>cOOQQ-E;u-E;uO'4TQWO1G2sO'4eQWO1G2rO'4pQWO1G5}O'4xQ^O,5>kOOQO'#Go'#GoOOQO,5>k,5>kO'6UQWO,5>kOOQO-E;}-E;}O$>PQYO1G2rO'6dQYO7+'xO'6oQWOANAlOOQVANAlANAlO%?pQ_OANAlO'6vQWOANAvOOQS7+%z7+%zO'6}QWO7+%zO'7YQ!fO7+%zOOQO,5>r,5>rOOQO-E<U-E<UO'7gQWO7+%fO!1PQ^O7+%fO'7rQXO7+'VOOQVG26zG26zO'7}QWOG26zO'8]QWOG26zO$>PQYOG26zO'8eQWOG23jOOQVG27aG27aOOQVG26bG26bOOQVG26xG26xOOQVG27TG27TO%5hQWOG27TO'8lQWOG27bOOQVG27bG27bO%?pQ_OG27bO'8sQWOG27bOOQO1G4[1G4[OOQO7+(_7+(_OOQRANA{ANA{OOQVG27SG27SO%5hQWOG27SO&3}QWOG27SO'9OQ^O7+&YO':iQWO7+'^O';]Q^O7+&YO%?pQ_O7+&YP%?pQ_O,5;SP'<iQWO,5;SP'<nQWO,5;SOOQV<<Is<<IsOOQVG26TG26TOOQVG23jG23jOOQO1G1|1G1|OOQVG26WG26WO'<yQWOG26WP&HfQWO'#HuO'=OQWO7+(OOOQO1G4R1G4RO'=ZQWO7++dO'=cQWO1G4SO$>PQYO1G4SO%,bQWO'#HyO'=nQWO,5@YO'=|QWO7+(VO%?pQ_O7+(VOOQO1G4T1G4TOOQO1G4V1G4VO'>WQWO1G4VO'>fQWO7+(^OOQVG27WG27WO'>qQWOG27WOOQS<<If<<IfO'>xQWO<<IfO'?TQWO<<IQOOQVLD,fLD,fO'?`QWOLD,fO'?hQWOLD,fOOQVLD)ULD)UOOQVLD,oLD,oOOQVLD,|LD,|O'?vQWOLD,|O%?pQ_OLD,|OOQVLD,nLD,nO%5hQWOLD,nO'?}Q^O<<ItO'AhQWO<<JxO'B[Q^O<<ItP'ChQWO1G0nP'DXQ^O1G0nP%?pQ_O1G0nP'EzQWO1G0nOOQVLD+rLD+rO'FPQWO7+)nOOQO,5>e,5>eOOQO-E;w-E;wO'F[QWO<<KqOOQVLD,rLD,rOOQSAN?QAN?QOOQV!$(!Q!$(!QO'FfQWO!$(!QOOQV!$(!h!$(!hO'FnQWO!$(!hOOQV!$(!Y!$(!YO'FuQ^OAN?`POQU7+&Y7+&YP'H`QWO7+&YP'IPQ^O7+&YP%?pQ_O7+&YOOQV!)9El!)9ElOOQV!)9FS!)9FSPOQU<<It<<ItP'JrQWO<<ItP'KcQ^O<<ItPOQUAN?`AN?`O'MUQWO'#CnO'M]QXO'#CnO'NUQWO'#IaO( kQXO'#IaO(!bQWO'#DpO(!bQWO'#DpO!.cQ_O'#EkO(!sQ_O'#EoO(!zQ_O'#FPO(%{Q_O'#FbO(&SQXO'#IaO(&yQ_O'#E}O('|Q_O'#FWO(!bQWO,5:[O(!bQWO,5:[O!.cQ_O,5;ZO!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;fO()PQ_O,5;kO(,QQWO,5;kO(,bQWO,5;|O(,iQYO'#CuO(,tQYO'#CvO(-PQWO'#CwO(-PQWO'#CwO(-bQYO'#CtO(-mQWO,5;iO(-tQWO,5;rO(-{Q_O,5;rO(/RQ_O,5;|O(!bQWO1G/vO(/YQWO1G0uO(0wQWO1G0wO(1RQWO1G0wO(2vQWO1G0wO(2}QWO1G0wO(4oQWO1G0wO(4vQWO1G0wO(6hQWO1G0wO(6oQWO1G0wO(6vQWO1G1QO(7WQWO1G1VO(7hQYO'#IfO(-PQWO,59cO(-PQWO,59cO(7sQWO1G1^O(7zQWO1G1hO(-PQWO1G.}O(8RQWO'#DpO!.^QXO'#FbO(8WQWO,5;ZO(8_QWO'#Cw",
      stateData: "(8q~O&}OSUOS'OPQ~OPoOQ!QOSVOTVOZeO[lO^RO_RO`ROa!UOd[Og!nOsVOtVOuVOw!POyvO|!VO}mO!Q!dO!U!WO!W!XO!X!^O!Z!YO!]!pO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO$i!eO$m!fO$q!gO$s!hO%T!iO%V!jO%Z!kO%]!lO%^!mO%f!oO%j!qO%s!rO'R`O'UQO'[kO'_UO'hcO'riO(QdO~O'O!sO~OZbX[bXdbXdlXobXwjX}bX!lbX!qbX!tbX#QbX#RbX#pbX'hbX'rbX'sbX'xbX'ybX'zbX'{bX'|bX'}bX(ObX(PbX(QbX(RbX(TbX~OybXXbX!ebX!PbXvbX#TbX~P$|OZ'TX['TXd'TXd'YXo'TXw'lXy'TX}'TX!l'TX!q'TX!t'TX#Q'TX#R'TX#p'TX'h'TX'r'TX's'TX'x'TX'y'TX'z'TX'{'TX'|'TX'}'TX(O'TX(P'TX(Q'TX(R'TX(T'TXv'TX~OX'TX!e'TX!P'TX#T'TX~P'ZOr!uO'^!wO'`!uO~Od!xO~O^RO_RO`ROaRO'UQO~Od!}O~Od#PO[(SXo(SXy(SX}(SX!l(SX!q(SX!t(SX#Q(SX#R(SX#p(SX'h(SX'r(SX's(SX'x(SX'y(SX'z(SX'{(SX'|(SX'}(SX(O(SX(P(SX(Q(SX(R(SX(T(SXv(SX~OZ#OO~P*`OZ#RO[#QO~OQ!QO^#TO_#TO`#TOa#]Od#ZOg!nOyvO|!VO!Q!dO!U#^O!W!lO!]!pO$i!eO$m!fO$q!gO$s!hO%T!iO%V!jO%Z!kO%]!lO%^!mO%f!oO%j!qO%s!rO'R#VO'U#SO~OPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'[kO'_UO'hcO'riO(QdO~P)xOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!j#eO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'[kO'_UO'hcO'riO(QdO~P)xO[#}Oo#xO}#zO!l#yO!q#jO!t#yO#Q#xO#R#uO#p$OO'h#gO'r#yO's#lO'x#hO'y#iO'z#iO'{#kO'|#nO'}#mO(O#|O(P#gO(Q#hO(R#fO(T#hO~OPoOQ!QOSVOTVOZeOd[OsVOtVOuVOw!PO!U#bO!W#cO!X!^O!Z!YO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'[kO'_UO[#sXo#sXy#sX}#sX!l#sX!q#sX!t#sX#Q#sX#R#sX#p#sX'h#sX'r#sX's#sX'x#sX'y#sX'z#sX'{#sX'|#sX'}#sX(O#sX(P#sX(Q#sX(R#sX(T#sXX#sX!e#sX!P#sXv#sX#T#sX~P)xOX(SX!e(SX!P(SXw(SX#T(SX~P*`OPoOQ!QOSVOTVOX$ROZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'R$UO'[kO'_UO'hcO'riO(QdO~P)xOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!P$XO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'R$UO'[kO'_UO'hcO'riO(QdO~P)xOQ!QOSVOTVO[$gO^$pO_$ZO`:QOa:QOd$aOsVOtVOuVO}$eO!i$qO!l$lO!q$hO#V$lO'U$YO'_UO'h$[O~O!j$rOP(XP~P<cOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#S$uO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'[kO'_UO'hcO'riO(QdO~P)xOw$vO~Oo'cX#Q'cX#R'cX#p'cX's'cX'x'cX'y'cX'z'cX'{'cX'|'cX'}'cX(O'cX(P'cX(R'cX(T'cX~OP%tXQ%tXS%tXT%tXZ%tX[%tX^%tX_%tX`%tXa%tXd%tXg%tXs%tXt%tXu%tXw%tXy%tX|%tX}%tX!Q%tX!U%tX!W%tX!X%tX!Z%tX!]%tX!l%tX!q%tX!t%tX#Y%tX#r%tX#{%tX$O%tX$b%tX$d%tX$f%tX$i%tX$m%tX$q%tX$s%tX%T%tX%V%tX%Z%tX%]%tX%^%tX%f%tX%j%tX%s%tX&{%tX'R%tX'U%tX'[%tX'_%tX'h%tX'r%tX(Q%tXv%tX~P@[Oy$xO['cX}'cX!l'cX!q'cX!t'cX'h'cX'r'cX(Q'cXv'cX~P@[Ow$yO!Q(iX!U(iX!W(iX$q(iX%](iX%^(iX~Oy$zO~PEsO!Q$}O!U%UO!W!lO$m%OO$q%PO$s%QO%T%RO%V%SO%Z%TO%]!lO%^%VO%f%WO%j%XO%s%YO~O!Q!lO!U!lO!W!lO$q%[O%]!lO~O%^%VO~PGaOPoOQ!QOSVOTVOZeO[lO^RO_RO`ROa!UOd[Og!nOsVOtVOuVOw!POyvO|!VO}mO!Q!dO!U!WO!W!XO!X!^O!Z!YO!]!pO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO$i!eO$m!fO$q!gO$s!hO%T!iO%V!jO%Z!kO%]!lO%^!mO%f!oO%j!qO%s!rO'R#VO'UQO'[kO'_UO'hcO'riO(QdO~Ov%`O~P]OQ!QOZ%rO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f%wO%^%xO&W%{O'U%dO'[%eO(Q%zO~PGaO!Q{X!U{X!W{X$m{X$q{X$s{X%T{X%V{X%Z{X%]{X%^{X%f{X%j{X%s{X~P'ZO!Q{X!U{X!W{X$m{X$q{X$s{X%T{X%V{X%Z{X%]{X%^{X%f{X%j{X%s{X~O}%}O'U{XQ{XZ{X[{X^{X_{X`{Xa{Xd{Xg{X!q{X$f{X&W{X'[{X(Q{X~PMuOg&PO%f%WO!Q(iX!U(iX!W(iX$q(iX%](iX%^(iX~Ow!PO~P! yOw!PO!X&RO~PEvOPoOQ!QOSVOTVOZeO[lO^9xO_9xO`9xOa9xOd9{OsVOtVOuVOw!PO}mO!U#bO!W#cO!X;RO!Z!YO!]&UO!l:OO!q9}O!t:OO#Y!_O#r:RO#{:SO$O!]O$b!`O$d!bO$f!cO'U9vO'[kO'_UO'hcO'r:OO(QdO~OPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'[kO'_UO'hcO'riO(QdOo#qXy#qX#Q#qX#R#qX#p#qX's#qX'x#qX'y#qX'z#qX'{#qX'|#qX'}#qX(O#qX(P#qX(R#qX(T#qXX#qX!e#qX!P#qXv#qX#T#qX~P)xOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'[kO'_UO'hcO'riO(QdOo#zXy#zX#Q#zX#R#zX#p#zX's#zX'x#zX'y#zX'z#zX'{#zX'|#zX'}#zX(O#zX(P#zX(R#zX(T#zXX#zX!e#zX!P#zXv#zX#T#zX~P)xO'[kO[#}Xo#}Xy#}X}#}X!l#}X!q#}X!t#}X#Q#}X#R#}X#p#}X'h#}X'r#}X's#}X'x#}X'y#}X'z#}X'{#}X'|#}X'}#}X(O#}X(P#}X(Q#}X(R#}X(T#}XX#}X!e#}X!P#}Xv#}Xw#}X#T#}X~OPoO~OPoOQ!QOSVOTVOZeO[lO^9xO_9xO`9xOa9xOd9{OsVOtVOuVOw!PO}mO!U#bO!W#cO!X;RO!Z!YO!l:OO!q9}O!t:OO#Y!_O#r:RO#{:SO$O!]O$b!`O$d!bO$f!cO'U9vO'[kO'_UO'hcO'r:OO(QdO~O!S&_O~Ow!PO~O!j&bO~P<cO'U&cO~PEvOZ&eO~O'U&cO~O'_UOw(^Xy(^X!Q(^X!U(^X!W(^X$q(^X%](^X%^(^X~Oa&hO~P!1iO'U&iO~O_&nO'U&cO~OQ&oOZ&pO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f%wO%^%xO&W%{O'U%dO'[%eO(Q%zO~PGaO!j&uO~P<cO^&wO_&wO`&wOa&wOd'POw&|O'U&vO(Q&}O~O!i'UO!j'TO'U&cO~O'O!sO'P'VO'Q'XO~Or!uO'^'ZO'`!uO~OQ']O^'ja_'ja`'jaa'ja'U'ja~O['bOw'cO}'dO~OQ']O~OQ!QO^#TO_#TO`#TOa'jOd#ZO'U#SO~O['kO~OZbXdlXXbXobXPbX!SbX!ebX'sbX!PbX!ObXybX!ZbX#TbXvbX~O}bX~P!6mOZ'TXd'YXX'TXo'TX}'TX#p'TXP'TX!S'TX!e'TX's'TX!P'TX!O'TXy'TX!Z'TX#T'TXv'TX~O^#TO_#TO`#TOa'jO'U#SO~OZ'lO~Od'nO~OZ'TXd'YX~PMuOZ'oOX(SX!e(SX!P(SXw(SX#T(SX~P*`O[#}O}#zO(O#|O(R#fOo#_ay#_a!l#_a!q#_a!t#_a#Q#_a#R#_a#p#_a'h#_a'r#_a's#_a'x#_a'y#_a'z#_a'{#_a'|#_a'}#_a(P#_a(Q#_a(T#_aX#_a!e#_a!P#_av#_aw#_a#T#_a~Ow!PO!X&RO~Oy#caX#ca!e#ca!P#cav#ca#T#ca~P2gOPoOQ!QOSVOTVOZeOd[OsVOtVOuVOw!PO!U#bO!W#cO!X!^O!Z!YO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'[kO'_UO[#sao#say#sa}#sa!l#sa!q#sa!t#sa#Q#sa#R#sa#p#sa'h#sa'r#sa's#sa'x#sa'y#sa'z#sa'{#sa'|#sa'}#sa(O#sa(P#sa(Q#sa(R#sa(T#saX#sa!e#sa!P#sav#sa#T#sa~P)xOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'R#VO'[kO'_UO'hcO'riO(QdO!P(UP~P)xOu(RO#w(SO'U(QO~O[#}O}#zO!q#jO'h#gO's#lO'x#hO'y#iO'z#iO'{#kO'|#nO'}#mO(O#|O(P#gO(Q#hO(R#fO(T#hO!l#sa!t#sa#p#sa'r#sa~Oo#xO#Q#xO#R#uOy#saX#sa!e#sa!P#sav#sa#T#sa~P!BqOy(XO!e(VOX(WX~P2gOX(YO~OPoOQ!QOSVOTVOX(YOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'R$UO'[kO'_UO'hcO'riO(QdO~P)xOZ#RO~O!P(^O!e(VO~P2gOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'R$UO'[kO'_UO'hcO'riO(QdO~P)xOZbXdlXwjX}jX!tbX'rbX~OP!RX!S!RX!e!RX'q!RX's!RX!O!RXo!RXy!RX!P!RXX!RX!Z!RX#T!RXv!RX~P!IxOZ'TXd'YXw'lX}'lX!t'TX'r'TX~OP!`X!S!`X!e!`X's!`X!O!`Xo!`Xy!`X!P!`XX!`X!Z!`X#T!`Xv!`X~P!KZOT(`Ou(`O~O!t(aO'r(aOP!^X!S!^X!e!^X's!^X!O!^Xo!^Xy!^X!P!^XX!^X!Z!^X#T!^Xv!^X~O^9yO_9yO`:QOa:QO'U9wO~Od(dO~O'q(eOP'iX!S'iX!e'iX's'iX!O'iXo'iXy'iX!P'iXX'iX!Z'iX#T'iXv'iX~O!j&bO!P'mP~P<cOw(jO}(iO~O!j&bOX'mP~P<cO!j(nO~P<cOZ'oO!t(aO'r(aO~O!S(pO's(oOP$WX!e$WX~O!e(qOP(YX~OP(sO~OP!aX!S!aX!e!aX's!aX!O!aXo!aXy!aX!P!aXX!aX!Z!aX#T!aXv!aX~P!KZOy$UaX$Ua!e$Ua!P$Uav$Ua#T$Ua~P2gO!l({O'R#VO'U(wOv(ZP~OQ!QO^#TO_#TO`#TOa#]Od#ZOg!nOyvO|!VO!Q!dO!U#^O!W!lO!]!pO$i!eO$m!fO$q!gO$s!hO%T!iO%V!jO%Z!kO%]!lO%^!mO%f!oO%j!qO%s!rO'R`O'U#SO~Ov)SO~P#$]Oy)UO~PEsO%^)VO~PGaOa)YO~P!1iO%f)_O~PEvO_)`O'U&cO~O!i)eO!j)dO'U&cO~O'_UO!Q(^X!U(^X!W(^X$q(^X%](^X%^(^X~Ov%uX~P2gOv)fO~PGyOv)fO~Ov)fO~P]OQiXQ'YXZiXd'YX}iX#piX(PiX~ORiXwiX$fiX$|iX[iXoiXyiX!liX!qiX!tiX#QiX#RiX'hiX'riX'siX'xiX'yiX'ziX'{iX'|iX'}iX(OiX(QiX(RiX(TiX!PiX!eiXXiXPiXviX!SiX#TiX~P#(_OQjXQlXRjXZjXdlX}jX#pjX(PjXwjX$fjX$|jX[jXojXyjX!ljX!qjX!tjX#QjX#RjX'hjX'rjX'sjX'xjX'yjX'zjX'{jX'|jX'}jX(OjX(QjX(RjX(TjX!PjX!ejXXjX!SjXPjXvjX#TjX~O%^)iO~PGaOQ']Od)jO~O^)lO_)lO`)lOa)lO'U%dO~Od)pO~OQ']OZ)tO})rOR'VX#p'VX(P'VXw'VX$f'VX$|'VX['VXo'VXy'VX!l'VX!q'VX!t'VX#Q'VX#R'VX'h'VX'r'VX's'VX'x'VX'y'VX'z'VX'{'VX'|'VX'}'VX(O'VX(Q'VX(R'VX(T'VX!P'VX!e'VXX'VXP'VXv'VX!S'VX#T'VX~OQ!QO^:iO_:eO`TOaTOd:hO%^)iO'U:fO~PGaOQ!QOZ%rO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!j)xO!q%oO$f%wO%^%xO&W%{O'U%dO'[%eO(Q%zO~PGaOQ!QOZ%rO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!P){O!q%oO$f%wO%^%xO&W%{O'U%dO'[%eO(Q%zO~PGaO(P)}O~OR*PO#p*QO(P*OO~OQhXQ'YXZhXd'YX}hX(PhX~ORhX#phXwhX$fhX$|hX[hXohXyhX!lhX!qhX!thX#QhX#RhX'hhX'rhX'shX'xhX'yhX'zhX'{hX'|hX'}hX(OhX(QhX(RhX(ThX!PhX!ehXXhXPhXvhX!ShX#ThX~P#4_OQ*RO~O})rO~OQ!QO^%vO_%cO`TOaTOd%jO$f%wO%^%xO'U%dO~PGaO!Q*UO!j*UO~O^*XO`*XOa*XO!O*YO~OQ&oOZ*ZO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f%wO%^%xO&W%{O'U%dO'[%eO(Q%zO~PGaO[#}Oo:aO}#zO!l:bO!q#jO!t:bO#Q:aO#R:^O#p$OO'h#gO'r:bO's#lO'x#hO'y#iO'z#iO'{#kO'|#nO'}#mO(O#|O(P#gO(Q#hO(R#fO(T#hO~Ow'eX~P#9jOy#qaX#qa!e#qa!P#qav#qa#T#qa~P2gOy#zaX#za!e#za!P#zav#za#T#za~P2gOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!S&_O!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'[kO'_UO'hcO'riO(QdOo#zay#za#Q#za#R#za#p#za's#za'x#za'y#za'z#za'{#za'|#za'}#za(O#za(P#za(R#za(T#zaX#za!e#za!P#zav#za#T#za~P)xOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#S*dO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'[kO'_UO'hcO'riO(QdO~P)xOw*eO~P#9jO$b*hO$d*iO$f*jO~O!O*kO's(oO~O!S*mO~O'U*nO~Ow$yOy*pO~O'U*qO~OQ*tOw*uOy*xO}*vO$|*wO~OQ*tOw*uO$|*wO~OQ*tOw+PO$|*wO~OQ*tOo+UOy+WO!S+TO~OQ*tO}+YO~OQ!QOZ%rO[%qO^%vO`TOaTOd%jOg%yO}%pO!U!lO!W!lO!q%oO$f%wO$q%[O%]!lO%^%xO&W%{O'U%dO'[%eO(Q%zO~OR+aO_+]O!Q+bO~P#D_O_%cO!Q!lOw&UX$|&UX(P&UX~P#D_Ow$yO$f+gO$|*wO(P*OO~OQ!QOZ*ZO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f%wO%^%xO&W%{O'U%dO'[%eO(Q%zO~PGaOQ*tOw$yO!S+TO$|*wO~Oo+mOy+lO!S+nO's(oO~OdlXy!RX#pbXv!RX!e!RX~Od'YXy(mX#p'TXv(mX!e(mX~Od+pO~O^#TO_#TO`#TOa'jOw&|O'U&vO(Q+uO~Ov(oP~P!3|O#p+zO~Oy+{O~O!S+|O~O'O!sO'P'VO'Q,OO~Od,PO~OSVOTVO_%cOsVOtVOuVOw!PO!Q!lO'_UO~P#D_OS,_OT,_OZ,_O['bO_,ZOd,_Oo,_Os,_Ou,_Ow'cOy,_O}'dO!S,_O!e,_O!l,_O!q,]O!t,_O!{,_O#Q,_O#R,_O#S,_O#T,_O'R,_O'[%eO'_UO'h,[O's,]O'v,`O'x,[O'y,]O'z,]O'{,]O'|,^O'},^O(O,_O(P,aO(Q,aO(R,bO~OX,XO~P#K_Ov,dO~P#K_O!P,gO~P#K_Oo'ti#Q'ti#R'ti#p'ti's'ti'x'ti'y'ti'z'ti'{'ti'|'ti'}'ti(O'ti(P'ti(R'ti(T'ti~Oy,hO['ti}'ti!l'ti!q'ti!t'ti'h'ti'r'ti(Q'tiv'ti~P#N^OP$giQ$giS$giT$giZ$gi[$gi^$gi_$gi`$gia$gid$gig$gis$git$giu$giw$giy$gi|$gi}$gi!Q$gi!U$gi!W$gi!X$gi!Z$gi!]$gi!l$gi!q$gi!t$gi#Y$gi#r$gi#{$gi$O$gi$b$gi$d$gi$f$gi$i$gi$m$gi$q$gi$s$gi%T$gi%V$gi%Z$gi%]$gi%^$gi%f$gi%j$gi%s$gi&{$gi'R$gi'U$gi'[$gi'_$gi'h$gi'r$gi(Q$giv$gi~P#N^OX,iO~Oo,jO},kOX]X!P]X!e]X~Oy#ciX#ci!e#ci!P#civ#ci#T#ci~P2gO[#}O}#zO'x#hO(O#|O(Q#hO(R#fO(T#hOo#eiy#ei!l#ei!q#ei!t#ei#Q#ei#R#ei#p#ei'r#ei's#ei'y#ei'z#ei'{#ei'|#ei'}#eiX#ei!e#ei!P#eiv#ei#T#ei~O'h#ei(P#ei~P$&sO[#}O}#zO(O#|O(R#fOo#eiy#ei!l#ei!q#ei!t#ei#Q#ei#R#ei#p#ei'r#ei's#ei'y#ei'z#ei'{#ei'|#ei'}#eiX#ei!e#ei!P#eiv#ei#T#ei~O'h#ei'x#ei(P#ei(Q#ei(T#eiw#ei~P$(tO'h#gO(P#gO~P$&sO[#}O}#zO'h#gO'x#hO'y#iO'z#iO(O#|O(P#gO(Q#hO(R#fO(T#hOo#eiy#ei!l#ei!t#ei#Q#ei#R#ei#p#ei'r#ei's#ei'{#ei'|#ei'}#eiX#ei!e#ei!P#eiv#ei#T#ei~O!q#ei~P$+SO!q#jO~P$+SO[#}O}#zO!q#jO'h#gO'x#hO'y#iO'z#iO'{#kO(O#|O(P#gO(Q#hO(R#fO(T#hOo#eiy#ei!l#ei!t#ei#Q#ei#R#ei#p#ei'r#ei'|#ei'}#eiX#ei!e#ei!P#eiv#ei#T#ei~O's#ei~P$-[O's#lO~P$-[O[#}O}#zO!q#jO#R#uO'h#gO's#lO'x#hO'y#iO'z#iO'{#kO(O#|O(P#gO(Q#hO(R#fO(T#hOo#eiy#ei!l#ei!t#ei#Q#ei#p#ei'r#ei'|#eiX#ei!e#ei!P#eiv#ei#T#ei~O'}#ei~P$/dO'}#mO~P$/dO[#}O}#zO!q#jO'h#gO's#lO'x#hO'y#iO'z#iO'{#kO'|#nO'}#mO(O#|O(P#gO(Q#hO(R#fO(T#hO!l#ni!t#ni#p#ni'r#ni~Oo#xO#Q#xO#R#uOy#niX#ni!e#ni!P#niv#ni#T#ni~P$1lO[#}O}#zO!q#jO'h#gO's#lO'x#hO'y#iO'z#iO'{#kO'|#nO'}#mO(O#|O(P#gO(Q#hO(R#fO(T#hO!l#si!t#si#p#si'r#si~Oo#xO#Q#xO#R#uOy#siX#si!e#si!P#siv#si#T#si~P$3mOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'R#VO'[kO'_UO'hcO'riO(QdO~P)xO!e,rO!P(VX~P2gO!P,tO~OX,uO~P2gOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'[kO'_UO'hcO'riO(QdOX&fX!e&fX!P&fX~P)xO!e(VOX(Wa~Oy,yO!e(VOX(WX~P2gOX,zO~O!P,{O!e(VO~O!P,}O!e(VO~P2gOSVOTVOsVOtVOuVO'_UO'h$[O~P!6POP!baZca!S!ba!e!ba!tca'rca's!ba!O!bao!bay!ba!P!baX!ba!Z!ba#T!bav!ba~O!e-SO's(oO!P'nXX'nX~O!P-UO~O!i-_O!j-^O!l-ZO'U-WOv'oP~OX-`O~O_%cO!Q!lO~P#D_O!j-fOP&gX!e&gX~P<cO!e(qOP(Ya~O!S-hO's(oOP$Wa!e$Wa~Ow!PO(P*OO~OvbX!S!kX!ebX~O'R#VO'U(wO~O!S-lO~O!e-nOv([X~Ov-pO~Ov-rO~P,cOv-rO~P#$]O_-tO'U&cO~O!S-uO~Ow$yOy-vO~OQ*tOw*uOy-yO}*vO$|*wO~OQ*tOo.TO~Oy.^O~O!S._O~O!j.aO'U&cO~Ov.bO~Ov.bO~PGyOQ']O^'Xa_'Xa`'Xaa'Xa'U'Xa~Od.fO~OQ'YXQ'lXR'lXZ'lXd'YX}'lX#p'lX(P'lXw'lX$f'lX$|'lX['lXo'lXy'lX!l'lX!q'lX!t'lX#Q'lX#R'lX'h'lX'r'lX's'lX'x'lX'y'lX'z'lX'{'lX'|'lX'}'lX(O'lX(Q'lX(R'lX(T'lX!P'lX!e'lXX'lXP'lXv'lX!S'lX#T'lX~OQ!QOZ%rO[%qO^.qO_%cO`TOaTOd%jOg%yO}%pO!j.rO!q.oO!t.jO#V.lO$f%wO%^%xO&W%{O'R#VO'U%dO'[%eO(Q%zO!P(sP~PGaO#S.sOR%wa#p%wa(P%waw%wa$f%wa$|%wa[%wao%way%wa}%wa!l%wa!q%wa!t%wa#Q%wa#R%wa'h%wa'r%wa's%wa'x%wa'y%wa'z%wa'{%wa'|%wa'}%wa(O%wa(Q%wa(R%wa(T%wa!P%wa!e%waX%waP%wav%wa!S%wa#T%wa~O%^.uO~PGaO(P*OOR&Oa#p&Oaw&Oa$f&Oa$|&Oa[&Oao&Oay&Oa}&Oa!l&Oa!q&Oa!t&Oa#Q&Oa#R&Oa'h&Oa'r&Oa's&Oa'x&Oa'y&Oa'z&Oa'{&Oa'|&Oa'}&Oa(O&Oa(Q&Oa(R&Oa(T&Oa!P&Oa!e&OaX&OaP&Oav&Oa!S&Oa#T&Oa~O_%cO!Q!lO!j.wO(P)}O~P#D_O!e.xO(P*OO!P(uX~O!P.zO~OX.{Oy.|O(P*OO~O'[%eOR(qP~OQ']O})rORfa#pfa(Pfawfa$ffa$|fa[faofayfa!lfa!qfa!tfa#Qfa#Rfa'hfa'rfa'sfa'xfa'yfa'zfa'{fa'|fa'}fa(Ofa(Qfa(Rfa(Tfa!Pfa!efaXfaPfavfa!Sfa#Tfa~OQ']O})rOR&Va#p&Va(P&Vaw&Va$f&Va$|&Va[&Vao&Vay&Va!l&Va!q&Va!t&Va#Q&Va#R&Va'h&Va'r&Va's&Va'x&Va'y&Va'z&Va'{&Va'|&Va'}&Va(O&Va(Q&Va(R&Va(T&Va!P&Va!e&VaX&VaP&Vav&Va!S&Va#T&Va~O!P/TO~Ow$yO$f/YO$|*wO(P*OO~OQ!QOZ/ZO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f%wO%^%xO&W%{O'U%dO'[%eO(Q%zO~PGaOo/]O's(oO~O#W/^OP!YiQ!YiS!YiT!YiZ!Yi[!Yi^!Yi_!Yi`!Yia!Yid!Yig!Yio!Yis!Yit!Yiu!Yiw!Yiy!Yi|!Yi}!Yi!Q!Yi!U!Yi!W!Yi!X!Yi!Z!Yi!]!Yi!l!Yi!q!Yi!t!Yi#Q!Yi#R!Yi#Y!Yi#p!Yi#r!Yi#{!Yi$O!Yi$b!Yi$d!Yi$f!Yi$i!Yi$m!Yi$q!Yi$s!Yi%T!Yi%V!Yi%Z!Yi%]!Yi%^!Yi%f!Yi%j!Yi%s!Yi&{!Yi'R!Yi'U!Yi'[!Yi'_!Yi'h!Yi'r!Yi's!Yi'x!Yi'y!Yi'z!Yi'{!Yi'|!Yi'}!Yi(O!Yi(P!Yi(Q!Yi(R!Yi(T!YiX!Yi!e!Yi!P!Yiv!Yi!i!Yi!j!Yi#V!Yi#T!Yi~Oy#ziX#zi!e#zi!P#ziv#zi#T#zi~P2gOy$UiX$Ui!e$Ui!P$Uiv$Ui#T$Ui~P2gOv/dO!j&bO'R`O~P<cOw/mO}/lO~Oy!RX#pbX~Oy/nO~O#p/oO~OR+aO_+cO!Q/rO'U&iO'[%eO~Oa/yO|!VO'R#VO'U(QOv(cP~OQ!QOZ%rO[%qO^%vO_%cO`TOa/yOd%jOg%yO|!VO}%pO!q%oO$f%wO%^%xO&W%{O'R#VO'U%dO'[%eO(Q%zO!P(eP~PGaOQ!QOZ%rO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f0UO%^%xO&W%{O'U%dO'[%eO(Q%zOw(`Py(`P~PGaOw*uO~Oy-yO$|*wO~Oa/yO|!VO'R#VO'U*nOv(gP~Ow+PO~OQ!QOZ%rO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f0UO%^%xO&W%{O'U%dO'[%eO(Q%zO(R0_O~PGaOy0cO~OQ!QOSVOTVO[$gO^0kO_$ZO`:QOa:QOd$aOsVOtVOuVO}$eO!i$qO!j0lO!l$lO!q0dO!t0gO'R#VO'U$YO'[%eO'_UO'h$[O~O#V0mO!P(jP~P%1qOw!POy0oO#S0qO$|*wO~OR0tO!e0rO~P#(_OR0tO!S+TO!e0rO(P)}O~OR0tOo0vO!S+TO!e0rOQ'WXZ'WX}'WX#p'WX(P'WX~OR0tOo0vO!e0rO~OR0tO!e0rO~O$f/YO(P*OO~Ow$yO~Ow$yO$|*wO~Oo0|Oy0{O!S0}O's(oO~O!e1OOv(pX~Ov1QO~O^#TO_#TO`#TOa'jOw&|O'U&vO(Q1UO~Oo1XOQ'WXR'WXZ'WX}'WX!e'WX(P'WX~O!e1YO(P*OOR'ZX~O!e1YOR'ZX~O!e1YO(P)}OR'ZX~OR1[O~OX1]O~P#K_O!S1_OS'wXT'wXX'wXZ'wX['wX_'wXd'wXo'wXs'wXu'wXw'wXy'wX}'wX!e'wX!l'wX!q'wX!t'wX!{'wX#Q'wX#R'wX#S'wX#T'wX'R'wX'['wX'_'wX'h'wX's'wX'v'wX'x'wX'y'wX'z'wX'{'wX'|'wX'}'wX(O'wX(P'wX(Q'wX(R'wXv'wX!P'wX~O}1`O~Ov1aO~P#K_O!P1bO~P#K_OSVOTVOsVOtVOuVO'_UO~OSVOTVOsVOtVOuVO'_UO!P(vP~P!6POX1gO~Oy,hO~O!e,rO!P(Va~P2gOPoOQ!QOZeO[lO^RO_RO`ROaROd[Ow!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'R#VO'UQO'[kO'hcO'riO(QdO!P&eX!e&eX~P%;dO!e,rO!P(Va~OX&fa!e&fa!P&fa~P2gOX1lO~P2gOPoOQ!QOZeO[lO^RO_RO`ROaROd[Ow!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'UQO'[kO'hcO'riO(QdO~P%;dO!P1nO!e(VO~OP!biZci!S!bi!e!bi!tci'rci's!bi!O!bio!biy!bi!P!biX!bi!Z!bi#T!biv!bi~O's(oOP!oi!S!oi!e!oi!O!oio!oiy!oi!P!oiX!oi!Z!oi#T!oiv!oi~O!j&bO!P&`X!e&`XX&`X~P<cO!e-SO!P'naX'na~O!P1rO~Ov!RX!S!kX!e!RX~O!S1sO~O!e1tOv'pX~Ov1vO~O'U-WO~O!j1yO'U-WO~O(P*OOP$Wi!e$Wi~O!S1zO's(oOP$XX!e$XX~O!S1}O~Ov$_a!e$_a~P2gO!l({O'R#VO'U(wOv&hX!e&hX~O!e-nOv([a~Ov2RO~P,cOy2VO~O#p2WO~Oy2XO$|*wO~Ow*uOy2XO}*vO$|*wO~Oo2bO~Ow!POy2gO#S2iO$|*wO~O!S2kO~Ov2mO~O#S2nOR%wi#p%wi(P%wiw%wi$f%wi$|%wi[%wio%wiy%wi}%wi!l%wi!q%wi!t%wi#Q%wi#R%wi'h%wi'r%wi's%wi'x%wi'y%wi'z%wi'{%wi'|%wi'}%wi(O%wi(Q%wi(R%wi(T%wi!P%wi!e%wiX%wiP%wiv%wi!S%wi#T%wi~Od2oO~O^2rO!j.rO!q2sO'R#VO'[%eO~O(P*OO!P%{X!e%{X~O!e2tO!P(tX~O!P2vO~OQ!QOZ%rO[%qO^2xO_%cO`TOaTOd%jOg%yO}%pO!j2yO!q%oO$f%wO%^%xO&W%{O'U%dO'[%eO(Q%zO~PGaO^2zO!j2yO(P)}O~O!P%aX!e%aX~P#4_O^2zO~O(P*OOR&Oi#p&Oiw&Oi$f&Oi$|&Oi[&Oio&Oiy&Oi}&Oi!l&Oi!q&Oi!t&Oi#Q&Oi#R&Oi'h&Oi'r&Oi's&Oi'x&Oi'y&Oi'z&Oi'{&Oi'|&Oi'}&Oi(O&Oi(Q&Oi(R&Oi(T&Oi!P&Oi!e&OiX&OiP&Oiv&Oi!S&Oi#T&Oi~O_%cO!Q!lO!P&yX!e&yX~P#D_O!e.xO!P(ua~OR3RO(P*OO~O!e3SOR(rX~OR3UO~O(P*OOR&Pi#p&Piw&Pi$f&Pi$|&Pi[&Pio&Piy&Pi}&Pi!l&Pi!q&Pi!t&Pi#Q&Pi#R&Pi'h&Pi'r&Pi's&Pi'x&Pi'y&Pi'z&Pi'{&Pi'|&Pi'}&Pi(O&Pi(Q&Pi(R&Pi(T&Pi!P&Pi!e&PiX&PiP&Piv&Pi!S&Pi#T&Pi~O!P3VO~O$f3WO(P*OO~Ow$yO$f3WO$|*wO(P*OO~Ow!PO!Z!YO~O!Z3bO#T3`O's(oO~O!j&bO'R#VO~P<cOv3fO~Ov3fO!j&bO'R`O~P<cO!O3iO's(oO~Ow!PO~P#9jOo3lOy3kO(P*OO~OS,_OT,_OZ,_O['bO_3mOd,_Oo,_Os,_Ou,_Ow'cOy,_O}'dO!S,_O!e,_O!l,_O!q,]O!t,_O!{,_O#Q,_O#R,_O#S,_O#T,_O'R,_O'[%eO'_UO'h,[O's,]O'v,`O'x,[O'y,]O'z,]O'{,]O'|,^O'},^O(O,_O(P,aO(Q,aO(R,bO~O!P3qO~P&']Ov3tO~P&']OR0tO!S+TO!e0rO~OR0tOo0vO!S+TO!e0rO~Oa/yO|!VO'R#VO'U(QO~O!S3wO~O!e3yOv(dX~Ov3{O~OQ!QOZ%rO[%qO^%vO_%cO`TOa/yOd%jOg%yO|!VO}%pO!q%oO$f%wO%^%xO&W%{O'R#VO'U%dO'[%eO(Q%zO~PGaO!e4OO(P*OO!P(fX~O!P4QO~O!S4RO(P)}O~O!S+TO(P*OO~O!e4TOw(aXy(aX~OQ4VO~Oy2XO~Oa/yO|!VO'R#VO'U*nO~Oo4YOw*uO}*vOv%XX!e%XX~O!e4]Ov(hX~Ov4_O~O(P4aOy(_Xw(_X$|(_XR(_Xo(_X!e(_X~Oy4cO(P*OO~OQ!QO[$gO^4dO_$ZO`:QOa:QOd$aO}$eO!i$qO!j4eO!l$lO!q$hO#V$lO'U$YO'[%eO'h$[O~P%;dO!S4gO's(oO~O#V4iO~P%1qO!e4jO!P(kX~O!P4lO~O!P%aX!S!aX!e%aX's!aX~P!KZOQ!QO[$gO^4dO_$ZO`:QOa:QOd$aO}$eO!i$qO!j&bO!l$lO!q$hO#V$lO'U$YO'h$[O~P%;dO!e4jO!P(kX!S'fX's'fX~O^2zO!j2yO~Ow!POy2gO~O_4rO!Q/rO'U&iO'[%eOR&lX!e&lX~OR4tO!e0rO~O!S4vO~Ow$yO$|*wO(P*OO~Oy4wO~P2gOo4xOy4wO(P*OO~Ov&uX!e&uX~P!3|O!e1OOv(pa~Oo5OOy4}O(P*OO~OSVOTVO_%cOsVOtVOuVOw!PO!Q!lO'_UOR&vX!e&vX~P#D_O!e1YOR'Za~O!{5UO~O!P5VO~P#K_O!e5XO!P(wX~O!P5ZO~O!e,rO!P(Vi~OPoOQ!QOZeO[lO^RO_RO`ROaROd[Ow!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'R#VO'UQO'[kO'hcO'riO(QdO~P%;dO!P&ea!e&ea~P2gOX5]O~P2gOP!bqZcq!S!bq!e!bq!tcq'rcq's!bq!O!bqo!bqy!bq!P!bqX!bq!Z!bq#T!bqv!bq~O's(oO!P&`a!e&`aX&`a~O!i-_O!j-^O!l5_O'U-WOv&aX!e&aX~O!e1tOv'pa~O!S5aO~O!S5eO's(oOP$Xa!e$Xa~O(P*OOP$Wq!e$Wq~Ov$^i!e$^i~P2gOw!POy5gO#S5iO$|*wO~Oo5lOy5kO(P*OO~Oy5nO~Oy5nO$|*wO~Oy5rO(P*OO~Ow!POy5gO~Oo5yOy5xO(P*OO~O!S5{O~O!e2tO!P(ta~O^2zO!j2yO'[%eO~OQ!QOZ%rO[%qO^.qO_%cO`TOaTOd%jOg%yO}%pO!j.rO!q.oO!t6PO#V6RO$f%wO%^%xO&W%{O'R#VO'U%dO'[%eO(Q%zO!P&xX!e&xX~PGaOQ!QOZ%rO[%qO^6TO_%cO`TOaTOd%jOg%yO}%pO!j6UO!q%oO$f%wO%^%xO&W%{O'U%dO'[%eO(P)}O(Q%zO~PGaO!P%aa!e%aa~P#4_O^6VO~O#S6WOR%wq#p%wq(P%wqw%wq$f%wq$|%wq[%wqo%wqy%wq}%wq!l%wq!q%wq!t%wq#Q%wq#R%wq'h%wq'r%wq's%wq'x%wq'y%wq'z%wq'{%wq'|%wq'}%wq(O%wq(Q%wq(R%wq(T%wq!P%wq!e%wqX%wqP%wqv%wq!S%wq#T%wq~O(P*OOR&Oq#p&Oqw&Oq$f&Oq$|&Oq[&Oqo&Oqy&Oq}&Oq!l&Oq!q&Oq!t&Oq#Q&Oq#R&Oq'h&Oq'r&Oq's&Oq'x&Oq'y&Oq'z&Oq'{&Oq'|&Oq'}&Oq(O&Oq(Q&Oq(R&Oq(T&Oq!P&Oq!e&OqX&OqP&Oqv&Oq!S&Oq#T&Oq~O(P*OO!P&ya!e&ya~OX6XO~P2gO'[%eOR&wX!e&wX~O!e3SOR(ra~O$f6_O(P*OO~Ow![q~P#9jO#T6bO~O!Z3bO#T6bO's(oO~Ov6gO~O!S1_O#T'wX~O#T6kO~Oy6lO!P6mO~O!P6mO~P&']Oy6pO~Ov6pOy6lO~Ov6pO~P&']Oy6rO~O!e3yOv(da~O!S6uO~Oa/yO|!VO'R#VO'U(QOv&oX!e&oX~O!e4OO(P*OO!P(fa~OQ!QOZ%rO[%qO^%vO_%cO`TOa/yOd%jOg%yO|!VO}%pO!q%oO$f%wO%^%xO&W%{O'R#VO'U%dO'[%eO(Q%zO!P&pX!e&pX~PGaO!e4OO!P(fa~OQ!QOZ%rO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f0UO%^%xO&W%{O'U%dO'[%eO(Q%zOw&nX!e&nXy&nX~PGaO!e4TOw(aay(aa~O!e4]Ov(ha~Oo7XOv%Xa!e%Xa~Oo7XOw*uO}*vOv%Xa!e%Xa~Oa/yO|!VO'R#VO'U*nOv&qX!e&qX~O(P*OOy$xaw$xa$|$xaR$xao$xa!e$xa~O(P4aOy(_aw(_a$|(_aR(_ao(_a!e(_a~O!P%aa!S!aX!e%aa's!aX~P!KZOQ!QO[$gO^7`O_$ZO`:QOa:QOd$aO}$eO!i$qO!j&bO!l$lO!q$hO#V$lO'U$YO'h$[O~P%;dO^6VO!j6UO~O!e4jO!P(ka~O!e4jO!P(ka!S'fX's'fX~OQ!QO[$gO^0kO_$ZO`:QOa:QOd$aO}$eO!i$qO!j0lO!l$lO!q0dO!t7dO#V7fO'R#VO'U$YO'[%eO'h$[O!P&sX!e&sX~P%;dO!S7hO's(oO~Ow!POy5gO$|*wO(P*OO~O!S+TOR&la!e&la~Oo0vO!S+TOR&la!e&la~Oo0vOR&la!e&la~O(P*OOR$yi!e$yi~Oy7kO~P2gOo7lOy7kO(P*OO~O(P*OORni!eni~O(P*OOR&va!e&va~O(P)}OR&va!e&va~OS,_OT,_OZ,_O_,_Od,_Oo,_Os,_Ou,_Oy,_O!S,_O!e,_O!l,_O!q,]O!t,_O!{,_O#Q,_O#R,_O#S,_O#T,_O'R,_O'[%eO'_UO'h,[O's,]O'x,[O'y,]O'z,]O'{,]O'|,^O'},^O(O,_O~O(P7nO(Q7nO(R7nO~P''`O!P7pO~P#K_OSVOTVOsVOtVOuVO'_UO!P&zX!e&zX~P!6PO!e5XO!P(wa~O!P&ei!e&ei~P2gO's(oOv!hi!e!hi~O!S7tO~O(P*OOP$Xi!e$Xi~Ov$^q!e$^q~P2gOw!POy7vO~Ow!POy7vO#S7yO$|*wO~Oy7{O~Oy7|O~Oy7}O(P*OO~Ow!POy7vO$|*wO(P*OO~Oo8SOy8RO(P*OO~O!e2tO!P(ti~O(P*OO!P%}X!e%}X~O!P%ai!e%ai~P#4_O^8VO~O!e8[O['cXv$`i}'cX!l'cX!q'cX!t'cX'h'cX'r'cX(Q'cX~P@[OQ#[iS#[iT#[i[#[i^#[i_#[i`#[ia#[id#[is#[it#[iu#[iv$`i}#[i!i#[i!j#[i!l#[i!q#[i!t'cX#V#[i'R#[i'U#[i'_#[i'h#[i'r'cX(Q'cX~P@[O#T#^a~P2gO#T8_O~O!Z3bO#T8`O's(oO~Ov8cO~Oy8eO~P2gOy8gO~Oy6lO!P8hO~Ov8gOy6lO~O!e3yOv(di~O(P*OOv%Qi!e%Qi~O!e4OO!P(fi~O!e4OO(P*OO!P(fi~O(P*OO!P&pa!e&pa~O(P8oOw(bX!e(bXy(bX~O(P*OO!S$wiy$wiw$wi$|$wiR$wio$wi!e$wi~O!e4]Ov(hi~Ov%Xi!e%Xi~P2gOo8rOv%Xi!e%Xi~O!P%ai!S!aX!e%ai's!aX~P!KZO(P*OO!P%`i!e%`i~O!e4jO!P(ki~OQ!QO[$gO^0kO_$ZO`:QOa:QOd$aO}$eO!i$qO!j0lO!l$lO!q0dO!t7dO#V8uO'R#VO'U$YO'[%eO'h$[O~P%;dO!P&sa!S'fX!e&sa's'fX~O(P*OOR$zq!e$zq~Oy8wO~P2gOy8RO~P2gO(P8yO(Q8yO(R8yO~O(P8yO(Q8yO(R8yO~P''`O's(oOv!hq!e!hq~O(P*OOP$Xq!e$Xq~Ow!POy8|O$|*wO(P*OO~Ow!POy8|O~Oy9PO~P2gOy9RO~P2gOo9TOy9RO(P*OO~OQ#[qS#[qT#[q[#[q^#[q_#[q`#[qa#[qd#[qs#[qt#[qu#[qv$`q}#[q!i#[q!j#[q!l#[q!q#[q#V#[q'R#[q'U#[q'_#[q'h#[q~O!e9WO['cXv$`q}'cX!l'cX!q'cX!t'cX'h'cX'r'cX(Q'cX~P@[Oo'cX!t'cX#Q'cX#R'cX#p'cX'r'cX's'cX'x'cX'y'cX'z'cX'{'cX'|'cX'}'cX(O'cX(P'cX(Q'cX(R'cX(T'cX~P'9OO#T9]O~O!Z3bO#T9]O's(oO~Oy9_O~O(P*OOv%Qq!e%Qq~O!e4OO!P(fq~O(P*OO!P&pi!e&pi~O(P8oOw(ba!e(bay(ba~Ov%Xq!e%Xq~P2gO!P&si!S'fX!e&si's'fX~O(P*OO!P%`q!e%`q~Oy9dO~P2gO(P9eO(Q9eO(R9eO~O's(oOv!hy!e!hy~Ow!POy9fO~Ow!POy9fO$|*wO(P*OO~Oy9hO~P2gOQ#[yS#[yT#[y[#[y^#[y_#[y`#[ya#[yd#[ys#[yt#[yu#[yv$`y}#[y!i#[y!j#[y!l#[y!q#[y#V#[y'R#[y'U#[y'_#[y'h#[y~O!e9kO['cXv$`y}'cX!l'cX!q'cX!t'cX'h'cX'r'cX(Q'cX~P@[Oo'cX!t'cX#Q'cX#R'cX#p'cX'r'cX's'cX'x'cX'y'cX'z'cX'{'cX'|'cX'}'cX(O'cX(P'cX(Q'cX(R'cX(T'cX~P'?}O!e9lO['cX}'cX!l'cX!q'cX!t'cX'h'cX'r'cX(Q'cX~P@[OQ#[iS#[iT#[i[#[i^#[i_#[i`#[ia#[id#[is#[it#[iu#[i}#[i!i#[i!j#[i!l#[i!q#[i!t'cX#V#[i'R#[i'U#[i'_#[i'h#[i'r'cX(Q'cX~P@[O#T9oO~O(P*OO!P&pq!e&pq~Ov%Xy!e%Xy~P2gOw!POy9pO~Oy9qO~P2gOQ#[!RS#[!RT#[!R[#[!R^#[!R_#[!R`#[!Ra#[!Rd#[!Rs#[!Rt#[!Ru#[!Rv$`!R}#[!R!i#[!R!j#[!R!l#[!R!q#[!R#V#[!R'R#[!R'U#[!R'_#[!R'h#[!R~O!e9rO['cX}'cX!l'cX!q'cX!t'cX'h'cX'r'cX(Q'cX~P@[OQ#[qS#[qT#[q[#[q^#[q_#[q`#[qa#[qd#[qs#[qt#[qu#[q}#[q!i#[q!j#[q!l#[q!q#[q!t'cX#V#[q'R#[q'U#[q'_#[q'h#[q'r'cX(Q'cX~P@[O!e9uO['cX}'cX!l'cX!q'cX!t'cX'h'cX'r'cX(Q'cX~P@[OQ#[yS#[yT#[y[#[y^#[y_#[y`#[ya#[yd#[ys#[yt#[yu#[y}#[y!i#[y!j#[y!l#[y!q#[y!t'cX#V#[y'R#[y'U#[y'_#[y'h#[y'r'cX(Q'cX~P@[OwbX~P$|OwjX}jX!tbX'rbX~P!6mOZ'TXd'YXo'TXw'lX!t'TX'r'TX's'TX~O['TXd'TXw'TX}'TX!l'TX!q'TX#Q'TX#R'TX#p'TX'h'TX'x'TX'y'TX'z'TX'{'TX'|'TX'}'TX(O'TX(P'TX(Q'TX(R'TX(T'TX~P'MmOP'TX}'lX!S'TX!e'TX!O'TXy'TX!P'TXX'TX!Z'TX#T'TXv'TX~P'MmO^9xO_9xO`9xOa9xO'U9vO~O!j:VO~P!.cOPoOQ!QOZeO^9xO_9xO`9xOa9xOd9{O!U#bO!W#cO!X;RO!Z!YO#Y!_O#r:RO#{:SO$O!]O$b!`O$d!bO$f!cO'U9vO'[kO[#sXo#sXw#sX}#sX!l#sX!q#sX!t#sX#Q#sX#R#sX#p#sX'h#sX'r#sX's#sX'x#sX'y#sX'z#sX'{#sX'|#sX'}#sX(O#sX(P#sX(Q#sX(R#sX(T#sX~P%;dO#S$uO~P!.cO}'lXP'TX!S'TX!e'TX!O'TXy'TX!P'TXX'TX!Z'TX#T'TXv'TX~P'MmOo#qX#Q#qX#R#qX#p#qX's#qX'x#qX'y#qX'z#qX'{#qX'|#qX'}#qX(O#qX(P#qX(R#qX(T#qX~P!.cOo#zX#Q#zX#R#zX#p#zX's#zX'x#zX'y#zX'z#zX'{#zX'|#zX'}#zX(O#zX(P#zX(R#zX(T#zX~P!.cOPoOQ!QOZeO^9xO_9xO`9xOa9xOd9{O!U#bO!W#cO!X;RO!Z!YO#Y!_O#r:RO#{:SO$O!]O$b!`O$d!bO$f!cO'U9vO'[kO[#sao#saw#sa}#sa!l#sa!q#sa!t#sa#Q#sa#R#sa#p#sa'h#sa'r#sa's#sa'x#sa'y#sa'z#sa'{#sa'|#sa'}#sa(O#sa(P#sa(Q#sa(R#sa(T#sa~P%;dOo:aO#Q:aO#R:^Ow#sa~P!BqOw$Ua~P#9jOQ'YXd'YX}iX~OQlXdlX}jX~O^:zO_:zO`:zOa:zO'U:fO~OQ'YXd'YX}hX~Ow#qa~P#9jOw#za~P#9jO!S&_Oo#za#Q#za#R#za#p#za's#za'x#za'y#za'z#za'{#za'|#za'}#za(O#za(P#za(R#za(T#za~P!.cO#S*dO~P!.cOw#ci~P#9jO[#}O}#zO'x#hO(O#|O(Q#hO(R#fO(T#hOo#eiw#ei!l#ei!q#ei!t#ei#Q#ei#R#ei#p#ei'r#ei's#ei'y#ei'z#ei'{#ei'|#ei'}#ei~O'h#ei(P#ei~P(/aO'h#gO(P#gO~P(/aO[#}O}#zO'h#gO'x#hO'y#iO'z#iO(O#|O(P#gO(Q#hO(R#fO(T#hOo#eiw#ei!l#ei!t#ei#Q#ei#R#ei#p#ei'r#ei's#ei'{#ei'|#ei'}#ei~O!q#ei~P(1]O!q#jO~P(1]O[#}O}#zO!q#jO'h#gO'x#hO'y#iO'z#iO'{#kO(O#|O(P#gO(Q#hO(R#fO(T#hOo#eiw#ei!l#ei!t#ei#Q#ei#R#ei#p#ei'r#ei'|#ei'}#ei~O's#ei~P(3UO's#lO~P(3UO[#}O}#zO!q#jO#R:^O'h#gO's#lO'x#hO'y#iO'z#iO'{#kO(O#|O(P#gO(Q#hO(R#fO(T#hOo#eiw#ei!l#ei!t#ei#Q#ei#p#ei'r#ei'|#ei~O'}#ei~P(4}O'}#mO~P(4}Oo:aO#Q:aO#R:^Ow#ni~P$1lOo:aO#Q:aO#R:^Ow#si~P$3mOQ'YXd'YX}'lX~Ow#zi~P#9jOw$Ui~P#9jOd:UO~Ow#ca~P#9jOd:|O~OU'x_'v'Q'P'_s!{'_'U'[~",
      goto: "$L^(xPPPPPPP(yPP)QPP)`PPPP)l-rP0r5oP7a7a9U7a?VDoEQPEWHaPPPPPPKqP! b! pPPPPP!!hP!%QP!%QPP!'QP!)TP!)Y!*P!*w!*w!*w!)Y!+nP!)Y!.c!.fPP!.lP!)Y!)Y!)Y!)YP!)Y!)YP!)Y!)Y!/[!/[!/y!0hP!0hKaKaKaPPPP!0hPP!%QP!0v!0y!1P!2Q!2^!4^!4^!6[!8^!2^!2^!:Y!;w!=h!?T!@n!BV!Cl!D}!2^!2^P!2^P!2^!2^!F^!2^P!G}!2^!2^P!I}!2^P!2^!8^!8^!2^!8^!2^!LU!N^!Na!8^!2^!Nd!Ng!Ng!Ng!Nk!%QP!%QP!%QP! b! bP!Nu! b! bP# R#!g! bP! bP#!v##{#$T#$s#$w#$}#$}#%VP#']#']#'c#(X#(e! bP! bP#(u#)U! bP! bPP#)b#)p#)|#*f#)v! b! bP! b! b! bP#*l#*l#*r#*x#*l#*l! b! bP#+V#+`#+j#+j#-b#/U#/b#/b#/e#/e5o5o5o5o5o5o5o5oP5o#/h#/n#0Y#2e#2k#2z#6x#7O#7U#7h#7r#9c#9m#9|#:S#:Y#:d#:n#:t#;R#;X#;_#;i#;w#<R#>a#>m#>z#?Q#?Y#?a#?k#?qPPPPPPP#?w#CTP#GS#Kn#Mi$ h$'UP$'XPPP$*`$*i$*{$0V$2e$2n$4gP!)Y$5a$8u$;l$?W$?a$?f$?iPPP$?l$BcP$BsPPPPPPPPPP$CXP$Eg$Ej$Em$Es$Ev$Ey$E|$FP$FV$Ha$Hd$Hg$Hj$Hm$Hp$Hs$Hv$Hy$H|$IP$KV$KY$K]#*l$Ki$Ko$Kr$Ku$Ky$K}$LQ$LT$LW$LZQ!tPT'V!s'Wi!SOlm!P!T$T$W$y%b)T*e/fQ'h#QQ,l'kQ1d,kR7q5X(SSOY[bfgilmop!O!P!T!Y!Z![!_!`!c!p!q!|!}#Q#U#Z#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$`$a$e$g$h$q$r$y%X%_%b&U&Y&[&b&u&z&|'P'a'k'm'n'|(V(X(a(c(d(e(i(n(o(q({)R)T)h*Y*e*h*j*k+Y+m+y,k,o,r,y-Q-S-f-l-s.|/]/a/c/f0d0f0l0|1O1i1s1}3`3b3g3i3l4Y4e4j4x5O5X5a5l5y6b6f7X7c7l7t8S8_8`8r9T9]9o9z9{9|9}:O:P:R:S:T:U:V:W:X:Y:Z:[:]:^:_:`:a:b:l:m:nS(y$v-nQ*o&eQ*s&hQ-j(xQ-x)YW0Y+P0X4]7ZR4[0Z&{!RObfgilmop!O!P!T!Y!Z![!_!`!c!p#Q#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$e$g$h$q$r$y%_%b&U&Y&[&b&u'k'|(V(X(a(e(i(n(o(q({)R)T)h*Y*e*h*j*k+Y+m,k,r,y-S-f-l-s.|/]/a/c/f0d0f0l0|1i1s1}3`3b3g3i3l4Y4e4j4x5O5X5a5l5y6b6f7X7c7l7t8S8_8`8r9T9]9o9|9}:O:P:R:S:V:W:X:Y:Z:[:]:^:_:`:a:b:l:m#r]Ofgilmp!O!P!T!Z![#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['|(V(X({)h+m,r,y-l.|0|1i1}3`3b3l4Y4x5O5l5y6b7X7l8S8_8`8r9T9]9of#[b#Q$y'k(a)R)T*Y,k-s5X!h$bo!c!p$e$g$h$q$r&U&b&u(e(i(n(o(q*e*j+Y-S-f/a/c/f0d0f0l1s3g4e4j5a6f7c7t$b%k!Q!n$O$u%o%p%q%y%{&P&o&p&r'](p)r)w)x)}*O*Q*U*Z*]*d*m*v*w+T+U+g+n+|-h-u.T._.o.s.w.x/Y/Z/z/|0_0q0v0}1X1Y1z2b2i2k2n2t2w3W3w3}4O4T4W4a4g4v5e5i5{6W6_6u6{6}7h7y8n!W;Q!Y!_!`*h*k/]3i9|9}:O:P:R:S:V:W:X:Y:Z:[:]:^:_:`:a:b:l:mR;T%n$_%u!Q!n$O$u%o%p%q&P&o&p&r'](p)r)w)x)}*O*Q*U*Z*]*d*m*v*w+T+U+g+n+|-h-u.T._.o.s.w.x/Y/Z/z/|0_0q0v0}1X1Y1z2b2i2k2n2t2w3W3w3}4O4T4W4a4g4v5e5i5{6W6_6u6{6}7h7y8n$e%l!Q!n$O$u%n%o%p%q%y%{&P&o&p&r'](p)r)w)x)}*O*Q*U*Z*]*d*m*v*w+T+U+g+n+|-h-u.T._.o.s.w.x/Y/Z/z/|0_0q0v0}1X1Y1z2b2i2k2n2t2w3W3w3}4O4T4W4a4g4v5e5i5{6W6_6u6{6}7h7y8n'hZOY[fgilmop!O!P!T!Y!Z![!_!`!c!p!|!}#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$`$a$e$g$h$q$r%_%b%i%j&U&Y&[&b&u'a'|(V(X(c(d(e(i(n(o(q({)h)o)p*e*h*j*k+Y+m,r,y-Q-S-f-l.h.|/]/a/c/f0d0f0l0|1i1s1}3`3b3g3i3l4Y4e4j4x5O5a5l5y6b6f7X7c7l7t8S8_8`8r9T9]9o9z9{9|9}:O:P:R:S:T:U:V:W:X:Y:Z:[:]:^:_:`:a:b:g:h:l:m:n:{:|;P$^%l!Q!n$O$u%n%o%p%q%y%{&P&p&r(p)r)w)x)}*O*Q*U*Z*]*d*m*v*w+T+U+g+n+|-h-u.T._.o.s.w.x/Y/Z/z/|0_0q0v0}1X1z2b2i2k2n2t2w3W3w3}4O4T4W4a4g4v5e5i5{6W6_6u6{6}7h7y8nQ&j!hQ&k!iQ&l!jQ&m!kQ&s!oQ)Z%QQ)[%RQ)]%SQ)^%TQ)a%WQ+_&oS,Q']1YQ.V)_S/q*t4VR4p0r+}TOY[bfgilmop!O!P!Q!T!Y!Z![!_!`!c!n!p!q!|!}#Q#U#Z#e#o#p#q#r#s#t#u#v#w#x#y#z#}$O$T$W$`$a$e$g$h$q$r$u$y%X%_%b%i%j%n%o%p%q%y%{&P&U&Y&[&b&o&p&r&u&z&|'P']'a'k'm'n'|(V(X(a(c(d(e(i(n(o(p(q({)R)T)h)o)p)r)w)x)}*O*Q*U*Y*Z*]*d*e*h*j*k*m*v*w+T+U+Y+g+m+n+y+|,k,o,r,y-Q-S-f-h-l-s-u.T._.h.o.s.w.x.|/Y/Z/]/a/c/f/z/|0_0d0f0l0q0v0|0}1O1X1Y1i1s1z1}2b2i2k2n2t2w3W3`3b3g3i3l3w3}4O4T4W4Y4a4e4g4j4v4x5O5X5a5e5i5l5y5{6W6_6b6f6u6{6}7X7c7h7l7t7y8S8_8`8n8r9T9]9o9z9{9|9}:O:P:R:S:T:U:V:W:X:Y:Z:[:]:^:_:`:a:b:g:h:l:m:n:{:|;PQ'[!xQ'g#PQ)k%gU)q%m*S*VR.e)jQ,S']R5R1Y#t%s!Q!n$O$u%p%q&P&p&r(p)w)x)}*Q*U*Z*]*d*m*v+U+g+n+|-h-u.T._.s.w.x/Y/Z/z/|0_0q0v0}1X1z2b2i2k2n2w3W3w3}4O4W4g4v5e5i5{6W6_6u6{6}7h7y8nQ)w%oQ+^&oQ,T']l,_'b'c'd,Y,e,f/l/m1`3p3s5V5W7pS.p)r2tQ.}*OQ/P*RQ/p*tS0P*w4TQ0`+T[0n+Y.i0f4j6O7cQ2w.oS4f0d2sQ4o0rQ5S1YQ6Y3SQ7P4RQ7T4VQ7^4aR9a8o&pVOfgilmop!O!P!T!Y!Z![!_!`!c!p#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$e$g$h$q$r%_%b&U&Y&[&b&u']'|(V(X(a(e(i(n(o(q({)h*e*h*j*k+Y+m,j,k,r,y-S-f-l.|/]/a/c/f0d0f0l0|1Y1i1s1}3`3b3g3i3l4Y4e4j4x5O5X5a5l5y6b6f7X7c7l7t8S8_8`8r9T9]9o9|9}:O:P:R:S:V:W:X:Y:Z:[:]:^:_:`:a:b:l:mU&g!g%P%[m,_'b'c'd,Y,e,f/l/m1`3p3s5V5W7p$nsOfgilm!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y'|(V(X({)h*h*k+m,r,y-l.|/]0|1i1}3`3b3i3l4Y4x5O5l5y6b7X7l8S8_8`8r9T9]9o9|9}:R:S:V:W:X:Y:Z:[:]:^:_:`:a:lS$tp:PS&O!W#bS&Q!X#cQ&`!bQ*^&RQ*`&VS*c&[:mQ*g&^Q,S']Q-i(vQ/h*iQ0o+ZS2g.W0pQ3^/^Q3_/_Q3h/gQ3j/jQ5R1YU5g2S2h4nU7v5h5j5wQ8d6iS8|7w7xS9f8}9OR9p9gi{Ob!O!P!T$y%_%b)R)T)h-shxOb!O!P!T$y%_%b)R)T)h-sW/u*u/s3y6vQ/|*vW0Z+P0X4]7ZQ3}/zQ6}4OR8n6{!h$do!c!p$e$g$h$q$r&U&b&u(e(i(n(o(q*e*j+Y-S-f/a/c/f0d0f0l1s3g4e4j5a6f7c7tQ&d!dQ&f!fQ&n!mW&x!q%X&|1OQ'S!rQ)W$}Q)X%OQ)`%VU)c%Y'T'UQ*r&hS+r&z'PS-X(j1tQ-t)VQ-w)YS.`)d)eS0w+b/rQ1R+yQ1V+zS1w-^-_Q2l.aQ3u/oQ5b1yR5m2W${sOfgilmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['|(V(X({)h*h*k+m,r,y-l.|/]0|1i1}3`3b3i3l4Y4x5O5l5y6b7X7l8S8_8`8r9T9]9o9|9}:O:P:R:S:V:W:X:Y:Z:[:]:^:_:`:a:b:l:m$zsOfgilmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['|(V(X({)h*h*k+m,r,y-l.|/]0|1i1}3`3b3i3l4Y4x5O5l5y6b7X7l8S8_8`8r9T9]9o9|9}:O:P:R:S:V:W:X:Y:Z:[:]:^:_:`:a:b:l:mR3^/^V&T!Y!`*h!i$lo!c!p$e$g$h$q$r&U&b&u(e(i(n(o(q*e*j+Y-S-f/a/c/f0d0f0l1s3g4e4j5a6f7c7t!k$^o!c!p$e$g$h$q$r&U&b&u(a(e(i(n(o(q*e*j+Y-S-f/a/c/f0d0f0l1s3g4e4j5a6f7c7t!i$co!c!p$e$g$h$q$r&U&b&u(e(i(n(o(q*e*j+Y-S-f/a/c/f0d0f0l1s3g4e4j5a6f7c7t&e^Ofgilmop!O!P!T!Y!Z![!_!`!c!p#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$e$g$h$q$r%_%b&U&Y&[&b&u'|(V(X(e(i(n(o(q({)h*e*h*j*k+Y+m,r,y-S-f-l.|/]/a/c/f0d0f0l0|1i1s1}3`3b3g3i3l4Y4e4j4x5O5a5l5y6b6f7X7c7l7t8S8_8`8r9T9]9o9|9}:O:P:R:S:V:W:X:Y:Z:[:]:^:_:`:a:b:l:mR(k$fQ-Z(jR5_1tQ(R#|S(z$v-nS-Y(j1tQ-k(xW/t*u/s3y6vS1x-^-_Q3x/uR5c1yQ'e#Oh,b'b'c'd,Y,e,f/l/m1`3p3s5WQ,m'lQ,p'oQ.t)tR8f6kQ'f#Oh,b'b'c'd,Y,e,f/l/m1`3p3s5WQ,n'lQ,p'oQ.t)tR8f6ki,b'b'c'd,Y,e,f/l/m1`3p3s5WR*f&]X/b*e/c/f3g!}aOb!O!P!T#z$v$y%_%b'|(x)R)T)h)r*e*u*v+P+Y,r-n-s.i/a/c/f/s/z0X0f1i2t3g3y4O4]4j6O6f6v6{7Z7cQ3a/`Q6d3cQ8a6eR9^8b${rOfgilmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['|(V(X({)h*h*k+m,r,y-l.|/]0|1i1}3`3b3i3l4Y4x5O5l5y6b7X7l8S8_8`8r9T9]9o9|9}:O:P:R:S:V:W:X:Y:Z:[:]:^:_:`:a:b:l:m#nfOfglmp!O!P!T!Z![#e#o#p#q#r#s#t#u#v#w#x#z#}$T$W%_%b&Y&['|(V(X({)h+m,r,y-l.|0|1i1}3`3b3l4Y4x5O5l5y6b7X7l8S8_8`8r9T9]9o!T9|!Y!_!`*h*k/]3i9|9}:P:R:S:V:W:X:Y:Z:[:]:^:_:`:a:l:m#rfOfgilmp!O!P!T!Z![#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['|(V(X({)h+m,r,y-l.|0|1i1}3`3b3l4Y4x5O5l5y6b7X7l8S8_8`8r9T9]9o!X9|!Y!_!`*h*k/]3i9|9}:O:P:R:S:V:W:X:Y:Z:[:]:^:_:`:a:b:l:m$srOfglmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#z#}$T$W%_%b&Y&['|(V(X({)h*h*k+m,r,y-l.|/]0|1i1}3`3b3i3l4Y4x5O5l5y6b7X7l8S8_8`8r9T9]9o9|9}:P:R:S:V:W:X:Y:Z:[:]:^:_:`:a:l:m#U#oh#d$P$Q$V$s%^&W&X'p's't'u'v'w'x'y'z'{'}(T(Z(_*a*b,q,v,x-m0y1j1m2O3Q4y5[5f6c6j7W7j7m7z8Q8q8x9S9c9i}:W&S&]/j3]6i:c:d:j:k:o:q:r:s:t:u:v:w:x:y:};O;S#W#ph#d$P$Q$V$s%^&W&X'p'q's't'u'v'w'x'y'z'{'}(T(Z(_*a*b,q,v,x-m0y1j1m2O3Q4y5[5f6c6j7W7j7m7z8Q8q8x9S9c9i!P:X&S&]/j3]6i:c:d:j:k:o:p:q:r:s:t:u:v:w:x:y:};O;S#S#qh#d$P$Q$V$s%^&W&X'p't'u'v'w'x'y'z'{'}(T(Z(_*a*b,q,v,x-m0y1j1m2O3Q4y5[5f6c6j7W7j7m7z8Q8q8x9S9c9i{:Y&S&]/j3]6i:c:d:j:k:o:r:s:t:u:v:w:x:y:};O;S#Q#rh#d$P$Q$V$s%^&W&X'p'u'v'w'x'y'z'{'}(T(Z(_*a*b,q,v,x-m0y1j1m2O3Q4y5[5f6c6j7W7j7m7z8Q8q8x9S9c9iy:Z&S&]/j3]6i:c:d:j:k:o:s:t:u:v:w:x:y:};O;S#O#sh#d$P$Q$V$s%^&W&X'p'v'w'x'y'z'{'}(T(Z(_*a*b,q,v,x-m0y1j1m2O3Q4y5[5f6c6j7W7j7m7z8Q8q8x9S9c9iw:[&S&]/j3]6i:c:d:j:k:o:t:u:v:w:x:y:};O;S!|#th#d$P$Q$V$s%^&W&X'p'w'x'y'z'{'}(T(Z(_*a*b,q,v,x-m0y1j1m2O3Q4y5[5f6c6j7W7j7m7z8Q8q8x9S9c9iu:]&S&]/j3]6i:c:d:j:k:o:u:v:w:x:y:};O;S!x#vh#d$P$Q$V$s%^&W&X'p'y'z'{'}(T(Z(_*a*b,q,v,x-m0y1j1m2O3Q4y5[5f6c6j7W7j7m7z8Q8q8x9S9c9iq:_&S&]/j3]6i:c:d:j:k:o:w:x:y:};O;S!v#wh#d$P$Q$V$s%^&W&X'p'z'{'}(T(Z(_*a*b,q,v,x-m0y1j1m2O3Q4y5[5f6c6j7W7j7m7z8Q8q8x9S9c9io:`&S&]/j3]6i:c:d:j:k:o:x:y:};O;S$]#{h#`#d$P$Q$V$s%^&S&W&X&]'p'q'r's't'u'v'w'x'y'z'{'}(T(Z(_*a*b,q,v,x-m/j0y1j1m2O3Q3]4y5[5f6c6i6j7W7j7m7z8Q8q8x9S9c9i:c:d:j:k:o:p:q:r:s:t:u:v:w:x:y:};O;S${jOfgilmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['|(V(X({)h*h*k+m,r,y-l.|/]0|1i1}3`3b3i3l4Y4x5O5l5y6b7X7l8S8_8`8r9T9]9o9|9}:O:P:R:S:V:W:X:Y:Z:[:]:^:_:`:a:b:l:m$v!aOfgilmp!O!P!T!Y!Z!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['|(V(X({)h*h*k+m,r,y-l.|/]0|1i1}3`3b3i3l4Y4x5O5l5y6b7X7l8S8_8`8r9T9]9o9|9}:O:P:R:V:W:X:Y:Z:[:]:^:_:`:a:b:l:mQ&Y![Q&Z!]R:l:S#rpOfgilmp!O!P!T!Z![#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['|(V(X({)h+m,r,y-l.|0|1i1}3`3b3l4Y4x5O5l5y6b7X7l8S8_8`8r9T9]9oQ&[!^!W:P!Y!_!`*h*k/]3i9|9}:O:P:R:S:V:W:X:Y:Z:[:]:^:_:`:a:b:l:mR:m;RR$moR-e(qR$wqT(|$v-nQ/e*eS3e/c/fR6h3gQ3o/lQ3r/mQ6n3pR6q3sQ$zwQ)U${Q*p&fQ+e&qQ+h&sQ-v)XW.Y)a+i+j+kS/W*[+fW2c.V.Z.[.]U3X/X/[0xU5t2d2e2fS6]3Y3[S8O5u5vS8X6[6^Q9Q8PS9U8Y8ZR9j9V^|O!O!P!T%_%b)hX)Q$y)R)T-sQ&r!nQ*]&PQ*{&jQ+O&kQ+S&lQ+V&mQ+[&nQ+k&sQ-|)ZQ.P)[Q.S)]Q.U)^Q.X)`Q.])aQ2T-tQ2f.VR4W0UU+`&o*t4VR4q0rQ+X&mQ+j&sS.[)a+k^0u+^+_/p/q4o4p7TS2e.V.]S4S0Q0RR5v2fS0Q*w4TQ0`+TR7^4aU+c&o*t4VR4r0rQ*y&jQ*}&kQ+R&lQ+f&qQ+i&sS-z)Z*{S.O)[+OS.R)]+SU.Z)a+j+kQ/X*[Q0W*zQ0p+ZQ2Y-{Q2Z-|Q2^.PQ2`.SU2d.V.[.]Q2h.WS3[/[0xS5h2S4nQ5o2[S5u2e2fQ6^3YS7x5j5wQ8P5vQ8Y6[Q8}7wQ9V8ZR9g9OQ0S*wR7R4TQ*x&jQ*|&kU-y)Z*y*{U-})[*}+OS2X-z-|S2].O.PQ4Z0YQ5n2ZQ5p2^R7Y4[Q/v*uQ3v/sQ6w3yR8k6vQ*z&jS-{)Z*{Q2[-|Q4Z0YR7Y4[Q+Q&lU.Q)]+R+SS2_.R.SR5q2`Q0[+PQ4X0XQ7[4]R8s7ZQ+Z&nS.W)`+[S2S-t.XR5j2TQ0h+YQ4h0fQ7e4jR8t7cQ.l)rQ0h+YQ2q.iQ4h0fQ6R2tQ7e4jQ8U6OR8t7cQ0h+YR4h0fX'O!q%X&|1OX&{!q%X&|1OW'O!q%X&|1OS+t&z'PR1T+y_|O!O!P!T%_%b)hQ%a!PS)g%_%bR.c)h$^%u!Q!n$O$u%o%p%q&P&o&p&r'](p)r)w)x)}*O*Q*U*Z*]*d*m*v*w+T+U+g+n+|-h-u.T._.o.s.w.x/Y/Z/z/|0_0q0v0}1X1Y1z2b2i2k2n2t2w3W3w3}4O4T4W4a4g4v5e5i5{6W6_6u6{6}7h7y8nQ*T%yR*W%{$c%n!Q!n$O$u%o%p%q%y%{&P&o&p&r'](p)r)w)x)}*O*Q*U*Z*]*d*m*v*w+T+U+g+n+|-h-u.T._.o.s.w.x/Y/Z/z/|0_0q0v0}1X1Y1z2b2i2k2n2t2w3W3w3}4O4T4W4a4g4v5e5i5{6W6_6u6{6}7h7y8nW)s%m%x*S*VQ.d)iR2|.uR.l)rR6R2tQ'W!sR+}'WQ!TOQ$TlQ$WmQ%b!P[%|!T$T$W%b)T/fQ)T$yR/f*e$b%i!Q!n$O$u%o%p%q%y%{&P&o&p&r'](p)r)w)x)}*O*Q*U*Z*]*d*m*v*w+T+U+g+n+|-h-u.T._.o.s.w.x/Y/Z/z/|0_0q0v0}1X1Y1z2b2i2k2n2t2w3W3w3}4O4T4W4a4g4v5e5i5{6W6_6u6{6}7h7y8n[)m%i)o.h:g:{;PQ)o%jQ.h)pQ:g%nQ:{:hR;P:|Q!vUR'Y!vS!OO!TU%]!O%_)hQ%_!PR)h%b#rYOfgilmp!O!P!T!Z![#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['|(V(X({)h+m,r,y-l.|0|1i1}3`3b3l4Y4x5O5l5y6b7X7l8S8_8`8r9T9]9oh!yY!|#U$`'a'm(c,o-Q9z:T:nQ!|[f#Ub#Q$y'k(a)R)T*Y,k-s5X!h$`o!c!p$e$g$h$q$r&U&b&u(e(i(n(o(q*e*j+Y-S-f/a/c/f0d0f0l1s3g4e4j5a6f7c7tQ'a!}Q'm#ZQ(c$aQ,o'nQ-Q(d!W9z!Y!_!`*h*k/]3i9|9}:O:P:R:S:V:W:X:Y:Z:[:]:^:_:`:a:b:l:mQ:T9{R:n:UQ-T(fR1q-TQ1u-ZR5`1uQ,Y'bQ,e'cQ,f'dW1^,Y,e,f5WR5W1`Q/c*eS3d/c3gR3g/ffbO!O!P!T$y%_%b)R)T)h-sp#Wb'|(x.i/a/s/z0X0f1i6O6f6v6{7Z7cQ'|#zS(x$v-nQ.i)rW/a*e/c/f3gQ/s*uQ/z*vQ0X+PQ0f+YQ1i,rQ6O2tQ6v3yQ6{4OQ7Z4]R7c4jQ,s'}Q1h,qT1k,s1hS(W$Q(ZQ(]$VU,w(W(],|R,|(_Q(r$mR-g(rQ-o(}R2Q-oQ3p/lQ3s/mT6o3p3sQ)R$yS-q)R-sR-s)TQ4b0`R7_4b`0s+]+^+_+`+c/p/q7TR4s0sQ8p7PR9b8pQ4U0SR7S4UQ3z/vQ6s3vT6x3z6sQ4P/{Q6y3|U7O4P6y8lR8l6zQ4^0[Q7V4XT7]4^7VhzOb!O!P!T$y%_%b)R)T)h-sQ$|xW%Zz$|%f)u$b%f!Q!n$O$u%o%p%q%y%{&P&o&p&r'](p)r)w)x)}*O*Q*U*Z*]*d*m*v*w+T+U+g+n+|-h-u.T._.o.s.w.x/Y/Z/z/|0_0q0v0}1X1Y1z2b2i2k2n2t2w3W3w3}4O4T4W4a4g4v5e5i5{6W6_6u6{6}7h7y8nR)u%nS4k0h0mS7b4h4iT7g4k7bW&z!q%X&|1OS+q&z+yR+y'PQ1P+vR4|1PU1Z,R,S,TR5T1ZS3T/P7TR6Z3TQ2u.lQ5}2qT6S2u5}Q.y)yR3P.yQ5Y1dR7r5Y^_O!O!P!T%_%b)hY#Xb$y)R)T-s$l#_fgilmp!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W&Y&['|(V(X({*h*k+m,r,y-l.|/]0|1i1}3`3b3i3l4Y4x5O5l5y6b7X7l8S8_8`8r9T9]9o9|9}:O:P:R:S:V:W:X:Y:Z:[:]:^:_:`:a:b:l:m!h$io!c!p$e$g$h$q$r&U&b&u(e(i(n(o(q*e*j+Y-S-f/a/c/f0d0f0l1s3g4e4j5a6f7c7tW'i#Q'k,k5XQ-O(aR/U*Y&z!RObfgilmop!O!P!T!Y!Z![!_!`!c!p#Q#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$e$g$h$q$r$y%_%b&U&Y&[&b&u'k'|(V(X(a(e(i(n(o(q({)R)T)h*Y*e*h*j*k+Y+m,k,r,y-S-f-l-s.|/]/a/c/f0d0f0l0|1i1s1}3`3b3g3i3l4Y4e4j4x5O5X5a5l5y6b6f7X7c7l7t8S8_8`8r9T9]9o9|9}:O:P:R:S:V:W:X:Y:Z:[:]:^:_:`:a:b:l:m[!{Y[#U#Z9z9{W&{!q%X&|1O['`!|!}'m'n:T:US(b$`$aS+s&z'PU,W'a,o:nS-P(c(dQ1S+yR1o-QS%t!Q&oQ&q!nQ(U$OQ(v$uS)v%o.oQ)y%pQ)|%qS*[&P&rQ+d&pQ,R']Q-c(pQ.k)rU.v)w)x2wS.})}*OQ/O*QQ/S*UQ/V*ZQ/[*]Q/_*dQ/k*mQ/{*vS0R*w4TQ0`+TQ0b+UQ0x+gQ0z+nQ1W+|Q1|-hQ2U-uQ2a.TQ2j._Q2{.sQ2}.wQ3O.xQ3Y/YQ3Z/ZS3|/z/|Q4`0_Q4n0qQ4u0vQ4z0}Q5P1XQ5Q1YQ5d1zQ5s2bQ5w2iQ5z2kQ5|2nQ6Q2tQ6[3WQ6t3wQ6z3}Q6|4OQ7U4WQ7^4aQ7a4gQ7i4vQ7u5eQ7w5iQ8T5{Q8W6WQ8Z6_Q8j6uS8m6{6}Q8v7hQ9O7yR9`8n$^%m!Q!n$O$u%o%p%q&P&o&p&r'](p)r)w)x)}*O*Q*U*Z*]*d*m*v*w+T+U+g+n+|-h-u.T._.o.s.w.x/Y/Z/z/|0_0q0v0}1X1Y1z2b2i2k2n2t2w3W3w3}4O4T4W4a4g4v5e5i5{6W6_6u6{6}7h7y8nQ)i%nQ*S%yR*V%{$y%h!Q!n$O$u%i%j%n%o%p%q%y%{&P&o&p&r'](p)o)p)r)w)x)}*O*Q*U*Z*]*d*m*v*w+T+U+g+n+|-h-u.T._.h.o.s.w.x/Y/Z/z/|0_0q0v0}1X1Y1z2b2i2k2n2t2w3W3w3}4O4T4W4a4g4v5e5i5{6W6_6u6{6}7h7y8n:g:h:{:|;P'tWOY[bfgilmop!O!P!T!Y!Z![!_!`!c!p!|!}#Q#U#Z#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$`$a$e$g$h$q$r$y%_%b&U&Y&[&b&u'a'k'm'n'|(V(X(a(c(d(e(i(n(o(q({)R)T)h*Y*e*h*j*k+Y+m,k,o,r,y-Q-S-f-l-s.|/]/a/c/f0d0f0l0|1i1s1}3`3b3g3i3l4Y4e4j4x5O5X5a5l5y6b6f7X7c7l7t8S8_8`8r9T9]9o9z9{9|9}:O:P:R:S:T:U:V:W:X:Y:Z:[:]:^:_:`:a:b:l:m:n$x%g!Q!n$O$u%i%j%n%o%p%q%y%{&P&o&p&r'](p)o)p)r)w)x)}*O*Q*U*Z*]*d*m*v*w+T+U+g+n+|-h-u.T._.h.o.s.w.x/Y/Z/z/|0_0q0v0}1X1Y1z2b2i2k2n2t2w3W3w3}4O4T4W4a4g4v5e5i5{6W6_6u6{6}7h7y8n:g:h:{:|;P_&y!q%X&z&|'P+y1OR,U']$zrOfgilmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['|(V(X({)h*h*k+m,r,y-l.|/]0|1i1}3`3b3i3l4Y4x5O5l5y6b7X7l8S8_8`8r9T9]9o9|9}:O:P:R:S:V:W:X:Y:Z:[:]:^:_:`:a:b:l:m!j$]o!c!p$e$g$h$q$r&U&b&u(a(e(i(n(o(q*e*j+Y-S-f/a/c/f0d0f0l1s3g4e4j5a6f7c7tQ,S']Q1c,jQ1d,kQ5R1YR7q5X_}O!O!P!T%_%b)h^|O!O!P!T%_%b)hQ#YbX)Q$y)R)T-sbhO!O!T3`6b8_8`9]9oS#`f9|Q#dgQ$PiQ$QlQ$VmQ$spW%^!P%_%b)hU&S!Y!`*hQ&W!ZQ&X![Q&]!_Q'p#eQ'q#oS'r#p:XQ's#qQ't#rQ'u#sQ'v#tQ'w#uQ'x#vQ'y#wQ'z#xQ'{#yQ'}#zQ(T#}Q(Z$TQ(_$WQ*a&YQ*b&[Q,q'|Q,v(VQ,x(XQ-m({Q/j*kQ0y+mQ1j,rQ1m,yQ2O-lQ3Q.|Q3]/]Q4y0|Q5[1iQ5f1}Q6c3bQ6i3iQ6j3lQ7W4YQ7j4xQ7m5OQ7z5lQ8Q5yQ8q7XQ8x7lQ9S8SQ9c8rQ9i9TQ:c:OQ:d:PQ:j:RQ:k:SQ:o:VQ:p:WQ:q:YQ:r:ZQ:s:[Q:t:]Q:u:^Q:v:_Q:w:`Q:x:aQ:y:bQ:}:lQ;O:mR;S9}^tO!O!P!T%_%b)h$`#afgilmp!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W&Y&['|(V(X({*h*k+m,r,y-l.|/]0|1i1}3b3i3l4Y4x5O5l5y7X7l8S8r9T9|9}:O:P:R:S:V:W:X:Y:Z:[:]:^:_:`:a:b:l:mQ6a3`Q8^6bQ9Y8_Q9[8`Q9n9]R9t9oQ&V!YQ&^!`R/g*hQ$joQ&a!cQ&t!pU(f$e$g(iS(m$h0dQ(t$qQ(u$rQ*_&UQ*l&bQ+o&uQ-R(eS-a(n4eQ-b(oQ-d(qW/`*e/c/f3gQ/i*jW0e+Y0f4j7cQ1p-SQ1{-fQ3c/aQ4m0lQ5^1sQ7s5aQ8b6fR8{7t!h$_o!c!p$e$g$h$q$r&U&b&u(e(i(n(o(q*e*j+Y-S-f/a/c/f0d0f0l1s3g4e4j5a6f7c7tR-O(a'uXOY[bfgilmop!O!P!T!Y!Z![!_!`!c!p!|!}#Q#U#Z#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$`$a$e$g$h$q$r$y%_%b&U&Y&[&b&u'a'k'm'n'|(V(X(a(c(d(e(i(n(o(q({)R)T)h*Y*e*h*j*k+Y+m,k,o,r,y-Q-S-f-l-s.|/]/a/c/f0d0f0l0|1i1s1}3`3b3g3i3l4Y4e4j4x5O5X5a5l5y6b6f7X7c7l7t8S8_8`8r9T9]9o9z9{9|9}:O:P:R:S:T:U:V:W:X:Y:Z:[:]:^:_:`:a:b:l:m:n$zqOfgilmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['|(V(X({)h*h*k+m,r,y-l.|/]0|1i1}3`3b3i3l4Y4x5O5l5y6b7X7l8S8_8`8r9T9]9o9|9}:O:P:R:S:V:W:X:Y:Z:[:]:^:_:`:a:b:l:m!i$fo!c!p$e$g$h$q$r&U&b&u(e(i(n(o(q*e*j+Y-S-f/a/c/f0d0f0l1s3g4e4j5a6f7c7t&d^Ofgilmop!O!P!T!Y!Z![!_!`!c!p#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$e$g$h$q$r%_%b&U&Y&[&b&u'|(V(X(e(i(n(o(q({)h*e*h*j*k+Y+m,r,y-S-f-l.|/]/a/c/f0d0f0l0|1i1s1}3`3b3g3i3l4Y4e4j4x5O5a5l5y6b6f7X7c7l7t8S8_8`8r9T9]9o9|9}:O:P:R:S:V:W:X:Y:Z:[:]:^:_:`:a:b:l:m[!zY[$`$a9z9{['_!|!}(c(d:T:UW)n%i%j:g:hU,V'a-Q:nW.g)o)p:{:|T2p.h;PQ(h$eQ(l$gR-V(iV(g$e$g(iR-](jR-[(j$znOfgilmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['|(V(X({)h*h*k+m,r,y-l.|/]0|1i1}3`3b3i3l4Y4x5O5l5y6b7X7l8S8_8`8r9T9]9o9|9}:O:P:R:S:V:W:X:Y:Z:[:]:^:_:`:a:b:l:m!i$ko!c!p$e$g$h$q$r&U&b&u(e(i(n(o(q*e*j+Y-S-f/a/c/f0d0f0l1s3g4e4j5a6f7c7t`,c'b'c'd,Y,e,f1`5WX3n/l/m3p3sh,b'b'c'd,Y,e,f/l/m1`3p3s5WQ7o5VR8z7p^uO!O!P!T%_%b)h$`#afgilmp!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W&Y&['|(V(X({*h*k+m,r,y-l.|/]0|1i1}3b3i3l4Y4x5O5l5y7X7l8S8r9T9|9}:O:P:R:S:V:W:X:Y:Z:[:]:^:_:`:a:b:l:mQ6`3`Q8]6bQ9X8_Q9Z8`Q9m9]R9s9oR(P#zR(O#zQ$SlR([$TR$ooR$noR)P$vR)O$vQ(}$vR2P-nhwOb!O!P!T$y%_%b)R)T)h-s$l!lz!Q!n$O$u$|%f%n%o%p%q%y%{&P&o&p&r'](p)r)u)w)x)}*O*Q*U*Z*]*d*m*v*w+T+U+g+n+|-h-u.T._.o.s.w.x/Y/Z/z/|0_0q0v0}1X1Y1z2b2i2k2n2t2w3W3w3}4O4T4W4a4g4v5e5i5{6W6_6u6{6}7h7y8nR${xR0a+TR0V*wR0T*wR7Q4RR/x*uR/w*uR0O*vR/}*vR0^+PR0]+P%XyObxz!O!P!Q!T!n$O$u$y$|%_%b%f%n%o%p%q%y%{&P&o&p&r'](p)R)T)h)r)u)w)x)}*O*Q*U*Z*]*d*m*v*w+T+U+g+n+|-h-s-u.T._.o.s.w.x/Y/Z/z/|0_0q0v0}1X1Y1z2b2i2k2n2t2w3W3w3}4O4T4W4a4g4v5e5i5{6W6_6u6{6}7h7y8nR0j+YR0i+YQ'R!qQ)b%XQ+v&|R4{1OX'Q!q%X&|1OR+x&|R+w&|T/R*R4VT/Q*R4VR.n)rR.m)rR)z%pR1f,kR1e,k",
      nodeNames: "⚠ | < > RawString Float LineComment BlockComment SourceFile ] InnerAttribute ! [ MetaItem self Metavariable super crate Identifier ScopedIdentifier :: QualifiedScope AbstractType impl SelfType MetaType TypeIdentifier ScopedTypeIdentifier ScopeIdentifier TypeArgList TypeBinding = Lifetime String Escape Char Boolean Integer } { Block ; ConstItem Vis pub ( in ) const BoundIdentifier : UnsafeBlock unsafe AsyncBlock async move IfExpression if LetDeclaration let LiteralPattern ArithOp MetaPattern SelfPattern ScopedIdentifier TuplePattern ScopedTypeIdentifier , StructPattern FieldPatternList FieldPattern ref mut FieldIdentifier .. RefPattern SlicePattern CapturedPattern ReferencePattern & MutPattern RangePattern ... OrPattern MacroPattern ParenthesizedTokens BracketedTokens BracedTokens TokenBinding Identifier TokenRepetition ArithOp BitOp LogicOp UpdateOp CompareOp -> => ArithOp _ else MatchExpression match MatchBlock MatchArm Attribute Guard UnaryExpression ArithOp DerefOp LogicOp ReferenceExpression TryExpression BinaryExpression ArithOp ArithOp BitOp BitOp BitOp BitOp LogicOp LogicOp AssignmentExpression TypeCastExpression as ReturnExpression return RangeExpression CallExpression ArgList AwaitExpression await FieldExpression GenericFunction BreakExpression break LoopLabel ContinueExpression continue IndexExpression ArrayExpression TupleExpression MacroInvocation UnitExpression ClosureExpression ParamList Parameter Parameter ParenthesizedExpression StructExpression FieldInitializerList ShorthandFieldInitializer FieldInitializer BaseFieldInitializer MatchArm WhileExpression while LoopExpression loop ForExpression for MacroInvocation MacroDefinition macro_rules MacroRule EmptyStatement ModItem mod DeclarationList AttributeItem ForeignModItem extern StructItem struct TypeParamList ConstrainedTypeParameter TraitBounds HigherRankedTraitBound RemovedTraitBound OptionalTypeParameter ConstParameter WhereClause where LifetimeClause TypeBoundClause FieldDeclarationList FieldDeclaration OrderedFieldDeclarationList UnionItem union EnumItem enum EnumVariantList EnumVariant TypeItem type FunctionItem default fn ParamList Parameter SelfParameter VariadicParameter VariadicParameter ImplItem TraitItem trait AssociatedType LetDeclaration UseDeclaration use ScopedIdentifier UseAsClause ScopedIdentifier UseList ScopedUseList UseWildcard ExternCrateDeclaration StaticItem static ExpressionStatement ExpressionStatement GenericType FunctionType ForLifetimes ParamList VariadicParameter Parameter VariadicParameter Parameter ReferenceType PointerType TupleType UnitType ArrayType MacroInvocation EmptyType DynamicType dyn BoundedType",
      maxTerm: 361,
      nodeProps: [
        [NodeProp.group, -42,4,5,14,15,16,17,18,19,33,35,36,37,40,51,53,56,101,107,111,112,113,122,123,125,127,128,130,132,133,134,137,139,140,141,142,143,144,148,149,155,157,159,"Expression",-16,22,24,25,26,27,222,223,230,231,232,233,234,235,236,237,239,"Type",-20,42,161,162,165,166,169,170,172,188,190,194,196,204,205,207,208,209,217,218,220,"Statement",-17,49,60,62,63,64,65,68,74,75,76,77,78,80,81,83,84,99,"Pattern"],
        [NodeProp.openedBy, 9,"[",38,"{",47,"("],
        [NodeProp.closedBy, 12,"]",39,"}",45,")"]
      ],
      skippedNodes: [0,6,7,240],
      repeatNodeCount: 33,
      tokenData: "#?|_R!VOX$hXY1_YZ2ZZ]$h]^1_^p$hpq1_qr2srs4qst5Ztu6Vuv9lvw;jwx=nxy!!ayz!#]z{!$X{|!&R|}!'T}!O!(P!O!P!*Q!P!Q!-|!Q!R!6X!R![!7|![!]!Jw!]!^!Lu!^!_!Mq!_!`# x!`!a##y!a!b#&Q!b!c#&|!c!}#'x!}#O#)o#O#P#*k#P#Q#1b#Q#R#2^#R#S#'x#S#T$h#T#U#'x#U#V#3`#V#f#'x#f#g#6s#g#o#'x#o#p#<Q#p#q#<|#q#r#?Q#r${$h${$|#'x$|4w$h4w5b#'x5b5i$h5i6S#'x6S~$hU$oZ'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$hU%iT'`Q'PSOz%xz{&^{!P%x!P!Q'S!Q~%xS%}T'PSOz%xz{&^{!P%x!P!Q'S!Q~%xS&aTOz&pz{&^{!P&p!P!Q({!Q~&pS&sTOz%xz{&^{!P%x!P!Q'S!Q~%xS'VSOz&p{!P&p!P!Q'c!Q~&pS'fSOz'r{!P'r!P!Q'c!Q~'rS'uTOz(Uz{(l{!P(U!P!Q'c!Q~(US(]T'QS'PSOz(Uz{(l{!P(U!P!Q'c!Q~(US(oSOz'rz{(l{!P'r!Q~'rS)QO'QSU)VZ'`QOY)xYZ+hZr)xrs&psz)xz{)Q{!P)x!P!Q0w!Q#O)x#O#P&p#P~)xU)}Z'`QOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$hU*uZ'`QOY)xYZ+hZr)xrs&psz)xz{+|{!P)x!P!Q,g!Q#O)x#O#P&p#P~)xU+mT'`QOz%xz{&^{!P%x!P!Q'S!Q~%xQ,RT'`QOY+|YZ,bZr+|s#O+|#P~+|Q,gO'`QU,lZ'`QOY-_YZ0cZr-_rs'rsz-_z{+|{!P-_!P!Q,g!Q#O-_#O#P'r#P~-_U-dZ'`QOY.VYZ/RZr.Vrs(Usz.Vz{/k{!P.V!P!Q,g!Q#O.V#O#P(U#P~.VU.`Z'`Q'QS'PSOY.VYZ/RZr.Vrs(Usz.Vz{/k{!P.V!P!Q,g!Q#O.V#O#P(U#P~.VU/[T'`Q'QS'PSOz(Uz{(l{!P(U!P!Q'c!Q~(UU/pZ'`QOY-_YZ0cZr-_rs'rsz-_z{/k{!P-_!P!Q+|!Q#O-_#O#P'r#P~-_U0hT'`QOz(Uz{(l{!P(U!P!Q'c!Q~(UU1OT'`Q'QSOY+|YZ,bZr+|s#O+|#P~+|_1hZ'`Q&}X'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_2dT'`Q&}X'PSOz%xz{&^{!P%x!P!Q'S!Q~%x_2|]ZX'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!_$h!_!`3u!`#O$h#O#P%x#P~$h_4OZ#RX'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_4zT'^Q'PS'_XOz%xz{&^{!P%x!P!Q'S!Q~%x_5dZ'RX'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_6`g'`Q'vW'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!c$h!c!}7w!}#O$h#O#P%x#P#R$h#R#S7w#S#T$h#T#o7w#o${$h${$|7w$|4w$h4w5b7w5b5i$h5i6S7w6S~$h_8Qh'`Q_X'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q![7w![!c$h!c!}7w!}#O$h#O#P%x#P#R$h#R#S7w#S#T$h#T#o7w#o${$h${$|7w$|4w$h4w5b7w5b5i$h5i6S7w6S~$h_9u](TP'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!_$h!_!`:n!`#O$h#O#P%x#P~$h_:wZ#QX'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_;s_!qX'`Q'PSOY$hYZ%bZr$hrs%xsv$hvw<rwz$hz{)Q{!P$h!P!Q*p!Q!_$h!_!`:n!`#O$h#O#P%x#P~$h_<{Z'}X'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_=ui'`Q'PSOY?dYZA`Zr?drsBdsw?dwx@dxz?dz{CO{!P?d!P!QDv!Q!c?d!c!}Et!}#O?d#O#PId#P#R?d#R#SEt#S#T?d#T#oEt#o${?d${$|Et$|4w?d4w5bEt5b5i?d5i6SEt6S~?d_?k]'`Q'PSOY$hYZ%bZr$hrs%xsw$hwx@dxz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_@mZ'`Q'PSsXOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_AgV'`Q'PSOw%xwxA|xz%xz{&^{!P%x!P!Q'S!Q~%x]BTT'PSsXOz%xz{&^{!P%x!P!Q'S!Q~%x]BiV'PSOw%xwxA|xz%xz{&^{!P%x!P!Q'S!Q~%x_CT]'`QOY)xYZ+hZr)xrs&psw)xwxC|xz)xz{)Q{!P)x!P!Q0w!Q#O)x#O#P&p#P~)x_DTZ'`QsXOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_D{]'`QOY)xYZ+hZr)xrs&psw)xwxC|xz)xz{+|{!P)x!P!Q,g!Q#O)x#O#P&p#P~)x_E}j'`Q'PS'[XOY$hYZ%bZr$hrs%xsw$hwx@dxz$hz{)Q{!P$h!P!Q*p!Q![Go![!c$h!c!}Go!}#O$h#O#P%x#P#R$h#R#SGo#S#T$h#T#oGo#o${$h${$|Go$|4w$h4w5bGo5b5i$h5i6SGo6S~$h_Gxh'`Q'PS'[XOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q![Go![!c$h!c!}Go!}#O$h#O#P%x#P#R$h#R#SGo#S#T$h#T#oGo#o${$h${$|Go$|4w$h4w5bGo5b5i$h5i6SGo6S~$h]IiX'PSOzBdz{JU{!PBd!P!QKS!Q#iBd#i#jKi#j#lBd#l#mMX#m~Bd]JXVOw&pwxJnxz&pz{&^{!P&p!P!Q({!Q~&p]JsTsXOz%xz{&^{!P%x!P!Q'S!Q~%x]KVUOw&pwxJnxz&p{!P&p!P!Q'c!Q~&p]Kn['PSOz%xz{&^{!P%x!P!Q'S!Q![Ld![!c%x!c!iLd!i#T%x#T#ZLd#Z#o%x#o#pNq#p~%x]LiY'PSOz%xz{&^{!P%x!P!Q'S!Q![MX![!c%x!c!iMX!i#T%x#T#ZMX#Z~%x]M^Y'PSOz%xz{&^{!P%x!P!Q'S!Q![M|![!c%x!c!iM|!i#T%x#T#ZM|#Z~%x]NRY'PSOz%xz{&^{!P%x!P!Q'S!Q![Bd![!c%x!c!iBd!i#T%x#T#ZBd#Z~%x]NvY'PSOz%xz{&^{!P%x!P!Q'S!Q![! f![!c%x!c!i! f!i#T%x#T#Z! f#Z~%x]! k['PSOz%xz{&^{!P%x!P!Q'S!Q![! f![!c%x!c!i! f!i#T%x#T#Z! f#Z#q%x#q#rBd#r~%x_!!jZ}X'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_!#fZ!PX'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_!$`](QX'`QOY)xYZ+hZr)xrs&psz)xz{)Q{!P)x!P!Q0w!Q!_)x!_!`!%X!`#O)x#O#P&p#P~)x_!%`Z#QX'`QOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_!&[](PX'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!_$h!_!`:n!`#O$h#O#P%x#P~$h_!'^Z!eX'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_!(Y^'hX'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!_$h!_!`:n!`!a!)U!a#O$h#O#P%x#P~$h_!)_Z#SX'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_!*Z[(OX'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!O$h!O!P!+P!P!Q*p!Q#O$h#O#P%x#P~$h_!+Y^!lX'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!O$h!O!P!,U!P!Q*p!Q!_$h!_!`!-Q!`#O$h#O#P%x#P~$h_!,_Z!tX'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$hV!-ZZ'rP'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_!.T]'`Q'xXOY)xYZ+hZr)xrs&psz)xz{!.|{!P)x!P!Q!/d!Q!_)x!_!`!%X!`#O)x#O#P&p#P~)x_!/TT'O]'`QOY+|YZ,bZr+|s#O+|#P~+|_!/kZ'`QUXOY!0^YZ0cZr!0^rs!3`sz!0^z{!5k{!P!0^!P!Q!/d!Q#O!0^#O#P!3`#P~!0^_!0eZ'`QUXOY!1WYZ/RZr!1Wrs!2Usz!1Wz{!4q{!P!1W!P!Q!/d!Q#O!1W#O#P!2U#P~!1W_!1cZ'`QUX'QS'PSOY!1WYZ/RZr!1Wrs!2Usz!1Wz{!4q{!P!1W!P!Q!/d!Q#O!1W#O#P!2U#P~!1W]!2_VUX'QS'PSOY!2UYZ(UZz!2Uz{!2t{!P!2U!P!Q!3z!Q~!2U]!2yVUXOY!3`YZ'rZz!3`z{!2t{!P!3`!P!Q!4f!Q~!3`]!3eVUXOY!2UYZ(UZz!2Uz{!2t{!P!2U!P!Q!3z!Q~!2U]!4PVUXOY!3`YZ'rZz!3`z{!4f{!P!3`!P!Q!3z!Q~!3`X!4kQUXOY!4fZ~!4f_!4xZ'`QUXOY!0^YZ0cZr!0^rs!3`sz!0^z{!4q{!P!0^!P!Q!5k!Q#O!0^#O#P!3`#P~!0^Z!5rV'`QUXOY!5kYZ,bZr!5krs!4fs#O!5k#O#P!4f#P~!5k_!6bhuX'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q![!7|![#O$h#O#P%x#P#R$h#R#S!7|#S#U$h#U#V!By#V#]$h#]#^!9_#^#c$h#c#d!Ee#d#i$h#i#j!9_#j#l$h#l#m!Gy#m~$h_!8VbuX'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q![!7|![#O$h#O#P%x#P#R$h#R#S!7|#S#]$h#]#^!9_#^#i$h#i#j!9_#j~$h_!9fe'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!R$h!R!S!:w!S!T$h!T!U!=y!U!W$h!W!X!>y!X!Y$h!Y!Z!<}!Z#O$h#O#P%x#P#g$h#g#h!?y#h~$h_!;O_'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!S$h!S!T!;}!T!W$h!W!X!<}!X#O$h#O#P%x#P~$h_!<U]'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!Y$h!Y!Z!<}!Z#O$h#O#P%x#P~$h_!=WZuX'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_!>Q]'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!S$h!S!T!<}!T#O$h#O#P%x#P~$h_!?Q]'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!U$h!U!V!<}!V#O$h#O#P%x#P~$h_!@Q]'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P#]$h#]#^!@y#^~$h_!AQ]'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P#n$h#n#o!Ay#o~$h_!BQ]'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P#X$h#X#Y!<}#Y~$h_!CQ_'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!R!DP!R!S!DP!S#O$h#O#P%x#P#R$h#R#S!DP#S~$h_!DYcuX'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!R!DP!R!S!DP!S#O$h#O#P%x#P#R$h#R#S!DP#S#]$h#]#^!9_#^#i$h#i#j!9_#j~$h_!El^'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!Y!Fh!Y#O$h#O#P%x#P#R$h#R#S!Fh#S~$h_!FqbuX'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!Y!Fh!Y#O$h#O#P%x#P#R$h#R#S!Fh#S#]$h#]#^!9_#^#i$h#i#j!9_#j~$h_!HQb'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q![!IY![!c$h!c!i!IY!i#O$h#O#P%x#P#R$h#R#S!IY#S#T$h#T#Z!IY#Z~$h_!IcfuX'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q![!IY![!c$h!c!i!IY!i#O$h#O#P%x#P#R$h#R#S!IY#S#T$h#T#Z!IY#Z#]$h#]#^!9_#^#i$h#i#j!9_#j~$h_!KQ]!SX'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q![$h![!]!Ky!]#O$h#O#P%x#P~$h_!LSZdX'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_!MOZyX'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_!Mz^#RX'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!^$h!^!_!Nv!_!`3u!`#O$h#O#P%x#P~$h_# P]'yX'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!_$h!_!`:n!`#O$h#O#P%x#P~$h_#!R^oX'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!_$h!_!`3u!`!a#!}!a#O$h#O#P%x#P~$h_##WZ#TX'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_#$S^#RX'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!_$h!_!`3u!`!a#%O!a#O$h#O#P%x#P~$h_#%X]'zX'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!_$h!_!`:n!`#O$h#O#P%x#P~$h_#&ZZ(RX'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$hV#'VZ'qP'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_#(Th'`Q'PS!{W'UPOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q![#'x![!c$h!c!}#'x!}#O$h#O#P%x#P#R$h#R#S#'x#S#T$h#T#o#'x#o${$h${$|#'x$|4w$h4w5b#'x5b5i$h5i6S#'x6S~$h_#)xZ[X'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$hU#*pX'PSOz#+]z{#+s{!P#+]!P!Q#,X!Q#i#+]#i#j#,j#j#l#+]#l#m#.Y#m~#+]U#+dTrQ'PSOz%xz{&^{!P%x!P!Q'S!Q~%xU#+xTrQOz&pz{&^{!P&p!P!Q({!Q~&pU#,^SrQOz&p{!P&p!P!Q'c!Q~&pU#,o['PSOz%xz{&^{!P%x!P!Q'S!Q![#-e![!c%x!c!i#-e!i#T%x#T#Z#-e#Z#o%x#o#p#/r#p~%xU#-jY'PSOz%xz{&^{!P%x!P!Q'S!Q![#.Y![!c%x!c!i#.Y!i#T%x#T#Z#.Y#Z~%xU#._Y'PSOz%xz{&^{!P%x!P!Q'S!Q![#.}![!c%x!c!i#.}!i#T%x#T#Z#.}#Z~%xU#/SY'PSOz%xz{&^{!P%x!P!Q'S!Q![#+]![!c%x!c!i#+]!i#T%x#T#Z#+]#Z~%xU#/wY'PSOz%xz{&^{!P%x!P!Q'S!Q![#0g![!c%x!c!i#0g!i#T%x#T#Z#0g#Z~%xU#0l['PSOz%xz{&^{!P%x!P!Q'S!Q![#0g![!c%x!c!i#0g!i#T%x#T#Z#0g#Z#q%x#q#r#+]#r~%x_#1kZXX'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_#2g]'{X'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!_$h!_!`:n!`#O$h#O#P%x#P~$h_#3kj'`Q'PS!{W'UPOY$hYZ%bZr$hrs#5]sw$hwx#5sxz$hz{)Q{!P$h!P!Q*p!Q![#'x![!c$h!c!}#'x!}#O$h#O#P%x#P#R$h#R#S#'x#S#T$h#T#o#'x#o${$h${$|#'x$|4w$h4w5b#'x5b5i$h5i6S#'x6S~$h]#5dT'PS'_XOz%xz{&^{!P%x!P!Q'S!Q~%x_#5z]'`Q'PSOY?dYZA`Zr?drsBdsw?dwx@dxz?dz{CO{!P?d!P!QDv!Q#O?d#O#PId#P~?d_#7Oi'`Q'PS!{W'UPOY$hYZ%bZr$hrs%xst#8mtz$hz{)Q{!P$h!P!Q*p!Q![#'x![!c$h!c!}#'x!}#O$h#O#P%x#P#R$h#R#S#'x#S#T$h#T#o#'x#o${$h${$|#'x$|4w$h4w5b#'x5b5i$h5i6S#'x6S~$hV#8tg'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!c$h!c!}#:]!}#O$h#O#P%x#P#R$h#R#S#:]#S#T$h#T#o#:]#o${$h${$|#:]$|4w$h4w5b#:]5b5i$h5i6S#:]6S~$hV#:fh'`Q'PS'UPOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q![#:]![!c$h!c!}#:]!}#O$h#O#P%x#P#R$h#R#S#:]#S#T$h#T#o#:]#o${$h${$|#:]$|4w$h4w5b#:]5b5i$h5i6S#:]6S~$h_#<ZZwX'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_#=V_'sX'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!_$h!_!`:n!`#O$h#O#P%x#P#p$h#p#q#>U#q~$h_#>_Z'|X'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_#?ZZvX'`Q'PSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h",
      tokenizers: [closureParam, tpDelim, literalTokens, 0, 1, 2, 3],
      topRules: {"SourceFile":[0,8]},
      specialized: [{term: 282, get: value => spec_identifier[value] || -1}],
      tokenPrec: 15890
    });

    /**
    A syntax provider based on the [Lezer Rust
    parser](https://github.com/lezer-parser/rust), extended with
    highlighting and indentation information.
    */
    const rustLanguage = /*@__PURE__*/LRLanguage.define({
        parser: /*@__PURE__*/parser$1.configure({
            props: [
                /*@__PURE__*/indentNodeProp.add({
                    IfExpression: /*@__PURE__*/continuedIndent({ except: /^\s*({|else\b)/ }),
                    "String BlockComment": () => -1,
                    "Statement MatchArm": /*@__PURE__*/continuedIndent()
                }),
                /*@__PURE__*/foldNodeProp.add(type => {
                    if (/(Block|edTokens|List)$/.test(type.name))
                        return foldInside$1;
                    if (type.name == "BlockComment")
                        return tree => ({ from: tree.from + 2, to: tree.to - 2 });
                    return undefined;
                }),
                /*@__PURE__*/styleTags({
                    "const macro_rules mod struct union enum type fn impl trait let use crate static": tags$1.definitionKeyword,
                    "pub unsafe async mut extern default move": tags$1.modifier,
                    "for if else loop while match continue break return await": tags$1.controlKeyword,
                    "as in ref": tags$1.operatorKeyword,
                    "where _ crate super dyn": tags$1.keyword,
                    "self": tags$1.self,
                    String: tags$1.string,
                    RawString: /*@__PURE__*/tags$1.special(tags$1.string),
                    Boolean: tags$1.bool,
                    Identifier: tags$1.variableName,
                    "CallExpression/Identifier": /*@__PURE__*/tags$1.function(tags$1.variableName),
                    BoundIdentifier: /*@__PURE__*/tags$1.definition(tags$1.variableName),
                    LoopLabel: tags$1.labelName,
                    FieldIdentifier: tags$1.propertyName,
                    "CallExpression/FieldExpression/FieldIdentifier": /*@__PURE__*/tags$1.function(tags$1.propertyName),
                    Lifetime: /*@__PURE__*/tags$1.special(tags$1.variableName),
                    ScopeIdentifier: tags$1.namespace,
                    TypeIdentifier: tags$1.typeName,
                    "MacroInvocation/Identifier MacroInvocation/ScopedIdentifier/Identifier": tags$1.macroName,
                    "MacroInvocation/TypeIdentifier MacroInvocation/ScopedIdentifier/TypeIdentifier": tags$1.macroName,
                    "\"!\"": tags$1.macroName,
                    UpdateOp: tags$1.updateOperator,
                    LineComment: tags$1.lineComment,
                    BlockComment: tags$1.blockComment,
                    Integer: tags$1.integer,
                    Float: tags$1.float,
                    ArithOp: tags$1.arithmeticOperator,
                    LogicOp: tags$1.logicOperator,
                    BitOp: tags$1.bitwiseOperator,
                    CompareOp: tags$1.compareOperator,
                    "=": tags$1.definitionOperator,
                    ".. ... => ->": tags$1.punctuation,
                    "( )": tags$1.paren,
                    "[ ]": tags$1.squareBracket,
                    "{ }": tags$1.brace,
                    ".": tags$1.derefOperator,
                    "&": tags$1.operator,
                    ", ; ::": tags$1.separator,
                })
            ]
        }),
        languageData: {
            commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
            indentOnInput: /^\s*(?:\{|\})$/
        }
    });
    /**
    Rust language support
    */
    function rust() {
        return new LanguageSupport(rustLanguage);
    }

    var index$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        rust: rust,
        rustLanguage: rustLanguage
    });

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const StartTag = 1,
      StartCloseTag = 2,
      MissingCloseTag = 3,
      mismatchedStartCloseTag = 4,
      incompleteStartCloseTag = 5,
      commentContent$1 = 36,
      piContent$1 = 37,
      cdataContent$1 = 38,
      Element$1 = 10,
      OpenTag = 12;

    /* Hand-written tokenizer for XML tag matching. */

    function nameChar(ch) {
      return ch == 45 || ch == 46 || ch == 58 || ch >= 65 && ch <= 90 || ch == 95 || ch >= 97 && ch <= 122 || ch >= 161
    }

    function isSpace(ch) {
      return ch == 9 || ch == 10 || ch == 13 || ch == 32
    }

    let cachedName = null, cachedInput = null, cachedPos = 0;
    function tagNameAfter(input, offset) {
      let pos = input.pos + offset;
      if (cachedInput == input && cachedPos == pos) return cachedName
      while (isSpace(input.peek(offset))) offset++;
      let name = "";
      for (;;) {
        let next = input.peek(offset);
        if (!nameChar(next)) break
        name += String.fromCharCode(next);
        offset++;
      }
      cachedInput = input; cachedPos = pos;
      return cachedName = name || null
    }

    function ElementContext(name, parent) {
      this.name = name;
      this.parent = parent;
      this.hash = parent ? parent.hash : 0;
      for (let i = 0; i < name.length; i++) this.hash += (this.hash << 4) + name.charCodeAt(i) + (name.charCodeAt(i) << 8);
    }

    const elementContext = new ContextTracker({
      start: null,
      shift(context, term, stack, input) {
        return term == StartTag ? new ElementContext(tagNameAfter(input, 1) || "", context) : context
      },
      reduce(context, term) {
        return term == Element$1 && context ? context.parent : context
      },
      reuse(context, node, _stack, input) {
        let type = node.type.id;
        return type == StartTag || type == OpenTag
          ? new ElementContext(tagNameAfter(input, 1) || "", context) : context
      },
      hash(context) { return context ? context.hash : 0 },
      strict: false
    });

    const startTag = new ExternalTokenizer((input, stack) => {
      if (input.next != 60 /* '<' */) return
      input.advance();
      if (input.next == 47 /* '/' */) {
        input.advance();
        let name = tagNameAfter(input, 0);
        if (!name) return input.acceptToken(incompleteStartCloseTag)
        if (stack.context && name == stack.context.name) return input.acceptToken(StartCloseTag)
        for (let cx = stack.context; cx; cx = cx.parent) if (cx.name == name) return input.acceptToken(MissingCloseTag, -2)
        input.acceptToken(mismatchedStartCloseTag);
      } else if (input.next != 33 /* '!' */ && input.next != 63 /* '?' */) {
        return input.acceptToken(StartTag)
      }
    }, {contextual: true});

    function scanTo(type, end) {
      return new ExternalTokenizer(input => {
        for (let endPos = 0, len = 0;; len++) {
          if (input.next < 0) {
            if (len) input.acceptToken(type);
            break
          } 
          if (input.next == end.charCodeAt(endPos)) {
            endPos++;
            if (endPos == end.length) {
              if (len > end.length) input.acceptToken(type, 1 - end.length);
              break
            }
          } else {
            endPos = 0;
          }
          input.advance();
        }
      })
    }

    const commentContent = scanTo(commentContent$1, "-->");
    const piContent = scanTo(piContent$1, "?>");
    const cdataContent = scanTo(cdataContent$1, "?>");

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const parser = LRParser.deserialize({
      version: 13,
      states: "-OOQOaOOOcObO'#CcOkOdO'#CdOOOP'#Cv'#CvOsOaO'#DTO!XOaOOOOOQ'#Cw'#CwO!aObO,58}OOOP,58},58}OOOS'#Cx'#CxO!iOdO,59OOOOP,59O,59OOOOP-E6t-E6tO!qO`O'#ChO#kOqO'#CfOOOP'#Cf'#CfO#rOaO'#CyQ$TOPOOO$YOaOOOOOQ-E6u-E6uOOOP1G.i1G.iOOOS-E6v-E6vOOOP1G.j1G.jOOOO'#Cz'#CzO$hO`O,59SO$pO!bO,59SO%OOhO'#CqO%WO`O'#CrOOOP'#D]'#D]OOOP'#C}'#C}O%`OqO,59QO%gO`O'#CsOOOP,59Q,59QOOOP,59e,59eOOOP-E6w-E6wO$TOPOOOOOO-E6x-E6xO%oO!bO1G.nO%oO!bO1G.nO%}O`O'#CjO&VO!bO'#C{O&eO!bO1G.nOOOP1G.n1G.nOOOP1G.{1G.{OOOW'#DO'#DOO&pOhO,59]OOOP,59],59]O&xO`O,59^O'QO`O,59^OOOP-E6{-E6{OOOP1G.l1G.lO'YO`O,59_O'bO`O,59_O'jO!bO7+$YO'xO!bO7+$YOOOP7+$Y7+$YOOOP7+$g7+$gO(TO`O,59UO(]O`O,59UO(eO!bO,59gOOOO-E6y-E6yOOOW-E6|-E6|OOOP1G.w1G.wO(sO`O1G.xO(sO`O1G.xOOOP1G.x1G.xO({O`O1G.yO({O`O1G.yOOOP1G.y1G.yO)TO!bO<<GtOOOP<<Gt<<GtOOOP<<HR<<HRO(]O`O1G.pO(]O`O1G.pO)`O#tO'#CmOOOO1G.p1G.pO)nO`O7+$dOOOP7+$d7+$dO)vO`O7+$eOOOP7+$e7+$eOOOPAN=`AN=`OOOPAN=mAN=mO(]O`O7+$[OOOO7+$[7+$[OOOO'#C|'#C|O*OO#tO,59XOOOO,59X,59XOOOP<<HO<<HOOOOP<<HP<<HPOOOO<<Gv<<GvOOOO-E6z-E6zOOOO1G.s1G.s",
      stateData: "*^~OyPOzRO|QOPwPXwP~OtUOxWO~OuXO{ZO~OyPOzRO|QOPwXXwXswX~OP]OXbO~OtUOxdO~OuXO{fO~O]iOzgO~OP]OQoOSkOTlOblOclOdlOyPO|QO!RjO~ORpO~P!yOyPOzRO|QOPwPswP~OP]O~OyPOzRO|QOPwP~O]uOzgO~OZzO_wOh{OzgO~Ov|O!Q!OO~O]!QOzgO~OR!SO~P!yO]!UOzgO~OZ!XO_wOh!YOzgO~O`![OzgO~OzgOZoX_oXhoX~OZ!XO_wOh!YO~Ov|O!Q!`O~O]!aOzgO~OZ!cOzgO~O]!dOzgO~OZ!fOzgO~OZ!hO_wOh!iOzgO~OZ!hO_wOh!iO~O`!jOzgO~OzgO}!lO~OzgOZoa_oahoa~OZ!oOzgO~OZ!qOzgO~OZ!rO_wOh!sO~Ob!vOc!vO}!xO!O!vO~OZ!yOzgO~OZ!zOzgO~Ob!vOc!vO}!}O!O!vO~O",
      goto: "&S!QPPPPPPP!R!RP!]P!fP!mPP!vPPP!X!X#QP#W#_#g#m#s#z%S%c%i%oPPPP%uPPPPPPP&OWROS`bTl^nU`TasTl^nZ^T^ans_xiuvy!V!W!gQ!m![S!u!j!kR!{!tQp^R!SnZ_T^ansUSO`bR[SQVPRcVQYQReYSaTsRraQh]jthv!P!T!V!Z!]!b!e!k!n!p!tQviQ!PkQ!ToQ!VuQ!ZwQ!]xQ!b!QQ!e!UQ!k![Q!n!aQ!p!dR!t!jQyiS!WuvU!^y!W!gR!g!VQ!w!lR!|!wQn^R!RnQ}jR!_}QTOQq`RsbTm^n",
      nodeNames: "⚠ StartTag StartCloseTag MissingCloseTag StartCloseTag StartCloseTag Document Comment ProcessingInst DoctypeDecl Element EndTag OpenTag TagName Attribute AttributeName Is AttributeValue EntityReference CharacterReference Text Cdata MismatchedCloseTag CloseTag SelfCloseEndTag SelfClosingTag",
      maxTerm: 49,
      context: elementContext,
      nodeProps: [
        [NodeProp.closedBy, 1,"SelfCloseEndTag EndTag",12,"CloseTag MissingCloseTag"],
        [NodeProp.openedBy, 11,"StartTag StartCloseTag",23,"OpenTag",24,"StartTag"]
      ],
      skippedNodes: [0],
      repeatNodeCount: 9,
      tokenData: "Az~R!WOX$kXY%rYZ%rZ]$k]^%r^p$kpq%rqr$krs&tsv$kvw'Uw}$k}!O(q!O!P$k!P!Q*n!Q![$k![!]+z!]!^$k!^!_/s!_!`=i!`!a>U!a!b>q!b!c$k!c!}+z!}#P$k#P#Q?}#Q#R$k#R#S+z#S#T$k#T#o+z#o%W$k%W%o+z%o%p$k%p&a+z&a&b$k&b1p+z1p4U$k4U4d+z4d4e$k4e$IS+z$IS$I`$k$I`$Ib+z$Ib$Kh$k$Kh%#t+z%#t&/x$k&/x&Et+z&Et&FV$k&FV;'S+z;'S;:j/S;:j?&r$k?&r?Ah+z?Ah?BY$k?BY?Mn+z?Mn~$kY$rUdQ!OWOr$krs%Usv$kw!^$k!^!_%d!_~$kQ%ZRdQOv%Uw!^%U!_~%UW%iR!OWOr%dsv%dw~%d_%{]dQ!OWzTOX$kXY%rYZ%rZ]$k]^%r^p$kpq%rqr$krs%Usv$kw!^$k!^!_%d!_~$kZ&{R}XdQOv%Uw!^%U!_~%U~'XTOp'hqs'hst(Pt!]'h!^~'h~'kTOp'hqs'ht!]'h!]!^'z!^~'h~(POb~~(SROp(]q!](]!^~(]~(`SOp(]q!](]!]!^(l!^~(]~(qOc~Z(xWdQ!OWOr$krs%Usv$kw}$k}!O)b!O!^$k!^!_%d!_~$kZ)iWdQ!OWOr$krs%Usv$kw!^$k!^!_%d!_!`$k!`!a*R!a~$kZ*[UxPdQ!OWOr$krs%Usv$kw!^$k!^!_%d!_~$k^*uWdQ!OWOr$krs%Usv$kw!^$k!^!_%d!_!`$k!`!a+_!a~$k^+hUhSdQ!OWOr$krs%Usv$kw!^$k!^!_%d!_~$k_,V}_S]PdQ!OWOr$krs%Usv$kw}$k}!O+z!O!P+z!P!Q$k!Q![+z![!]+z!]!^$k!^!_%d!_!c$k!c!}+z!}#R$k#R#S+z#S#T$k#T#o+z#o$}$k$}%O+z%O%W$k%W%o+z%o%p$k%p&a+z&a&b$k&b1p+z1p4U+z4U4d+z4d4e$k4e$IS+z$IS$I`$k$I`$Ib+z$Ib$Je$k$Je$Jg+z$Jg$Kh$k$Kh%#t+z%#t&/x$k&/x&Et+z&Et&FV$k&FV;'S+z;'S;:j/S;:j?&r$k?&r?Ah+z?Ah?BY$k?BY?Mn+z?Mn~$k_/ZWdQ!OWOr$krs%Usv$kw!^$k!^!_%d!_;=`$k;=`<%l+z<%l~$kZ/xU!OWOq%dqr0[sv%dw!a%d!a!b=X!b~%dZ0aZ!OWOr%dsv%dw}%d}!O1S!O!f%d!f!g1x!g!}%d!}#O5s#O#W%d#W#X:k#X~%dZ1XT!OWOr%dsv%dw}%d}!O1h!O~%dZ1oRyR!OWOr%dsv%dw~%dX1}T!OWOr%dsv%dw!q%d!q!r2^!r~%dX2cT!OWOr%dsv%dw!e%d!e!f2r!f~%dX2wT!OWOr%dsv%dw!v%d!v!w3W!w~%dX3]T!OWOr%dsv%dw!{%d!{!|3l!|~%dX3qT!OWOr%dsv%dw!r%d!r!s4Q!s~%dX4VT!OWOr%dsv%dw!g%d!g!h4f!h~%dX4kV!OWOr4frs5Qsv4fvw5Qw!`4f!`!a5c!a~4fP5TRO!`5Q!`!a5^!a~5QP5cOXPX5jRXP!OWOr%dsv%dw~%dY5xV!OWOr%dsv%dw!e%d!e!f6_!f#V%d#V#W8w#W~%dY6dT!OWOr%dsv%dw!f%d!f!g6s!g~%dY6xT!OWOr%dsv%dw!c%d!c!d7X!d~%dY7^T!OWOr%dsv%dw!v%d!v!w7m!w~%dY7rT!OWOr%dsv%dw!c%d!c!d8R!d~%dY8WT!OWOr%dsv%dw!}%d!}#O8g#O~%dY8nR!OW!RQOr%dsv%dw~%dY8|T!OWOr%dsv%dw#W%d#W#X9]#X~%dY9bT!OWOr%dsv%dw#T%d#T#U9q#U~%dY9vT!OWOr%dsv%dw#h%d#h#i:V#i~%dY:[T!OWOr%dsv%dw#T%d#T#U8R#U~%dX:pT!OWOr%dsv%dw#c%d#c#d;P#d~%dX;UT!OWOr%dsv%dw#V%d#V#W;e#W~%dX;jT!OWOr%dsv%dw#h%d#h#i;y#i~%dX<OT!OWOr%dsv%dw#m%d#m#n<_#n~%dX<dT!OWOr%dsv%dw#d%d#d#e<s#e~%dX<xT!OWOr%dsv%dw#X%d#X#Y4f#Y~%dZ=`R|R!OWOr%dsv%dw~%dZ=rU`PdQ!OWOr$krs%Usv$kw!^$k!^!_%d!_~$k_>_UZTdQ!OWOr$krs%Usv$kw!^$k!^!_%d!_~$kZ>xWdQ!OWOr$krs%Usv$kw!^$k!^!_%d!_!`$k!`!a?b!a~$kZ?kU{PdQ!OWOr$krs%Usv$kw!^$k!^!_%d!_~$kZ@UWdQ!OWOr$krs%Usv$kw!^$k!^!_%d!_#P$k#P#Q@n#Q~$kZ@uWdQ!OWOr$krs%Usv$kw!^$k!^!_%d!_!`$k!`!aA_!a~$kZAhU!QPdQ!OWOr$krs%Usv$kw!^$k!^!_%d!_~$k",
      tokenizers: [startTag, commentContent, piContent, cdataContent, 0, 1, 2, 3],
      topRules: {"Document":[0,6]},
      tokenPrec: 0
    });

    function tagName(doc, tag) {
        let name = tag && tag.getChild("TagName");
        return name ? doc.sliceString(name.from, name.to) : "";
    }
    function elementName(doc, tree) {
        let tag = tree && tree.firstChild;
        return !tag || tag.name != "OpenTag" ? "" : tagName(doc, tag);
    }
    function attrName(doc, tag, pos) {
        let attr = tag && tag.getChildren("Attribute").find(a => a.from <= pos && a.to >= pos);
        let name = attr && attr.getChild("AttributeName");
        return name ? doc.sliceString(name.from, name.to) : "";
    }
    function findParentElement(tree) {
        for (let cur = tree && tree.parent; cur; cur = cur.parent)
            if (cur.name == "Element")
                return cur;
        return null;
    }
    function findLocation(state, pos) {
        var _a;
        let at = syntaxTree(state).resolveInner(pos, -1), inTag = null;
        for (let cur = at; !inTag && cur.parent; cur = cur.parent)
            if (cur.name == "OpenTag" || cur.name == "CloseTag" || cur.name == "SelfClosingTag" || cur.name == "MismatchedCloseTag")
                inTag = cur;
        if (inTag && (inTag.to > pos || inTag.lastChild.type.isError)) {
            let elt = inTag.parent;
            if (at.name == "TagName")
                return inTag.name == "CloseTag" || inTag.name == "MismatchedCloseTag"
                    ? { type: "closeTag", from: at.from, context: elt }
                    : { type: "openTag", from: at.from, context: findParentElement(elt) };
            if (at.name == "AttributeName")
                return { type: "attrName", from: at.from, context: inTag };
            if (at.name == "AttributeValue")
                return { type: "attrValue", from: at.from, context: inTag };
            let before = at == inTag || at.name == "Attribute" ? at.childBefore(pos) : at;
            if ((before === null || before === void 0 ? void 0 : before.name) == "StartTag")
                return { type: "openTag", from: pos, context: findParentElement(elt) };
            if ((before === null || before === void 0 ? void 0 : before.name) == "StartCloseTag" && before.to <= pos)
                return { type: "closeTag", from: pos, context: elt };
            if ((before === null || before === void 0 ? void 0 : before.name) == "Is")
                return { type: "attrValue", from: pos, context: inTag };
            if (before)
                return { type: "attrName", from: pos, context: inTag };
            return null;
        }
        else if (at.name == "StartCloseTag") {
            return { type: "closeTag", from: pos, context: at.parent };
        }
        while (at.parent && at.to == pos && !((_a = at.lastChild) === null || _a === void 0 ? void 0 : _a.type.isError))
            at = at.parent;
        if (at.name == "Element" || at.name == "Text" || at.name == "Document")
            return { type: "tag", from: pos, context: at.name == "Element" ? at : findParentElement(at) };
        return null;
    }
    class Element {
        constructor(spec, attrs, attrValues) {
            this.attrs = attrs;
            this.attrValues = attrValues;
            this.children = [];
            this.name = spec.name;
            this.completion = Object.assign(Object.assign({ type: "type" }, spec.completion || {}), { label: this.name });
            this.openCompletion = Object.assign(Object.assign({}, this.completion), { label: "<" + this.name });
            this.closeCompletion = Object.assign(Object.assign({}, this.completion), { label: "</" + this.name + ">", boost: 2 });
            this.closeNameCompletion = Object.assign(Object.assign({}, this.completion), { label: this.name + ">" });
            this.text = spec.textContent ? spec.textContent.map(s => ({ label: s, type: "text" })) : [];
        }
    }
    const Identifier$1 = /^[:\-\.\w\u00b7-\uffff]*$/;
    function attrCompletion(spec) {
        return Object.assign(Object.assign({ type: "property" }, spec.completion || {}), { label: spec.name });
    }
    function valueCompletion(spec) {
        return typeof spec == "string" ? { label: `"${spec}"`, type: "constant" }
            : /^"/.test(spec.label) ? spec
                : Object.assign(Object.assign({}, spec), { label: `"${spec.label}"` });
    }
    function completeFromSchema(eltSpecs, attrSpecs) {
        let allAttrs = [], globalAttrs = [];
        let attrValues = Object.create(null);
        for (let s of attrSpecs) {
            let completion = attrCompletion(s);
            allAttrs.push(completion);
            if (s.global)
                globalAttrs.push(completion);
            if (s.values)
                attrValues[s.name] = s.values.map(valueCompletion);
        }
        let allElements = [], topElements = [];
        let byName = Object.create(null);
        for (let s of eltSpecs) {
            let attrs = globalAttrs, attrVals = attrValues;
            if (s.attributes)
                attrs = attrs.concat(s.attributes.map(s => {
                    if (typeof s == "string")
                        return allAttrs.find(a => a.label == s) || { label: s, type: "property" };
                    if (s.values) {
                        if (attrVals == attrValues)
                            attrVals = Object.create(attrVals);
                        attrVals[s.name] = s.values.map(valueCompletion);
                    }
                    return attrCompletion(s);
                }));
            let elt = new Element(s, attrs, attrVals);
            byName[elt.name] = elt;
            allElements.push(elt);
            if (s.top)
                topElements.push(elt);
        }
        if (!topElements.length)
            topElements = allElements;
        for (let i = 0; i < allElements.length; i++) {
            let s = eltSpecs[i], elt = allElements[i];
            if (s.children) {
                for (let ch of s.children)
                    if (byName[ch])
                        elt.children.push(byName[ch]);
            }
            else {
                elt.children = allElements;
            }
        }
        return cx => {
            var _a;
            let { doc } = cx.state, loc = findLocation(cx.state, cx.pos);
            if (!loc || (loc.type == "tag" && !cx.explicit))
                return null;
            let { type, from, context } = loc;
            if (type == "openTag") {
                let children = topElements;
                let parentName = elementName(doc, context);
                if (parentName) {
                    let parent = byName[parentName];
                    children = (parent === null || parent === void 0 ? void 0 : parent.children) || allElements;
                }
                return {
                    from,
                    options: children.map(ch => ch.completion),
                    span: Identifier$1
                };
            }
            else if (type == "closeTag") {
                let parentName = elementName(doc, context);
                return parentName ? {
                    from,
                    to: cx.pos + (doc.sliceString(cx.pos, cx.pos + 1) == ">" ? 1 : 0),
                    options: [((_a = byName[parentName]) === null || _a === void 0 ? void 0 : _a.closeNameCompletion) || { label: parentName + ">", type: "type" }],
                    span: Identifier$1
                } : null;
            }
            else if (type == "attrName") {
                let parent = byName[tagName(doc, context)];
                return {
                    from,
                    options: (parent === null || parent === void 0 ? void 0 : parent.attrs) || globalAttrs,
                    span: Identifier$1
                };
            }
            else if (type == "attrValue") {
                let attr = attrName(doc, context, from);
                if (!attr)
                    return null;
                let parent = byName[tagName(doc, context)];
                let values = ((parent === null || parent === void 0 ? void 0 : parent.attrValues) || attrValues)[attr];
                if (!values || !values.length)
                    return null;
                return {
                    from,
                    to: cx.pos + (doc.sliceString(cx.pos, cx.pos + 1) == '"' ? 1 : 0),
                    options: values,
                    span: /^"[^"]*"?$/
                };
            }
            else if (type == "tag") {
                let parentName = elementName(doc, context), parent = byName[parentName];
                let closing = [], last = context && context.lastChild;
                if (parentName && (!last || last.name != "CloseTag" || tagName(doc, last) != parentName))
                    closing.push(parent ? parent.closeCompletion : { label: "</" + parentName + ">", type: "type", boost: 2 });
                let options = closing.concat(((parent === null || parent === void 0 ? void 0 : parent.children) || (context ? allElements : topElements)).map(e => e.openCompletion));
                if (context && (parent === null || parent === void 0 ? void 0 : parent.text.length)) {
                    let openTag = context.firstChild;
                    if (openTag.to > cx.pos - 20 && !/\S/.test(cx.state.sliceDoc(openTag.to, cx.pos)))
                        options = options.concat(parent.text);
                }
                return {
                    from,
                    options,
                    span: /^<\/?[:\-\.\w\u00b7-\uffff]*$/
                };
            }
            else {
                return null;
            }
        };
    }

    /**
    A language provider based on the [Lezer XML
    parser](https://github.com/lezer-parser/xml), extended with
    highlighting and indentation information.
    */
    const xmlLanguage = /*@__PURE__*/LRLanguage.define({
        parser: /*@__PURE__*/parser.configure({
            props: [
                /*@__PURE__*/indentNodeProp.add({
                    Element(context) {
                        let closed = /^\s*<\//.test(context.textAfter);
                        return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);
                    },
                    "OpenTag CloseTag SelfClosingTag"(context) {
                        return context.column(context.node.from) + context.unit;
                    }
                }),
                /*@__PURE__*/foldNodeProp.add({
                    Element(subtree) {
                        let first = subtree.firstChild, last = subtree.lastChild;
                        if (!first || first.name != "OpenTag")
                            return null;
                        return { from: first.to, to: last.name == "CloseTag" ? last.from : subtree.to };
                    }
                }),
                /*@__PURE__*/styleTags({
                    AttributeValue: tags$1.string,
                    Text: tags$1.content,
                    "StartTag StartCloseTag EndTag SelfCloseEndTag": tags$1.angleBracket,
                    TagName: tags$1.tagName,
                    "MismatchedCloseTag/Tagname": [tags$1.tagName, tags$1.invalid],
                    AttributeName: tags$1.propertyName,
                    UnquotedAttributeValue: tags$1.string,
                    Is: tags$1.definitionOperator,
                    "EntityReference CharacterReference": tags$1.character,
                    Comment: tags$1.blockComment,
                    ProcessingInst: tags$1.processingInstruction,
                    DoctypeDecl: tags$1.documentMeta,
                    Cdata: /*@__PURE__*/tags$1.special(tags$1.string)
                })
            ]
        }),
        languageData: {
            commentTokens: { block: { open: "<!--", close: "-->" } },
            indentOnInput: /^\s*<\/$/
        }
    });
    /**
    XML language support. Includes schema-based autocompletion when
    configured.
    */
    function xml(conf = {}) {
        return new LanguageSupport(xmlLanguage, xmlLanguage.data.of({
            autocomplete: completeFromSchema(conf.elements || [], conf.attributes || [])
        }));
    }

    var index = /*#__PURE__*/Object.freeze({
        __proto__: null,
        completeFromSchema: completeFromSchema,
        xml: xml,
        xmlLanguage: xmlLanguage
    });

    var builtInFuncs = {
      "+": ["conjugate", "add"],
      "−": ["negate", "subtract"],
      "×": ["signOf", "multiply"],
      "÷": ["reciprocal", "divide"],
      "⌈": ["ceiling", "greaterOf"],
      "⌊": ["floor", "lesserOf"],
      "∣": ["absolute", "residue"],
      "⍳": ["indexGenerate", "indexOf"],
      "?": ["roll", "deal"],
      "⋆": ["exponentiate", "toThePowerOf"],
      "⍟": ["naturalLog", "logToTheBase"],
      "○": ["piTimes", "circularFuncs"],
      "!": ["factorial", "binomial"],
      "⌹": ["matrixInverse", "matrixDivide"],
      "<": [null, "lessThan"],
      "≤": [null, "lessThanOrEqual"],
      "=": [null, "equals"],
      ">": [null, "greaterThan"],
      "≥": [null, "greaterThanOrEqual"],
      "≠": [null, "notEqual"],
      "≡": ["depth", "match"],
      "≢": [null, "notMatch"],
      "∈": ["enlist", "membership"],
      "⍷": [null, "find"],
      "∪": ["unique", "union"],
      "∩": [null, "intersection"],
      "∼": ["not", "without"],
      "∨": [null, "or"],
      "∧": [null, "and"],
      "⍱": [null, "nor"],
      "⍲": [null, "nand"],
      "⍴": ["shapeOf", "reshape"],
      ",": ["ravel", "catenate"],
      "⍪": [null, "firstAxisCatenate"],
      "⌽": ["reverse", "rotate"],
      "⊖": ["axis1Reverse", "axis1Rotate"],
      "⍉": ["transpose", null],
      "↑": ["first", "take"],
      "↓": [null, "drop"],
      "⊂": ["enclose", "partitionWithAxis"],
      "⊃": ["diclose", "pick"],
      "⌷": [null, "index"],
      "⍋": ["gradeUp", null],
      "⍒": ["gradeDown", null],
      "⊤": ["encode", null],
      "⊥": ["decode", null],
      "⍕": ["format", "formatByExample"],
      "⍎": ["execute", null],
      "⊣": ["stop", "left"],
      "⊢": ["pass", "right"]
    };

    var isOperator = /[\.\/⌿⍀¨⍣]/;
    var isNiladic = /⍬/;
    var isFunction = /[\+−×÷⌈⌊∣⍳\?⋆⍟○!⌹<≤=>≥≠≡≢∈⍷∪∩∼∨∧⍱⍲⍴,⍪⌽⊖⍉↑↓⊂⊃⌷⍋⍒⊤⊥⍕⍎⊣⊢]/;
    var isArrow = /←/;
    var isComment = /[⍝#].*$/;

    var stringEater = function(type) {
      var prev;
      prev = false;
      return function(c) {
        prev = c;
        if (c === type) {
          return prev === "\\";
        }
        return true;
      };
    };

    const apl = {
      startState: function() {
        return {
          prev: false,
          func: false,
          op: false,
          string: false,
          escape: false
        };
      },
      token: function(stream, state) {
        var ch;
        if (stream.eatSpace()) {
          return null;
        }
        ch = stream.next();
        if (ch === '"' || ch === "'") {
          stream.eatWhile(stringEater(ch));
          stream.next();
          state.prev = true;
          return "string";
        }
        if (/[\[{\(]/.test(ch)) {
          state.prev = false;
          return null;
        }
        if (/[\]}\)]/.test(ch)) {
          state.prev = true;
          return null;
        }
        if (isNiladic.test(ch)) {
          state.prev = false;
          return "atom";
        }
        if (/[¯\d]/.test(ch)) {
          if (state.func) {
            state.func = false;
            state.prev = false;
          } else {
            state.prev = true;
          }
          stream.eatWhile(/[\w\.]/);
          return "number";
        }
        if (isOperator.test(ch)) {
          return "operator"
        }
        if (isArrow.test(ch)) {
          return "operator";
        }
        if (isFunction.test(ch)) {
          state.func = true;
          state.prev = false;
          return builtInFuncs[ch] ? "variableName.function.standard" : "variableName.function"
        }
        if (isComment.test(ch)) {
          stream.skipToEnd();
          return "comment";
        }
        if (ch === "∘" && stream.peek() === ".") {
          stream.next();
          return "variableName.function";
        }
        stream.eatWhile(/[\w\$_]/);
        state.prev = true;
        return "keyword";
      }
    };

    var apl$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        apl: apl
    });

    function errorIfNotEmpty(stream) {
      var nonWS = stream.match(/^\s*\S/);
      stream.skipToEnd();
      return nonWS ? "error" : null;
    }

    const asciiArmor = {
      token: function(stream, state) {
        var m;
        if (state.state == "top") {
          if (stream.sol() && (m = stream.match(/^-----BEGIN (.*)?-----\s*$/))) {
            state.state = "headers";
            state.type = m[1];
            return "tag";
          }
          return errorIfNotEmpty(stream);
        } else if (state.state == "headers") {
          if (stream.sol() && stream.match(/^\w+:/)) {
            state.state = "header";
            return "atom";
          } else {
            var result = errorIfNotEmpty(stream);
            if (result) state.state = "body";
            return result;
          }
        } else if (state.state == "header") {
          stream.skipToEnd();
          state.state = "headers";
          return "string";
        } else if (state.state == "body") {
          if (stream.sol() && (m = stream.match(/^-----END (.*)?-----\s*$/))) {
            if (m[1] != state.type) return "error";
            state.state = "end";
            return "tag";
          } else {
            if (stream.eatWhile(/[A-Za-z0-9+\/=]/)) {
              return null;
            } else {
              stream.next();
              return "error";
            }
          }
        } else if (state.state == "end") {
          return errorIfNotEmpty(stream);
        }
      },
      blankLine: function(state) {
        if (state.state == "headers") state.state = "body";
      },
      startState: function() {
        return {state: "top", type: null};
      }
    };

    var asciiarmor = /*#__PURE__*/Object.freeze({
        __proto__: null,
        asciiArmor: asciiArmor
    });

    function words$k(str) {
      var obj = {}, words = str.split(" ");
      for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
      return obj;
    }

    const defaults$1 = {
      keywords: words$k("DEFINITIONS OBJECTS IF DERIVED INFORMATION ACTION" +
                      " REPLY ANY NAMED CHARACTERIZED BEHAVIOUR REGISTERED" +
                      " WITH AS IDENTIFIED CONSTRAINED BY PRESENT BEGIN" +
                      " IMPORTS FROM UNITS SYNTAX MIN-ACCESS MAX-ACCESS" +
                      " MINACCESS MAXACCESS REVISION STATUS DESCRIPTION" +
                      " SEQUENCE SET COMPONENTS OF CHOICE DistinguishedName" +
                      " ENUMERATED SIZE MODULE END INDEX AUGMENTS EXTENSIBILITY" +
                      " IMPLIED EXPORTS"),
      cmipVerbs: words$k("ACTIONS ADD GET NOTIFICATIONS REPLACE REMOVE"),
      compareTypes: words$k("OPTIONAL DEFAULT MANAGED MODULE-TYPE MODULE_IDENTITY" +
                          " MODULE-COMPLIANCE OBJECT-TYPE OBJECT-IDENTITY" +
                          " OBJECT-COMPLIANCE MODE CONFIRMED CONDITIONAL" +
                          " SUBORDINATE SUPERIOR CLASS TRUE FALSE NULL" +
                          " TEXTUAL-CONVENTION"),
      status: words$k("current deprecated mandatory obsolete"),
      tags: words$k("APPLICATION AUTOMATIC EXPLICIT IMPLICIT PRIVATE TAGS" +
                  " UNIVERSAL"),
      storage: words$k("BOOLEAN INTEGER OBJECT IDENTIFIER BIT OCTET STRING" +
                     " UTCTime InterfaceIndex IANAifType CMIP-Attribute" +
                     " REAL PACKAGE PACKAGES IpAddress PhysAddress" +
                     " NetworkAddress BITS BMPString TimeStamp TimeTicks" +
                     " TruthValue RowStatus DisplayString GeneralString" +
                     " GraphicString IA5String NumericString" +
                     " PrintableString SnmpAdminString TeletexString" +
                     " UTF8String VideotexString VisibleString StringStore" +
                     " ISO646String T61String UniversalString Unsigned32" +
                     " Integer32 Gauge Gauge32 Counter Counter32 Counter64"),
      modifier: words$k("ATTRIBUTE ATTRIBUTES MANDATORY-GROUP MANDATORY-GROUPS" +
                      " GROUP GROUPS ELEMENTS EQUALITY ORDERING SUBSTRINGS" +
                      " DEFINED"),
      accessTypes: words$k("not-accessible accessible-for-notify read-only" +
                         " read-create read-write"),
      multiLineStrings: true
    };

    function asn1(parserConfig) {
      var keywords = parserConfig.keywords || defaults$1.keywords,
          cmipVerbs = parserConfig.cmipVerbs || defaults$1.cmipVerbs,
          compareTypes = parserConfig.compareTypes || defaults$1.compareTypes,
          status = parserConfig.status || defaults$1.status,
          tags = parserConfig.tags || defaults$1.tags,
          storage = parserConfig.storage || defaults$1.storage,
          modifier = parserConfig.modifier || defaults$1.modifier,
          accessTypes = parserConfig.accessTypes|| defaults$1.accessTypes,
          multiLineStrings = parserConfig.multiLineStrings || defaults$1.multiLineStrings,
          indentStatements = parserConfig.indentStatements !== false;
      var isOperatorChar = /[\|\^]/;
      var curPunc;

      function tokenBase(stream, state) {
        var ch = stream.next();
        if (ch == '"' || ch == "'") {
          state.tokenize = tokenString(ch);
          return state.tokenize(stream, state);
        }
        if (/[\[\]\(\){}:=,;]/.test(ch)) {
          curPunc = ch;
          return "punctuation";
        }
        if (ch == "-"){
          if (stream.eat("-")) {
            stream.skipToEnd();
            return "comment";
          }
        }
        if (/\d/.test(ch)) {
          stream.eatWhile(/[\w\.]/);
          return "number";
        }
        if (isOperatorChar.test(ch)) {
          stream.eatWhile(isOperatorChar);
          return "operator";
        }

        stream.eatWhile(/[\w\-]/);
        var cur = stream.current();
        if (keywords.propertyIsEnumerable(cur)) return "keyword";
        if (cmipVerbs.propertyIsEnumerable(cur)) return "variableName";
        if (compareTypes.propertyIsEnumerable(cur)) return "atom";
        if (status.propertyIsEnumerable(cur)) return "comment";
        if (tags.propertyIsEnumerable(cur)) return "typeName";
        if (storage.propertyIsEnumerable(cur)) return "modifier";
        if (modifier.propertyIsEnumerable(cur)) return "modifier";
        if (accessTypes.propertyIsEnumerable(cur)) return "modifier";

        return "variableName";
      }

      function tokenString(quote) {
        return function(stream, state) {
          var escaped = false, next, end = false;
          while ((next = stream.next()) != null) {
            if (next == quote && !escaped){
              var afterNext = stream.peek();
              //look if the character if the quote is like the B in '10100010'B
              if (afterNext){
                afterNext = afterNext.toLowerCase();
                if(afterNext == "b" || afterNext == "h" || afterNext == "o")
                  stream.next();
              }
              end = true; break;
            }
            escaped = !escaped && next == "\\";
          }
          if (end || !(escaped || multiLineStrings))
            state.tokenize = null;
          return "string";
        };
      }

      function Context(indented, column, type, align, prev) {
        this.indented = indented;
        this.column = column;
        this.type = type;
        this.align = align;
        this.prev = prev;
      }
      function pushContext(state, col, type) {
        var indent = state.indented;
        if (state.context && state.context.type == "statement")
          indent = state.context.indented;
        return state.context = new Context(indent, col, type, null, state.context);
      }
      function popContext(state) {
        var t = state.context.type;
        if (t == ")" || t == "]" || t == "}")
          state.indented = state.context.indented;
        return state.context = state.context.prev;
      }

      //Interface
      return {
        startState: function() {
          return {
            tokenize: null,
            context: new Context(-2, 0, "top", false),
            indented: 0,
            startOfLine: true
          };
        },

        token: function(stream, state) {
          var ctx = state.context;
          if (stream.sol()) {
            if (ctx.align == null) ctx.align = false;
            state.indented = stream.indentation();
            state.startOfLine = true;
          }
          if (stream.eatSpace()) return null;
          curPunc = null;
          var style = (state.tokenize || tokenBase)(stream, state);
          if (style == "comment") return style;
          if (ctx.align == null) ctx.align = true;

          if ((curPunc == ";" || curPunc == ":" || curPunc == ",")
              && ctx.type == "statement"){
            popContext(state);
          }
          else if (curPunc == "{") pushContext(state, stream.column(), "}");
          else if (curPunc == "[") pushContext(state, stream.column(), "]");
          else if (curPunc == "(") pushContext(state, stream.column(), ")");
          else if (curPunc == "}") {
            while (ctx.type == "statement") ctx = popContext(state);
            if (ctx.type == "}") ctx = popContext(state);
            while (ctx.type == "statement") ctx = popContext(state);
          }
          else if (curPunc == ctx.type) popContext(state);
          else if (indentStatements && (((ctx.type == "}" || ctx.type == "top")
                                         && curPunc != ';') || (ctx.type == "statement"
                                                                && curPunc == "newstatement")))
            pushContext(state, stream.column(), "statement");

          state.startOfLine = false;
          return style;
        },

        languageData: {
          indentOnInput: /^\s*[{}]$/,
          commentTokens: {line: "--"}
        }
      };
    }

    var asn1$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        asn1: asn1
    });

    var atoms$f    = ["exten", "same", "include","ignorepat","switch"],
        dpcmd    = ["#include","#exec"],
        apps     = [
          "addqueuemember","adsiprog","aelsub","agentlogin","agentmonitoroutgoing","agi",
          "alarmreceiver","amd","answer","authenticate","background","backgrounddetect",
          "bridge","busy","callcompletioncancel","callcompletionrequest","celgenuserevent",
          "changemonitor","chanisavail","channelredirect","chanspy","clearhash","confbridge",
          "congestion","continuewhile","controlplayback","dahdiacceptr2call","dahdibarge",
          "dahdiras","dahdiscan","dahdisendcallreroutingfacility","dahdisendkeypadfacility",
          "datetime","dbdel","dbdeltree","deadagi","dial","dictate","directory","disa",
          "dumpchan","eagi","echo","endwhile","exec","execif","execiftime","exitwhile","extenspy",
          "externalivr","festival","flash","followme","forkcdr","getcpeid","gosub","gosubif",
          "goto","gotoif","gotoiftime","hangup","iax2provision","ices","importvar","incomplete",
          "ivrdemo","jabberjoin","jabberleave","jabbersend","jabbersendgroup","jabberstatus",
          "jack","log","macro","macroexclusive","macroexit","macroif","mailboxexists","meetme",
          "meetmeadmin","meetmechanneladmin","meetmecount","milliwatt","minivmaccmess","minivmdelete",
          "minivmgreet","minivmmwi","minivmnotify","minivmrecord","mixmonitor","monitor","morsecode",
          "mp3player","mset","musiconhold","nbscat","nocdr","noop","odbc","odbc","odbcfinish",
          "originate","ospauth","ospfinish","osplookup","ospnext","page","park","parkandannounce",
          "parkedcall","pausemonitor","pausequeuemember","pickup","pickupchan","playback","playtones",
          "privacymanager","proceeding","progress","queue","queuelog","raiseexception","read","readexten",
          "readfile","receivefax","receivefax","receivefax","record","removequeuemember",
          "resetcdr","retrydial","return","ringing","sayalpha","saycountedadj","saycountednoun",
          "saycountpl","saydigits","saynumber","sayphonetic","sayunixtime","senddtmf","sendfax",
          "sendfax","sendfax","sendimage","sendtext","sendurl","set","setamaflags",
          "setcallerpres","setmusiconhold","sipaddheader","sipdtmfmode","sipremoveheader","skel",
          "slastation","slatrunk","sms","softhangup","speechactivategrammar","speechbackground",
          "speechcreate","speechdeactivategrammar","speechdestroy","speechloadgrammar","speechprocessingsound",
          "speechstart","speechunloadgrammar","stackpop","startmusiconhold","stopmixmonitor","stopmonitor",
          "stopmusiconhold","stopplaytones","system","testclient","testserver","transfer","tryexec",
          "trysystem","unpausemonitor","unpausequeuemember","userevent","verbose","vmauthenticate",
          "vmsayname","voicemail","voicemailmain","wait","waitexten","waitfornoise","waitforring",
          "waitforsilence","waitmusiconhold","waituntil","while","zapateller"
        ];

    function basicToken(stream,state){
      var cur = '';
      var ch = stream.next();
      // comment
      if (state.blockComment) {
        if (ch == "-" && stream.match("-;", true)) {
          state.blockComment = false;
        } else if (stream.skipTo("--;")) {
          stream.next();
          stream.next();
          stream.next();
          state.blockComment = false;
        } else {
          stream.skipToEnd();
        }
        return "comment";
      }
      if(ch == ";") {
        if (stream.match("--", true)) {
          if (!stream.match("-", false)) {  // Except ;--- is not a block comment
            state.blockComment = true;
            return "comment";
          }
        }
        stream.skipToEnd();
        return "comment";
      }
      // context
      if(ch == '[') {
        stream.skipTo(']');
        stream.eat(']');
        return "header";
      }
      // string
      if(ch == '"') {
        stream.skipTo('"');
        return "string";
      }
      if(ch == "'") {
        stream.skipTo("'");
        return "string.special";
      }
      // dialplan commands
      if(ch == '#') {
        stream.eatWhile(/\w/);
        cur = stream.current();
        if(dpcmd.indexOf(cur) !== -1) {
          stream.skipToEnd();
          return "strong";
        }
      }
      // application args
      if(ch == '$'){
        var ch1 = stream.peek();
        if(ch1 == '{'){
          stream.skipTo('}');
          stream.eat('}');
          return "variableName.special";
        }
      }
      // extension
      stream.eatWhile(/\w/);
      cur = stream.current();
      if(atoms$f.indexOf(cur) !== -1) {
        state.extenStart = true;
        switch(cur) {
        case 'same': state.extenSame = true; break;
        case 'include':
        case 'switch':
        case 'ignorepat':
          state.extenInclude = true;break;
        }
        return "atom";
      }
    }

    const asterisk = {
      startState: function() {
        return {
          blockComment: false,
          extenStart: false,
          extenSame:  false,
          extenInclude: false,
          extenExten: false,
          extenPriority: false,
          extenApplication: false
        };
      },
      token: function(stream, state) {

        var cur = '';
        if(stream.eatSpace()) return null;
        // extension started
        if(state.extenStart){
          stream.eatWhile(/[^\s]/);
          cur = stream.current();
          if(/^=>?$/.test(cur)){
            state.extenExten = true;
            state.extenStart = false;
            return "strong";
          } else {
            state.extenStart = false;
            stream.skipToEnd();
            return "error";
          }
        } else if(state.extenExten) {
          // set exten and priority
          state.extenExten = false;
          state.extenPriority = true;
          stream.eatWhile(/[^,]/);
          if(state.extenInclude) {
            stream.skipToEnd();
            state.extenPriority = false;
            state.extenInclude = false;
          }
          if(state.extenSame) {
            state.extenPriority = false;
            state.extenSame = false;
            state.extenApplication = true;
          }
          return "tag";
        } else if(state.extenPriority) {
          state.extenPriority = false;
          state.extenApplication = true;
          stream.next(); // get comma
          if(state.extenSame) return null;
          stream.eatWhile(/[^,]/);
          return "number";
        } else if(state.extenApplication) {
          stream.eatWhile(/,/);
          cur = stream.current();
          if(cur === ',') return null;
          stream.eatWhile(/\w/);
          cur = stream.current().toLowerCase();
          state.extenApplication = false;
          if(apps.indexOf(cur) !== -1){
            return "def";
          }
        } else {
          return basicToken(stream,state);
        }

        return null;
      },

      languageData: {
        commentTokens: {line: ";", block: {open: ";--", close: "--;"}}
      }
    };

    var asterisk$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        asterisk: asterisk
    });

    var reserve = "><+-.,[]".split("");
    /*
      comments can be either:
      placed behind lines

      +++    this is a comment

      where reserved characters cannot be used
      or in a loop
      [
      this is ok to use [ ] and stuff
      ]
      or preceded by #
    */
    const brainfuck = {
      startState: function() {
        return {
          commentLine: false,
          left: 0,
          right: 0,
          commentLoop: false
        }
      },
      token: function(stream, state) {
        if (stream.eatSpace()) return null
        if(stream.sol()){
          state.commentLine = false;
        }
        var ch = stream.next().toString();
        if(reserve.indexOf(ch) !== -1){
          if(state.commentLine === true){
            if(stream.eol()){
              state.commentLine = false;
            }
            return "comment";
          }
          if(ch === "]" || ch === "["){
            if(ch === "["){
              state.left++;
            }
            else {
              state.right++;
            }
            return "bracket";
          }
          else if(ch === "+" || ch === "-"){
            return "keyword";
          }
          else if(ch === "<" || ch === ">"){
            return "atom";
          }
          else if(ch === "." || ch === ","){
            return "def";
          }
        }
        else {
          state.commentLine = true;
          if(stream.eol()){
            state.commentLine = false;
          }
          return "comment";
        }
        if(stream.eol()){
          state.commentLine = false;
        }
      }
    };

    var brainfuck$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        brainfuck: brainfuck
    });

    var BUILTIN$1 = "builtin", COMMENT$1 = "comment", STRING$1 = "string",
        ATOM$1 = "atom", NUMBER$1 = "number", KEYWORD = "keyword", MODTAG = "header",
        COBOLLINENUM = "def", PERIOD = "link";
    function makeKeywords$1(str) {
      var obj = {}, words = str.split(" ");
      for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
      return obj;
    }
    var atoms$e = makeKeywords$1("TRUE FALSE ZEROES ZEROS ZERO SPACES SPACE LOW-VALUE LOW-VALUES ");
    var keywords$E = makeKeywords$1(
      "ACCEPT ACCESS ACQUIRE ADD ADDRESS " +
        "ADVANCING AFTER ALIAS ALL ALPHABET " +
        "ALPHABETIC ALPHABETIC-LOWER ALPHABETIC-UPPER ALPHANUMERIC ALPHANUMERIC-EDITED " +
        "ALSO ALTER ALTERNATE AND ANY " +
        "ARE AREA AREAS ARITHMETIC ASCENDING " +
        "ASSIGN AT ATTRIBUTE AUTHOR AUTO " +
        "AUTO-SKIP AUTOMATIC B-AND B-EXOR B-LESS " +
        "B-NOT B-OR BACKGROUND-COLOR BACKGROUND-COLOUR BEEP " +
        "BEFORE BELL BINARY BIT BITS " +
        "BLANK BLINK BLOCK BOOLEAN BOTTOM " +
        "BY CALL CANCEL CD CF " +
        "CH CHARACTER CHARACTERS CLASS CLOCK-UNITS " +
        "CLOSE COBOL CODE CODE-SET COL " +
        "COLLATING COLUMN COMMA COMMIT COMMITMENT " +
        "COMMON COMMUNICATION COMP COMP-0 COMP-1 " +
        "COMP-2 COMP-3 COMP-4 COMP-5 COMP-6 " +
        "COMP-7 COMP-8 COMP-9 COMPUTATIONAL COMPUTATIONAL-0 " +
        "COMPUTATIONAL-1 COMPUTATIONAL-2 COMPUTATIONAL-3 COMPUTATIONAL-4 COMPUTATIONAL-5 " +
        "COMPUTATIONAL-6 COMPUTATIONAL-7 COMPUTATIONAL-8 COMPUTATIONAL-9 COMPUTE " +
        "CONFIGURATION CONNECT CONSOLE CONTAINED CONTAINS " +
        "CONTENT CONTINUE CONTROL CONTROL-AREA CONTROLS " +
        "CONVERTING COPY CORR CORRESPONDING COUNT " +
        "CRT CRT-UNDER CURRENCY CURRENT CURSOR " +
        "DATA DATE DATE-COMPILED DATE-WRITTEN DAY " +
        "DAY-OF-WEEK DB DB-ACCESS-CONTROL-KEY DB-DATA-NAME DB-EXCEPTION " +
        "DB-FORMAT-NAME DB-RECORD-NAME DB-SET-NAME DB-STATUS DBCS " +
        "DBCS-EDITED DE DEBUG-CONTENTS DEBUG-ITEM DEBUG-LINE " +
        "DEBUG-NAME DEBUG-SUB-1 DEBUG-SUB-2 DEBUG-SUB-3 DEBUGGING " +
        "DECIMAL-POINT DECLARATIVES DEFAULT DELETE DELIMITED " +
        "DELIMITER DEPENDING DESCENDING DESCRIBED DESTINATION " +
        "DETAIL DISABLE DISCONNECT DISPLAY DISPLAY-1 " +
        "DISPLAY-2 DISPLAY-3 DISPLAY-4 DISPLAY-5 DISPLAY-6 " +
        "DISPLAY-7 DISPLAY-8 DISPLAY-9 DIVIDE DIVISION " +
        "DOWN DROP DUPLICATE DUPLICATES DYNAMIC " +
        "EBCDIC EGI EJECT ELSE EMI " +
        "EMPTY EMPTY-CHECK ENABLE END END. END-ACCEPT END-ACCEPT. " +
        "END-ADD END-CALL END-COMPUTE END-DELETE END-DISPLAY " +
        "END-DIVIDE END-EVALUATE END-IF END-INVOKE END-MULTIPLY " +
        "END-OF-PAGE END-PERFORM END-READ END-RECEIVE END-RETURN " +
        "END-REWRITE END-SEARCH END-START END-STRING END-SUBTRACT " +
        "END-UNSTRING END-WRITE END-XML ENTER ENTRY " +
        "ENVIRONMENT EOP EQUAL EQUALS ERASE " +
        "ERROR ESI EVALUATE EVERY EXCEEDS " +
        "EXCEPTION EXCLUSIVE EXIT EXTEND EXTERNAL " +
        "EXTERNALLY-DESCRIBED-KEY FD FETCH FILE FILE-CONTROL " +
        "FILE-STREAM FILES FILLER FINAL FIND " +
        "FINISH FIRST FOOTING FOR FOREGROUND-COLOR " +
        "FOREGROUND-COLOUR FORMAT FREE FROM FULL " +
        "FUNCTION GENERATE GET GIVING GLOBAL " +
        "GO GOBACK GREATER GROUP HEADING " +
        "HIGH-VALUE HIGH-VALUES HIGHLIGHT I-O I-O-CONTROL " +
        "ID IDENTIFICATION IF IN INDEX " +
        "INDEX-1 INDEX-2 INDEX-3 INDEX-4 INDEX-5 " +
        "INDEX-6 INDEX-7 INDEX-8 INDEX-9 INDEXED " +
        "INDIC INDICATE INDICATOR INDICATORS INITIAL " +
        "INITIALIZE INITIATE INPUT INPUT-OUTPUT INSPECT " +
        "INSTALLATION INTO INVALID INVOKE IS " +
        "JUST JUSTIFIED KANJI KEEP KEY " +
        "LABEL LAST LD LEADING LEFT " +
        "LEFT-JUSTIFY LENGTH LENGTH-CHECK LESS LIBRARY " +
        "LIKE LIMIT LIMITS LINAGE LINAGE-COUNTER " +
        "LINE LINE-COUNTER LINES LINKAGE LOCAL-STORAGE " +
        "LOCALE LOCALLY LOCK " +
        "MEMBER MEMORY MERGE MESSAGE METACLASS " +
        "MODE MODIFIED MODIFY MODULES MOVE " +
        "MULTIPLE MULTIPLY NATIONAL NATIVE NEGATIVE " +
        "NEXT NO NO-ECHO NONE NOT " +
        "NULL NULL-KEY-MAP NULL-MAP NULLS NUMBER " +
        "NUMERIC NUMERIC-EDITED OBJECT OBJECT-COMPUTER OCCURS " +
        "OF OFF OMITTED ON ONLY " +
        "OPEN OPTIONAL OR ORDER ORGANIZATION " +
        "OTHER OUTPUT OVERFLOW OWNER PACKED-DECIMAL " +
        "PADDING PAGE PAGE-COUNTER PARSE PERFORM " +
        "PF PH PIC PICTURE PLUS " +
        "POINTER POSITION POSITIVE PREFIX PRESENT " +
        "PRINTING PRIOR PROCEDURE PROCEDURE-POINTER PROCEDURES " +
        "PROCEED PROCESS PROCESSING PROGRAM PROGRAM-ID " +
        "PROMPT PROTECTED PURGE QUEUE QUOTE " +
        "QUOTES RANDOM RD READ READY " +
        "REALM RECEIVE RECONNECT RECORD RECORD-NAME " +
        "RECORDS RECURSIVE REDEFINES REEL REFERENCE " +
        "REFERENCE-MONITOR REFERENCES RELATION RELATIVE RELEASE " +
        "REMAINDER REMOVAL RENAMES REPEATED REPLACE " +
        "REPLACING REPORT REPORTING REPORTS REPOSITORY " +
        "REQUIRED RERUN RESERVE RESET RETAINING " +
        "RETRIEVAL RETURN RETURN-CODE RETURNING REVERSE-VIDEO " +
        "REVERSED REWIND REWRITE RF RH " +
        "RIGHT RIGHT-JUSTIFY ROLLBACK ROLLING ROUNDED " +
        "RUN SAME SCREEN SD SEARCH " +
        "SECTION SECURE SECURITY SEGMENT SEGMENT-LIMIT " +
        "SELECT SEND SENTENCE SEPARATE SEQUENCE " +
        "SEQUENTIAL SET SHARED SIGN SIZE " +
        "SKIP1 SKIP2 SKIP3 SORT SORT-MERGE " +
        "SORT-RETURN SOURCE SOURCE-COMPUTER SPACE-FILL " +
        "SPECIAL-NAMES STANDARD STANDARD-1 STANDARD-2 " +
        "START STARTING STATUS STOP STORE " +
        "STRING SUB-QUEUE-1 SUB-QUEUE-2 SUB-QUEUE-3 SUB-SCHEMA " +
        "SUBFILE SUBSTITUTE SUBTRACT SUM SUPPRESS " +
        "SYMBOLIC SYNC SYNCHRONIZED SYSIN SYSOUT " +
        "TABLE TALLYING TAPE TENANT TERMINAL " +
        "TERMINATE TEST TEXT THAN THEN " +
        "THROUGH THRU TIME TIMES TITLE " +
        "TO TOP TRAILING TRAILING-SIGN TRANSACTION " +
        "TYPE TYPEDEF UNDERLINE UNEQUAL UNIT " +
        "UNSTRING UNTIL UP UPDATE UPON " +
        "USAGE USAGE-MODE USE USING VALID " +
        "VALIDATE VALUE VALUES VARYING VLR " +
        "WAIT WHEN WHEN-COMPILED WITH WITHIN " +
        "WORDS WORKING-STORAGE WRITE XML XML-CODE " +
        "XML-EVENT XML-NTEXT XML-TEXT ZERO ZERO-FILL " );

    var builtins$9 = makeKeywords$1("- * ** / + < <= = > >= ");
    var tests = {
      digit: /\d/,
      digit_or_colon: /[\d:]/,
      hex: /[0-9a-f]/i,
      sign: /[+-]/,
      exponent: /e/i,
      keyword_char: /[^\s\(\[\;\)\]]/,
      symbol: /[\w*+\-]/
    };
    function isNumber$1(ch, stream){
      // hex
      if ( ch === '0' && stream.eat(/x/i) ) {
        stream.eatWhile(tests.hex);
        return true;
      }
      // leading sign
      if ( ( ch == '+' || ch == '-' ) && ( tests.digit.test(stream.peek()) ) ) {
        stream.eat(tests.sign);
        ch = stream.next();
      }
      if ( tests.digit.test(ch) ) {
        stream.eat(ch);
        stream.eatWhile(tests.digit);
        if ( '.' == stream.peek()) {
          stream.eat('.');
          stream.eatWhile(tests.digit);
        }
        if ( stream.eat(tests.exponent) ) {
          stream.eat(tests.sign);
          stream.eatWhile(tests.digit);
        }
        return true;
      }
      return false;
    }
    const cobol = {
      startState: function () {
        return {
          indentStack: null,
          indentation: 0,
          mode: false
        };
      },
      token: function (stream, state) {
        if (state.indentStack == null && stream.sol()) {
          // update indentation, but only if indentStack is empty
          state.indentation = 6 ; //stream.indentation();
        }
        // skip spaces
        if (stream.eatSpace()) {
          return null;
        }
        var returnType = null;
        switch(state.mode){
        case "string": // multi-line string parsing mode
          var next = false;
          while ((next = stream.next()) != null) {
            if (next == "\"" || next == "\'") {
              state.mode = false;
              break;
            }
          }
          returnType = STRING$1; // continue on in string mode
          break;
        default: // default parsing mode
          var ch = stream.next();
          var col = stream.column();
          if (col >= 0 && col <= 5) {
            returnType = COBOLLINENUM;
          } else if (col >= 72 && col <= 79) {
            stream.skipToEnd();
            returnType = MODTAG;
          } else if (ch == "*" && col == 6) { // comment
            stream.skipToEnd(); // rest of the line is a comment
            returnType = COMMENT$1;
          } else if (ch == "\"" || ch == "\'") {
            state.mode = "string";
            returnType = STRING$1;
          } else if (ch == "'" && !( tests.digit_or_colon.test(stream.peek()) )) {
            returnType = ATOM$1;
          } else if (ch == ".") {
            returnType = PERIOD;
          } else if (isNumber$1(ch,stream)){
            returnType = NUMBER$1;
          } else {
            if (stream.current().match(tests.symbol)) {
              while (col < 71) {
                if (stream.eat(tests.symbol) === undefined) {
                  break;
                } else {
                  col++;
                }
              }
            }
            if (keywords$E && keywords$E.propertyIsEnumerable(stream.current().toUpperCase())) {
              returnType = KEYWORD;
            } else if (builtins$9 && builtins$9.propertyIsEnumerable(stream.current().toUpperCase())) {
              returnType = BUILTIN$1;
            } else if (atoms$e && atoms$e.propertyIsEnumerable(stream.current().toUpperCase())) {
              returnType = ATOM$1;
            } else returnType = null;
          }
        }
        return returnType;
      },
      indent: function (state) {
        if (state.indentStack == null) return state.indentation;
        return state.indentStack.indent;
      }
    };

    var cobol$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        cobol: cobol
    });

    function Context$b(indented, column, type, info, align, prev) {
      this.indented = indented;
      this.column = column;
      this.type = type;
      this.info = info;
      this.align = align;
      this.prev = prev;
    }
    function pushContext$f(state, col, type, info) {
      var indent = state.indented;
      if (state.context && state.context.type == "statement" && type != "statement")
        indent = state.context.indented;
      return state.context = new Context$b(indent, col, type, info, null, state.context);
    }
    function popContext$f(state) {
      var t = state.context.type;
      if (t == ")" || t == "]" || t == "}")
        state.indented = state.context.indented;
      return state.context = state.context.prev;
    }

    function typeBefore(stream, state, pos) {
      if (state.prevToken == "variable" || state.prevToken == "type") return true;
      if (/\S(?:[^- ]>|[*\]])\s*$|\*$/.test(stream.string.slice(0, pos))) return true;
      if (state.typeAtEndOfLine && stream.column() == stream.indentation()) return true;
    }

    function isTopScope(context) {
      for (;;) {
        if (!context || context.type == "top") return true;
        if (context.type == "}" && context.prev.info != "namespace") return false;
        context = context.prev;
      }
    }

    function clike(parserConfig) {
      var statementIndentUnit = parserConfig.statementIndentUnit,
          dontAlignCalls = parserConfig.dontAlignCalls,
          keywords = parserConfig.keywords || {},
          types = parserConfig.types || {},
          builtin = parserConfig.builtin || {},
          blockKeywords = parserConfig.blockKeywords || {},
          defKeywords = parserConfig.defKeywords || {},
          atoms = parserConfig.atoms || {},
          hooks = parserConfig.hooks || {},
          multiLineStrings = parserConfig.multiLineStrings,
          indentStatements = parserConfig.indentStatements !== false,
          indentSwitch = parserConfig.indentSwitch !== false,
          namespaceSeparator = parserConfig.namespaceSeparator,
          isPunctuationChar = parserConfig.isPunctuationChar || /[\[\]{}\(\),;\:\.]/,
          numberStart = parserConfig.numberStart || /[\d\.]/,
          number = parserConfig.number || /^(?:0x[a-f\d]+|0b[01]+|(?:\d+\.?\d*|\.\d+)(?:e[-+]?\d+)?)(u|ll?|l|f)?/i,
          isOperatorChar = parserConfig.isOperatorChar || /[+\-*&%=<>!?|\/]/,
          isIdentifierChar = parserConfig.isIdentifierChar || /[\w\$_\xa1-\uffff]/,
          // An optional function that takes a {string} token and returns true if it
          // should be treated as a builtin.
          isReservedIdentifier = parserConfig.isReservedIdentifier || false;

      var curPunc, isDefKeyword;

      function tokenBase(stream, state) {
        var ch = stream.next();
        if (hooks[ch]) {
          var result = hooks[ch](stream, state);
          if (result !== false) return result;
        }
        if (ch == '"' || ch == "'") {
          state.tokenize = tokenString(ch);
          return state.tokenize(stream, state);
        }
        if (numberStart.test(ch)) {
          stream.backUp(1);
          if (stream.match(number)) return "number"
          stream.next();
        }
        if (isPunctuationChar.test(ch)) {
          curPunc = ch;
          return null;
        }
        if (ch == "/") {
          if (stream.eat("*")) {
            state.tokenize = tokenComment;
            return tokenComment(stream, state);
          }
          if (stream.eat("/")) {
            stream.skipToEnd();
            return "comment";
          }
        }
        if (isOperatorChar.test(ch)) {
          while (!stream.match(/^\/[\/*]/, false) && stream.eat(isOperatorChar)) {}
          return "operator";
        }
        stream.eatWhile(isIdentifierChar);
        if (namespaceSeparator) while (stream.match(namespaceSeparator))
          stream.eatWhile(isIdentifierChar);

        var cur = stream.current();
        if (contains(keywords, cur)) {
          if (contains(blockKeywords, cur)) curPunc = "newstatement";
          if (contains(defKeywords, cur)) isDefKeyword = true;
          return "keyword";
        }
        if (contains(types, cur)) return "type";
        if (contains(builtin, cur)
            || (isReservedIdentifier && isReservedIdentifier(cur))) {
          if (contains(blockKeywords, cur)) curPunc = "newstatement";
          return "builtin";
        }
        if (contains(atoms, cur)) return "atom";
        return "variable";
      }

      function tokenString(quote) {
        return function(stream, state) {
          var escaped = false, next, end = false;
          while ((next = stream.next()) != null) {
            if (next == quote && !escaped) {end = true; break;}
            escaped = !escaped && next == "\\";
          }
          if (end || !(escaped || multiLineStrings))
            state.tokenize = null;
          return "string";
        };
      }

      function tokenComment(stream, state) {
        var maybeEnd = false, ch;
        while (ch = stream.next()) {
          if (ch == "/" && maybeEnd) {
            state.tokenize = null;
            break;
          }
          maybeEnd = (ch == "*");
        }
        return "comment";
      }

      function maybeEOL(stream, state) {
        if (parserConfig.typeFirstDefinitions && stream.eol() && isTopScope(state.context))
          state.typeAtEndOfLine = typeBefore(stream, state, stream.pos);
      }

      // Interface

      return {
        startState: function(indentUnit) {
          return {
            tokenize: null,
            context: new Context$b(-indentUnit, 0, "top", null, false),
            indented: 0,
            startOfLine: true,
            prevToken: null
          };
        },

        token: function(stream, state) {
          var ctx = state.context;
          if (stream.sol()) {
            if (ctx.align == null) ctx.align = false;
            state.indented = stream.indentation();
            state.startOfLine = true;
          }
          if (stream.eatSpace()) { maybeEOL(stream, state); return null; }
          curPunc = isDefKeyword = null;
          var style = (state.tokenize || tokenBase)(stream, state);
          if (style == "comment" || style == "meta") return style;
          if (ctx.align == null) ctx.align = true;

          if (curPunc == ";" || curPunc == ":" || (curPunc == "," && stream.match(/^\s*(?:\/\/.*)?$/, false)))
            while (state.context.type == "statement") popContext$f(state);
          else if (curPunc == "{") pushContext$f(state, stream.column(), "}");
          else if (curPunc == "[") pushContext$f(state, stream.column(), "]");
          else if (curPunc == "(") pushContext$f(state, stream.column(), ")");
          else if (curPunc == "}") {
            while (ctx.type == "statement") ctx = popContext$f(state);
            if (ctx.type == "}") ctx = popContext$f(state);
            while (ctx.type == "statement") ctx = popContext$f(state);
          }
          else if (curPunc == ctx.type) popContext$f(state);
          else if (indentStatements &&
                   (((ctx.type == "}" || ctx.type == "top") && curPunc != ";") ||
                    (ctx.type == "statement" && curPunc == "newstatement"))) {
            pushContext$f(state, stream.column(), "statement", stream.current());
          }

          if (style == "variable" &&
              ((state.prevToken == "def" ||
                (parserConfig.typeFirstDefinitions && typeBefore(stream, state, stream.start) &&
                 isTopScope(state.context) && stream.match(/^\s*\(/, false)))))
            style = "def";

          if (hooks.token) {
            var result = hooks.token(stream, state, style);
            if (result !== undefined) style = result;
          }

          if (style == "def" && parserConfig.styleDefs === false) style = "variable";

          state.startOfLine = false;
          state.prevToken = isDefKeyword ? "def" : style || curPunc;
          maybeEOL(stream, state);
          return style;
        },

        indent: function(state, textAfter, context) {
          if (state.tokenize != tokenBase && state.tokenize != null || state.typeAtEndOfLine) return null;
          var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);
          var closing = firstChar == ctx.type;
          if (ctx.type == "statement" && firstChar == "}") ctx = ctx.prev;
          if (parserConfig.dontIndentStatements)
            while (ctx.type == "statement" && parserConfig.dontIndentStatements.test(ctx.info))
              ctx = ctx.prev;
          if (hooks.indent) {
            var hook = hooks.indent(state, ctx, textAfter, context.unit);
            if (typeof hook == "number") return hook
          }
          var switchBlock = ctx.prev && ctx.prev.info == "switch";
          if (parserConfig.allmanIndentation && /[{(]/.test(firstChar)) {
            while (ctx.type != "top" && ctx.type != "}") ctx = ctx.prev;
            return ctx.indented
          }
          if (ctx.type == "statement")
            return ctx.indented + (firstChar == "{" ? 0 : statementIndentUnit || context.unit);
          if (ctx.align && (!dontAlignCalls || ctx.type != ")"))
            return ctx.column + (closing ? 0 : 1);
          if (ctx.type == ")" && !closing)
            return ctx.indented + (statementIndentUnit || context.unit);

          return ctx.indented + (closing ? 0 : context.unit) +
            (!closing && switchBlock && !/^(?:case|default)\b/.test(textAfter) ? context.unit : 0);
        },

        languageData: {
          indentOnInput: indentSwitch ? /^\s*(?:case .*?:|default:|\{\}?|\})$/ : /^\s*[{}]$/,
          commentTokens: {line: "//", block: {open: "/*", close: "*/"}},
          autocomplete: Object.keys(keywords).concat(Object.keys(types)).concat(Object.keys(builtin)).concat(Object.keys(atoms)),
          ...parserConfig.languageData
        }
      };
    }
    function words$j(str) {
      var obj = {}, words = str.split(" ");
      for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
      return obj;
    }
    function contains(words, word) {
      if (typeof words === "function") {
        return words(word);
      } else {
        return words.propertyIsEnumerable(word);
      }
    }
    var cKeywords = "auto if break case register continue return default do sizeof " +
        "static else struct switch extern typedef union for goto while enum const " +
        "volatile inline restrict asm fortran";

    // Keywords from https://en.cppreference.com/w/cpp/keyword includes C++20.
    var cppKeywords = "alignas alignof and and_eq audit axiom bitand bitor catch " +
        "class compl concept constexpr const_cast decltype delete dynamic_cast " +
        "explicit export final friend import module mutable namespace new noexcept " +
        "not not_eq operator or or_eq override private protected public " +
        "reinterpret_cast requires static_assert static_cast template this " +
        "thread_local throw try typeid typename using virtual xor xor_eq";

    var objCKeywords = "bycopy byref in inout oneway out self super atomic nonatomic retain copy " +
        "readwrite readonly strong weak assign typeof nullable nonnull null_resettable _cmd " +
        "@interface @implementation @end @protocol @encode @property @synthesize @dynamic @class " +
        "@public @package @private @protected @required @optional @try @catch @finally @import " +
        "@selector @encode @defs @synchronized @autoreleasepool @compatibility_alias @available";

    var objCBuiltins = "FOUNDATION_EXPORT FOUNDATION_EXTERN NS_INLINE NS_FORMAT_FUNCTION " +
        " NS_RETURNS_RETAINEDNS_ERROR_ENUM NS_RETURNS_NOT_RETAINED NS_RETURNS_INNER_POINTER " +
        "NS_DESIGNATED_INITIALIZER NS_ENUM NS_OPTIONS NS_REQUIRES_NIL_TERMINATION " +
        "NS_ASSUME_NONNULL_BEGIN NS_ASSUME_NONNULL_END NS_SWIFT_NAME NS_REFINED_FOR_SWIFT";

    // Do not use this. Use the cTypes function below. This is global just to avoid
    // excessive calls when cTypes is being called multiple times during a parse.
    var basicCTypes = words$j("int long char short double float unsigned signed " +
                            "void bool");

    // Do not use this. Use the objCTypes function below. This is global just to avoid
    // excessive calls when objCTypes is being called multiple times during a parse.
    var basicObjCTypes = words$j("SEL instancetype id Class Protocol BOOL");

    // Returns true if identifier is a "C" type.
    // C type is defined as those that are reserved by the compiler (basicTypes),
    // and those that end in _t (Reserved by POSIX for types)
    // http://www.gnu.org/software/libc/manual/html_node/Reserved-Names.html
    function cTypes(identifier) {
      return contains(basicCTypes, identifier) || /.+_t$/.test(identifier);
    }

    // Returns true if identifier is a "Objective C" type.
    function objCTypes(identifier) {
      return cTypes(identifier) || contains(basicObjCTypes, identifier);
    }

    var cBlockKeywords = "case do else for if switch while struct enum union";
    var cDefKeywords = "struct enum union";

    function cppHook(stream, state) {
      if (!state.startOfLine) return false
      for (var ch, next = null; ch = stream.peek();) {
        if (ch == "\\" && stream.match(/^.$/)) {
          next = cppHook;
          break
        } else if (ch == "/" && stream.match(/^\/[\/\*]/, false)) {
          break
        }
        stream.next();
      }
      state.tokenize = next;
      return "meta"
    }

    function pointerHook(_stream, state) {
      if (state.prevToken == "type") return "type";
      return false;
    }

    // For C and C++ (and ObjC): identifiers starting with __
    // or _ followed by a capital letter are reserved for the compiler.
    function cIsReservedIdentifier(token) {
      if (!token || token.length < 2) return false;
      if (token[0] != '_') return false;
      return (token[1] == '_') || (token[1] !== token[1].toLowerCase());
    }

    function cpp14Literal(stream) {
      stream.eatWhile(/[\w\.']/);
      return "number";
    }

    function cpp11StringHook(stream, state) {
      stream.backUp(1);
      // Raw strings.
      if (stream.match(/^(?:R|u8R|uR|UR|LR)/)) {
        var match = stream.match(/^"([^\s\\()]{0,16})\(/);
        if (!match) {
          return false;
        }
        state.cpp11RawStringDelim = match[1];
        state.tokenize = tokenRawString;
        return tokenRawString(stream, state);
      }
      // Unicode strings/chars.
      if (stream.match(/^(?:u8|u|U|L)/)) {
        if (stream.match(/^["']/, /* eat */ false)) {
          return "string";
        }
        return false;
      }
      // Ignore this hook.
      stream.next();
      return false;
    }

    function cppLooksLikeConstructor(word) {
      var lastTwo = /(\w+)::~?(\w+)$/.exec(word);
      return lastTwo && lastTwo[1] == lastTwo[2];
    }

    // C#-style strings where "" escapes a quote.
    function tokenAtString(stream, state) {
      var next;
      while ((next = stream.next()) != null) {
        if (next == '"' && !stream.eat('"')) {
          state.tokenize = null;
          break;
        }
      }
      return "string";
    }

    // C++11 raw string literal is <prefix>"<delim>( anything )<delim>", where
    // <delim> can be a string up to 16 characters long.
    function tokenRawString(stream, state) {
      // Escape characters that have special regex meanings.
      var delim = state.cpp11RawStringDelim.replace(/[^\w\s]/g, '\\$&');
      var match = stream.match(new RegExp(".*?\\)" + delim + '"'));
      if (match)
        state.tokenize = null;
      else
        stream.skipToEnd();
      return "string";
    }

    const c = clike({
      keywords: words$j(cKeywords),
      types: cTypes,
      blockKeywords: words$j(cBlockKeywords),
      defKeywords: words$j(cDefKeywords),
      typeFirstDefinitions: true,
      atoms: words$j("NULL true false"),
      isReservedIdentifier: cIsReservedIdentifier,
      hooks: {
        "#": cppHook,
        "*": pointerHook,
      }
    });

    const cpp = clike({
      keywords: words$j(cKeywords + " " + cppKeywords),
      types: cTypes,
      blockKeywords: words$j(cBlockKeywords + " class try catch"),
      defKeywords: words$j(cDefKeywords + " class namespace"),
      typeFirstDefinitions: true,
      atoms: words$j("true false NULL nullptr"),
      dontIndentStatements: /^template$/,
      isIdentifierChar: /[\w\$_~\xa1-\uffff]/,
      isReservedIdentifier: cIsReservedIdentifier,
      hooks: {
        "#": cppHook,
        "*": pointerHook,
        "u": cpp11StringHook,
        "U": cpp11StringHook,
        "L": cpp11StringHook,
        "R": cpp11StringHook,
        "0": cpp14Literal,
        "1": cpp14Literal,
        "2": cpp14Literal,
        "3": cpp14Literal,
        "4": cpp14Literal,
        "5": cpp14Literal,
        "6": cpp14Literal,
        "7": cpp14Literal,
        "8": cpp14Literal,
        "9": cpp14Literal,
        token: function(stream, state, style) {
          if (style == "variable" && stream.peek() == "(" &&
              (state.prevToken == ";" || state.prevToken == null ||
               state.prevToken == "}") &&
              cppLooksLikeConstructor(stream.current()))
            return "def";
        }
      },
      namespaceSeparator: "::"
    });

    const java = clike({
      keywords: words$j("abstract assert break case catch class const continue default " +
                      "do else enum extends final finally for goto if implements import " +
                      "instanceof interface native new package private protected public " +
                      "return static strictfp super switch synchronized this throw throws transient " +
                      "try volatile while @interface"),
      types: words$j("byte short int long float double boolean char void Boolean Byte Character Double Float " +
                   "Integer Long Number Object Short String StringBuffer StringBuilder Void"),
      blockKeywords: words$j("catch class do else finally for if switch try while"),
      defKeywords: words$j("class interface enum @interface"),
      typeFirstDefinitions: true,
      atoms: words$j("true false null"),
      number: /^(?:0x[a-f\d_]+|0b[01_]+|(?:[\d_]+\.?\d*|\.\d+)(?:e[-+]?[\d_]+)?)(u|ll?|l|f)?/i,
      hooks: {
        "@": function(stream) {
          // Don't match the @interface keyword.
          if (stream.match('interface', false)) return false;

          stream.eatWhile(/[\w\$_]/);
          return "meta";
        }
      }
    });

    const csharp = clike({
      keywords: words$j("abstract as async await base break case catch checked class const continue" +
                      " default delegate do else enum event explicit extern finally fixed for" +
                      " foreach goto if implicit in interface internal is lock namespace new" +
                      " operator out override params private protected public readonly ref return sealed" +
                      " sizeof stackalloc static struct switch this throw try typeof unchecked" +
                      " unsafe using virtual void volatile while add alias ascending descending dynamic from get" +
                      " global group into join let orderby partial remove select set value var yield"),
      types: words$j("Action Boolean Byte Char DateTime DateTimeOffset Decimal Double Func" +
                   " Guid Int16 Int32 Int64 Object SByte Single String Task TimeSpan UInt16 UInt32" +
                   " UInt64 bool byte char decimal double short int long object"  +
                   " sbyte float string ushort uint ulong"),
      blockKeywords: words$j("catch class do else finally for foreach if struct switch try while"),
      defKeywords: words$j("class interface namespace struct var"),
      typeFirstDefinitions: true,
      atoms: words$j("true false null"),
      hooks: {
        "@": function(stream, state) {
          if (stream.eat('"')) {
            state.tokenize = tokenAtString;
            return tokenAtString(stream, state);
          }
          stream.eatWhile(/[\w\$_]/);
          return "meta";
        }
      }
    });

    function tokenTripleString(stream, state) {
      var escaped = false;
      while (!stream.eol()) {
        if (!escaped && stream.match('"""')) {
          state.tokenize = null;
          break;
        }
        escaped = stream.next() == "\\" && !escaped;
      }
      return "string";
    }

    function tokenNestedComment$1(depth) {
      return function (stream, state) {
        var ch;
        while (ch = stream.next()) {
          if (ch == "*" && stream.eat("/")) {
            if (depth == 1) {
              state.tokenize = null;
              break
            } else {
              state.tokenize = tokenNestedComment$1(depth - 1);
              return state.tokenize(stream, state)
            }
          } else if (ch == "/" && stream.eat("*")) {
            state.tokenize = tokenNestedComment$1(depth + 1);
            return state.tokenize(stream, state)
          }
        }
        return "comment"
      }
    }

    const scala = clike({
      keywords: words$j(
        /* scala */
        "abstract case catch class def do else extends final finally for forSome if " +
          "implicit import lazy match new null object override package private protected return " +
          "sealed super this throw trait try type val var while with yield _ " +

        /* package scala */
        "assert assume require print println printf readLine readBoolean readByte readShort " +
          "readChar readInt readLong readFloat readDouble"
      ),
      types: words$j(
        "AnyVal App Application Array BufferedIterator BigDecimal BigInt Char Console Either " +
          "Enumeration Equiv Error Exception Fractional Function IndexedSeq Int Integral Iterable " +
          "Iterator List Map Numeric Nil NotNull Option Ordered Ordering PartialFunction PartialOrdering " +
          "Product Proxy Range Responder Seq Serializable Set Specializable Stream StringBuilder " +
          "StringContext Symbol Throwable Traversable TraversableOnce Tuple Unit Vector " +

        /* package java.lang */
        "Boolean Byte Character CharSequence Class ClassLoader Cloneable Comparable " +
          "Compiler Double Exception Float Integer Long Math Number Object Package Pair Process " +
          "Runtime Runnable SecurityManager Short StackTraceElement StrictMath String " +
          "StringBuffer System Thread ThreadGroup ThreadLocal Throwable Triple Void"
      ),
      multiLineStrings: true,
      blockKeywords: words$j("catch class enum do else finally for forSome if match switch try while"),
      defKeywords: words$j("class enum def object package trait type val var"),
      atoms: words$j("true false null"),
      indentStatements: false,
      indentSwitch: false,
      isOperatorChar: /[+\-*&%=<>!?|\/#:@]/,
      hooks: {
        "@": function(stream) {
          stream.eatWhile(/[\w\$_]/);
          return "meta";
        },
        '"': function(stream, state) {
          if (!stream.match('""')) return false;
          state.tokenize = tokenTripleString;
          return state.tokenize(stream, state);
        },
        "'": function(stream) {
          stream.eatWhile(/[\w\$_\xa1-\uffff]/);
          return "atom";
        },
        "=": function(stream, state) {
          var cx = state.context;
          if (cx.type == "}" && cx.align && stream.eat(">")) {
            state.context = new Context$b(cx.indented, cx.column, cx.type, cx.info, null, cx.prev);
            return "operator"
          } else {
            return false
          }
        },

        "/": function(stream, state) {
          if (!stream.eat("*")) return false
          state.tokenize = tokenNestedComment$1(1);
          return state.tokenize(stream, state)
        }
      },
      languageData: {
        closeBrackets: {brackets: ["(", "[", "{", "'", '"', '"""']}
      }
    });

    function tokenKotlinString(tripleString){
      return function (stream, state) {
        var escaped = false, next, end = false;
        while (!stream.eol()) {
          if (!tripleString && !escaped && stream.match('"') ) {end = true; break;}
          if (tripleString && stream.match('"""')) {end = true; break;}
          next = stream.next();
          if(!escaped && next == "$" && stream.match('{'))
            stream.skipTo("}");
          escaped = !escaped && next == "\\" && !tripleString;
        }
        if (end || !tripleString)
          state.tokenize = null;
        return "string";
      }
    }

    const kotlin = clike({
      keywords: words$j(
        /*keywords*/
        "package as typealias class interface this super val operator " +
          "var fun for is in This throw return annotation " +
          "break continue object if else while do try when !in !is as? " +

        /*soft keywords*/
        "file import where by get set abstract enum open inner override private public internal " +
          "protected catch finally out final vararg reified dynamic companion constructor init " +
          "sealed field property receiver param sparam lateinit data inline noinline tailrec " +
          "external annotation crossinline const operator infix suspend actual expect setparam"
      ),
      types: words$j(
        /* package java.lang */
        "Boolean Byte Character CharSequence Class ClassLoader Cloneable Comparable " +
          "Compiler Double Exception Float Integer Long Math Number Object Package Pair Process " +
          "Runtime Runnable SecurityManager Short StackTraceElement StrictMath String " +
          "StringBuffer System Thread ThreadGroup ThreadLocal Throwable Triple Void Annotation Any BooleanArray " +
          "ByteArray Char CharArray DeprecationLevel DoubleArray Enum FloatArray Function Int IntArray Lazy " +
          "LazyThreadSafetyMode LongArray Nothing ShortArray Unit"
      ),
      intendSwitch: false,
      indentStatements: false,
      multiLineStrings: true,
      number: /^(?:0x[a-f\d_]+|0b[01_]+|(?:[\d_]+(\.\d+)?|\.\d+)(?:e[-+]?[\d_]+)?)(u|ll?|l|f)?/i,
      blockKeywords: words$j("catch class do else finally for if where try while enum"),
      defKeywords: words$j("class val var object interface fun"),
      atoms: words$j("true false null this"),
      hooks: {
        "@": function(stream) {
          stream.eatWhile(/[\w\$_]/);
          return "meta";
        },
        '*': function(_stream, state) {
          return state.prevToken == '.' ? 'variable' : 'operator';
        },
        '"': function(stream, state) {
          state.tokenize = tokenKotlinString(stream.match('""'));
          return state.tokenize(stream, state);
        },
        "/": function(stream, state) {
          if (!stream.eat("*")) return false;
          state.tokenize = tokenNestedComment$1(1);
          return state.tokenize(stream, state)
        },
        indent: function(state, ctx, textAfter, indentUnit) {
          var firstChar = textAfter && textAfter.charAt(0);
          if ((state.prevToken == "}" || state.prevToken == ")") && textAfter == "")
            return state.indented;
          if ((state.prevToken == "operator" && textAfter != "}" && state.context.type != "}") ||
              state.prevToken == "variable" && firstChar == "." ||
              (state.prevToken == "}" || state.prevToken == ")") && firstChar == ".")
            return indentUnit * 2 + ctx.indented;
          if (ctx.align && ctx.type == "}")
            return ctx.indented + (state.context.type == (textAfter || "").charAt(0) ? 0 : indentUnit);
        }
      },
      languageData: {
        closeBrackets: {brackets: ["(", "[", "{", "'", '"', '"""']}
      }
    });

    const shader = clike({
      keywords: words$j("sampler1D sampler2D sampler3D samplerCube " +
                      "sampler1DShadow sampler2DShadow " +
                      "const attribute uniform varying " +
                      "break continue discard return " +
                      "for while do if else struct " +
                      "in out inout"),
      types: words$j("float int bool void " +
                   "vec2 vec3 vec4 ivec2 ivec3 ivec4 bvec2 bvec3 bvec4 " +
                   "mat2 mat3 mat4"),
      blockKeywords: words$j("for while do if else struct"),
      builtin: words$j("radians degrees sin cos tan asin acos atan " +
                     "pow exp log exp2 sqrt inversesqrt " +
                     "abs sign floor ceil fract mod min max clamp mix step smoothstep " +
                     "length distance dot cross normalize ftransform faceforward " +
                     "reflect refract matrixCompMult " +
                     "lessThan lessThanEqual greaterThan greaterThanEqual " +
                     "equal notEqual any all not " +
                     "texture1D texture1DProj texture1DLod texture1DProjLod " +
                     "texture2D texture2DProj texture2DLod texture2DProjLod " +
                     "texture3D texture3DProj texture3DLod texture3DProjLod " +
                     "textureCube textureCubeLod " +
                     "shadow1D shadow2D shadow1DProj shadow2DProj " +
                     "shadow1DLod shadow2DLod shadow1DProjLod shadow2DProjLod " +
                     "dFdx dFdy fwidth " +
                     "noise1 noise2 noise3 noise4"),
      atoms: words$j("true false " +
                   "gl_FragColor gl_SecondaryColor gl_Normal gl_Vertex " +
                   "gl_MultiTexCoord0 gl_MultiTexCoord1 gl_MultiTexCoord2 gl_MultiTexCoord3 " +
                   "gl_MultiTexCoord4 gl_MultiTexCoord5 gl_MultiTexCoord6 gl_MultiTexCoord7 " +
                   "gl_FogCoord gl_PointCoord " +
                   "gl_Position gl_PointSize gl_ClipVertex " +
                   "gl_FrontColor gl_BackColor gl_FrontSecondaryColor gl_BackSecondaryColor " +
                   "gl_TexCoord gl_FogFragCoord " +
                   "gl_FragCoord gl_FrontFacing " +
                   "gl_FragData gl_FragDepth " +
                   "gl_ModelViewMatrix gl_ProjectionMatrix gl_ModelViewProjectionMatrix " +
                   "gl_TextureMatrix gl_NormalMatrix gl_ModelViewMatrixInverse " +
                   "gl_ProjectionMatrixInverse gl_ModelViewProjectionMatrixInverse " +
                   "gl_TextureMatrixTranspose gl_ModelViewMatrixInverseTranspose " +
                   "gl_ProjectionMatrixInverseTranspose " +
                   "gl_ModelViewProjectionMatrixInverseTranspose " +
                   "gl_TextureMatrixInverseTranspose " +
                   "gl_NormalScale gl_DepthRange gl_ClipPlane " +
                   "gl_Point gl_FrontMaterial gl_BackMaterial gl_LightSource gl_LightModel " +
                   "gl_FrontLightModelProduct gl_BackLightModelProduct " +
                   "gl_TextureColor gl_EyePlaneS gl_EyePlaneT gl_EyePlaneR gl_EyePlaneQ " +
                   "gl_FogParameters " +
                   "gl_MaxLights gl_MaxClipPlanes gl_MaxTextureUnits gl_MaxTextureCoords " +
                   "gl_MaxVertexAttribs gl_MaxVertexUniformComponents gl_MaxVaryingFloats " +
                   "gl_MaxVertexTextureImageUnits gl_MaxTextureImageUnits " +
                   "gl_MaxFragmentUniformComponents gl_MaxCombineTextureImageUnits " +
                   "gl_MaxDrawBuffers"),
      indentSwitch: false,
      hooks: {"#": cppHook}
    });

    const nesC = clike({
      keywords: words$j(cKeywords + " as atomic async call command component components configuration event generic " +
                      "implementation includes interface module new norace nx_struct nx_union post provides " +
                      "signal task uses abstract extends"),
      types: cTypes,
      blockKeywords: words$j(cBlockKeywords),
      atoms: words$j("null true false"),
      hooks: {"#": cppHook}
    });

    const objectiveC = clike({
      keywords: words$j(cKeywords + " " + objCKeywords),
      types: objCTypes,
      builtin: words$j(objCBuiltins),
      blockKeywords: words$j(cBlockKeywords + " @synthesize @try @catch @finally @autoreleasepool @synchronized"),
      defKeywords: words$j(cDefKeywords + " @interface @implementation @protocol @class"),
      dontIndentStatements: /^@.*$/,
      typeFirstDefinitions: true,
      atoms: words$j("YES NO NULL Nil nil true false nullptr"),
      isReservedIdentifier: cIsReservedIdentifier,
      hooks: {
        "#": cppHook,
        "*": pointerHook,
      }
    });

    const objectiveCpp = clike({
      keywords: words$j(cKeywords + " " + objCKeywords + " " + cppKeywords),
      types: objCTypes,
      builtin: words$j(objCBuiltins),
      blockKeywords: words$j(cBlockKeywords + " @synthesize @try @catch @finally @autoreleasepool @synchronized class try catch"),
      defKeywords: words$j(cDefKeywords + " @interface @implementation @protocol @class class namespace"),
      dontIndentStatements: /^@.*$|^template$/,
      typeFirstDefinitions: true,
      atoms: words$j("YES NO NULL Nil nil true false nullptr"),
      isReservedIdentifier: cIsReservedIdentifier,
      hooks: {
        "#": cppHook,
        "*": pointerHook,
        "u": cpp11StringHook,
        "U": cpp11StringHook,
        "L": cpp11StringHook,
        "R": cpp11StringHook,
        "0": cpp14Literal,
        "1": cpp14Literal,
        "2": cpp14Literal,
        "3": cpp14Literal,
        "4": cpp14Literal,
        "5": cpp14Literal,
        "6": cpp14Literal,
        "7": cpp14Literal,
        "8": cpp14Literal,
        "9": cpp14Literal,
        token: function(stream, state, style) {
          if (style == "variable" && stream.peek() == "(" &&
              (state.prevToken == ";" || state.prevToken == null ||
               state.prevToken == "}") &&
              cppLooksLikeConstructor(stream.current()))
            return "def";
        }
      },
      namespaceSeparator: "::"
    });

    const squirrel = clike({
      keywords: words$j("base break clone continue const default delete enum extends function in class" +
                      " foreach local resume return this throw typeof yield constructor instanceof static"),
      types: cTypes,
      blockKeywords: words$j("case catch class else for foreach if switch try while"),
      defKeywords: words$j("function local class"),
      typeFirstDefinitions: true,
      atoms: words$j("true false null"),
      hooks: {"#": cppHook}
    });

    // Ceylon Strings need to deal with interpolation
    var stringTokenizer = null;
    function tokenCeylonString(type) {
      return function(stream, state) {
        var escaped = false, next, end = false;
        while (!stream.eol()) {
          if (!escaped && stream.match('"') &&
              (type == "single" || stream.match('""'))) {
            end = true;
            break;
          }
          if (!escaped && stream.match('``')) {
            stringTokenizer = tokenCeylonString(type);
            end = true;
            break;
          }
          next = stream.next();
          escaped = type == "single" && !escaped && next == "\\";
        }
        if (end)
          state.tokenize = null;
        return "string";
      }
    }

    const ceylon = clike({
      keywords: words$j("abstracts alias assembly assert assign break case catch class continue dynamic else" +
                      " exists extends finally for function given if import in interface is let module new" +
                      " nonempty object of out outer package return satisfies super switch then this throw" +
                      " try value void while"),
      types: function(word) {
        // In Ceylon all identifiers that start with an uppercase are types
        var first = word.charAt(0);
        return (first === first.toUpperCase() && first !== first.toLowerCase());
      },
      blockKeywords: words$j("case catch class dynamic else finally for function if interface module new object switch try while"),
      defKeywords: words$j("class dynamic function interface module object package value"),
      builtin: words$j("abstract actual aliased annotation by default deprecated doc final formal late license" +
                     " native optional sealed see serializable shared suppressWarnings tagged throws variable"),
      isPunctuationChar: /[\[\]{}\(\),;\:\.`]/,
      isOperatorChar: /[+\-*&%=<>!?|^~:\/]/,
      numberStart: /[\d#$]/,
      number: /^(?:#[\da-fA-F_]+|\$[01_]+|[\d_]+[kMGTPmunpf]?|[\d_]+\.[\d_]+(?:[eE][-+]?\d+|[kMGTPmunpf]|)|)/i,
      multiLineStrings: true,
      typeFirstDefinitions: true,
      atoms: words$j("true false null larger smaller equal empty finished"),
      indentSwitch: false,
      styleDefs: false,
      hooks: {
        "@": function(stream) {
          stream.eatWhile(/[\w\$_]/);
          return "meta";
        },
        '"': function(stream, state) {
          state.tokenize = tokenCeylonString(stream.match('""') ? "triple" : "single");
          return state.tokenize(stream, state);
        },
        '`': function(stream, state) {
          if (!stringTokenizer || !stream.match('`')) return false;
          state.tokenize = stringTokenizer;
          stringTokenizer = null;
          return state.tokenize(stream, state);
        },
        "'": function(stream) {
          stream.eatWhile(/[\w\$_\xa1-\uffff]/);
          return "atom";
        },
        token: function(_stream, state, style) {
          if ((style == "variable" || style == "type") &&
              state.prevToken == ".") {
            return "variableName.special";
          }
        }
      },
      languageData: {
        closeBrackets: {brackets: ["(", "[", "{", "'", '"', '"""']}
      }
    });

    function pushInterpolationStack(state) {
      (state.interpolationStack || (state.interpolationStack = [])).push(state.tokenize);
    }

    function popInterpolationStack(state) {
      return (state.interpolationStack || (state.interpolationStack = [])).pop();
    }

    function sizeInterpolationStack(state) {
      return state.interpolationStack ? state.interpolationStack.length : 0;
    }

    function tokenDartString(quote, stream, state, raw) {
      var tripleQuoted = false;
      if (stream.eat(quote)) {
        if (stream.eat(quote)) tripleQuoted = true;
        else return "string"; //empty string
      }
      function tokenStringHelper(stream, state) {
        var escaped = false;
        while (!stream.eol()) {
          if (!raw && !escaped && stream.peek() == "$") {
            pushInterpolationStack(state);
            state.tokenize = tokenInterpolation$1;
            return "string";
          }
          var next = stream.next();
          if (next == quote && !escaped && (!tripleQuoted || stream.match(quote + quote))) {
            state.tokenize = null;
            break;
          }
          escaped = !raw && !escaped && next == "\\";
        }
        return "string";
      }
      state.tokenize = tokenStringHelper;
      return tokenStringHelper(stream, state);
    }

    function tokenInterpolation$1(stream, state) {
      stream.eat("$");
      if (stream.eat("{")) {
        // let clike handle the content of ${...},
        // we take over again when "}" appears (see hooks).
        state.tokenize = null;
      } else {
        state.tokenize = tokenInterpolationIdentifier;
      }
      return null;
    }

    function tokenInterpolationIdentifier(stream, state) {
      stream.eatWhile(/[\w_]/);
      state.tokenize = popInterpolationStack(state);
      return "variable";
    }

    const dart = clike({
      keywords: words$j("this super static final const abstract class extends external factory " +
                      "implements mixin get native set typedef with enum throw rethrow " +
                      "assert break case continue default in return new deferred async await covariant " +
                      "try catch finally do else for if switch while import library export " +
                      "part of show hide is as extension on yield late required"),
      blockKeywords: words$j("try catch finally do else for if switch while"),
      builtin: words$j("void bool num int double dynamic var String Null Never"),
      atoms: words$j("true false null"),
      hooks: {
        "@": function(stream) {
          stream.eatWhile(/[\w\$_\.]/);
          return "meta";
        },

        // custom string handling to deal with triple-quoted strings and string interpolation
        "'": function(stream, state) {
          return tokenDartString("'", stream, state, false);
        },
        "\"": function(stream, state) {
          return tokenDartString("\"", stream, state, false);
        },
        "r": function(stream, state) {
          var peek = stream.peek();
          if (peek == "'" || peek == "\"") {
            return tokenDartString(stream.next(), stream, state, true);
          }
          return false;
        },

        "}": function(_stream, state) {
          // "}" is end of interpolation, if interpolation stack is non-empty
          if (sizeInterpolationStack(state) > 0) {
            state.tokenize = popInterpolationStack(state);
            return null;
          }
          return false;
        },

        "/": function(stream, state) {
          if (!stream.eat("*")) return false
          state.tokenize = tokenNestedComment$1(1);
          return state.tokenize(stream, state)
        },
        token: function(stream, _, style) {
          if (style == "variable") {
            // Assume uppercase symbols are classes
            var isUpper = RegExp('^[_$]*[A-Z][a-zA-Z0-9_$]*$','g');
            if (isUpper.test(stream.current())) {
              return 'type';
            }
          }
        }
      }
    });

    var clike$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        clike: clike,
        c: c,
        cpp: cpp,
        java: java,
        csharp: csharp,
        scala: scala,
        kotlin: kotlin,
        shader: shader,
        nesC: nesC,
        objectiveC: objectiveC,
        objectiveCpp: objectiveCpp,
        squirrel: squirrel,
        ceylon: ceylon,
        dart: dart
    });

    var atoms$d = ["false", "nil", "true"];
    var specialForms = [".", "catch", "def", "do", "if", "monitor-enter",
                        "monitor-exit", "new", "quote", "recur", "set!", "throw", "try", "var"];
    var coreSymbols = ["*", "*'", "*1", "*2", "*3", "*agent*",
                       "*allow-unresolved-vars*", "*assert*", "*clojure-version*",
                       "*command-line-args*", "*compile-files*", "*compile-path*",
                       "*compiler-options*", "*data-readers*", "*default-data-reader-fn*", "*e",
                       "*err*", "*file*", "*flush-on-newline*", "*fn-loader*", "*in*",
                       "*math-context*", "*ns*", "*out*", "*print-dup*", "*print-length*",
                       "*print-level*", "*print-meta*", "*print-namespace-maps*",
                       "*print-readably*", "*read-eval*", "*reader-resolver*", "*source-path*",
                       "*suppress-read*", "*unchecked-math*", "*use-context-classloader*",
                       "*verbose-defrecords*", "*warn-on-reflection*", "+", "+'", "-", "-'",
                       "->", "->>", "->ArrayChunk", "->Eduction", "->Vec", "->VecNode",
                       "->VecSeq", "-cache-protocol-fn", "-reset-methods", "..", "/", "<", "<=",
                       "=", "==", ">", ">=", "EMPTY-NODE", "Inst", "StackTraceElement->vec",
                       "Throwable->map", "accessor", "aclone", "add-classpath", "add-watch",
                       "agent", "agent-error", "agent-errors", "aget", "alength", "alias",
                       "all-ns", "alter", "alter-meta!", "alter-var-root", "amap", "ancestors",
                       "and", "any?", "apply", "areduce", "array-map", "as->", "aset",
                       "aset-boolean", "aset-byte", "aset-char", "aset-double", "aset-float",
                       "aset-int", "aset-long", "aset-short", "assert", "assoc", "assoc!",
                       "assoc-in", "associative?", "atom", "await", "await-for", "await1",
                       "bases", "bean", "bigdec", "bigint", "biginteger", "binding", "bit-and",
                       "bit-and-not", "bit-clear", "bit-flip", "bit-not", "bit-or", "bit-set",
                       "bit-shift-left", "bit-shift-right", "bit-test", "bit-xor", "boolean",
                       "boolean-array", "boolean?", "booleans", "bound-fn", "bound-fn*",
                       "bound?", "bounded-count", "butlast", "byte", "byte-array", "bytes",
                       "bytes?", "case", "cast", "cat", "char", "char-array",
                       "char-escape-string", "char-name-string", "char?", "chars", "chunk",
                       "chunk-append", "chunk-buffer", "chunk-cons", "chunk-first", "chunk-next",
                       "chunk-rest", "chunked-seq?", "class", "class?", "clear-agent-errors",
                       "clojure-version", "coll?", "comment", "commute", "comp", "comparator",
                       "compare", "compare-and-set!", "compile", "complement", "completing",
                       "concat", "cond", "cond->", "cond->>", "condp", "conj", "conj!", "cons",
                       "constantly", "construct-proxy", "contains?", "count", "counted?",
                       "create-ns", "create-struct", "cycle", "dec", "dec'", "decimal?",
                       "declare", "dedupe", "default-data-readers", "definline", "definterface",
                       "defmacro", "defmethod", "defmulti", "defn", "defn-", "defonce",
                       "defprotocol", "defrecord", "defstruct", "deftype", "delay", "delay?",
                       "deliver", "denominator", "deref", "derive", "descendants", "destructure",
                       "disj", "disj!", "dissoc", "dissoc!", "distinct", "distinct?", "doall",
                       "dorun", "doseq", "dosync", "dotimes", "doto", "double", "double-array",
                       "double?", "doubles", "drop", "drop-last", "drop-while", "eduction",
                       "empty", "empty?", "ensure", "ensure-reduced", "enumeration-seq",
                       "error-handler", "error-mode", "eval", "even?", "every-pred", "every?",
                       "ex-data", "ex-info", "extend", "extend-protocol", "extend-type",
                       "extenders", "extends?", "false?", "ffirst", "file-seq", "filter",
                       "filterv", "find", "find-keyword", "find-ns", "find-protocol-impl",
                       "find-protocol-method", "find-var", "first", "flatten", "float",
                       "float-array", "float?", "floats", "flush", "fn", "fn?", "fnext", "fnil",
                       "for", "force", "format", "frequencies", "future", "future-call",
                       "future-cancel", "future-cancelled?", "future-done?", "future?",
                       "gen-class", "gen-interface", "gensym", "get", "get-in", "get-method",
                       "get-proxy-class", "get-thread-bindings", "get-validator", "group-by",
                       "halt-when", "hash", "hash-combine", "hash-map", "hash-ordered-coll",
                       "hash-set", "hash-unordered-coll", "ident?", "identical?", "identity",
                       "if-let", "if-not", "if-some", "ifn?", "import", "in-ns", "inc", "inc'",
                       "indexed?", "init-proxy", "inst-ms", "inst-ms*", "inst?", "instance?",
                       "int", "int-array", "int?", "integer?", "interleave", "intern",
                       "interpose", "into", "into-array", "ints", "io!", "isa?", "iterate",
                       "iterator-seq", "juxt", "keep", "keep-indexed", "key", "keys", "keyword",
                       "keyword?", "last", "lazy-cat", "lazy-seq", "let", "letfn", "line-seq",
                       "list", "list*", "list?", "load", "load-file", "load-reader",
                       "load-string", "loaded-libs", "locking", "long", "long-array", "longs",
                       "loop", "macroexpand", "macroexpand-1", "make-array", "make-hierarchy",
                       "map", "map-entry?", "map-indexed", "map?", "mapcat", "mapv", "max",
                       "max-key", "memfn", "memoize", "merge", "merge-with", "meta",
                       "method-sig", "methods", "min", "min-key", "mix-collection-hash", "mod",
                       "munge", "name", "namespace", "namespace-munge", "nat-int?", "neg-int?",
                       "neg?", "newline", "next", "nfirst", "nil?", "nnext", "not", "not-any?",
                       "not-empty", "not-every?", "not=", "ns", "ns-aliases", "ns-imports",
                       "ns-interns", "ns-map", "ns-name", "ns-publics", "ns-refers",
                       "ns-resolve", "ns-unalias", "ns-unmap", "nth", "nthnext", "nthrest",
                       "num", "number?", "numerator", "object-array", "odd?", "or", "parents",
                       "partial", "partition", "partition-all", "partition-by", "pcalls", "peek",
                       "persistent!", "pmap", "pop", "pop!", "pop-thread-bindings", "pos-int?",
                       "pos?", "pr", "pr-str", "prefer-method", "prefers",
                       "primitives-classnames", "print", "print-ctor", "print-dup",
                       "print-method", "print-simple", "print-str", "printf", "println",
                       "println-str", "prn", "prn-str", "promise", "proxy",
                       "proxy-call-with-super", "proxy-mappings", "proxy-name", "proxy-super",
                       "push-thread-bindings", "pvalues", "qualified-ident?",
                       "qualified-keyword?", "qualified-symbol?", "quot", "rand", "rand-int",
                       "rand-nth", "random-sample", "range", "ratio?", "rational?",
                       "rationalize", "re-find", "re-groups", "re-matcher", "re-matches",
                       "re-pattern", "re-seq", "read", "read-line", "read-string",
                       "reader-conditional", "reader-conditional?", "realized?", "record?",
                       "reduce", "reduce-kv", "reduced", "reduced?", "reductions", "ref",
                       "ref-history-count", "ref-max-history", "ref-min-history", "ref-set",
                       "refer", "refer-clojure", "reify", "release-pending-sends", "rem",
                       "remove", "remove-all-methods", "remove-method", "remove-ns",
                       "remove-watch", "repeat", "repeatedly", "replace", "replicate", "require",
                       "reset!", "reset-meta!", "reset-vals!", "resolve", "rest",
                       "restart-agent", "resultset-seq", "reverse", "reversible?", "rseq",
                       "rsubseq", "run!", "satisfies?", "second", "select-keys", "send",
                       "send-off", "send-via", "seq", "seq?", "seqable?", "seque", "sequence",
                       "sequential?", "set", "set-agent-send-executor!",
                       "set-agent-send-off-executor!", "set-error-handler!", "set-error-mode!",
                       "set-validator!", "set?", "short", "short-array", "shorts", "shuffle",
                       "shutdown-agents", "simple-ident?", "simple-keyword?", "simple-symbol?",
                       "slurp", "some", "some->", "some->>", "some-fn", "some?", "sort",
                       "sort-by", "sorted-map", "sorted-map-by", "sorted-set", "sorted-set-by",
                       "sorted?", "special-symbol?", "spit", "split-at", "split-with", "str",
                       "string?", "struct", "struct-map", "subs", "subseq", "subvec", "supers",
                       "swap!", "swap-vals!", "symbol", "symbol?", "sync", "tagged-literal",
                       "tagged-literal?", "take", "take-last", "take-nth", "take-while", "test",
                       "the-ns", "thread-bound?", "time", "to-array", "to-array-2d",
                       "trampoline", "transduce", "transient", "tree-seq", "true?", "type",
                       "unchecked-add", "unchecked-add-int", "unchecked-byte", "unchecked-char",
                       "unchecked-dec", "unchecked-dec-int", "unchecked-divide-int",
                       "unchecked-double", "unchecked-float", "unchecked-inc",
                       "unchecked-inc-int", "unchecked-int", "unchecked-long",
                       "unchecked-multiply", "unchecked-multiply-int", "unchecked-negate",
                       "unchecked-negate-int", "unchecked-remainder-int", "unchecked-short",
                       "unchecked-subtract", "unchecked-subtract-int", "underive", "unquote",
                       "unquote-splicing", "unreduced", "unsigned-bit-shift-right", "update",
                       "update-in", "update-proxy", "uri?", "use", "uuid?", "val", "vals",
                       "var-get", "var-set", "var?", "vary-meta", "vec", "vector", "vector-of",
                       "vector?", "volatile!", "volatile?", "vreset!", "vswap!", "when",
                       "when-first", "when-let", "when-not", "when-some", "while",
                       "with-bindings", "with-bindings*", "with-in-str", "with-loading-context",
                       "with-local-vars", "with-meta", "with-open", "with-out-str",
                       "with-precision", "with-redefs", "with-redefs-fn", "xml-seq", "zero?",
                       "zipmap"];
    var haveBodyParameter = [
      "->", "->>", "as->", "binding", "bound-fn", "case", "catch", "comment",
      "cond", "cond->", "cond->>", "condp", "def", "definterface", "defmethod",
      "defn", "defmacro", "defprotocol", "defrecord", "defstruct", "deftype",
      "do", "doseq", "dotimes", "doto", "extend", "extend-protocol",
      "extend-type", "fn", "for", "future", "if", "if-let", "if-not", "if-some",
      "let", "letfn", "locking", "loop", "ns", "proxy", "reify", "struct-map",
      "some->", "some->>", "try", "when", "when-first", "when-let", "when-not",
      "when-some", "while", "with-bindings", "with-bindings*", "with-in-str",
      "with-loading-context", "with-local-vars", "with-meta", "with-open",
      "with-out-str", "with-precision", "with-redefs", "with-redefs-fn"];

    var atom$2 = createLookupMap(atoms$d);
    var specialForm$1 = createLookupMap(specialForms);
    var coreSymbol = createLookupMap(coreSymbols);
    var hasBodyParameter = createLookupMap(haveBodyParameter);
    var delimiter = /^(?:[\\\[\]\s"(),;@^`{}~]|$)/;
    var numberLiteral = /^(?:[+\-]?\d+(?:(?:N|(?:[eE][+\-]?\d+))|(?:\.?\d*(?:M|(?:[eE][+\-]?\d+))?)|\/\d+|[xX][0-9a-fA-F]+|r[0-9a-zA-Z]+)?(?=[\\\[\]\s"#'(),;@^`{}~]|$))/;
    var characterLiteral = /^(?:\\(?:backspace|formfeed|newline|return|space|tab|o[0-7]{3}|u[0-9A-Fa-f]{4}|x[0-9A-Fa-f]{4}|.)?(?=[\\\[\]\s"(),;@^`{}~]|$))/;

    // simple-namespace := /^[^\\\/\[\]\d\s"#'(),;@^`{}~.][^\\\[\]\s"(),;@^`{}~.\/]*/
    // simple-symbol    := /^(?:\/|[^\\\/\[\]\d\s"#'(),;@^`{}~][^\\\[\]\s"(),;@^`{}~]*)/
    // qualified-symbol := (<simple-namespace>(<.><simple-namespace>)*</>)?<simple-symbol>
    var qualifiedSymbol = /^(?:(?:[^\\\/\[\]\d\s"#'(),;@^`{}~.][^\\\[\]\s"(),;@^`{}~.\/]*(?:\.[^\\\/\[\]\d\s"#'(),;@^`{}~.][^\\\[\]\s"(),;@^`{}~.\/]*)*\/)?(?:\/|[^\\\/\[\]\d\s"#'(),;@^`{}~][^\\\[\]\s"(),;@^`{}~]*)*(?=[\\\[\]\s"(),;@^`{}~]|$))/;

    function base$1(stream, state) {
      if (stream.eatSpace() || stream.eat(",")) return ["space", null];
      if (stream.match(numberLiteral)) return [null, "number"];
      if (stream.match(characterLiteral)) return [null, "string.special"];
      if (stream.eat(/^"/)) return (state.tokenize = inString$1)(stream, state);
      if (stream.eat(/^[(\[{]/)) return ["open", "bracket"];
      if (stream.eat(/^[)\]}]/)) return ["close", "bracket"];
      if (stream.eat(/^;/)) {stream.skipToEnd(); return ["space", "comment"];}
      if (stream.eat(/^[#'@^`~]/)) return [null, "meta"];

      var matches = stream.match(qualifiedSymbol);
      var symbol = matches && matches[0];

      if (!symbol) {
        // advance stream by at least one character so we don't get stuck.
        stream.next();
        stream.eatWhile(function (c) {return !is(c, delimiter);});
        return [null, "error"];
      }

      if (symbol === "comment" && state.lastToken === "(")
        return (state.tokenize = inComment$1)(stream, state);
      if (is(symbol, atom$2) || symbol.charAt(0) === ":") return ["symbol", "atom"];
      if (is(symbol, specialForm$1) || is(symbol, coreSymbol)) return ["symbol", "keyword"];
      if (state.lastToken === "(") return ["symbol", "builtin"]; // other operator

      return ["symbol", "variable"];
    }

    function inString$1(stream, state) {
      var escaped = false, next;

      while (next = stream.next()) {
        if (next === "\"" && !escaped) {state.tokenize = base$1; break;}
        escaped = !escaped && next === "\\";
      }

      return [null, "string"];
    }

    function inComment$1(stream, state) {
      var parenthesisCount = 1;
      var next;

      while (next = stream.next()) {
        if (next === ")") parenthesisCount--;
        if (next === "(") parenthesisCount++;
        if (parenthesisCount === 0) {
          stream.backUp(1);
          state.tokenize = base$1;
          break;
        }
      }

      return ["space", "comment"];
    }

    function createLookupMap(words) {
      var obj = {};

      for (var i = 0; i < words.length; ++i) obj[words[i]] = true;

      return obj;
    }

    function is(value, test) {
      if (test instanceof RegExp) return test.test(value);
      if (test instanceof Object) return test.propertyIsEnumerable(value);
    }

    const clojure = {
      startState: function () {
        return {
          ctx: {prev: null, start: 0, indentTo: 0},
          lastToken: null,
          tokenize: base$1
        };
      },

      token: function (stream, state) {
        if (stream.sol() && (typeof state.ctx.indentTo !== "number"))
          state.ctx.indentTo = state.ctx.start + 1;

        var typeStylePair = state.tokenize(stream, state);
        var type = typeStylePair[0];
        var style = typeStylePair[1];
        var current = stream.current();

        if (type !== "space") {
          if (state.lastToken === "(" && state.ctx.indentTo === null) {
            if (type === "symbol" && is(current, hasBodyParameter))
              state.ctx.indentTo = state.ctx.start + stream.indentUnit;
            else state.ctx.indentTo = "next";
          } else if (state.ctx.indentTo === "next") {
            state.ctx.indentTo = stream.column();
          }

          state.lastToken = current;
        }

        if (type === "open")
          state.ctx = {prev: state.ctx, start: stream.column(), indentTo: null};
        else if (type === "close") state.ctx = state.ctx.prev || state.ctx;

        return style;
      },

      indent: function (state) {
        var i = state.ctx.indentTo;

        return (typeof i === "number") ?
          i :
          state.ctx.start + 1;
      },

      languageData: {
        closeBrackets: {brackets: ["(", "[", "{", '"']},
        commentTokens: {line: ";;"},
        autocomplete: [].concat(atoms$d, specialForms, coreSymbols)
      }
    };

    var clojure$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        clojure: clojure
    });

    function mkCSS(parserConfig) {
      parserConfig = {...defaults, ...parserConfig};
      var inline = parserConfig.inline;

      var tokenHooks = parserConfig.tokenHooks,
          documentTypes = parserConfig.documentTypes || {},
          mediaTypes = parserConfig.mediaTypes || {},
          mediaFeatures = parserConfig.mediaFeatures || {},
          mediaValueKeywords = parserConfig.mediaValueKeywords || {},
          propertyKeywords = parserConfig.propertyKeywords || {},
          nonStandardPropertyKeywords = parserConfig.nonStandardPropertyKeywords || {},
          fontProperties = parserConfig.fontProperties || {},
          counterDescriptors = parserConfig.counterDescriptors || {},
          colorKeywords = parserConfig.colorKeywords || {},
          valueKeywords = parserConfig.valueKeywords || {},
          allowNested = parserConfig.allowNested,
          lineComment = parserConfig.lineComment,
          supportsAtComponent = parserConfig.supportsAtComponent === true,
          highlightNonStandardPropertyKeywords = parserConfig.highlightNonStandardPropertyKeywords !== false;

      var type, override;
      function ret(style, tp) { type = tp; return style; }

      // Tokenizers

      function tokenBase(stream, state) {
        var ch = stream.next();
        if (tokenHooks[ch]) {
          var result = tokenHooks[ch](stream, state);
          if (result !== false) return result;
        }
        if (ch == "@") {
          stream.eatWhile(/[\w\\\-]/);
          return ret("def", stream.current());
        } else if (ch == "=" || (ch == "~" || ch == "|") && stream.eat("=")) {
          return ret(null, "compare");
        } else if (ch == "\"" || ch == "'") {
          state.tokenize = tokenString(ch);
          return state.tokenize(stream, state);
        } else if (ch == "#") {
          stream.eatWhile(/[\w\\\-]/);
          return ret("atom", "hash");
        } else if (ch == "!") {
          stream.match(/^\s*\w*/);
          return ret("keyword", "important");
        } else if (/\d/.test(ch) || ch == "." && stream.eat(/\d/)) {
          stream.eatWhile(/[\w.%]/);
          return ret("number", "unit");
        } else if (ch === "-") {
          if (/[\d.]/.test(stream.peek())) {
            stream.eatWhile(/[\w.%]/);
            return ret("number", "unit");
          } else if (stream.match(/^-[\w\\\-]*/)) {
            stream.eatWhile(/[\w\\\-]/);
            if (stream.match(/^\s*:/, false))
              return ret("def", "variable-definition");
            return ret("variableName", "variable");
          } else if (stream.match(/^\w+-/)) {
            return ret("meta", "meta");
          }
        } else if (/[,+>*\/]/.test(ch)) {
          return ret(null, "select-op");
        } else if (ch == "." && stream.match(/^-?[_a-z][_a-z0-9-]*/i)) {
          return ret("qualifier", "qualifier");
        } else if (/[:;{}\[\]\(\)]/.test(ch)) {
          return ret(null, ch);
        } else if (stream.match(/^[\w-.]+(?=\()/)) {
          if (/^(url(-prefix)?|domain|regexp)$/i.test(stream.current())) {
            state.tokenize = tokenParenthesized;
          }
          return ret("variableName.function", "variable");
        } else if (/[\w\\\-]/.test(ch)) {
          stream.eatWhile(/[\w\\\-]/);
          return ret("property", "word");
        } else {
          return ret(null, null);
        }
      }

      function tokenString(quote) {
        return function(stream, state) {
          var escaped = false, ch;
          while ((ch = stream.next()) != null) {
            if (ch == quote && !escaped) {
              if (quote == ")") stream.backUp(1);
              break;
            }
            escaped = !escaped && ch == "\\";
          }
          if (ch == quote || !escaped && quote != ")") state.tokenize = null;
          return ret("string", "string");
        };
      }

      function tokenParenthesized(stream, state) {
        stream.next(); // Must be '('
        if (!stream.match(/^\s*[\"\')]/, false))
          state.tokenize = tokenString(")");
        else
          state.tokenize = null;
        return ret(null, "(");
      }

      // Context management

      function Context(type, indent, prev) {
        this.type = type;
        this.indent = indent;
        this.prev = prev;
      }

      function pushContext(state, stream, type, indent) {
        state.context = new Context(type, stream.indentation() + (indent === false ? 0 : stream.indentUnit), state.context);
        return type;
      }

      function popContext(state) {
        if (state.context.prev)
          state.context = state.context.prev;
        return state.context.type;
      }

      function pass(type, stream, state) {
        return states[state.context.type](type, stream, state);
      }
      function popAndPass(type, stream, state, n) {
        for (var i = n || 1; i > 0; i--)
          state.context = state.context.prev;
        return pass(type, stream, state);
      }

      // Parser

      function wordAsValue(stream) {
        var word = stream.current().toLowerCase();
        if (valueKeywords.hasOwnProperty(word))
          override = "atom";
        else if (colorKeywords.hasOwnProperty(word))
          override = "keyword";
        else
          override = "variable";
      }

      var states = {};

      states.top = function(type, stream, state) {
        if (type == "{") {
          return pushContext(state, stream, "block");
        } else if (type == "}" && state.context.prev) {
          return popContext(state);
        } else if (supportsAtComponent && /@component/i.test(type)) {
          return pushContext(state, stream, "atComponentBlock");
        } else if (/^@(-moz-)?document$/i.test(type)) {
          return pushContext(state, stream, "documentTypes");
        } else if (/^@(media|supports|(-moz-)?document|import)$/i.test(type)) {
          return pushContext(state, stream, "atBlock");
        } else if (/^@(font-face|counter-style)/i.test(type)) {
          state.stateArg = type;
          return "restricted_atBlock_before";
        } else if (/^@(-(moz|ms|o|webkit)-)?keyframes$/i.test(type)) {
          return "keyframes";
        } else if (type && type.charAt(0) == "@") {
          return pushContext(state, stream, "at");
        } else if (type == "hash") {
          override = "builtin";
        } else if (type == "word") {
          override = "tag";
        } else if (type == "variable-definition") {
          return "maybeprop";
        } else if (type == "interpolation") {
          return pushContext(state, stream, "interpolation");
        } else if (type == ":") {
          return "pseudo";
        } else if (allowNested && type == "(") {
          return pushContext(state, stream, "parens");
        }
        return state.context.type;
      };

      states.block = function(type, stream, state) {
        if (type == "word") {
          var word = stream.current().toLowerCase();
          if (propertyKeywords.hasOwnProperty(word)) {
            override = "property";
            return "maybeprop";
          } else if (nonStandardPropertyKeywords.hasOwnProperty(word)) {
            override = highlightNonStandardPropertyKeywords ? "string.special" : "property";
            return "maybeprop";
          } else if (allowNested) {
            override = stream.match(/^\s*:(?:\s|$)/, false) ? "property" : "tag";
            return "block";
          } else {
            override = "error";
            return "maybeprop";
          }
        } else if (type == "meta") {
          return "block";
        } else if (!allowNested && (type == "hash" || type == "qualifier")) {
          override = "error";
          return "block";
        } else {
          return states.top(type, stream, state);
        }
      };

      states.maybeprop = function(type, stream, state) {
        if (type == ":") return pushContext(state, stream, "prop");
        return pass(type, stream, state);
      };

      states.prop = function(type, stream, state) {
        if (type == ";") return popContext(state);
        if (type == "{" && allowNested) return pushContext(state, stream, "propBlock");
        if (type == "}" || type == "{") return popAndPass(type, stream, state);
        if (type == "(") return pushContext(state, stream, "parens");

        if (type == "hash" && !/^#([0-9a-fA-f]{3,4}|[0-9a-fA-f]{6}|[0-9a-fA-f]{8})$/.test(stream.current())) {
          override = "error";
        } else if (type == "word") {
          wordAsValue(stream);
        } else if (type == "interpolation") {
          return pushContext(state, stream, "interpolation");
        }
        return "prop";
      };

      states.propBlock = function(type, _stream, state) {
        if (type == "}") return popContext(state);
        if (type == "word") { override = "property"; return "maybeprop"; }
        return state.context.type;
      };

      states.parens = function(type, stream, state) {
        if (type == "{" || type == "}") return popAndPass(type, stream, state);
        if (type == ")") return popContext(state);
        if (type == "(") return pushContext(state, stream, "parens");
        if (type == "interpolation") return pushContext(state, stream, "interpolation");
        if (type == "word") wordAsValue(stream);
        return "parens";
      };

      states.pseudo = function(type, stream, state) {
        if (type == "meta") return "pseudo";

        if (type == "word") {
          override = "variableName.constant";
          return state.context.type;
        }
        return pass(type, stream, state);
      };

      states.documentTypes = function(type, stream, state) {
        if (type == "word" && documentTypes.hasOwnProperty(stream.current())) {
          override = "tag";
          return state.context.type;
        } else {
          return states.atBlock(type, stream, state);
        }
      };

      states.atBlock = function(type, stream, state) {
        if (type == "(") return pushContext(state, stream, "atBlock_parens");
        if (type == "}" || type == ";") return popAndPass(type, stream, state);
        if (type == "{") return popContext(state) && pushContext(state, stream, allowNested ? "block" : "top");

        if (type == "interpolation") return pushContext(state, stream, "interpolation");

        if (type == "word") {
          var word = stream.current().toLowerCase();
          if (word == "only" || word == "not" || word == "and" || word == "or")
            override = "keyword";
          else if (mediaTypes.hasOwnProperty(word))
            override = "attribute";
          else if (mediaFeatures.hasOwnProperty(word))
            override = "property";
          else if (mediaValueKeywords.hasOwnProperty(word))
            override = "keyword";
          else if (propertyKeywords.hasOwnProperty(word))
            override = "property";
          else if (nonStandardPropertyKeywords.hasOwnProperty(word))
            override = highlightNonStandardPropertyKeywords ? "string.special" : "property";
          else if (valueKeywords.hasOwnProperty(word))
            override = "atom";
          else if (colorKeywords.hasOwnProperty(word))
            override = "keyword";
          else
            override = "error";
        }
        return state.context.type;
      };

      states.atComponentBlock = function(type, stream, state) {
        if (type == "}")
          return popAndPass(type, stream, state);
        if (type == "{")
          return popContext(state) && pushContext(state, stream, allowNested ? "block" : "top", false);
        if (type == "word")
          override = "error";
        return state.context.type;
      };

      states.atBlock_parens = function(type, stream, state) {
        if (type == ")") return popContext(state);
        if (type == "{" || type == "}") return popAndPass(type, stream, state, 2);
        return states.atBlock(type, stream, state);
      };

      states.restricted_atBlock_before = function(type, stream, state) {
        if (type == "{")
          return pushContext(state, stream, "restricted_atBlock");
        if (type == "word" && state.stateArg == "@counter-style") {
          override = "variable";
          return "restricted_atBlock_before";
        }
        return pass(type, stream, state);
      };

      states.restricted_atBlock = function(type, stream, state) {
        if (type == "}") {
          state.stateArg = null;
          return popContext(state);
        }
        if (type == "word") {
          if ((state.stateArg == "@font-face" && !fontProperties.hasOwnProperty(stream.current().toLowerCase())) ||
              (state.stateArg == "@counter-style" && !counterDescriptors.hasOwnProperty(stream.current().toLowerCase())))
            override = "error";
          else
            override = "property";
          return "maybeprop";
        }
        return "restricted_atBlock";
      };

      states.keyframes = function(type, stream, state) {
        if (type == "word") { override = "variable"; return "keyframes"; }
        if (type == "{") return pushContext(state, stream, "top");
        return pass(type, stream, state);
      };

      states.at = function(type, stream, state) {
        if (type == ";") return popContext(state);
        if (type == "{" || type == "}") return popAndPass(type, stream, state);
        if (type == "word") override = "tag";
        else if (type == "hash") override = "builtin";
        return "at";
      };

      states.interpolation = function(type, stream, state) {
        if (type == "}") return popContext(state);
        if (type == "{" || type == ";") return popAndPass(type, stream, state);
        if (type == "word") override = "variable";
        else if (type != "variable" && type != "(" && type != ")") override = "error";
        return "interpolation";
      };

      return {
        startState: function() {
          return {tokenize: null,
                  state: inline ? "block" : "top",
                  stateArg: null,
                  context: new Context(inline ? "block" : "top", 0, null)};
        },

        token: function(stream, state) {
          if (!state.tokenize && stream.eatSpace()) return null;
          var style = (state.tokenize || tokenBase)(stream, state);
          if (style && typeof style == "object") {
            type = style[1];
            style = style[0];
          }
          override = style;
          if (type != "comment")
            state.state = states[state.state](type, stream, state);
          return override;
        },

        indent: function(state, textAfter, iCx) {
          var cx = state.context, ch = textAfter && textAfter.charAt(0);
          var indent = cx.indent;
          if (cx.type == "prop" && (ch == "}" || ch == ")")) cx = cx.prev;
          if (cx.prev) {
            if (ch == "}" && (cx.type == "block" || cx.type == "top" ||
                              cx.type == "interpolation" || cx.type == "restricted_atBlock")) {
              // Resume indentation from parent context.
              cx = cx.prev;
              indent = cx.indent;
            } else if (ch == ")" && (cx.type == "parens" || cx.type == "atBlock_parens") ||
                       ch == "{" && (cx.type == "at" || cx.type == "atBlock")) {
              // Dedent relative to current context.
              indent = Math.max(0, cx.indent - iCx.unit);
            }
          }
          return indent;
        },

        languageData: {
          indentOnInput: /^\s*\}$/,
          commentTokens: {line: lineComment, block: {open: "/*", close: "*/"}},
          autocomplete: allWords
        }
      };
    }
    function keySet$1(array) {
      var keys = {};
      for (var i = 0; i < array.length; ++i) {
        keys[array[i].toLowerCase()] = true;
      }
      return keys;
    }

    var documentTypes_$1 = [
      "domain", "regexp", "url", "url-prefix"
    ], documentTypes$1 = keySet$1(documentTypes_$1);

    var mediaTypes_$1 = [
      "all", "aural", "braille", "handheld", "print", "projection", "screen",
      "tty", "tv", "embossed"
    ], mediaTypes$1 = keySet$1(mediaTypes_$1);

    var mediaFeatures_$1 = [
      "width", "min-width", "max-width", "height", "min-height", "max-height",
      "device-width", "min-device-width", "max-device-width", "device-height",
      "min-device-height", "max-device-height", "aspect-ratio",
      "min-aspect-ratio", "max-aspect-ratio", "device-aspect-ratio",
      "min-device-aspect-ratio", "max-device-aspect-ratio", "color", "min-color",
      "max-color", "color-index", "min-color-index", "max-color-index",
      "monochrome", "min-monochrome", "max-monochrome", "resolution",
      "min-resolution", "max-resolution", "scan", "grid", "orientation",
      "device-pixel-ratio", "min-device-pixel-ratio", "max-device-pixel-ratio",
      "pointer", "any-pointer", "hover", "any-hover", "prefers-color-scheme"
    ], mediaFeatures$1 = keySet$1(mediaFeatures_$1);

    var mediaValueKeywords_ = [
      "landscape", "portrait", "none", "coarse", "fine", "on-demand", "hover",
      "interlace", "progressive",
      "dark", "light"
    ], mediaValueKeywords = keySet$1(mediaValueKeywords_);

    var propertyKeywords_$1 = [
      "align-content", "align-items", "align-self", "alignment-adjust",
      "alignment-baseline", "all", "anchor-point", "animation", "animation-delay",
      "animation-direction", "animation-duration", "animation-fill-mode",
      "animation-iteration-count", "animation-name", "animation-play-state",
      "animation-timing-function", "appearance", "azimuth", "backdrop-filter",
      "backface-visibility", "background", "background-attachment",
      "background-blend-mode", "background-clip", "background-color",
      "background-image", "background-origin", "background-position",
      "background-position-x", "background-position-y", "background-repeat",
      "background-size", "baseline-shift", "binding", "bleed", "block-size",
      "bookmark-label", "bookmark-level", "bookmark-state", "bookmark-target",
      "border", "border-bottom", "border-bottom-color", "border-bottom-left-radius",
      "border-bottom-right-radius", "border-bottom-style", "border-bottom-width",
      "border-collapse", "border-color", "border-image", "border-image-outset",
      "border-image-repeat", "border-image-slice", "border-image-source",
      "border-image-width", "border-left", "border-left-color", "border-left-style",
      "border-left-width", "border-radius", "border-right", "border-right-color",
      "border-right-style", "border-right-width", "border-spacing", "border-style",
      "border-top", "border-top-color", "border-top-left-radius",
      "border-top-right-radius", "border-top-style", "border-top-width",
      "border-width", "bottom", "box-decoration-break", "box-shadow", "box-sizing",
      "break-after", "break-before", "break-inside", "caption-side", "caret-color",
      "clear", "clip", "color", "color-profile", "column-count", "column-fill",
      "column-gap", "column-rule", "column-rule-color", "column-rule-style",
      "column-rule-width", "column-span", "column-width", "columns", "contain",
      "content", "counter-increment", "counter-reset", "crop", "cue", "cue-after",
      "cue-before", "cursor", "direction", "display", "dominant-baseline",
      "drop-initial-after-adjust", "drop-initial-after-align",
      "drop-initial-before-adjust", "drop-initial-before-align", "drop-initial-size",
      "drop-initial-value", "elevation", "empty-cells", "fit", "fit-position",
      "flex", "flex-basis", "flex-direction", "flex-flow", "flex-grow",
      "flex-shrink", "flex-wrap", "float", "float-offset", "flow-from", "flow-into",
      "font", "font-family", "font-feature-settings", "font-kerning",
      "font-language-override", "font-optical-sizing", "font-size",
      "font-size-adjust", "font-stretch", "font-style", "font-synthesis",
      "font-variant", "font-variant-alternates", "font-variant-caps",
      "font-variant-east-asian", "font-variant-ligatures", "font-variant-numeric",
      "font-variant-position", "font-variation-settings", "font-weight", "gap",
      "grid", "grid-area", "grid-auto-columns", "grid-auto-flow", "grid-auto-rows",
      "grid-column", "grid-column-end", "grid-column-gap", "grid-column-start",
      "grid-gap", "grid-row", "grid-row-end", "grid-row-gap", "grid-row-start",
      "grid-template", "grid-template-areas", "grid-template-columns",
      "grid-template-rows", "hanging-punctuation", "height", "hyphens", "icon",
      "image-orientation", "image-rendering", "image-resolution", "inline-box-align",
      "inset", "inset-block", "inset-block-end", "inset-block-start", "inset-inline",
      "inset-inline-end", "inset-inline-start", "isolation", "justify-content",
      "justify-items", "justify-self", "left", "letter-spacing", "line-break",
      "line-height", "line-height-step", "line-stacking", "line-stacking-ruby",
      "line-stacking-shift", "line-stacking-strategy", "list-style",
      "list-style-image", "list-style-position", "list-style-type", "margin",
      "margin-bottom", "margin-left", "margin-right", "margin-top", "marks",
      "marquee-direction", "marquee-loop", "marquee-play-count", "marquee-speed",
      "marquee-style", "mask-clip", "mask-composite", "mask-image", "mask-mode",
      "mask-origin", "mask-position", "mask-repeat", "mask-size","mask-type",
      "max-block-size", "max-height", "max-inline-size",
      "max-width", "min-block-size", "min-height", "min-inline-size", "min-width",
      "mix-blend-mode", "move-to", "nav-down", "nav-index", "nav-left", "nav-right",
      "nav-up", "object-fit", "object-position", "offset", "offset-anchor",
      "offset-distance", "offset-path", "offset-position", "offset-rotate",
      "opacity", "order", "orphans", "outline", "outline-color", "outline-offset",
      "outline-style", "outline-width", "overflow", "overflow-style",
      "overflow-wrap", "overflow-x", "overflow-y", "padding", "padding-bottom",
      "padding-left", "padding-right", "padding-top", "page", "page-break-after",
      "page-break-before", "page-break-inside", "page-policy", "pause",
      "pause-after", "pause-before", "perspective", "perspective-origin", "pitch",
      "pitch-range", "place-content", "place-items", "place-self", "play-during",
      "position", "presentation-level", "punctuation-trim", "quotes",
      "region-break-after", "region-break-before", "region-break-inside",
      "region-fragment", "rendering-intent", "resize", "rest", "rest-after",
      "rest-before", "richness", "right", "rotate", "rotation", "rotation-point",
      "row-gap", "ruby-align", "ruby-overhang", "ruby-position", "ruby-span",
      "scale", "scroll-behavior", "scroll-margin", "scroll-margin-block",
      "scroll-margin-block-end", "scroll-margin-block-start", "scroll-margin-bottom",
      "scroll-margin-inline", "scroll-margin-inline-end",
      "scroll-margin-inline-start", "scroll-margin-left", "scroll-margin-right",
      "scroll-margin-top", "scroll-padding", "scroll-padding-block",
      "scroll-padding-block-end", "scroll-padding-block-start",
      "scroll-padding-bottom", "scroll-padding-inline", "scroll-padding-inline-end",
      "scroll-padding-inline-start", "scroll-padding-left", "scroll-padding-right",
      "scroll-padding-top", "scroll-snap-align", "scroll-snap-type",
      "shape-image-threshold", "shape-inside", "shape-margin", "shape-outside",
      "size", "speak", "speak-as", "speak-header", "speak-numeral",
      "speak-punctuation", "speech-rate", "stress", "string-set", "tab-size",
      "table-layout", "target", "target-name", "target-new", "target-position",
      "text-align", "text-align-last", "text-combine-upright", "text-decoration",
      "text-decoration-color", "text-decoration-line", "text-decoration-skip",
      "text-decoration-skip-ink", "text-decoration-style", "text-emphasis",
      "text-emphasis-color", "text-emphasis-position", "text-emphasis-style",
      "text-height", "text-indent", "text-justify", "text-orientation",
      "text-outline", "text-overflow", "text-rendering", "text-shadow",
      "text-size-adjust", "text-space-collapse", "text-transform",
      "text-underline-position", "text-wrap", "top", "touch-action", "transform", "transform-origin",
      "transform-style", "transition", "transition-delay", "transition-duration",
      "transition-property", "transition-timing-function", "translate",
      "unicode-bidi", "user-select", "vertical-align", "visibility", "voice-balance",
      "voice-duration", "voice-family", "voice-pitch", "voice-range", "voice-rate",
      "voice-stress", "voice-volume", "volume", "white-space", "widows", "width",
      "will-change", "word-break", "word-spacing", "word-wrap", "writing-mode", "z-index",
      // SVG-specific
      "clip-path", "clip-rule", "mask", "enable-background", "filter", "flood-color",
      "flood-opacity", "lighting-color", "stop-color", "stop-opacity", "pointer-events",
      "color-interpolation", "color-interpolation-filters",
      "color-rendering", "fill", "fill-opacity", "fill-rule", "image-rendering",
      "marker", "marker-end", "marker-mid", "marker-start", "paint-order", "shape-rendering", "stroke",
      "stroke-dasharray", "stroke-dashoffset", "stroke-linecap", "stroke-linejoin",
      "stroke-miterlimit", "stroke-opacity", "stroke-width", "text-rendering",
      "baseline-shift", "dominant-baseline", "glyph-orientation-horizontal",
      "glyph-orientation-vertical", "text-anchor", "writing-mode",
    ], propertyKeywords$1 = keySet$1(propertyKeywords_$1);

    var nonStandardPropertyKeywords_$1 = [
      "border-block", "border-block-color", "border-block-end",
      "border-block-end-color", "border-block-end-style", "border-block-end-width",
      "border-block-start", "border-block-start-color", "border-block-start-style",
      "border-block-start-width", "border-block-style", "border-block-width",
      "border-inline", "border-inline-color", "border-inline-end",
      "border-inline-end-color", "border-inline-end-style",
      "border-inline-end-width", "border-inline-start", "border-inline-start-color",
      "border-inline-start-style", "border-inline-start-width",
      "border-inline-style", "border-inline-width", "margin-block",
      "margin-block-end", "margin-block-start", "margin-inline", "margin-inline-end",
      "margin-inline-start", "padding-block", "padding-block-end",
      "padding-block-start", "padding-inline", "padding-inline-end",
      "padding-inline-start", "scroll-snap-stop", "scrollbar-3d-light-color",
      "scrollbar-arrow-color", "scrollbar-base-color", "scrollbar-dark-shadow-color",
      "scrollbar-face-color", "scrollbar-highlight-color", "scrollbar-shadow-color",
      "scrollbar-track-color", "searchfield-cancel-button", "searchfield-decoration",
      "searchfield-results-button", "searchfield-results-decoration", "shape-inside", "zoom"
    ], nonStandardPropertyKeywords$1 = keySet$1(nonStandardPropertyKeywords_$1);

    var fontProperties_$1 = [
      "font-display", "font-family", "src", "unicode-range", "font-variant",
      "font-feature-settings", "font-stretch", "font-weight", "font-style"
    ], fontProperties$1 = keySet$1(fontProperties_$1);

    var counterDescriptors_ = [
      "additive-symbols", "fallback", "negative", "pad", "prefix", "range",
      "speak-as", "suffix", "symbols", "system"
    ], counterDescriptors = keySet$1(counterDescriptors_);

    var colorKeywords_$1 = [
      "aliceblue", "antiquewhite", "aqua", "aquamarine", "azure", "beige",
      "bisque", "black", "blanchedalmond", "blue", "blueviolet", "brown",
      "burlywood", "cadetblue", "chartreuse", "chocolate", "coral", "cornflowerblue",
      "cornsilk", "crimson", "cyan", "darkblue", "darkcyan", "darkgoldenrod",
      "darkgray", "darkgreen", "darkkhaki", "darkmagenta", "darkolivegreen",
      "darkorange", "darkorchid", "darkred", "darksalmon", "darkseagreen",
      "darkslateblue", "darkslategray", "darkturquoise", "darkviolet",
      "deeppink", "deepskyblue", "dimgray", "dodgerblue", "firebrick",
      "floralwhite", "forestgreen", "fuchsia", "gainsboro", "ghostwhite",
      "gold", "goldenrod", "gray", "grey", "green", "greenyellow", "honeydew",
      "hotpink", "indianred", "indigo", "ivory", "khaki", "lavender",
      "lavenderblush", "lawngreen", "lemonchiffon", "lightblue", "lightcoral",
      "lightcyan", "lightgoldenrodyellow", "lightgray", "lightgreen", "lightpink",
      "lightsalmon", "lightseagreen", "lightskyblue", "lightslategray",
      "lightsteelblue", "lightyellow", "lime", "limegreen", "linen", "magenta",
      "maroon", "mediumaquamarine", "mediumblue", "mediumorchid", "mediumpurple",
      "mediumseagreen", "mediumslateblue", "mediumspringgreen", "mediumturquoise",
      "mediumvioletred", "midnightblue", "mintcream", "mistyrose", "moccasin",
      "navajowhite", "navy", "oldlace", "olive", "olivedrab", "orange", "orangered",
      "orchid", "palegoldenrod", "palegreen", "paleturquoise", "palevioletred",
      "papayawhip", "peachpuff", "peru", "pink", "plum", "powderblue",
      "purple", "rebeccapurple", "red", "rosybrown", "royalblue", "saddlebrown",
      "salmon", "sandybrown", "seagreen", "seashell", "sienna", "silver", "skyblue",
      "slateblue", "slategray", "snow", "springgreen", "steelblue", "tan",
      "teal", "thistle", "tomato", "turquoise", "violet", "wheat", "white",
      "whitesmoke", "yellow", "yellowgreen"
    ], colorKeywords$1 = keySet$1(colorKeywords_$1);

    var valueKeywords_$1 = [
      "above", "absolute", "activeborder", "additive", "activecaption", "afar",
      "after-white-space", "ahead", "alias", "all", "all-scroll", "alphabetic", "alternate",
      "always", "amharic", "amharic-abegede", "antialiased", "appworkspace",
      "arabic-indic", "armenian", "asterisks", "attr", "auto", "auto-flow", "avoid", "avoid-column", "avoid-page",
      "avoid-region", "axis-pan", "background", "backwards", "baseline", "below", "bidi-override", "binary",
      "bengali", "blink", "block", "block-axis", "bold", "bolder", "border", "border-box",
      "both", "bottom", "break", "break-all", "break-word", "bullets", "button", "button-bevel",
      "buttonface", "buttonhighlight", "buttonshadow", "buttontext", "calc", "cambodian",
      "capitalize", "caps-lock-indicator", "caption", "captiontext", "caret",
      "cell", "center", "checkbox", "circle", "cjk-decimal", "cjk-earthly-branch",
      "cjk-heavenly-stem", "cjk-ideographic", "clear", "clip", "close-quote",
      "col-resize", "collapse", "color", "color-burn", "color-dodge", "column", "column-reverse",
      "compact", "condensed", "contain", "content", "contents",
      "content-box", "context-menu", "continuous", "copy", "counter", "counters", "cover", "crop",
      "cross", "crosshair", "currentcolor", "cursive", "cyclic", "darken", "dashed", "decimal",
      "decimal-leading-zero", "default", "default-button", "dense", "destination-atop",
      "destination-in", "destination-out", "destination-over", "devanagari", "difference",
      "disc", "discard", "disclosure-closed", "disclosure-open", "document",
      "dot-dash", "dot-dot-dash",
      "dotted", "double", "down", "e-resize", "ease", "ease-in", "ease-in-out", "ease-out",
      "element", "ellipse", "ellipsis", "embed", "end", "ethiopic", "ethiopic-abegede",
      "ethiopic-abegede-am-et", "ethiopic-abegede-gez", "ethiopic-abegede-ti-er",
      "ethiopic-abegede-ti-et", "ethiopic-halehame-aa-er",
      "ethiopic-halehame-aa-et", "ethiopic-halehame-am-et",
      "ethiopic-halehame-gez", "ethiopic-halehame-om-et",
      "ethiopic-halehame-sid-et", "ethiopic-halehame-so-et",
      "ethiopic-halehame-ti-er", "ethiopic-halehame-ti-et", "ethiopic-halehame-tig",
      "ethiopic-numeric", "ew-resize", "exclusion", "expanded", "extends", "extra-condensed",
      "extra-expanded", "fantasy", "fast", "fill", "fill-box", "fixed", "flat", "flex", "flex-end", "flex-start", "footnotes",
      "forwards", "from", "geometricPrecision", "georgian", "graytext", "grid", "groove",
      "gujarati", "gurmukhi", "hand", "hangul", "hangul-consonant", "hard-light", "hebrew",
      "help", "hidden", "hide", "higher", "highlight", "highlighttext",
      "hiragana", "hiragana-iroha", "horizontal", "hsl", "hsla", "hue", "icon", "ignore",
      "inactiveborder", "inactivecaption", "inactivecaptiontext", "infinite",
      "infobackground", "infotext", "inherit", "initial", "inline", "inline-axis",
      "inline-block", "inline-flex", "inline-grid", "inline-table", "inset", "inside", "intrinsic", "invert",
      "italic", "japanese-formal", "japanese-informal", "justify", "kannada",
      "katakana", "katakana-iroha", "keep-all", "khmer",
      "korean-hangul-formal", "korean-hanja-formal", "korean-hanja-informal",
      "landscape", "lao", "large", "larger", "left", "level", "lighter", "lighten",
      "line-through", "linear", "linear-gradient", "lines", "list-item", "listbox", "listitem",
      "local", "logical", "loud", "lower", "lower-alpha", "lower-armenian",
      "lower-greek", "lower-hexadecimal", "lower-latin", "lower-norwegian",
      "lower-roman", "lowercase", "ltr", "luminosity", "malayalam", "manipulation", "match", "matrix", "matrix3d",
      "media-controls-background", "media-current-time-display",
      "media-fullscreen-button", "media-mute-button", "media-play-button",
      "media-return-to-realtime-button", "media-rewind-button",
      "media-seek-back-button", "media-seek-forward-button", "media-slider",
      "media-sliderthumb", "media-time-remaining-display", "media-volume-slider",
      "media-volume-slider-container", "media-volume-sliderthumb", "medium",
      "menu", "menulist", "menulist-button", "menulist-text",
      "menulist-textfield", "menutext", "message-box", "middle", "min-intrinsic",
      "mix", "mongolian", "monospace", "move", "multiple", "multiple_mask_images", "multiply", "myanmar", "n-resize",
      "narrower", "ne-resize", "nesw-resize", "no-close-quote", "no-drop",
      "no-open-quote", "no-repeat", "none", "normal", "not-allowed", "nowrap",
      "ns-resize", "numbers", "numeric", "nw-resize", "nwse-resize", "oblique", "octal", "opacity", "open-quote",
      "optimizeLegibility", "optimizeSpeed", "oriya", "oromo", "outset",
      "outside", "outside-shape", "overlay", "overline", "padding", "padding-box",
      "painted", "page", "paused", "persian", "perspective", "pinch-zoom", "plus-darker", "plus-lighter",
      "pointer", "polygon", "portrait", "pre", "pre-line", "pre-wrap", "preserve-3d",
      "progress", "push-button", "radial-gradient", "radio", "read-only",
      "read-write", "read-write-plaintext-only", "rectangle", "region",
      "relative", "repeat", "repeating-linear-gradient",
      "repeating-radial-gradient", "repeat-x", "repeat-y", "reset", "reverse",
      "rgb", "rgba", "ridge", "right", "rotate", "rotate3d", "rotateX", "rotateY",
      "rotateZ", "round", "row", "row-resize", "row-reverse", "rtl", "run-in", "running",
      "s-resize", "sans-serif", "saturation", "scale", "scale3d", "scaleX", "scaleY", "scaleZ", "screen",
      "scroll", "scrollbar", "scroll-position", "se-resize", "searchfield",
      "searchfield-cancel-button", "searchfield-decoration",
      "searchfield-results-button", "searchfield-results-decoration", "self-start", "self-end",
      "semi-condensed", "semi-expanded", "separate", "serif", "show", "sidama",
      "simp-chinese-formal", "simp-chinese-informal", "single",
      "skew", "skewX", "skewY", "skip-white-space", "slide", "slider-horizontal",
      "slider-vertical", "sliderthumb-horizontal", "sliderthumb-vertical", "slow",
      "small", "small-caps", "small-caption", "smaller", "soft-light", "solid", "somali",
      "source-atop", "source-in", "source-out", "source-over", "space", "space-around", "space-between", "space-evenly", "spell-out", "square",
      "square-button", "start", "static", "status-bar", "stretch", "stroke", "stroke-box", "sub",
      "subpixel-antialiased", "svg_masks", "super", "sw-resize", "symbolic", "symbols", "system-ui", "table",
      "table-caption", "table-cell", "table-column", "table-column-group",
      "table-footer-group", "table-header-group", "table-row", "table-row-group",
      "tamil",
      "telugu", "text", "text-bottom", "text-top", "textarea", "textfield", "thai",
      "thick", "thin", "threeddarkshadow", "threedface", "threedhighlight",
      "threedlightshadow", "threedshadow", "tibetan", "tigre", "tigrinya-er",
      "tigrinya-er-abegede", "tigrinya-et", "tigrinya-et-abegede", "to", "top",
      "trad-chinese-formal", "trad-chinese-informal", "transform",
      "translate", "translate3d", "translateX", "translateY", "translateZ",
      "transparent", "ultra-condensed", "ultra-expanded", "underline", "unidirectional-pan", "unset", "up",
      "upper-alpha", "upper-armenian", "upper-greek", "upper-hexadecimal",
      "upper-latin", "upper-norwegian", "upper-roman", "uppercase", "urdu", "url",
      "var", "vertical", "vertical-text", "view-box", "visible", "visibleFill", "visiblePainted",
      "visibleStroke", "visual", "w-resize", "wait", "wave", "wider",
      "window", "windowframe", "windowtext", "words", "wrap", "wrap-reverse", "x-large", "x-small", "xor",
      "xx-large", "xx-small"
    ], valueKeywords$1 = keySet$1(valueKeywords_$1);

    var allWords = documentTypes_$1.concat(mediaTypes_$1).concat(mediaFeatures_$1).concat(mediaValueKeywords_)
        .concat(propertyKeywords_$1).concat(nonStandardPropertyKeywords_$1).concat(colorKeywords_$1)
        .concat(valueKeywords_$1);


    const defaults = {
      documentTypes: documentTypes$1,
      mediaTypes: mediaTypes$1,
      mediaFeatures: mediaFeatures$1,
      mediaValueKeywords: mediaValueKeywords,
      propertyKeywords: propertyKeywords$1,
      nonStandardPropertyKeywords: nonStandardPropertyKeywords$1,
      fontProperties: fontProperties$1,
      counterDescriptors: counterDescriptors,
      colorKeywords: colorKeywords$1,
      valueKeywords: valueKeywords$1,
      tokenHooks: {
        "/": function(stream, state) {
          if (!stream.eat("*")) return false;
          state.tokenize = tokenCComment$3;
          return tokenCComment$3(stream, state);
        }
      }
    };

    const css = mkCSS({});

    function tokenCComment$3(stream, state) {
      var maybeEnd = false, ch;
      while ((ch = stream.next()) != null) {
        if (maybeEnd && ch == "/") {
          state.tokenize = null;
          break;
        }
        maybeEnd = (ch == "*");
      }
      return ["comment", "comment"];
    }

    const sCSS = mkCSS({
      mediaTypes: mediaTypes$1,
      mediaFeatures: mediaFeatures$1,
      mediaValueKeywords: mediaValueKeywords,
      propertyKeywords: propertyKeywords$1,
      nonStandardPropertyKeywords: nonStandardPropertyKeywords$1,
      colorKeywords: colorKeywords$1,
      valueKeywords: valueKeywords$1,
      fontProperties: fontProperties$1,
      allowNested: true,
      lineComment: "//",
      tokenHooks: {
        "/": function(stream, state) {
          if (stream.eat("/")) {
            stream.skipToEnd();
            return ["comment", "comment"];
          } else if (stream.eat("*")) {
            state.tokenize = tokenCComment$3;
            return tokenCComment$3(stream, state);
          } else {
            return ["operator", "operator"];
          }
        },
        ":": function(stream) {
          if (stream.match(/^\s*\{/, false))
            return [null, null]
          return false;
        },
        "$": function(stream) {
          stream.match(/^[\w-]+/);
          if (stream.match(/^\s*:/, false))
            return ["def", "variable-definition"];
          return ["variableName.special", "variable"];
        },
        "#": function(stream) {
          if (!stream.eat("{")) return false;
          return [null, "interpolation"];
        }
      }
    });

    const less = mkCSS({
      mediaTypes: mediaTypes$1,
      mediaFeatures: mediaFeatures$1,
      mediaValueKeywords: mediaValueKeywords,
      propertyKeywords: propertyKeywords$1,
      nonStandardPropertyKeywords: nonStandardPropertyKeywords$1,
      colorKeywords: colorKeywords$1,
      valueKeywords: valueKeywords$1,
      fontProperties: fontProperties$1,
      allowNested: true,
      lineComment: "//",
      tokenHooks: {
        "/": function(stream, state) {
          if (stream.eat("/")) {
            stream.skipToEnd();
            return ["comment", "comment"];
          } else if (stream.eat("*")) {
            state.tokenize = tokenCComment$3;
            return tokenCComment$3(stream, state);
          } else {
            return ["operator", "operator"];
          }
        },
        "@": function(stream) {
          if (stream.eat("{")) return [null, "interpolation"];
          if (stream.match(/^(charset|document|font-face|import|(-(moz|ms|o|webkit)-)?keyframes|media|namespace|page|supports)\b/i, false)) return false;
          stream.eatWhile(/[\w\\\-]/);
          if (stream.match(/^\s*:/, false))
            return ["def", "variable-definition"];
          return ["variableName", "variable"];
        },
        "&": function() {
          return ["atom", "atom"];
        }
      }
    });

    const gss = mkCSS({
      documentTypes: documentTypes$1,
      mediaTypes: mediaTypes$1,
      mediaFeatures: mediaFeatures$1,
      propertyKeywords: propertyKeywords$1,
      nonStandardPropertyKeywords: nonStandardPropertyKeywords$1,
      fontProperties: fontProperties$1,
      counterDescriptors: counterDescriptors,
      colorKeywords: colorKeywords$1,
      valueKeywords: valueKeywords$1,
      supportsAtComponent: true,
      tokenHooks: {
        "/": function(stream, state) {
          if (!stream.eat("*")) return false;
          state.tokenize = tokenCComment$3;
          return tokenCComment$3(stream, state);
        }
      }
    });

    var css$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        mkCSS: mkCSS,
        css: css,
        sCSS: sCSS,
        less: less,
        gss: gss
    });

    var variable_regex$1 = /({)?[a-zA-Z0-9_]+(})?/;

    function tokenString$r(stream, state) {
      var current, prev, found_var = false;
      while (!stream.eol() && (current = stream.next()) != state.pending) {
        if (current === '$' && prev != '\\' && state.pending == '"') {
          found_var = true;
          break;
        }
        prev = current;
      }
      if (found_var) {
        stream.backUp(1);
      }
      if (current == state.pending) {
        state.continueString = false;
      } else {
        state.continueString = true;
      }
      return "string";
    }

    function tokenize$4(stream, state) {
      var ch = stream.next();

      // Have we found a variable?
      if (ch === '$') {
        if (stream.match(variable_regex$1)) {
          return 'variableName.special';
        }
        return 'variable';
      }
      // Should we still be looking for the end of a string?
      if (state.continueString) {
        // If so, go through the loop again
        stream.backUp(1);
        return tokenString$r(stream, state);
      }
      // Do we just have a function on our hands?
      // In 'cmake_minimum_required (VERSION 2.8.8)', 'cmake_minimum_required' is matched
      if (stream.match(/(\s+)?\w+\(/) || stream.match(/(\s+)?\w+\ \(/)) {
        stream.backUp(1);
        return 'def';
      }
      if (ch == "#") {
        stream.skipToEnd();
        return "comment";
      }
      // Have we found a string?
      if (ch == "'" || ch == '"') {
        // Store the type (single or double)
        state.pending = ch;
        // Perform the looping function to find the end
        return tokenString$r(stream, state);
      }
      if (ch == '(' || ch == ')') {
        return 'bracket';
      }
      if (ch.match(/[0-9]/)) {
        return 'number';
      }
      stream.eatWhile(/[\w-]/);
      return null;
    }
    const cmake = {
      startState: function () {
        var state = {};
        state.inDefinition = false;
        state.inInclude = false;
        state.continueString = false;
        state.pending = false;
        return state;
      },
      token: function (stream, state) {
        if (stream.eatSpace()) return null;
        return tokenize$4(stream, state);
      }
    };

    var cmake$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        cmake: cmake
    });

    var ERRORCLASS$1 = "error";

    function wordRegexp$e(words) {
      return new RegExp("^((" + words.join(")|(") + "))\\b");
    }

    var operators$6 = /^(?:->|=>|\+[+=]?|-[\-=]?|\*[\*=]?|\/[\/=]?|[=!]=|<[><]?=?|>>?=?|%=?|&=?|\|=?|\^=?|\~|!|\?|(or|and|\|\||&&|\?)=)/;
    var delimiters$1 = /^(?:[()\[\]{},:`=;]|\.\.?\.?)/;
    var identifiers$8 = /^[_A-Za-z$][_A-Za-z$0-9]*/;
    var atProp = /^@[_A-Za-z$][_A-Za-z$0-9]*/;

    var wordOperators$3 = wordRegexp$e(["and", "or", "not",
                                    "is", "isnt", "in",
                                    "instanceof", "typeof"]);
    var indentKeywords$1 = ["for", "while", "loop", "if", "unless", "else",
                          "switch", "try", "catch", "finally", "class"];
    var commonKeywords$5 = ["break", "by", "continue", "debugger", "delete",
                          "do", "in", "of", "new", "return", "then",
                          "this", "@", "throw", "when", "until", "extends"];

    var keywords$D = wordRegexp$e(indentKeywords$1.concat(commonKeywords$5));

    indentKeywords$1 = wordRegexp$e(indentKeywords$1);


    var stringPrefixes$2 = /^('{3}|\"{3}|['\"])/;
    var regexPrefixes = /^(\/{3}|\/)/;
    var commonConstants = ["Infinity", "NaN", "undefined", "null", "true", "false", "on", "off", "yes", "no"];
    var constants = wordRegexp$e(commonConstants);

    // Tokenizers
    function tokenBase$J(stream, state) {
      // Handle scope changes
      if (stream.sol()) {
        if (state.scope.align === null) state.scope.align = false;
        var scopeOffset = state.scope.offset;
        if (stream.eatSpace()) {
          var lineOffset = stream.indentation();
          if (lineOffset > scopeOffset && state.scope.type == "coffee") {
            return "indent";
          } else if (lineOffset < scopeOffset) {
            return "dedent";
          }
          return null;
        } else {
          if (scopeOffset > 0) {
            dedent$1(stream, state);
          }
        }
      }
      if (stream.eatSpace()) {
        return null;
      }

      var ch = stream.peek();

      // Handle docco title comment (single line)
      if (stream.match("####")) {
        stream.skipToEnd();
        return "comment";
      }

      // Handle multi line comments
      if (stream.match("###")) {
        state.tokenize = longComment;
        return state.tokenize(stream, state);
      }

      // Single line comment
      if (ch === "#") {
        stream.skipToEnd();
        return "comment";
      }

      // Handle number literals
      if (stream.match(/^-?[0-9\.]/, false)) {
        var floatLiteral = false;
        // Floats
        if (stream.match(/^-?\d*\.\d+(e[\+\-]?\d+)?/i)) {
          floatLiteral = true;
        }
        if (stream.match(/^-?\d+\.\d*/)) {
          floatLiteral = true;
        }
        if (stream.match(/^-?\.\d+/)) {
          floatLiteral = true;
        }

        if (floatLiteral) {
          // prevent from getting extra . on 1..
          if (stream.peek() == "."){
            stream.backUp(1);
          }
          return "number";
        }
        // Integers
        var intLiteral = false;
        // Hex
        if (stream.match(/^-?0x[0-9a-f]+/i)) {
          intLiteral = true;
        }
        // Decimal
        if (stream.match(/^-?[1-9]\d*(e[\+\-]?\d+)?/)) {
          intLiteral = true;
        }
        // Zero by itself with no other piece of number.
        if (stream.match(/^-?0(?![\dx])/i)) {
          intLiteral = true;
        }
        if (intLiteral) {
          return "number";
        }
      }

      // Handle strings
      if (stream.match(stringPrefixes$2)) {
        state.tokenize = tokenFactory(stream.current(), false, "string");
        return state.tokenize(stream, state);
      }
      // Handle regex literals
      if (stream.match(regexPrefixes)) {
        if (stream.current() != "/" || stream.match(/^.*\//, false)) { // prevent highlight of division
          state.tokenize = tokenFactory(stream.current(), true, "string.special");
          return state.tokenize(stream, state);
        } else {
          stream.backUp(1);
        }
      }



      // Handle operators and delimiters
      if (stream.match(operators$6) || stream.match(wordOperators$3)) {
        return "operator";
      }
      if (stream.match(delimiters$1)) {
        return "punctuation";
      }

      if (stream.match(constants)) {
        return "atom";
      }

      if (stream.match(atProp) || state.prop && stream.match(identifiers$8)) {
        return "property";
      }

      if (stream.match(keywords$D)) {
        return "keyword";
      }

      if (stream.match(identifiers$8)) {
        return "variable";
      }

      // Handle non-detected items
      stream.next();
      return ERRORCLASS$1;
    }

    function tokenFactory(delimiter, singleline, outclass) {
      return function(stream, state) {
        while (!stream.eol()) {
          stream.eatWhile(/[^'"\/\\]/);
          if (stream.eat("\\")) {
            stream.next();
            if (singleline && stream.eol()) {
              return outclass;
            }
          } else if (stream.match(delimiter)) {
            state.tokenize = tokenBase$J;
            return outclass;
          } else {
            stream.eat(/['"\/]/);
          }
        }
        if (singleline) {
          state.tokenize = tokenBase$J;
        }
        return outclass;
      };
    }

    function longComment(stream, state) {
      while (!stream.eol()) {
        stream.eatWhile(/[^#]/);
        if (stream.match("###")) {
          state.tokenize = tokenBase$J;
          break;
        }
        stream.eatWhile("#");
      }
      return "comment";
    }

    function indent$1(stream, state, type = "coffee") {
      var offset = 0, align = false, alignOffset = null;
      for (var scope = state.scope; scope; scope = scope.prev) {
        if (scope.type === "coffee" || scope.type == "}") {
          offset = scope.offset + stream.indentUnit;
          break;
        }
      }
      if (type !== "coffee") {
        align = null;
        alignOffset = stream.column() + stream.current().length;
      } else if (state.scope.align) {
        state.scope.align = false;
      }
      state.scope = {
        offset: offset,
        type: type,
        prev: state.scope,
        align: align,
        alignOffset: alignOffset
      };
    }

    function dedent$1(stream, state) {
      if (!state.scope.prev) return;
      if (state.scope.type === "coffee") {
        var _indent = stream.indentation();
        var matched = false;
        for (var scope = state.scope; scope; scope = scope.prev) {
          if (_indent === scope.offset) {
            matched = true;
            break;
          }
        }
        if (!matched) {
          return true;
        }
        while (state.scope.prev && state.scope.offset !== _indent) {
          state.scope = state.scope.prev;
        }
        return false;
      } else {
        state.scope = state.scope.prev;
        return false;
      }
    }

    function tokenLexer$1(stream, state) {
      var style = state.tokenize(stream, state);
      var current = stream.current();

      // Handle scope changes.
      if (current === "return") {
        state.dedent = true;
      }
      if (((current === "->" || current === "=>") && stream.eol())
          || style === "indent") {
        indent$1(stream, state);
      }
      var delimiter_index = "[({".indexOf(current);
      if (delimiter_index !== -1) {
        indent$1(stream, state, "])}".slice(delimiter_index, delimiter_index+1));
      }
      if (indentKeywords$1.exec(current)){
        indent$1(stream, state);
      }
      if (current == "then"){
        dedent$1(stream, state);
      }


      if (style === "dedent") {
        if (dedent$1(stream, state)) {
          return ERRORCLASS$1;
        }
      }
      delimiter_index = "])}".indexOf(current);
      if (delimiter_index !== -1) {
        while (state.scope.type == "coffee" && state.scope.prev)
          state.scope = state.scope.prev;
        if (state.scope.type == current)
          state.scope = state.scope.prev;
      }
      if (state.dedent && stream.eol()) {
        if (state.scope.type == "coffee" && state.scope.prev)
          state.scope = state.scope.prev;
        state.dedent = false;
      }

      return style == "indent" || style == "dedent" ? null : style;
    }

    const coffeeScript = {
      startState: function() {
        return {
          tokenize: tokenBase$J,
          scope: {offset: 0, type:"coffee", prev: null, align: false},
          prop: false,
          dedent: 0
        };
      },

      token: function(stream, state) {
        var fillAlign = state.scope.align === null && state.scope;
        if (fillAlign && stream.sol()) fillAlign.align = false;

        var style = tokenLexer$1(stream, state);
        if (style && style != "comment") {
          if (fillAlign) fillAlign.align = true;
          state.prop = style == "punctuation" && stream.current() == ".";
        }

        return style;
      },

      indent: function(state, text) {
        if (state.tokenize != tokenBase$J) return 0;
        var scope = state.scope;
        var closer = text && "])}".indexOf(text.charAt(0)) > -1;
        if (closer) while (scope.type == "coffee" && scope.prev) scope = scope.prev;
        var closes = closer && scope.type === text.charAt(0);
        if (scope.align)
          return scope.alignOffset - (closes ? 1 : 0);
        else
          return (closes ? scope.prev : scope).offset;
      },

      languageData: {
        commentTokens: {line: "#"}
      }
    };

    var coffeescript = /*#__PURE__*/Object.freeze({
        __proto__: null,
        coffeeScript: coffeeScript
    });

    var specialForm = /^(block|let*|return-from|catch|load-time-value|setq|eval-when|locally|symbol-macrolet|flet|macrolet|tagbody|function|multiple-value-call|the|go|multiple-value-prog1|throw|if|progn|unwind-protect|labels|progv|let|quote)$/;
    var assumeBody = /^with|^def|^do|^prog|case$|^cond$|bind$|when$|unless$/;
    var numLiteral = /^(?:[+\-]?(?:\d+|\d*\.\d+)(?:[efd][+\-]?\d+)?|[+\-]?\d+(?:\/[+\-]?\d+)?|#b[+\-]?[01]+|#o[+\-]?[0-7]+|#x[+\-]?[\da-f]+)/;
    var symbol$2 = /[^\s'`,@()\[\]";]/;
    var type$5;

    function readSym(stream) {
      var ch;
      while (ch = stream.next()) {
        if (ch == "\\") stream.next();
        else if (!symbol$2.test(ch)) { stream.backUp(1); break; }
      }
      return stream.current();
    }

    function base(stream, state) {
      if (stream.eatSpace()) {type$5 = "ws"; return null;}
      if (stream.match(numLiteral)) return "number";
      var ch = stream.next();
      if (ch == "\\") ch = stream.next();

      if (ch == '"') return (state.tokenize = inString)(stream, state);
      else if (ch == "(") { type$5 = "open"; return "bracket"; }
      else if (ch == ")" || ch == "]") { type$5 = "close"; return "bracket"; }
      else if (ch == ";") { stream.skipToEnd(); type$5 = "ws"; return "comment"; }
      else if (/['`,@]/.test(ch)) return null;
      else if (ch == "|") {
        if (stream.skipTo("|")) { stream.next(); return "variableName"; }
        else { stream.skipToEnd(); return "error"; }
      } else if (ch == "#") {
        var ch = stream.next();
        if (ch == "(") { type$5 = "open"; return "bracket"; }
        else if (/[+\-=\.']/.test(ch)) return null;
        else if (/\d/.test(ch) && stream.match(/^\d*#/)) return null;
        else if (ch == "|") return (state.tokenize = inComment)(stream, state);
        else if (ch == ":") { readSym(stream); return "meta"; }
        else if (ch == "\\") { stream.next(); readSym(stream); return "string.special" }
        else return "error";
      } else {
        var name = readSym(stream);
        if (name == ".") return null;
        type$5 = "symbol";
        if (name == "nil" || name == "t" || name.charAt(0) == ":") return "atom";
        if (state.lastType == "open" && (specialForm.test(name) || assumeBody.test(name))) return "keyword";
        if (name.charAt(0) == "&") return "variableName.special";
        return "variableName";
      }
    }

    function inString(stream, state) {
      var escaped = false, next;
      while (next = stream.next()) {
        if (next == '"' && !escaped) { state.tokenize = base; break; }
        escaped = !escaped && next == "\\";
      }
      return "string";
    }

    function inComment(stream, state) {
      var next, last;
      while (next = stream.next()) {
        if (next == "#" && last == "|") { state.tokenize = base; break; }
        last = next;
      }
      type$5 = "ws";
      return "comment";
    }

    const commonLisp = {
      startState: function () {
        return {ctx: {prev: null, start: 0, indentTo: 0}, lastType: null, tokenize: base};
      },

      token: function (stream, state) {
        if (stream.sol() && typeof state.ctx.indentTo != "number")
          state.ctx.indentTo = state.ctx.start + 1;

        type$5 = null;
        var style = state.tokenize(stream, state);
        if (type$5 != "ws") {
          if (state.ctx.indentTo == null) {
            if (type$5 == "symbol" && assumeBody.test(stream.current()))
              state.ctx.indentTo = state.ctx.start + stream.indentUnit;
            else
              state.ctx.indentTo = "next";
          } else if (state.ctx.indentTo == "next") {
            state.ctx.indentTo = stream.column();
          }
          state.lastType = type$5;
        }
        if (type$5 == "open") state.ctx = {prev: state.ctx, start: stream.column(), indentTo: null};
        else if (type$5 == "close") state.ctx = state.ctx.prev || state.ctx;
        return style;
      },

      indent: function (state) {
        var i = state.ctx.indentTo;
        return typeof i == "number" ? i : state.ctx.start + 1;
      },

      languageData: {
        commentTokens: {line: ";;", block: {open: "#|", close: "|#"}},
        closeBrackets: {brackets: ["(", "[", "{", '"']}
      }
    };

    var commonlisp = /*#__PURE__*/Object.freeze({
        __proto__: null,
        commonLisp: commonLisp
    });

    var wordRegexp$d = function(words) {
      return new RegExp("^(?:" + words.join("|") + ")$", "i");
    };

    var tokenBase$I = function(stream/*, state*/) {
      var ch = stream.next();
      if (ch ==='"') {
        stream.match(/^.*?"/);
        return "string";
      }
      if (ch === "'") {
        stream.match(/^.*?'/);
        return "string";
      }
      if (/[{}\(\),\.;\[\]]/.test(ch)) {
        curPunc$c = ch;
        return "punctuation";
      } else if (ch === "/" && stream.eat("/")) {
        stream.skipToEnd();
        return "comment";
      } else if (operatorChars$2.test(ch)) {
        stream.eatWhile(operatorChars$2);
        return null;
      } else {
        stream.eatWhile(/[_\w\d]/);
        if (stream.eat(":")) {
          stream.eatWhile(/[\w\d_\-]/);
          return "atom";
        }
        var word = stream.current();
        if (funcs.test(word)) return "builtin";
        if (preds.test(word)) return "def";
        if (keywords$C.test(word) || systemKeywords.test(word)) return "keyword";
        return "variable";
      }
    };
    var pushContext$e = function(state, type, col) {
      return state.context = {
        prev: state.context,
        indent: state.indent,
        col: col,
        type: type
      };
    };
    var popContext$e = function(state) {
      state.indent = state.context.indent;
      return state.context = state.context.prev;
    };
    var curPunc$c;
    var funcs = wordRegexp$d(["abs", "acos", "allShortestPaths", "asin", "atan", "atan2", "avg", "ceil", "coalesce", "collect", "cos", "cot", "count", "degrees", "e", "endnode", "exp", "extract", "filter", "floor", "haversin", "head", "id", "keys", "labels", "last", "left", "length", "log", "log10", "lower", "ltrim", "max", "min", "node", "nodes", "percentileCont", "percentileDisc", "pi", "radians", "rand", "range", "reduce", "rel", "relationship", "relationships", "replace", "reverse", "right", "round", "rtrim", "shortestPath", "sign", "sin", "size", "split", "sqrt", "startnode", "stdev", "stdevp", "str", "substring", "sum", "tail", "tan", "timestamp", "toFloat", "toInt", "toString", "trim", "type", "upper"]);
    var preds = wordRegexp$d(["all", "and", "any", "contains", "exists", "has", "in", "none", "not", "or", "single", "xor"]);
    var keywords$C = wordRegexp$d(["as", "asc", "ascending", "assert", "by", "case", "commit", "constraint", "create", "csv", "cypher", "delete", "desc", "descending", "detach", "distinct", "drop", "else", "end", "ends", "explain", "false", "fieldterminator", "foreach", "from", "headers", "in", "index", "is", "join", "limit", "load", "match", "merge", "null", "on", "optional", "order", "periodic", "profile", "remove", "return", "scan", "set", "skip", "start", "starts", "then", "true", "union", "unique", "unwind", "using", "when", "where", "with", "call", "yield"]);
    var systemKeywords = wordRegexp$d(["access", "active", "assign", "all", "alter", "as", "catalog", "change", "copy", "create", "constraint", "constraints", "current", "database", "databases", "dbms", "default", "deny", "drop", "element", "elements", "exists", "from", "grant", "graph", "graphs", "if", "index", "indexes", "label", "labels", "management", "match", "name", "names", "new", "node", "nodes", "not", "of", "on", "or", "password", "populated", "privileges", "property", "read", "relationship", "relationships", "remove", "replace", "required", "revoke", "role", "roles", "set", "show", "start", "status", "stop", "suspended", "to", "traverse", "type", "types", "user", "users", "with", "write"]);
    var operatorChars$2 = /[*+\-<>=&|~%^]/;

    const cypher = {
      startState: function() {
        return {
          tokenize: tokenBase$I,
          context: null,
          indent: 0,
          col: 0
        };
      },
      token: function(stream, state) {
        if (stream.sol()) {
          if (state.context && (state.context.align == null)) {
            state.context.align = false;
          }
          state.indent = stream.indentation();
        }
        if (stream.eatSpace()) {
          return null;
        }
        var style = state.tokenize(stream, state);
        if (style !== "comment" && state.context && (state.context.align == null) && state.context.type !== "pattern") {
          state.context.align = true;
        }
        if (curPunc$c === "(") {
          pushContext$e(state, ")", stream.column());
        } else if (curPunc$c === "[") {
          pushContext$e(state, "]", stream.column());
        } else if (curPunc$c === "{") {
          pushContext$e(state, "}", stream.column());
        } else if (/[\]\}\)]/.test(curPunc$c)) {
          while (state.context && state.context.type === "pattern") {
            popContext$e(state);
          }
          if (state.context && curPunc$c === state.context.type) {
            popContext$e(state);
          }
        } else if (curPunc$c === "." && state.context && state.context.type === "pattern") {
          popContext$e(state);
        } else if (/atom|string|variable/.test(style) && state.context) {
          if (/[\}\]]/.test(state.context.type)) {
            pushContext$e(state, "pattern", stream.column());
          } else if (state.context.type === "pattern" && !state.context.align) {
            state.context.align = true;
            state.context.col = stream.column();
          }
        }
        return style;
      },
      indent: function(state, textAfter, cx) {
        var firstChar = textAfter && textAfter.charAt(0);
        var context = state.context;
        if (/[\]\}]/.test(firstChar)) {
          while (context && context.type === "pattern") {
            context = context.prev;
          }
        }
        var closing = context && firstChar === context.type;
        if (!context) return 0;
        if (context.type === "keywords") return null
        if (context.align) return context.col + (closing ? 0 : 1);
        return context.indent + (closing ? 0 : cx.unit);
      }
    };

    var cypher$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        cypher: cypher
    });

    function wordRegexp$c(words) {
      return new RegExp("^((" + words.join(")|(") + "))\\b");
    }

    var wordOperators$2 = wordRegexp$c(["and", "or", "not", "is"]);
    var commonKeywords$4 = ["as", "assert", "break", "class", "continue",
                          "def", "del", "elif", "else", "except", "finally",
                          "for", "from", "global", "if", "import",
                          "lambda", "pass", "raise", "return",
                          "try", "while", "with", "yield", "in"];
    var commonBuiltins$1 = ["abs", "all", "any", "bin", "bool", "bytearray", "callable", "chr",
                          "classmethod", "compile", "complex", "delattr", "dict", "dir", "divmod",
                          "enumerate", "eval", "filter", "float", "format", "frozenset",
                          "getattr", "globals", "hasattr", "hash", "help", "hex", "id",
                          "input", "int", "isinstance", "issubclass", "iter", "len",
                          "list", "locals", "map", "max", "memoryview", "min", "next",
                          "object", "oct", "open", "ord", "pow", "property", "range",
                          "repr", "reversed", "round", "set", "setattr", "slice",
                          "sorted", "staticmethod", "str", "sum", "super", "tuple",
                          "type", "vars", "zip", "__import__", "NotImplemented",
                          "Ellipsis", "__debug__"];

    function top(state) {
      return state.scopes[state.scopes.length - 1];
    }

    function mkPython(parserConf) {
      var ERRORCLASS = "error";

      var delimiters = parserConf.delimiters || parserConf.singleDelimiters || /^[\(\)\[\]\{\}@,:`=;\.\\]/;
      //               (Backwards-compatibility with old, cumbersome config system)
      var operators = [parserConf.singleOperators, parserConf.doubleOperators, parserConf.doubleDelimiters, parserConf.tripleDelimiters,
                       parserConf.operators || /^([-+*/%\/&|^]=?|[<>=]+|\/\/=?|\*\*=?|!=|[~!@]|\.\.\.)/];
      for (var i = 0; i < operators.length; i++) if (!operators[i]) operators.splice(i--, 1);

      var hangingIndent = parserConf.hangingIndent;

      var myKeywords = commonKeywords$4, myBuiltins = commonBuiltins$1;
      if (parserConf.extra_keywords != undefined)
        myKeywords = myKeywords.concat(parserConf.extra_keywords);

      if (parserConf.extra_builtins != undefined)
        myBuiltins = myBuiltins.concat(parserConf.extra_builtins);

      var py3 = !(parserConf.version && Number(parserConf.version) < 3);
      if (py3) {
        // since http://legacy.python.org/dev/peps/pep-0465/ @ is also an operator
        var identifiers = parserConf.identifiers|| /^[_A-Za-z\u00A1-\uFFFF][_A-Za-z0-9\u00A1-\uFFFF]*/;
        myKeywords = myKeywords.concat(["nonlocal", "False", "True", "None", "async", "await"]);
        myBuiltins = myBuiltins.concat(["ascii", "bytes", "exec", "print"]);
        var stringPrefixes = new RegExp("^(([rbuf]|(br)|(fr))?('{3}|\"{3}|['\"]))", "i");
      } else {
        var identifiers = parserConf.identifiers|| /^[_A-Za-z][_A-Za-z0-9]*/;
        myKeywords = myKeywords.concat(["exec", "print"]);
        myBuiltins = myBuiltins.concat(["apply", "basestring", "buffer", "cmp", "coerce", "execfile",
                                        "file", "intern", "long", "raw_input", "reduce", "reload",
                                        "unichr", "unicode", "xrange", "False", "True", "None"]);
        var stringPrefixes = new RegExp("^(([rubf]|(ur)|(br))?('{3}|\"{3}|['\"]))", "i");
      }
      var keywords = wordRegexp$c(myKeywords);
      var builtins = wordRegexp$c(myBuiltins);

      // tokenizers
      function tokenBase(stream, state) {
        var sol = stream.sol() && state.lastToken != "\\";
        if (sol) state.indent = stream.indentation();
        // Handle scope changes
        if (sol && top(state).type == "py") {
          var scopeOffset = top(state).offset;
          if (stream.eatSpace()) {
            var lineOffset = stream.indentation();
            if (lineOffset > scopeOffset)
              pushPyScope(stream, state);
            else if (lineOffset < scopeOffset && dedent(stream, state) && stream.peek() != "#")
              state.errorToken = true;
            return null;
          } else {
            var style = tokenBaseInner(stream, state);
            if (scopeOffset > 0 && dedent(stream, state))
              style += " " + ERRORCLASS;
            return style;
          }
        }
        return tokenBaseInner(stream, state);
      }

      function tokenBaseInner(stream, state, inFormat) {
        if (stream.eatSpace()) return null;

        // Handle Comments
        if (!inFormat && stream.match(/^#.*/)) return "comment";

        // Handle Number Literals
        if (stream.match(/^[0-9\.]/, false)) {
          var floatLiteral = false;
          // Floats
          if (stream.match(/^[\d_]*\.\d+(e[\+\-]?\d+)?/i)) { floatLiteral = true; }
          if (stream.match(/^[\d_]+\.\d*/)) { floatLiteral = true; }
          if (stream.match(/^\.\d+/)) { floatLiteral = true; }
          if (floatLiteral) {
            // Float literals may be "imaginary"
            stream.eat(/J/i);
            return "number";
          }
          // Integers
          var intLiteral = false;
          // Hex
          if (stream.match(/^0x[0-9a-f_]+/i)) intLiteral = true;
          // Binary
          if (stream.match(/^0b[01_]+/i)) intLiteral = true;
          // Octal
          if (stream.match(/^0o[0-7_]+/i)) intLiteral = true;
          // Decimal
          if (stream.match(/^[1-9][\d_]*(e[\+\-]?[\d_]+)?/)) {
            // Decimal literals may be "imaginary"
            stream.eat(/J/i);
            // TODO - Can you have imaginary longs?
            intLiteral = true;
          }
          // Zero by itself with no other piece of number.
          if (stream.match(/^0(?![\dx])/i)) intLiteral = true;
          if (intLiteral) {
            // Integer literals may be "long"
            stream.eat(/L/i);
            return "number";
          }
        }

        // Handle Strings
        if (stream.match(stringPrefixes)) {
          var isFmtString = stream.current().toLowerCase().indexOf('f') !== -1;
          if (!isFmtString) {
            state.tokenize = tokenStringFactory(stream.current(), state.tokenize);
            return state.tokenize(stream, state);
          } else {
            state.tokenize = formatStringFactory(stream.current(), state.tokenize);
            return state.tokenize(stream, state);
          }
        }

        for (var i = 0; i < operators.length; i++)
          if (stream.match(operators[i])) return "operator"

        if (stream.match(delimiters)) return "punctuation";

        if (state.lastToken == "." && stream.match(identifiers))
          return "property";

        if (stream.match(keywords) || stream.match(wordOperators$2))
          return "keyword";

        if (stream.match(builtins))
          return "builtin";

        if (stream.match(/^(self|cls)\b/))
          return "self";

        if (stream.match(identifiers)) {
          if (state.lastToken == "def" || state.lastToken == "class")
            return "def";
          return "variable";
        }

        // Handle non-detected items
        stream.next();
        return inFormat ? null :ERRORCLASS;
      }

      function formatStringFactory(delimiter, tokenOuter) {
        while ("rubf".indexOf(delimiter.charAt(0).toLowerCase()) >= 0)
          delimiter = delimiter.substr(1);

        var singleline = delimiter.length == 1;
        var OUTCLASS = "string";

        function tokenNestedExpr(depth) {
          return function(stream, state) {
            var inner = tokenBaseInner(stream, state, true);
            if (inner == "punctuation") {
              if (stream.current() == "{") {
                state.tokenize = tokenNestedExpr(depth + 1);
              } else if (stream.current() == "}") {
                if (depth > 1) state.tokenize = tokenNestedExpr(depth - 1);
                else state.tokenize = tokenString;
              }
            }
            return inner
          }
        }

        function tokenString(stream, state) {
          while (!stream.eol()) {
            stream.eatWhile(/[^'"\{\}\\]/);
            if (stream.eat("\\")) {
              stream.next();
              if (singleline && stream.eol())
                return OUTCLASS;
            } else if (stream.match(delimiter)) {
              state.tokenize = tokenOuter;
              return OUTCLASS;
            } else if (stream.match('{{')) {
              // ignore {{ in f-str
              return OUTCLASS;
            } else if (stream.match('{', false)) {
              // switch to nested mode
              state.tokenize = tokenNestedExpr(0);
              if (stream.current()) return OUTCLASS;
              else return state.tokenize(stream, state)
            } else if (stream.match('}}')) {
              return OUTCLASS;
            } else if (stream.match('}')) {
              // single } in f-string is an error
              return ERRORCLASS;
            } else {
              stream.eat(/['"]/);
            }
          }
          if (singleline) {
            if (parserConf.singleLineStringErrors)
              return ERRORCLASS;
            else
              state.tokenize = tokenOuter;
          }
          return OUTCLASS;
        }
        tokenString.isString = true;
        return tokenString;
      }

      function tokenStringFactory(delimiter, tokenOuter) {
        while ("rubf".indexOf(delimiter.charAt(0).toLowerCase()) >= 0)
          delimiter = delimiter.substr(1);

        var singleline = delimiter.length == 1;
        var OUTCLASS = "string";

        function tokenString(stream, state) {
          while (!stream.eol()) {
            stream.eatWhile(/[^'"\\]/);
            if (stream.eat("\\")) {
              stream.next();
              if (singleline && stream.eol())
                return OUTCLASS;
            } else if (stream.match(delimiter)) {
              state.tokenize = tokenOuter;
              return OUTCLASS;
            } else {
              stream.eat(/['"]/);
            }
          }
          if (singleline) {
            if (parserConf.singleLineStringErrors)
              return ERRORCLASS;
            else
              state.tokenize = tokenOuter;
          }
          return OUTCLASS;
        }
        tokenString.isString = true;
        return tokenString;
      }

      function pushPyScope(stream, state) {
        while (top(state).type != "py") state.scopes.pop();
        state.scopes.push({offset: top(state).offset + stream.indentUnit,
                           type: "py",
                           align: null});
      }

      function pushBracketScope(stream, state, type) {
        var align = stream.match(/^[\s\[\{\(]*(?:#|$)/, false) ? null : stream.column() + 1;
        state.scopes.push({offset: state.indent + (hangingIndent || stream.indentUnit),
                           type: type,
                           align: align});
      }

      function dedent(stream, state) {
        var indented = stream.indentation();
        while (state.scopes.length > 1 && top(state).offset > indented) {
          if (top(state).type != "py") return true;
          state.scopes.pop();
        }
        return top(state).offset != indented;
      }

      function tokenLexer(stream, state) {
        if (stream.sol()) {
          state.beginningOfLine = true;
          state.dedent = false;
        }
     
        var style = state.tokenize(stream, state);
        var current = stream.current();

        // Handle decorators
        if (state.beginningOfLine && current == "@")
          return stream.match(identifiers, false) ? "meta" : py3 ? "operator" : ERRORCLASS;

        if (/\S/.test(current)) state.beginningOfLine = false;

        if ((style == "variable" || style == "builtin")
            && state.lastToken == "meta")
          style = "meta";

        // Handle scope changes.
        if (current == "pass" || current == "return")
          state.dedent = true;

        if (current == "lambda") state.lambda = true;
        if (current == ":" && !state.lambda && top(state).type == "py" && stream.match(/^\s*(?:#|$)/, false))
          pushPyScope(stream, state);

        if (current.length == 1 && !/string|comment/.test(style)) {
          var delimiter_index = "[({".indexOf(current);
          if (delimiter_index != -1)
            pushBracketScope(stream, state, "])}".slice(delimiter_index, delimiter_index+1));

          delimiter_index = "])}".indexOf(current);
          if (delimiter_index != -1) {
            if (top(state).type == current) state.indent = state.scopes.pop().offset - (hangingIndent || stream.indentUnit);
            else return ERRORCLASS;
          }
        }
        if (state.dedent && stream.eol() && top(state).type == "py" && state.scopes.length > 1)
          state.scopes.pop();

        return style;
      }

      return {
        startState: function() {
          return {
            tokenize: tokenBase,
            scopes: [{offset: 0, type: "py", align: null}],
            indent: 0,
            lastToken: null,
            lambda: false,
            dedent: 0
          };
        },

        token: function(stream, state) {
          var addErr = state.errorToken;
          if (addErr) state.errorToken = false;
          var style = tokenLexer(stream, state);

          if (style && style != "comment")
            state.lastToken = (style == "keyword" || style == "punctuation") ? stream.current() : style;
          if (style == "punctuation") style = null;

          if (stream.eol() && state.lambda)
            state.lambda = false;
          return addErr ? ERRORCLASS : style;
        },

        indent: function(state, textAfter, cx) {
          if (state.tokenize != tokenBase)
            return state.tokenize.isString ? null : 0;

          var scope = top(state);
          var closing = scope.type == textAfter.charAt(0) ||
              scope.type == "py" && !state.dedent && /^(else:|elif |except |finally:)/.test(textAfter);
          if (scope.align != null)
            return scope.align - (closing ? 1 : 0)
          else
            return scope.offset - (closing ? hangingIndent || cx.unit : 0)
        },

        languageData: {
          autocomplete: commonKeywords$4.concat(commonBuiltins$1),
          indentOnInput: /^\s*([\}\]\)]|else:|elif |except |finally:)$/,
          commentTokens: {line: "#"},
          closeBrackets: {brackets: ["(", "[", "{", "'", '"', "'''", '"""']}
        }
      };
    }
    var words$i = function(str) { return str.split(" "); };

    const python = mkPython({});

    const cython = mkPython({
      extra_keywords: words$i("by cdef cimport cpdef ctypedef enum except "+
                            "extern gil include nogil property public "+
                            "readonly struct union DEF IF ELIF ELSE")
    });

    var python$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        mkPython: mkPython,
        python: python,
        cython: cython
    });

    function wordRegExp(words, end) {
      return new RegExp((end ? "" : "^") + "(?:" + words.join("|") + ")" + (end ? "$" : "\\b"));
    }

    function chain$a(tokenize, stream, state) {
      state.tokenize.push(tokenize);
      return tokenize(stream, state);
    }

    var operators$5 = /^(?:[-+/%|&^]|\*\*?|[<>]{2})/;
    var conditionalOperators = /^(?:[=!]~|===|<=>|[<>=!]=?|[|&]{2}|~)/;
    var indexingOperators = /^(?:\[\][?=]?)/;
    var anotherOperators = /^(?:\.(?:\.{2})?|->|[?:])/;
    var idents = /^[a-z_\u009F-\uFFFF][a-zA-Z0-9_\u009F-\uFFFF]*/;
    var types$5 = /^[A-Z_\u009F-\uFFFF][a-zA-Z0-9_\u009F-\uFFFF]*/;
    var keywords$B = wordRegExp([
      "abstract", "alias", "as", "asm", "begin", "break", "case", "class", "def", "do",
      "else", "elsif", "end", "ensure", "enum", "extend", "for", "fun", "if",
      "include", "instance_sizeof", "lib", "macro", "module", "next", "of", "out", "pointerof",
      "private", "protected", "rescue", "return", "require", "select", "sizeof", "struct",
      "super", "then", "type", "typeof", "uninitialized", "union", "unless", "until", "when", "while", "with",
      "yield", "__DIR__", "__END_LINE__", "__FILE__", "__LINE__"
    ]);
    var atomWords = wordRegExp(["true", "false", "nil", "self"]);
    var indentKeywordsArray = [
      "def", "fun", "macro",
      "class", "module", "struct", "lib", "enum", "union",
      "do", "for"
    ];
    var indentKeywords = wordRegExp(indentKeywordsArray);
    var indentExpressionKeywordsArray = ["if", "unless", "case", "while", "until", "begin", "then"];
    var indentExpressionKeywords = wordRegExp(indentExpressionKeywordsArray);
    var dedentKeywordsArray = ["end", "else", "elsif", "rescue", "ensure"];
    var dedentKeywords = wordRegExp(dedentKeywordsArray);
    var dedentPunctualsArray = ["\\)", "\\}", "\\]"];
    var dedentPunctuals = new RegExp("^(?:" + dedentPunctualsArray.join("|") + ")$");
    var nextTokenizer = {
      "def": tokenFollowIdent, "fun": tokenFollowIdent, "macro": tokenMacroDef,
      "class": tokenFollowType, "module": tokenFollowType, "struct": tokenFollowType,
      "lib": tokenFollowType, "enum": tokenFollowType, "union": tokenFollowType
    };
    var matching = {"[": "]", "{": "}", "(": ")", "<": ">"};

    function tokenBase$H(stream, state) {
      if (stream.eatSpace()) {
        return null;
      }

      // Macros
      if (state.lastToken != "\\" && stream.match("{%", false)) {
        return chain$a(tokenMacro("%", "%"), stream, state);
      }

      if (state.lastToken != "\\" && stream.match("{{", false)) {
        return chain$a(tokenMacro("{", "}"), stream, state);
      }

      // Comments
      if (stream.peek() == "#") {
        stream.skipToEnd();
        return "comment";
      }

      // Variables and keywords
      var matched;
      if (stream.match(idents)) {
        stream.eat(/[?!]/);

        matched = stream.current();
        if (stream.eat(":")) {
          return "atom";
        } else if (state.lastToken == ".") {
          return "property";
        } else if (keywords$B.test(matched)) {
          if (indentKeywords.test(matched)) {
            if (!(matched == "fun" && state.blocks.indexOf("lib") >= 0) && !(matched == "def" && state.lastToken == "abstract")) {
              state.blocks.push(matched);
              state.currentIndent += 1;
            }
          } else if ((state.lastStyle == "operator" || !state.lastStyle) && indentExpressionKeywords.test(matched)) {
            state.blocks.push(matched);
            state.currentIndent += 1;
          } else if (matched == "end") {
            state.blocks.pop();
            state.currentIndent -= 1;
          }

          if (nextTokenizer.hasOwnProperty(matched)) {
            state.tokenize.push(nextTokenizer[matched]);
          }

          return "keyword";
        } else if (atomWords.test(matched)) {
          return "atom";
        }

        return "variable";
      }

      // Class variables and instance variables
      // or attributes
      if (stream.eat("@")) {
        if (stream.peek() == "[") {
          return chain$a(tokenNest("[", "]", "meta"), stream, state);
        }

        stream.eat("@");
        stream.match(idents) || stream.match(types$5);
        return "propertyName";
      }

      // Constants and types
      if (stream.match(types$5)) {
        return "tag";
      }

      // Symbols or ':' operator
      if (stream.eat(":")) {
        if (stream.eat("\"")) {
          return chain$a(tokenQuote("\"", "atom", false), stream, state);
        } else if (stream.match(idents) || stream.match(types$5) ||
                   stream.match(operators$5) || stream.match(conditionalOperators) || stream.match(indexingOperators)) {
          return "atom";
        }
        stream.eat(":");
        return "operator";
      }

      // Strings
      if (stream.eat("\"")) {
        return chain$a(tokenQuote("\"", "string", true), stream, state);
      }

      // Strings or regexps or macro variables or '%' operator
      if (stream.peek() == "%") {
        var style = "string";
        var embed = true;
        var delim;

        if (stream.match("%r")) {
          // Regexps
          style = "string.special";
          delim = stream.next();
        } else if (stream.match("%w")) {
          embed = false;
          delim = stream.next();
        } else if (stream.match("%q")) {
          embed = false;
          delim = stream.next();
        } else {
          if(delim = stream.match(/^%([^\w\s=])/)) {
            delim = delim[1];
          } else if (stream.match(/^%[a-zA-Z_\u009F-\uFFFF][\w\u009F-\uFFFF]*/)) {
            // Macro variables
            return "meta";
          } else if (stream.eat('%')) {
            // '%' operator
            return "operator";
          }
        }

        if (matching.hasOwnProperty(delim)) {
          delim = matching[delim];
        }
        return chain$a(tokenQuote(delim, style, embed), stream, state);
      }

      // Here Docs
      if (matched = stream.match(/^<<-('?)([A-Z]\w*)\1/)) {
        return chain$a(tokenHereDoc(matched[2], !matched[1]), stream, state)
      }

      // Characters
      if (stream.eat("'")) {
        stream.match(/^(?:[^']|\\(?:[befnrtv0'"]|[0-7]{3}|u(?:[0-9a-fA-F]{4}|\{[0-9a-fA-F]{1,6}\})))/);
        stream.eat("'");
        return "atom";
      }

      // Numbers
      if (stream.eat("0")) {
        if (stream.eat("x")) {
          stream.match(/^[0-9a-fA-F_]+/);
        } else if (stream.eat("o")) {
          stream.match(/^[0-7_]+/);
        } else if (stream.eat("b")) {
          stream.match(/^[01_]+/);
        }
        return "number";
      }

      if (stream.eat(/^\d/)) {
        stream.match(/^[\d_]*(?:\.[\d_]+)?(?:[eE][+-]?\d+)?/);
        return "number";
      }

      // Operators
      if (stream.match(operators$5)) {
        stream.eat("="); // Operators can follow assign symbol.
        return "operator";
      }

      if (stream.match(conditionalOperators) || stream.match(anotherOperators)) {
        return "operator";
      }

      // Parens and braces
      if (matched = stream.match(/[({[]/, false)) {
        matched = matched[0];
        return chain$a(tokenNest(matched, matching[matched], null), stream, state);
      }

      // Escapes
      if (stream.eat("\\")) {
        stream.next();
        return "meta";
      }

      stream.next();
      return null;
    }

    function tokenNest(begin, end, style, started) {
      return function (stream, state) {
        if (!started && stream.match(begin)) {
          state.tokenize[state.tokenize.length - 1] = tokenNest(begin, end, style, true);
          state.currentIndent += 1;
          return style;
        }

        var nextStyle = tokenBase$H(stream, state);
        if (stream.current() === end) {
          state.tokenize.pop();
          state.currentIndent -= 1;
          nextStyle = style;
        }

        return nextStyle;
      };
    }

    function tokenMacro(begin, end, started) {
      return function (stream, state) {
        if (!started && stream.match("{" + begin)) {
          state.currentIndent += 1;
          state.tokenize[state.tokenize.length - 1] = tokenMacro(begin, end, true);
          return "meta";
        }

        if (stream.match(end + "}")) {
          state.currentIndent -= 1;
          state.tokenize.pop();
          return "meta";
        }

        return tokenBase$H(stream, state);
      };
    }

    function tokenMacroDef(stream, state) {
      if (stream.eatSpace()) {
        return null;
      }

      var matched;
      if (matched = stream.match(idents)) {
        if (matched == "def") {
          return "keyword";
        }
        stream.eat(/[?!]/);
      }

      state.tokenize.pop();
      return "def";
    }

    function tokenFollowIdent(stream, state) {
      if (stream.eatSpace()) {
        return null;
      }

      if (stream.match(idents)) {
        stream.eat(/[!?]/);
      } else {
        stream.match(operators$5) || stream.match(conditionalOperators) || stream.match(indexingOperators);
      }
      state.tokenize.pop();
      return "def";
    }

    function tokenFollowType(stream, state) {
      if (stream.eatSpace()) {
        return null;
      }

      stream.match(types$5);
      state.tokenize.pop();
      return "def";
    }

    function tokenQuote(end, style, embed) {
      return function (stream, state) {
        var escaped = false;

        while (stream.peek()) {
          if (!escaped) {
            if (stream.match("{%", false)) {
              state.tokenize.push(tokenMacro("%", "%"));
              return style;
            }

            if (stream.match("{{", false)) {
              state.tokenize.push(tokenMacro("{", "}"));
              return style;
            }

            if (embed && stream.match("#{", false)) {
              state.tokenize.push(tokenNest("#{", "}", "meta"));
              return style;
            }

            var ch = stream.next();

            if (ch == end) {
              state.tokenize.pop();
              return style;
            }

            escaped = embed && ch == "\\";
          } else {
            stream.next();
            escaped = false;
          }
        }

        return style;
      };
    }

    function tokenHereDoc(phrase, embed) {
      return function (stream, state) {
        if (stream.sol()) {
          stream.eatSpace();
          if (stream.match(phrase)) {
            state.tokenize.pop();
            return "string";
          }
        }

        var escaped = false;
        while (stream.peek()) {
          if (!escaped) {
            if (stream.match("{%", false)) {
              state.tokenize.push(tokenMacro("%", "%"));
              return "string";
            }

            if (stream.match("{{", false)) {
              state.tokenize.push(tokenMacro("{", "}"));
              return "string";
            }

            if (embed && stream.match("#{", false)) {
              state.tokenize.push(tokenNest("#{", "}", "meta"));
              return "string";
            }

            escaped = embed && stream.next() == "\\";
          } else {
            stream.next();
            escaped = false;
          }
        }

        return "string";
      }
    }

    const crystal = {
      startState: function () {
        return {
          tokenize: [tokenBase$H],
          currentIndent: 0,
          lastToken: null,
          lastStyle: null,
          blocks: []
        };
      },

      token: function (stream, state) {
        var style = state.tokenize[state.tokenize.length - 1](stream, state);
        var token = stream.current();

        if (style && style != "comment") {
          state.lastToken = token;
          state.lastStyle = style;
        }

        return style;
      },

      indent: function (state, textAfter, cx) {
        textAfter = textAfter.replace(/^\s*(?:\{%)?\s*|\s*(?:%\})?\s*$/g, "");

        if (dedentKeywords.test(textAfter) || dedentPunctuals.test(textAfter)) {
          return cx.unit * (state.currentIndent - 1);
        }

        return cx.unit * state.currentIndent;
      },

      languageData: {
        indentOnInput: wordRegExp(dedentPunctualsArray.concat(dedentKeywordsArray), true),
        commentTokens: {line: "#"}
      }
    };

    var crystal$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        crystal: crystal
    });

    function words$h(str) {
      var obj = {}, words = str.split(" ");
      for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
      return obj;
    }

    var blockKeywords$4 = "body catch class do else enum for foreach foreach_reverse if in interface mixin " +
        "out scope struct switch try union unittest version while with";

    const parserConfig$2 = {
      keywords: words$h("abstract alias align asm assert auto break case cast cdouble cent cfloat const continue " +
                      "debug default delegate delete deprecated export extern final finally function goto immutable " +
                      "import inout invariant is lazy macro module new nothrow override package pragma private " +
                      "protected public pure ref return shared short static super synchronized template this " +
                      "throw typedef typeid typeof volatile __FILE__ __LINE__ __gshared __traits __vector __parameters " +
                      blockKeywords$4),
      blockKeywords: words$h(blockKeywords$4),
      builtin: words$h("bool byte char creal dchar double float idouble ifloat int ireal long real short ubyte " +
                     "ucent uint ulong ushort wchar wstring void size_t sizediff_t"),
      atoms: words$h("exit failure success true false null"),
      hooks: {
        "@": function(stream, _state) {
          stream.eatWhile(/[\w\$_]/);
          return "meta";
        }
      }
    };

    var keywords$A = parserConfig$2.keywords,
        builtin$3 = parserConfig$2.builtin,
        blockKeywords$4 = parserConfig$2.blockKeywords,
        atoms$c = parserConfig$2.atoms,
        hooks$2 = parserConfig$2.hooks,
        multiLineStrings$3 = parserConfig$2.multiLineStrings;
    var isOperatorChar$e = /[+\-*&%=<>!?|\/]/;

    var curPunc$b;

    function tokenBase$G(stream, state) {
      var ch = stream.next();
      if (hooks$2[ch]) {
        var result = hooks$2[ch](stream, state);
        if (result !== false) return result;
      }
      if (ch == '"' || ch == "'" || ch == "`") {
        state.tokenize = tokenString$q(ch);
        return state.tokenize(stream, state);
      }
      if (/[\[\]{}\(\),;\:\.]/.test(ch)) {
        curPunc$b = ch;
        return null;
      }
      if (/\d/.test(ch)) {
        stream.eatWhile(/[\w\.]/);
        return "number";
      }
      if (ch == "/") {
        if (stream.eat("+")) {
          state.tokenize = tokenNestedComment;
          return tokenNestedComment(stream, state);
        }
        if (stream.eat("*")) {
          state.tokenize = tokenComment$j;
          return tokenComment$j(stream, state);
        }
        if (stream.eat("/")) {
          stream.skipToEnd();
          return "comment";
        }
      }
      if (isOperatorChar$e.test(ch)) {
        stream.eatWhile(isOperatorChar$e);
        return "operator";
      }
      stream.eatWhile(/[\w\$_\xa1-\uffff]/);
      var cur = stream.current();
      if (keywords$A.propertyIsEnumerable(cur)) {
        if (blockKeywords$4.propertyIsEnumerable(cur)) curPunc$b = "newstatement";
        return "keyword";
      }
      if (builtin$3.propertyIsEnumerable(cur)) {
        if (blockKeywords$4.propertyIsEnumerable(cur)) curPunc$b = "newstatement";
        return "builtin";
      }
      if (atoms$c.propertyIsEnumerable(cur)) return "atom";
      return "variable";
    }

    function tokenString$q(quote) {
      return function(stream, state) {
        var escaped = false, next, end = false;
        while ((next = stream.next()) != null) {
          if (next == quote && !escaped) {end = true; break;}
          escaped = !escaped && next == "\\";
        }
        if (end || !(escaped || multiLineStrings$3))
          state.tokenize = null;
        return "string";
      };
    }

    function tokenComment$j(stream, state) {
      var maybeEnd = false, ch;
      while (ch = stream.next()) {
        if (ch == "/" && maybeEnd) {
          state.tokenize = null;
          break;
        }
        maybeEnd = (ch == "*");
      }
      return "comment";
    }

    function tokenNestedComment(stream, state) {
      var maybeEnd = false, ch;
      while (ch = stream.next()) {
        if (ch == "/" && maybeEnd) {
          state.tokenize = null;
          break;
        }
        maybeEnd = (ch == "+");
      }
      return "comment";
    }

    function Context$a(indented, column, type, align, prev) {
      this.indented = indented;
      this.column = column;
      this.type = type;
      this.align = align;
      this.prev = prev;
    }
    function pushContext$d(state, col, type) {
      var indent = state.indented;
      if (state.context && state.context.type == "statement")
        indent = state.context.indented;
      return state.context = new Context$a(indent, col, type, null, state.context);
    }
    function popContext$d(state) {
      var t = state.context.type;
      if (t == ")" || t == "]" || t == "}")
        state.indented = state.context.indented;
      return state.context = state.context.prev;
    }

    // Interface

    const d$1 = {
      startState: function(indentUnit) {
        return {
          tokenize: null,
          context: new Context$a(-indentUnit, 0, "top", false),
          indented: 0,
          startOfLine: true
        };
      },

      token: function(stream, state) {
        var ctx = state.context;
        if (stream.sol()) {
          if (ctx.align == null) ctx.align = false;
          state.indented = stream.indentation();
          state.startOfLine = true;
        }
        if (stream.eatSpace()) return null;
        curPunc$b = null;
        var style = (state.tokenize || tokenBase$G)(stream, state);
        if (style == "comment" || style == "meta") return style;
        if (ctx.align == null) ctx.align = true;

        if ((curPunc$b == ";" || curPunc$b == ":" || curPunc$b == ",") && ctx.type == "statement") popContext$d(state);
        else if (curPunc$b == "{") pushContext$d(state, stream.column(), "}");
        else if (curPunc$b == "[") pushContext$d(state, stream.column(), "]");
        else if (curPunc$b == "(") pushContext$d(state, stream.column(), ")");
        else if (curPunc$b == "}") {
          while (ctx.type == "statement") ctx = popContext$d(state);
          if (ctx.type == "}") ctx = popContext$d(state);
          while (ctx.type == "statement") ctx = popContext$d(state);
        }
        else if (curPunc$b == ctx.type) popContext$d(state);
        else if (((ctx.type == "}" || ctx.type == "top") && curPunc$b != ';') || (ctx.type == "statement" && curPunc$b == "newstatement"))
          pushContext$d(state, stream.column(), "statement");
        state.startOfLine = false;
        return style;
      },

      indent: function(state, textAfter, cx) {
        if (state.tokenize != tokenBase$G && state.tokenize != null) return null;
        var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);
        if (ctx.type == "statement" && firstChar == "}") ctx = ctx.prev;
        var closing = firstChar == ctx.type;
        if (ctx.type == "statement") return ctx.indented + (firstChar == "{" ? 0 : cx.unit);
        else if (ctx.align) return ctx.column + (closing ? 0 : 1);
        else return ctx.indented + (closing ? 0 : cx.unit);
      },

      languageData: {
        indentOnInput: /^\s*[{}]$/,
        commentTokens: {line: "//", block: {open: "/*", close: "*/"}}
      }
    };

    var d$2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        d: d$1
    });

    var TOKEN_NAMES = {
      '+': 'inserted',
      '-': 'deleted',
      '@': 'meta'
    };

    const diff = {
      token: function(stream) {
        var tw_pos = stream.string.search(/[\t ]+?$/);

        if (!stream.sol() || tw_pos === 0) {
          stream.skipToEnd();
          return ("error " + (
            TOKEN_NAMES[stream.string.charAt(0)] || '')).replace(/ $/, '');
        }

        var token_name = TOKEN_NAMES[stream.peek()] || stream.skipToEnd();

        if (tw_pos === -1) {
          stream.skipToEnd();
        } else {
          stream.pos = tw_pos;
        }

        return token_name;
      }
    };

    var diff$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        diff: diff
    });

    function simpleMode(states) {
      ensureState(states, "start");
      var states_ = {}, meta = states.languageData || {}, hasIndentation = false;
      for (var state in states) if (state != meta && states.hasOwnProperty(state)) {
        var list = states_[state] = [], orig = states[state];
        for (var i = 0; i < orig.length; i++) {
          var data = orig[i];
          list.push(new Rule(data, states));
          if (data.indent || data.dedent) hasIndentation = true;
        }
      }
      return {
        startState: function() {
          return {state: "start", pending: null, indent: hasIndentation ? [] : null};
        },
        copyState: function(state) {
          var s = {state: state.state, pending: state.pending, indent: state.indent && state.indent.slice(0)};
          if (state.stack)
            s.stack = state.stack.slice(0);
          return s;
        },
        token: tokenFunction(states_),
        indent: indentFunction(states_, meta),
        languageData: meta
      }
    }
    function ensureState(states, name) {
      if (!states.hasOwnProperty(name))
        throw new Error("Undefined state " + name + " in simple mode");
    }

    function toRegex(val, caret) {
      if (!val) return /(?:)/;
      var flags = "";
      if (val instanceof RegExp) {
        if (val.ignoreCase) flags = "i";
        val = val.source;
      } else {
        val = String(val);
      }
      return new RegExp((caret === false ? "" : "^") + "(?:" + val + ")", flags);
    }

    function asToken(val) {
      if (!val) return null;
      if (val.apply) return val
      if (typeof val == "string") return val.replace(/\./g, " ");
      var result = [];
      for (var i = 0; i < val.length; i++)
        result.push(val[i] && val[i].replace(/\./g, " "));
      return result;
    }

    function Rule(data, states) {
      if (data.next || data.push) ensureState(states, data.next || data.push);
      this.regex = toRegex(data.regex);
      this.token = asToken(data.token);
      this.data = data;
    }

    function tokenFunction(states) {
      return function(stream, state) {
        if (state.pending) {
          var pend = state.pending.shift();
          if (state.pending.length == 0) state.pending = null;
          stream.pos += pend.text.length;
          return pend.token;
        }

        var curState = states[state.state];
        for (var i = 0; i < curState.length; i++) {
          var rule = curState[i];
          var matches = (!rule.data.sol || stream.sol()) && stream.match(rule.regex);
          if (matches) {
            if (rule.data.next) {
              state.state = rule.data.next;
            } else if (rule.data.push) {
              (state.stack || (state.stack = [])).push(state.state);
              state.state = rule.data.push;
            } else if (rule.data.pop && state.stack && state.stack.length) {
              state.state = state.stack.pop();
            }

            if (rule.data.indent)
              state.indent.push(stream.indentation() + stream.indentUnit);
            if (rule.data.dedent)
              state.indent.pop();
            var token = rule.token;
            if (token && token.apply) token = token(matches);
            if (matches.length > 2 && rule.token && typeof rule.token != "string") {
              state.pending = [];
              for (var j = 2; j < matches.length; j++)
                if (matches[j])
                  state.pending.push({text: matches[j], token: rule.token[j - 1]});
              stream.backUp(matches[0].length - (matches[1] ? matches[1].length : 0));
              return token[0];
            } else if (token && token.join) {
              return token[0];
            } else {
              return token;
            }
          }
        }
        stream.next();
        return null;
      };
    }

    function indentFunction(states, meta) {
      return function(state, textAfter) {
        if (state.indent == null || meta.dontIndentStates && meta.doneIndentState.indexOf(state.state) > -1)
          return null

        var pos = state.indent.length - 1, rules = states[state.state];
        scan: for (;;) {
          for (var i = 0; i < rules.length; i++) {
            var rule = rules[i];
            if (rule.data.dedent && rule.data.dedentIfLineStart !== false) {
              var m = rule.regex.exec(textAfter);
              if (m && m[0]) {
                pos--;
                if (rule.next || rule.push) rules = states[rule.next || rule.push];
                textAfter = textAfter.slice(m[0].length);
                continue scan;
              }
            }
          }
          break;
        }
        return pos < 0 ? 0 : state.indent[pos];
      };
    }

    var from = "from";
    var fromRegex = new RegExp("^(\\s*)\\b(" + from + ")\\b", "i");

    var shells = ["run", "cmd", "entrypoint", "shell"];
    var shellsAsArrayRegex = new RegExp("^(\\s*)(" + shells.join('|') + ")(\\s+\\[)", "i");

    var expose = "expose";
    var exposeRegex = new RegExp("^(\\s*)(" + expose + ")(\\s+)", "i");

    var others = [
      "arg", "from", "maintainer", "label", "env",
      "add", "copy", "volume", "user",
      "workdir", "onbuild", "stopsignal", "healthcheck", "shell"
    ];

    // Collect all Dockerfile directives
    var instructions = [from, expose].concat(shells).concat(others),
        instructionRegex = "(" + instructions.join('|') + ")",
        instructionOnlyLine = new RegExp("^(\\s*)" + instructionRegex + "(\\s*)(#.*)?$", "i"),
        instructionWithArguments = new RegExp("^(\\s*)" + instructionRegex + "(\\s+)", "i");

    const dockerFile = simpleMode({
      start: [
        // Block comment: This is a line starting with a comment
        {
          regex: /^\s*#.*$/,
          sol: true,
          token: "comment"
        },
        {
          regex: fromRegex,
          token: [null, "keyword"],
          sol: true,
          next: "from"
        },
        // Highlight an instruction without any arguments (for convenience)
        {
          regex: instructionOnlyLine,
          token: [null, "keyword", null, "error"],
          sol: true
        },
        {
          regex: shellsAsArrayRegex,
          token: [null, "keyword", null],
          sol: true,
          next: "array"
        },
        {
          regex: exposeRegex,
          token: [null, "keyword", null],
          sol: true,
          next: "expose"
        },
        // Highlight an instruction followed by arguments
        {
          regex: instructionWithArguments,
          token: [null, "keyword", null],
          sol: true,
          next: "arguments"
        },
        {
          regex: /./,
          token: null
        }
      ],
      from: [
        {
          regex: /\s*$/,
          token: null,
          next: "start"
        },
        {
          // Line comment without instruction arguments is an error
          regex: /(\s*)(#.*)$/,
          token: [null, "error"],
          next: "start"
        },
        {
          regex: /(\s*\S+\s+)(as)/i,
          token: [null, "keyword"],
          next: "start"
        },
        // Fail safe return to start
        {
          token: null,
          next: "start"
        }
      ],
      single: [
        {
          regex: /(?:[^\\']|\\.)/,
          token: "string"
        },
        {
          regex: /'/,
          token: "string",
          pop: true
        }
      ],
      double: [
        {
          regex: /(?:[^\\"]|\\.)/,
          token: "string"
        },
        {
          regex: /"/,
          token: "string",
          pop: true
        }
      ],
      array: [
        {
          regex: /\]/,
          token: null,
          next: "start"
        },
        {
          regex: /"(?:[^\\"]|\\.)*"?/,
          token: "string"
        }
      ],
      expose: [
        {
          regex: /\d+$/,
          token: "number",
          next: "start"
        },
        {
          regex: /[^\d]+$/,
          token: null,
          next: "start"
        },
        {
          regex: /\d+/,
          token: "number"
        },
        {
          regex: /[^\d]+/,
          token: null
        },
        // Fail safe return to start
        {
          token: null,
          next: "start"
        }
      ],
      arguments: [
        {
          regex: /^\s*#.*$/,
          sol: true,
          token: "comment"
        },
        {
          regex: /"(?:[^\\"]|\\.)*"?$/,
          token: "string",
          next: "start"
        },
        {
          regex: /"/,
          token: "string",
          push: "double"
        },
        {
          regex: /'(?:[^\\']|\\.)*'?$/,
          token: "string",
          next: "start"
        },
        {
          regex: /'/,
          token: "string",
          push: "single"
        },
        {
          regex: /[^#"']+[\\`]$/,
          token: null
        },
        {
          regex: /[^#"']+$/,
          token: null,
          next: "start"
        },
        {
          regex: /[^#"']+/,
          token: null
        },
        // Fail safe return to start
        {
          token: null,
          next: "start"
        }
      ],
      languageData: {
        commentTokens: {line: "#"}
      }
    });

    var dockerfile = /*#__PURE__*/Object.freeze({
        __proto__: null,
        dockerFile: dockerFile
    });

    var type$4;
    function ret$2(style, tp) {type$4 = tp; return style;}

    function tokenBase$F(stream, state) {
      var ch = stream.next();

      if (ch == "<" && stream.eat("!") ) {
        if (stream.eatWhile(/[\-]/)) {
          state.tokenize = tokenSGMLComment$1;
          return tokenSGMLComment$1(stream, state);
        } else if (stream.eatWhile(/[\w]/)) return ret$2("keyword", "doindent");
      } else if (ch == "<" && stream.eat("?")) { //xml declaration
        state.tokenize = inBlock$1("meta", "?>");
        return ret$2("meta", ch);
      } else if (ch == "#" && stream.eatWhile(/[\w]/)) return ret$2("atom", "tag");
      else if (ch == "|") return ret$2("keyword", "separator");
      else if (ch.match(/[\(\)\[\]\-\.,\+\?>]/)) return ret$2(null, ch);//if(ch === ">") return ret(null, "endtag"); else
      else if (ch.match(/[\[\]]/)) return ret$2("rule", ch);
      else if (ch == "\"" || ch == "'") {
        state.tokenize = tokenString$p(ch);
        return state.tokenize(stream, state);
      } else if (stream.eatWhile(/[a-zA-Z\?\+\d]/)) {
        var sc = stream.current();
        if( sc.substr(sc.length-1,sc.length).match(/\?|\+/) !== null )stream.backUp(1);
        return ret$2("tag", "tag");
      } else if (ch == "%" || ch == "*" ) return ret$2("number", "number");
      else {
        stream.eatWhile(/[\w\\\-_%.{,]/);
        return ret$2(null, null);
      }
    }

    function tokenSGMLComment$1(stream, state) {
      var dashes = 0, ch;
      while ((ch = stream.next()) != null) {
        if (dashes >= 2 && ch == ">") {
          state.tokenize = tokenBase$F;
          break;
        }
        dashes = (ch == "-") ? dashes + 1 : 0;
      }
      return ret$2("comment", "comment");
    }

    function tokenString$p(quote) {
      return function(stream, state) {
        var escaped = false, ch;
        while ((ch = stream.next()) != null) {
          if (ch == quote && !escaped) {
            state.tokenize = tokenBase$F;
            break;
          }
          escaped = !escaped && ch == "\\";
        }
        return ret$2("string", "tag");
      };
    }

    function inBlock$1(style, terminator) {
      return function(stream, state) {
        while (!stream.eol()) {
          if (stream.match(terminator)) {
            state.tokenize = tokenBase$F;
            break;
          }
          stream.next();
        }
        return style;
      };
    }

    const dtd = {
      startState: function() {
        return {tokenize: tokenBase$F,
                baseIndent: 0,
                stack: []};
      },

      token: function(stream, state) {
        if (stream.eatSpace()) return null;
        var style = state.tokenize(stream, state);

        var context = state.stack[state.stack.length-1];
        if (stream.current() == "[" || type$4 === "doindent" || type$4 == "[") state.stack.push("rule");
        else if (type$4 === "endtag") state.stack[state.stack.length-1] = "endtag";
        else if (stream.current() == "]" || type$4 == "]" || (type$4 == ">" && context == "rule")) state.stack.pop();
        else if (type$4 == "[") state.stack.push("[");
        return style;
      },

      indent: function(state, textAfter, cx) {
        var n = state.stack.length;

        if( textAfter.charAt(0) === ']' )n--;
        else if(textAfter.substr(textAfter.length-1, textAfter.length) === ">"){
          if(textAfter.substr(0,1) === "<") ;
          else if( type$4 == "doindent" && textAfter.length > 1 ) ;
          else if( type$4 == "doindent")n--;
          else if( type$4 == ">" && textAfter.length > 1) ;
          else if( type$4 == "tag" && textAfter !== ">") ;
          else if( type$4 == "tag" && state.stack[state.stack.length-1] == "rule")n--;
          else if( type$4 == "tag")n++;
          else if( textAfter === ">" && state.stack[state.stack.length-1] == "rule" && type$4 === ">")n--;
          else if( textAfter === ">" && state.stack[state.stack.length-1] == "rule") ;
          else if( textAfter.substr(0,1) !== "<" && textAfter.substr(0,1) === ">" )n=n-1;
          else if( textAfter === ">") ;
          else n=n-1;
          //over rule them all
          if(type$4 == null || type$4 == "]")n--;
        }

        return state.baseIndent + n * cx.unit;
      },

      languageData: {
        indentOnInput: /^\s*[\]>]$/
      }
    };

    var dtd$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        dtd: dtd
    });

    function forEach(arr, f) {
      for (var i = 0; i < arr.length; i++) f(arr[i], i);
    }
    function some(arr, f) {
      for (var i = 0; i < arr.length; i++) if (f(arr[i], i)) return true
      return false
    }

    // Words
    var words$g = {
      // Words that introduce unnamed definitions like "define interface"
      unnamedDefinition: ["interface"],

      // Words that introduce simple named definitions like "define library"
      namedDefinition: ["module", "library", "macro",
                        "C-struct", "C-union",
                        "C-function", "C-callable-wrapper"
                       ],

      // Words that introduce type definitions like "define class".
      // These are also parameterized like "define method" and are
      // appended to otherParameterizedDefinitionWords
      typeParameterizedDefinition: ["class", "C-subtype", "C-mapped-subtype"],

      // Words that introduce trickier definitions like "define method".
      // These require special definitions to be added to startExpressions
      otherParameterizedDefinition: ["method", "function",
                                     "C-variable", "C-address"
                                    ],

      // Words that introduce module constant definitions.
      // These must also be simple definitions and are
      // appended to otherSimpleDefinitionWords
      constantSimpleDefinition: ["constant"],

      // Words that introduce module variable definitions.
      // These must also be simple definitions and are
      // appended to otherSimpleDefinitionWords
      variableSimpleDefinition: ["variable"],

      // Other words that introduce simple definitions
      // (without implicit bodies).
      otherSimpleDefinition: ["generic", "domain",
                              "C-pointer-type",
                              "table"
                             ],

      // Words that begin statements with implicit bodies.
      statement: ["if", "block", "begin", "method", "case",
                  "for", "select", "when", "unless", "until",
                  "while", "iterate", "profiling", "dynamic-bind"
                 ],

      // Patterns that act as separators in compound statements.
      // This may include any general pattern that must be indented
      // specially.
      separator: ["finally", "exception", "cleanup", "else",
                  "elseif", "afterwards"
                 ],

      // Keywords that do not require special indentation handling,
      // but which should be highlighted
      other: ["above", "below", "by", "from", "handler", "in",
              "instance", "let", "local", "otherwise", "slot",
              "subclass", "then", "to", "keyed-by", "virtual"
             ],

      // Condition signaling function calls
      signalingCalls: ["signal", "error", "cerror",
                       "break", "check-type", "abort"
                      ]
    };

    words$g["otherDefinition"] =
      words$g["unnamedDefinition"]
      .concat(words$g["namedDefinition"])
      .concat(words$g["otherParameterizedDefinition"]);

    words$g["definition"] =
      words$g["typeParameterizedDefinition"]
      .concat(words$g["otherDefinition"]);

    words$g["parameterizedDefinition"] =
      words$g["typeParameterizedDefinition"]
      .concat(words$g["otherParameterizedDefinition"]);

    words$g["simpleDefinition"] =
      words$g["constantSimpleDefinition"]
      .concat(words$g["variableSimpleDefinition"])
      .concat(words$g["otherSimpleDefinition"]);

    words$g["keyword"] =
      words$g["statement"]
      .concat(words$g["separator"])
      .concat(words$g["other"]);

    // Patterns
    var symbolPattern = "[-_a-zA-Z?!*@<>$%]+";
    var symbol$1 = new RegExp("^" + symbolPattern);
    var patterns = {
      // Symbols with special syntax
      symbolKeyword: symbolPattern + ":",
      symbolClass: "<" + symbolPattern + ">",
      symbolGlobal: "\\*" + symbolPattern + "\\*",
      symbolConstant: "\\$" + symbolPattern
    };
    var patternStyles = {
      symbolKeyword: "atom",
      symbolClass: "tag",
      symbolGlobal: "variableName.standard",
      symbolConstant: "variableName.constant"
    };

    // Compile all patterns to regular expressions
    for (var patternName in patterns)
      if (patterns.hasOwnProperty(patternName))
        patterns[patternName] = new RegExp("^" + patterns[patternName]);

    // Names beginning "with-" and "without-" are commonly
    // used as statement macro
    patterns["keyword"] = [/^with(?:out)?-[-_a-zA-Z?!*@<>$%]+/];

    var styles = {};
    styles["keyword"] = "keyword";
    styles["definition"] = "def";
    styles["simpleDefinition"] = "def";
    styles["signalingCalls"] = "builtin";

    // protected words lookup table
    var wordLookup = {};
    var styleLookup = {};

    forEach([
      "keyword",
      "definition",
      "simpleDefinition",
      "signalingCalls"
    ], function(type) {
      forEach(words$g[type], function(word) {
        wordLookup[word] = type;
        styleLookup[word] = styles[type];
      });
    });


    function chain$9(stream, state, f) {
      state.tokenize = f;
      return f(stream, state);
    }

    function tokenBase$E(stream, state) {
      // String
      var ch = stream.peek();
      if (ch == "'" || ch == '"') {
        stream.next();
        return chain$9(stream, state, tokenString$o(ch, "string"));
      }
      // Comment
      else if (ch == "/") {
        stream.next();
        if (stream.eat("*")) {
          return chain$9(stream, state, tokenComment$i);
        } else if (stream.eat("/")) {
          stream.skipToEnd();
          return "comment";
        }
        stream.backUp(1);
      }
      // Decimal
      else if (/[+\-\d\.]/.test(ch)) {
        if (stream.match(/^[+-]?[0-9]*\.[0-9]*([esdx][+-]?[0-9]+)?/i) ||
            stream.match(/^[+-]?[0-9]+([esdx][+-]?[0-9]+)/i) ||
            stream.match(/^[+-]?\d+/)) {
          return "number";
        }
      }
      // Hash
      else if (ch == "#") {
        stream.next();
        // Symbol with string syntax
        ch = stream.peek();
        if (ch == '"') {
          stream.next();
          return chain$9(stream, state, tokenString$o('"', "string"));
        }
        // Binary number
        else if (ch == "b") {
          stream.next();
          stream.eatWhile(/[01]/);
          return "number";
        }
        // Hex number
        else if (ch == "x") {
          stream.next();
          stream.eatWhile(/[\da-f]/i);
          return "number";
        }
        // Octal number
        else if (ch == "o") {
          stream.next();
          stream.eatWhile(/[0-7]/);
          return "number";
        }
        // Token concatenation in macros
        else if (ch == '#') {
          stream.next();
          return "punctuation";
        }
        // Sequence literals
        else if ((ch == '[') || (ch == '(')) {
          stream.next();
          return "bracket";
          // Hash symbol
        } else if (stream.match(/f|t|all-keys|include|key|next|rest/i)) {
          return "atom";
        } else {
          stream.eatWhile(/[-a-zA-Z]/);
          return "error";
        }
      } else if (ch == "~") {
        stream.next();
        ch = stream.peek();
        if (ch == "=") {
          stream.next();
          ch = stream.peek();
          if (ch == "=") {
            stream.next();
            return "operator";
          }
          return "operator";
        }
        return "operator";
      } else if (ch == ":") {
        stream.next();
        ch = stream.peek();
        if (ch == "=") {
          stream.next();
          return "operator";
        } else if (ch == ":") {
          stream.next();
          return "punctuation";
        }
      } else if ("[](){}".indexOf(ch) != -1) {
        stream.next();
        return "bracket";
      } else if (".,".indexOf(ch) != -1) {
        stream.next();
        return "punctuation";
      } else if (stream.match("end")) {
        return "keyword";
      }
      for (var name in patterns) {
        if (patterns.hasOwnProperty(name)) {
          var pattern = patterns[name];
          if ((pattern instanceof Array && some(pattern, function(p) {
            return stream.match(p);
          })) || stream.match(pattern))
            return patternStyles[name];
        }
      }
      if (/[+\-*\/^=<>&|]/.test(ch)) {
        stream.next();
        return "operator";
      }
      if (stream.match("define")) {
        return "def";
      } else {
        stream.eatWhile(/[\w\-]/);
        // Keyword
        if (wordLookup.hasOwnProperty(stream.current())) {
          return styleLookup[stream.current()];
        } else if (stream.current().match(symbol$1)) {
          return "variable";
        } else {
          stream.next();
          return "variableName.standard";
        }
      }
    }

    function tokenComment$i(stream, state) {
      var maybeEnd = false, maybeNested = false, nestedCount = 0, ch;
      while ((ch = stream.next())) {
        if (ch == "/" && maybeEnd) {
          if (nestedCount > 0) {
            nestedCount--;
          } else {
            state.tokenize = tokenBase$E;
            break;
          }
        } else if (ch == "*" && maybeNested) {
          nestedCount++;
        }
        maybeEnd = (ch == "*");
        maybeNested = (ch == "/");
      }
      return "comment";
    }

    function tokenString$o(quote, style) {
      return function(stream, state) {
        var escaped = false, next, end = false;
        while ((next = stream.next()) != null) {
          if (next == quote && !escaped) {
            end = true;
            break;
          }
          escaped = !escaped && next == "\\";
        }
        if (end || !escaped) {
          state.tokenize = tokenBase$E;
        }
        return style;
      };
    }

    // Interface
    const dylan = {
      startState: function() {
        return {
          tokenize: tokenBase$E,
          currentIndent: 0
        };
      },
      token: function(stream, state) {
        if (stream.eatSpace())
          return null;
        var style = state.tokenize(stream, state);
        return style;
      },
      languageData: {
        commentTokens: {block: {open: "/*", close: "*/"}}
      }
    };

    var dylan$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        dylan: dylan
    });

    var commentType = {slash: 0, parenthesis: 1};
    var stateType = {comment: 0, _string: 1, characterClass: 2};

    const ebnf = {
      startState: function () {
        return {
          stringType: null,
          commentType: null,
          braced: 0,
          lhs: true,
          localState: null,
          stack: [],
          inDefinition: false
        };
      },
      token: function (stream, state) {
        if (!stream) return;

        //check for state changes
        if (state.stack.length === 0) {
          //strings
          if ((stream.peek() == '"') || (stream.peek() == "'")) {
            state.stringType = stream.peek();
            stream.next(); // Skip quote
            state.stack.unshift(stateType._string);
          } else if (stream.match('/*')) { //comments starting with /*
            state.stack.unshift(stateType.comment);
            state.commentType = commentType.slash;
          } else if (stream.match('(*')) { //comments starting with (*
            state.stack.unshift(stateType.comment);
            state.commentType = commentType.parenthesis;
          }
        }

        //return state
        //stack has
        switch (state.stack[0]) {
        case stateType._string:
          while (state.stack[0] === stateType._string && !stream.eol()) {
            if (stream.peek() === state.stringType) {
              stream.next(); // Skip quote
              state.stack.shift(); // Clear flag
            } else if (stream.peek() === "\\") {
              stream.next();
              stream.next();
            } else {
              stream.match(/^.[^\\\"\']*/);
            }
          }
          return state.lhs ? "property" : "string"; // Token style

        case stateType.comment:
          while (state.stack[0] === stateType.comment && !stream.eol()) {
            if (state.commentType === commentType.slash && stream.match('*/')) {
              state.stack.shift(); // Clear flag
              state.commentType = null;
            } else if (state.commentType === commentType.parenthesis && stream.match('*)')) {
              state.stack.shift(); // Clear flag
              state.commentType = null;
            } else {
              stream.match(/^.[^\*]*/);
            }
          }
          return "comment";

        case stateType.characterClass:
          while (state.stack[0] === stateType.characterClass && !stream.eol()) {
            if (!(stream.match(/^[^\]\\]+/) || stream.match('.'))) {
              state.stack.shift();
            }
          }
          return "operator";
        }

        var peek = stream.peek();

        //no stack
        switch (peek) {
        case "[":
          stream.next();
          state.stack.unshift(stateType.characterClass);
          return "bracket";
        case ":":
        case "|":
        case ";":
          stream.next();
          return "operator";
        case "%":
          if (stream.match("%%")) {
            return "header";
          } else if (stream.match(/[%][A-Za-z]+/)) {
            return "keyword";
          } else if (stream.match(/[%][}]/)) {
            return "bracket";
          }
          break;
        case "/":
          if (stream.match(/[\/][A-Za-z]+/)) {
            return "keyword";
          }
        case "\\":
          if (stream.match(/[\][a-z]+/)) {
            return "string.special";
          }
        case ".":
          if (stream.match(".")) {
            return "atom";
          }
        case "*":
        case "-":
        case "+":
        case "^":
          if (stream.match(peek)) {
            return "atom";
          }
        case "$":
          if (stream.match("$$")) {
            return "builtin";
          } else if (stream.match(/[$][0-9]+/)) {
            return "variableName.special";
          }
        case "<":
          if (stream.match(/<<[a-zA-Z_]+>>/)) {
            return "builtin";
          }
        }

        if (stream.match('//')) {
          stream.skipToEnd();
          return "comment";
        } else if (stream.match('return')) {
          return "operator";
        } else if (stream.match(/^[a-zA-Z_][a-zA-Z0-9_]*/)) {
          if (stream.match(/(?=[\(.])/)) {
            return "variable";
          } else if (stream.match(/(?=[\s\n]*[:=])/)) {
            return "def";
          }
          return "variableName.special";
        } else if (["[", "]", "(", ")"].indexOf(stream.peek()) != -1) {
          stream.next();
          return "bracket";
        } else if (!stream.eatSpace()) {
          stream.next();
        }
        return null;
      }
    };

    var ebnf$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ebnf: ebnf
    });

    function words$f(str) {
      var obj = {}, words = str.split(" ");
      for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
      return obj;
    }

    function metaHook$1(stream, state) {
      if (!state.startOfLine) return false;
      stream.skipToEnd();
      return "meta";
    }

    var keyword = words$f("abs acos allnodes ascii asin asstring atan atan2 ave case choose choosen choosesets clustersize combine correlation cos cosh count covariance cron dataset dedup define denormalize distribute distributed distribution ebcdic enth error evaluate event eventextra eventname exists exp failcode failmessage fetch fromunicode getisvalid global graph group hash hash32 hash64 hashcrc hashmd5 having if index intformat isvalid iterate join keyunicode length library limit ln local log loop map matched matchlength matchposition matchtext matchunicode max merge mergejoin min nolocal nonempty normalize parse pipe power preload process project pull random range rank ranked realformat recordof regexfind regexreplace regroup rejected rollup round roundup row rowdiff sample set sin sinh sizeof soapcall sort sorted sqrt stepped stored sum table tan tanh thisnode topn tounicode transfer trim truncate typeof ungroup unicodeorder variance which workunit xmldecode xmlencode xmltext xmlunicode");
    var variable = words$f("apply assert build buildindex evaluate fail keydiff keypatch loadxml nothor notify output parallel sequential soapcall wait");
    var variable_2 = words$f("__compressed__ all and any as atmost before beginc++ best between case const counter csv descend encrypt end endc++ endmacro except exclusive expire export extend false few first flat from full function group header heading hole ifblock import in interface joined keep keyed last left limit load local locale lookup macro many maxcount maxlength min skew module named nocase noroot noscan nosort not of only opt or outer overwrite packed partition penalty physicallength pipe quote record relationship repeat return right scan self separator service shared skew skip sql store terminator thor threshold token transform trim true type unicodeorder unsorted validate virtual whole wild within xml xpath");
    var variable_3 = words$f("ascii big_endian boolean data decimal ebcdic integer pattern qstring real record rule set of string token udecimal unicode unsigned varstring varunicode");
    var builtin$2 = words$f("checkpoint deprecated failcode failmessage failure global independent onwarning persist priority recovery stored success wait when");
    var blockKeywords$3 = words$f("catch class do else finally for if switch try while");
    var atoms$b = words$f("true false null");
    var hooks$1 = {"#": metaHook$1};
    var isOperatorChar$d = /[+\-*&%=<>!?|\/]/;

    var curPunc$a;

    function tokenBase$D(stream, state) {
      var ch = stream.next();
      if (hooks$1[ch]) {
        var result = hooks$1[ch](stream, state);
        if (result !== false) return result;
      }
      if (ch == '"' || ch == "'") {
        state.tokenize = tokenString$n(ch);
        return state.tokenize(stream, state);
      }
      if (/[\[\]{}\(\),;\:\.]/.test(ch)) {
        curPunc$a = ch;
        return null;
      }
      if (/\d/.test(ch)) {
        stream.eatWhile(/[\w\.]/);
        return "number";
      }
      if (ch == "/") {
        if (stream.eat("*")) {
          state.tokenize = tokenComment$h;
          return tokenComment$h(stream, state);
        }
        if (stream.eat("/")) {
          stream.skipToEnd();
          return "comment";
        }
      }
      if (isOperatorChar$d.test(ch)) {
        stream.eatWhile(isOperatorChar$d);
        return "operator";
      }
      stream.eatWhile(/[\w\$_]/);
      var cur = stream.current().toLowerCase();
      if (keyword.propertyIsEnumerable(cur)) {
        if (blockKeywords$3.propertyIsEnumerable(cur)) curPunc$a = "newstatement";
        return "keyword";
      } else if (variable.propertyIsEnumerable(cur)) {
        if (blockKeywords$3.propertyIsEnumerable(cur)) curPunc$a = "newstatement";
        return "variable";
      } else if (variable_2.propertyIsEnumerable(cur)) {
        if (blockKeywords$3.propertyIsEnumerable(cur)) curPunc$a = "newstatement";
        return "modifier";
      } else if (variable_3.propertyIsEnumerable(cur)) {
        if (blockKeywords$3.propertyIsEnumerable(cur)) curPunc$a = "newstatement";
        return "type";
      } else if (builtin$2.propertyIsEnumerable(cur)) {
        if (blockKeywords$3.propertyIsEnumerable(cur)) curPunc$a = "newstatement";
        return "builtin";
      } else { //Data types are of from KEYWORD##
        var i = cur.length - 1;
        while(i >= 0 && (!isNaN(cur[i]) || cur[i] == '_'))
          --i;

        if (i > 0) {
          var cur2 = cur.substr(0, i + 1);
          if (variable_3.propertyIsEnumerable(cur2)) {
            if (blockKeywords$3.propertyIsEnumerable(cur2)) curPunc$a = "newstatement";
            return "type";
          }
        }
      }
      if (atoms$b.propertyIsEnumerable(cur)) return "atom";
      return null;
    }

    function tokenString$n(quote) {
      return function(stream, state) {
        var escaped = false, next, end = false;
        while ((next = stream.next()) != null) {
          if (next == quote && !escaped) {end = true; break;}
          escaped = !escaped && next == "\\";
        }
        if (end || !escaped)
          state.tokenize = tokenBase$D;
        return "string";
      };
    }

    function tokenComment$h(stream, state) {
      var maybeEnd = false, ch;
      while (ch = stream.next()) {
        if (ch == "/" && maybeEnd) {
          state.tokenize = tokenBase$D;
          break;
        }
        maybeEnd = (ch == "*");
      }
      return "comment";
    }

    function Context$9(indented, column, type, align, prev) {
      this.indented = indented;
      this.column = column;
      this.type = type;
      this.align = align;
      this.prev = prev;
    }
    function pushContext$c(state, col, type) {
      return state.context = new Context$9(state.indented, col, type, null, state.context);
    }
    function popContext$c(state) {
      var t = state.context.type;
      if (t == ")" || t == "]" || t == "}")
        state.indented = state.context.indented;
      return state.context = state.context.prev;
    }

    // Interface

    const ecl = {
      startState: function(indentUnit) {
        return {
          tokenize: null,
          context: new Context$9(-indentUnit, 0, "top", false),
          indented: 0,
          startOfLine: true
        };
      },

      token: function(stream, state) {
        var ctx = state.context;
        if (stream.sol()) {
          if (ctx.align == null) ctx.align = false;
          state.indented = stream.indentation();
          state.startOfLine = true;
        }
        if (stream.eatSpace()) return null;
        curPunc$a = null;
        var style = (state.tokenize || tokenBase$D)(stream, state);
        if (style == "comment" || style == "meta") return style;
        if (ctx.align == null) ctx.align = true;

        if ((curPunc$a == ";" || curPunc$a == ":") && ctx.type == "statement") popContext$c(state);
        else if (curPunc$a == "{") pushContext$c(state, stream.column(), "}");
        else if (curPunc$a == "[") pushContext$c(state, stream.column(), "]");
        else if (curPunc$a == "(") pushContext$c(state, stream.column(), ")");
        else if (curPunc$a == "}") {
          while (ctx.type == "statement") ctx = popContext$c(state);
          if (ctx.type == "}") ctx = popContext$c(state);
          while (ctx.type == "statement") ctx = popContext$c(state);
        }
        else if (curPunc$a == ctx.type) popContext$c(state);
        else if (ctx.type == "}" || ctx.type == "top" || (ctx.type == "statement" && curPunc$a == "newstatement"))
          pushContext$c(state, stream.column(), "statement");
        state.startOfLine = false;
        return style;
      },

      indent: function(state, textAfter, cx) {
        if (state.tokenize != tokenBase$D && state.tokenize != null) return 0;
        var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);
        if (ctx.type == "statement" && firstChar == "}") ctx = ctx.prev;
        var closing = firstChar == ctx.type;
        if (ctx.type == "statement") return ctx.indented + (firstChar == "{" ? 0 : cx.unit);
        else if (ctx.align) return ctx.column + (closing ? 0 : 1);
        else return ctx.indented + (closing ? 0 : cx.unit);
      },

      languageData: {
        indentOnInput: /^\s*[{}]$/
      }
    };

    var ecl$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ecl: ecl
    });

    function wordObj$2(words) {
      var o = {};
      for (var i = 0, e = words.length; i < e; ++i) o[words[i]] = true;
      return o;
    }
    var keywords$z = wordObj$2([
      'note',
      'across',
      'when',
      'variant',
      'until',
      'unique',
      'undefine',
      'then',
      'strip',
      'select',
      'retry',
      'rescue',
      'require',
      'rename',
      'reference',
      'redefine',
      'prefix',
      'once',
      'old',
      'obsolete',
      'loop',
      'local',
      'like',
      'is',
      'inspect',
      'infix',
      'include',
      'if',
      'frozen',
      'from',
      'external',
      'export',
      'ensure',
      'end',
      'elseif',
      'else',
      'do',
      'creation',
      'create',
      'check',
      'alias',
      'agent',
      'separate',
      'invariant',
      'inherit',
      'indexing',
      'feature',
      'expanded',
      'deferred',
      'class',
      'Void',
      'True',
      'Result',
      'Precursor',
      'False',
      'Current',
      'create',
      'attached',
      'detachable',
      'as',
      'and',
      'implies',
      'not',
      'or'
    ]);
    var operators$4 = wordObj$2([":=", "and then","and", "or","<<",">>"]);

    function chain$8(newtok, stream, state) {
      state.tokenize.push(newtok);
      return newtok(stream, state);
    }

    function tokenBase$C(stream, state) {
      if (stream.eatSpace()) return null;
      var ch = stream.next();
      if (ch == '"'||ch == "'") {
        return chain$8(readQuoted$1(ch, "string"), stream, state);
      } else if (ch == "-"&&stream.eat("-")) {
        stream.skipToEnd();
        return "comment";
      } else if (ch == ":"&&stream.eat("=")) {
        return "operator";
      } else if (/[0-9]/.test(ch)) {
        stream.eatWhile(/[xXbBCc0-9\.]/);
        stream.eat(/[\?\!]/);
        return "variable";
      } else if (/[a-zA-Z_0-9]/.test(ch)) {
        stream.eatWhile(/[a-zA-Z_0-9]/);
        stream.eat(/[\?\!]/);
        return "variable";
      } else if (/[=+\-\/*^%<>~]/.test(ch)) {
        stream.eatWhile(/[=+\-\/*^%<>~]/);
        return "operator";
      } else {
        return null;
      }
    }

    function readQuoted$1(quote, style,  unescaped) {
      return function(stream, state) {
        var escaped = false, ch;
        while ((ch = stream.next()) != null) {
          if (ch == quote && (unescaped || !escaped)) {
            state.tokenize.pop();
            break;
          }
          escaped = !escaped && ch == "%";
        }
        return style;
      };
    }

    const eiffel = {
      startState: function() {
        return {tokenize: [tokenBase$C]};
      },

      token: function(stream, state) {
        var style = state.tokenize[state.tokenize.length-1](stream, state);
        if (style == "variable") {
          var word = stream.current();
          style = keywords$z.propertyIsEnumerable(stream.current()) ? "keyword"
            : operators$4.propertyIsEnumerable(stream.current()) ? "operator"
            : /^[A-Z][A-Z_0-9]*$/g.test(word) ? "tag"
            : /^0[bB][0-1]+$/g.test(word) ? "number"
            : /^0[cC][0-7]+$/g.test(word) ? "number"
            : /^0[xX][a-fA-F0-9]+$/g.test(word) ? "number"
            : /^([0-9]+\.[0-9]*)|([0-9]*\.[0-9]+)$/g.test(word) ? "number"
            : /^[0-9]+$/g.test(word) ? "number"
            : "variable";
        }
        return style;
      },
      languageData: {
        commentTokens: {line: "--"}
      }
    };

    var eiffel$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        eiffel: eiffel
    });

    function switchState$1(source, setState, f)
    {
      setState(f);
      return f(source, setState);
    }

    var lowerRE = /[a-z]/;
    var upperRE = /[A-Z]/;
    var innerRE = /[a-zA-Z0-9_]/;

    var digitRE$1 = /[0-9]/;
    var hexRE = /[0-9A-Fa-f]/;
    var symbolRE$1 = /[-&*+.\\/<>=?^|:]/;
    var specialRE$1 = /[(),[\]{}]/;
    var spacesRE = /[ \v\f]/; // newlines are handled in tokenizer

    function normal$2()
    {
      return function(source, setState)
      {
        if (source.eatWhile(spacesRE))
        {
          return null;
        }

        var char = source.next();

        if (specialRE$1.test(char))
        {
          return (char === '{' && source.eat('-'))
            ? switchState$1(source, setState, chompMultiComment(1))
            : (char === '[' && source.match('glsl|'))
            ? switchState$1(source, setState, chompGlsl)
            : 'builtin';
        }

        if (char === '\'')
        {
          return switchState$1(source, setState, chompChar);
        }

        if (char === '"')
        {
          return source.eat('"')
            ? source.eat('"')
            ? switchState$1(source, setState, chompMultiString)
            : 'string'
          : switchState$1(source, setState, chompSingleString);
        }

        if (upperRE.test(char))
        {
          source.eatWhile(innerRE);
          return 'type';
        }

        if (lowerRE.test(char))
        {
          var isDef = source.pos === 1;
          source.eatWhile(innerRE);
          return isDef ? "def" : "variable";
        }

        if (digitRE$1.test(char))
        {
          if (char === '0')
          {
            if (source.eat(/[xX]/))
            {
              source.eatWhile(hexRE); // should require at least 1
              return "number";
            }
          }
          else
          {
            source.eatWhile(digitRE$1);
          }
          if (source.eat('.'))
          {
            source.eatWhile(digitRE$1); // should require at least 1
          }
          if (source.eat(/[eE]/))
          {
            source.eat(/[-+]/);
            source.eatWhile(digitRE$1); // should require at least 1
          }
          return "number";
        }

        if (symbolRE$1.test(char))
        {
          if (char === '-' && source.eat('-'))
          {
            source.skipToEnd();
            return "comment";
          }
          source.eatWhile(symbolRE$1);
          return "keyword";
        }

        if (char === '_')
        {
          return "keyword";
        }

        return "error";
      }
    }

    function chompMultiComment(nest)
    {
      if (nest == 0)
      {
        return normal$2();
      }
      return function(source, setState)
      {
        while (!source.eol())
        {
          var char = source.next();
          if (char == '{' && source.eat('-'))
          {
            ++nest;
          }
          else if (char == '-' && source.eat('}'))
          {
            --nest;
            if (nest === 0)
            {
              setState(normal$2());
              return 'comment';
            }
          }
        }
        setState(chompMultiComment(nest));
        return 'comment';
      }
    }

    function chompMultiString(source, setState)
    {
      while (!source.eol())
      {
        var char = source.next();
        if (char === '"' && source.eat('"') && source.eat('"'))
        {
          setState(normal$2());
          return 'string';
        }
      }
      return 'string';
    }

    function chompSingleString(source, setState)
    {
      while (source.skipTo('\\"')) { source.next(); source.next(); }
      if (source.skipTo('"'))
      {
        source.next();
        setState(normal$2());
        return 'string';
      }
      source.skipToEnd();
      setState(normal$2());
      return 'error';
    }

    function chompChar(source, setState)
    {
      while (source.skipTo("\\'")) { source.next(); source.next(); }
      if (source.skipTo("'"))
      {
        source.next();
        setState(normal$2());
        return 'string';
      }
      source.skipToEnd();
      setState(normal$2());
      return 'error';
    }

    function chompGlsl(source, setState)
    {
      while (!source.eol())
      {
        var char = source.next();
        if (char === '|' && source.eat(']'))
        {
          setState(normal$2());
          return 'string';
        }
      }
      return 'string';
    }

    var wellKnownWords$1 = {
      case: 1,
      of: 1,
      as: 1,
      if: 1,
      then: 1,
      else: 1,
      let: 1,
        in: 1,
      type: 1,
      alias: 1,
      module: 1,
      where: 1,
      import: 1,
      exposing: 1,
      port: 1
    };

    const elm = {
      startState: function ()  { return { f: normal$2() }; },
      copyState:  function (s) { return { f: s.f }; },

      token: function(stream, state) {
        var type = state.f(stream, function(s) { state.f = s; });
        var word = stream.current();
        return (wellKnownWords$1.hasOwnProperty(word)) ? 'keyword' : type;
      }
    };

    var elm$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        elm: elm
    });

    /////////////////////////////////////////////////////////////////////////////
    // constants

    var typeWords = [
      "-type", "-spec", "-export_type", "-opaque"];

    var keywordWords = [
      "after","begin","catch","case","cond","end","fun","if",
      "let","of","query","receive","try","when"];

    var separatorRE    = /[\->,;]/;
    var separatorWords = [
      "->",";",","];

    var operatorAtomWords = [
      "and","andalso","band","bnot","bor","bsl","bsr","bxor",
      "div","not","or","orelse","rem","xor"];

    var operatorSymbolRE    = /[\+\-\*\/<>=\|:!]/;
    var operatorSymbolWords = [
      "=","+","-","*","/",">",">=","<","=<","=:=","==","=/=","/=","||","<-","!"];

    var openParenRE    = /[<\(\[\{]/;
    var openParenWords = [
      "<<","(","[","{"];

    var closeParenRE    = /[>\)\]\}]/;
    var closeParenWords = [
      "}","]",")",">>"];

    var guardWords = [
      "is_atom","is_binary","is_bitstring","is_boolean","is_float",
      "is_function","is_integer","is_list","is_number","is_pid",
      "is_port","is_record","is_reference","is_tuple",
      "atom","binary","bitstring","boolean","function","integer","list",
      "number","pid","port","record","reference","tuple"];

    var bifWords = [
      "abs","adler32","adler32_combine","alive","apply","atom_to_binary",
      "atom_to_list","binary_to_atom","binary_to_existing_atom",
      "binary_to_list","binary_to_term","bit_size","bitstring_to_list",
      "byte_size","check_process_code","contact_binary","crc32",
      "crc32_combine","date","decode_packet","delete_module",
      "disconnect_node","element","erase","exit","float","float_to_list",
      "garbage_collect","get","get_keys","group_leader","halt","hd",
      "integer_to_list","internal_bif","iolist_size","iolist_to_binary",
      "is_alive","is_atom","is_binary","is_bitstring","is_boolean",
      "is_float","is_function","is_integer","is_list","is_number","is_pid",
      "is_port","is_process_alive","is_record","is_reference","is_tuple",
      "length","link","list_to_atom","list_to_binary","list_to_bitstring",
      "list_to_existing_atom","list_to_float","list_to_integer",
      "list_to_pid","list_to_tuple","load_module","make_ref","module_loaded",
      "monitor_node","node","node_link","node_unlink","nodes","notalive",
      "now","open_port","pid_to_list","port_close","port_command",
      "port_connect","port_control","pre_loaded","process_flag",
      "process_info","processes","purge_module","put","register",
      "registered","round","self","setelement","size","spawn","spawn_link",
      "spawn_monitor","spawn_opt","split_binary","statistics",
      "term_to_binary","time","throw","tl","trunc","tuple_size",
      "tuple_to_list","unlink","unregister","whereis"];

    // upper case: [A-Z] [Ø-Þ] [À-Ö]
    // lower case: [a-z] [ß-ö] [ø-ÿ]
    var anumRE       = /[\w@Ø-ÞÀ-Öß-öø-ÿ]/;
    var escapesRE    =
        /[0-7]{1,3}|[bdefnrstv\\"']|\^[a-zA-Z]|x[0-9a-zA-Z]{2}|x{[0-9a-zA-Z]+}/;

    /////////////////////////////////////////////////////////////////////////////
    // tokenizer

    function tokenizer(stream,state) {
      // in multi-line string
      if (state.in_string) {
        state.in_string = (!doubleQuote(stream));
        return rval(state,stream,"string");
      }

      // in multi-line atom
      if (state.in_atom) {
        state.in_atom = (!singleQuote(stream));
        return rval(state,stream,"atom");
      }

      // whitespace
      if (stream.eatSpace()) {
        return rval(state,stream,"whitespace");
      }

      // attributes and type specs
      if (!peekToken(state) &&
          stream.match(/-\s*[a-zß-öø-ÿ][\wØ-ÞÀ-Öß-öø-ÿ]*/)) {
        if (is_member(stream.current(),typeWords)) {
          return rval(state,stream,"type");
        }else {
          return rval(state,stream,"attribute");
        }
      }

      var ch = stream.next();

      // comment
      if (ch == '%') {
        stream.skipToEnd();
        return rval(state,stream,"comment");
      }

      // colon
      if (ch == ":") {
        return rval(state,stream,"colon");
      }

      // macro
      if (ch == '?') {
        stream.eatSpace();
        stream.eatWhile(anumRE);
        return rval(state,stream,"macro");
      }

      // record
      if (ch == "#") {
        stream.eatSpace();
        stream.eatWhile(anumRE);
        return rval(state,stream,"record");
      }

      // dollar escape
      if (ch == "$") {
        if (stream.next() == "\\" && !stream.match(escapesRE)) {
          return rval(state,stream,"error");
        }
        return rval(state,stream,"number");
      }

      // dot
      if (ch == ".") {
        return rval(state,stream,"dot");
      }

      // quoted atom
      if (ch == '\'') {
        if (!(state.in_atom = (!singleQuote(stream)))) {
          if (stream.match(/\s*\/\s*[0-9]/,false)) {
            stream.match(/\s*\/\s*[0-9]/,true);
            return rval(state,stream,"fun");      // 'f'/0 style fun
          }
          if (stream.match(/\s*\(/,false) || stream.match(/\s*:/,false)) {
            return rval(state,stream,"function");
          }
        }
        return rval(state,stream,"atom");
      }

      // string
      if (ch == '"') {
        state.in_string = (!doubleQuote(stream));
        return rval(state,stream,"string");
      }

      // variable
      if (/[A-Z_Ø-ÞÀ-Ö]/.test(ch)) {
        stream.eatWhile(anumRE);
        return rval(state,stream,"variable");
      }

      // atom/keyword/BIF/function
      if (/[a-z_ß-öø-ÿ]/.test(ch)) {
        stream.eatWhile(anumRE);

        if (stream.match(/\s*\/\s*[0-9]/,false)) {
          stream.match(/\s*\/\s*[0-9]/,true);
          return rval(state,stream,"fun");      // f/0 style fun
        }

        var w = stream.current();

        if (is_member(w,keywordWords)) {
          return rval(state,stream,"keyword");
        }else if (is_member(w,operatorAtomWords)) {
          return rval(state,stream,"operator");
        }else if (stream.match(/\s*\(/,false)) {
          // 'put' and 'erlang:put' are bifs, 'foo:put' is not
          if (is_member(w,bifWords) &&
              ((peekToken(state).token != ":") ||
               (peekToken(state,2).token == "erlang"))) {
            return rval(state,stream,"builtin");
          }else if (is_member(w,guardWords)) {
            return rval(state,stream,"guard");
          }else {
            return rval(state,stream,"function");
          }
        }else if (lookahead(stream) == ":") {
          if (w == "erlang") {
            return rval(state,stream,"builtin");
          } else {
            return rval(state,stream,"function");
          }
        }else if (is_member(w,["true","false"])) {
          return rval(state,stream,"boolean");
        }else {
          return rval(state,stream,"atom");
        }
      }

      // number
      var digitRE      = /[0-9]/;
      var radixRE      = /[0-9a-zA-Z]/;         // 36#zZ style int
      if (digitRE.test(ch)) {
        stream.eatWhile(digitRE);
        if (stream.eat('#')) {                // 36#aZ  style integer
          if (!stream.eatWhile(radixRE)) {
            stream.backUp(1);                 //"36#" - syntax error
          }
        } else if (stream.eat('.')) {       // float
          if (!stream.eatWhile(digitRE)) {
            stream.backUp(1);        // "3." - probably end of function
          } else {
            if (stream.eat(/[eE]/)) {        // float with exponent
              if (stream.eat(/[-+]/)) {
                if (!stream.eatWhile(digitRE)) {
                  stream.backUp(2);            // "2e-" - syntax error
                }
              } else {
                if (!stream.eatWhile(digitRE)) {
                  stream.backUp(1);            // "2e" - syntax error
                }
              }
            }
          }
        }
        return rval(state,stream,"number");   // normal integer
      }

      // open parens
      if (nongreedy(stream,openParenRE,openParenWords)) {
        return rval(state,stream,"open_paren");
      }

      // close parens
      if (nongreedy(stream,closeParenRE,closeParenWords)) {
        return rval(state,stream,"close_paren");
      }

      // separators
      if (greedy(stream,separatorRE,separatorWords)) {
        return rval(state,stream,"separator");
      }

      // operators
      if (greedy(stream,operatorSymbolRE,operatorSymbolWords)) {
        return rval(state,stream,"operator");
      }

      return rval(state,stream,null);
    }

    /////////////////////////////////////////////////////////////////////////////
    // utilities
    function nongreedy(stream,re,words) {
      if (stream.current().length == 1 && re.test(stream.current())) {
        stream.backUp(1);
        while (re.test(stream.peek())) {
          stream.next();
          if (is_member(stream.current(),words)) {
            return true;
          }
        }
        stream.backUp(stream.current().length-1);
      }
      return false;
    }

    function greedy(stream,re,words) {
      if (stream.current().length == 1 && re.test(stream.current())) {
        while (re.test(stream.peek())) {
          stream.next();
        }
        while (0 < stream.current().length) {
          if (is_member(stream.current(),words)) {
            return true;
          }else {
            stream.backUp(1);
          }
        }
        stream.next();
      }
      return false;
    }

    function doubleQuote(stream) {
      return quote(stream, '"', '\\');
    }

    function singleQuote(stream) {
      return quote(stream,'\'','\\');
    }

    function quote(stream,quoteChar,escapeChar) {
      while (!stream.eol()) {
        var ch = stream.next();
        if (ch == quoteChar) {
          return true;
        }else if (ch == escapeChar) {
          stream.next();
        }
      }
      return false;
    }

    function lookahead(stream) {
      var m = stream.match(/^\s*([^\s%])/, false);
      return m ? m[1] : "";
    }

    function is_member(element,list) {
      return (-1 < list.indexOf(element));
    }

    function rval(state,stream,type) {

      // parse stack
      pushToken(state,realToken(type,stream));

      // map erlang token type to CodeMirror style class
      //     erlang             -> CodeMirror tag
      switch (type) {
      case "atom":        return "atom";
      case "attribute":   return "attribute";
      case "boolean":     return "atom";
      case "builtin":     return "builtin";
      case "close_paren": return null;
      case "colon":       return null;
      case "comment":     return "comment";
      case "dot":         return null;
      case "error":       return "error";
      case "fun":         return "meta";
      case "function":    return "tag";
      case "guard":       return "property";
      case "keyword":     return "keyword";
      case "macro":       return "macroName";
      case "number":      return "number";
      case "open_paren":  return null;
      case "operator":    return "operator";
      case "record":      return "bracket";
      case "separator":   return null;
      case "string":      return "string";
      case "type":        return "def";
      case "variable":    return "variable";
      default:            return null;
      }
    }

    function aToken(tok,col,ind,typ) {
      return {token:  tok,
              column: col,
              indent: ind,
              type:   typ};
    }

    function realToken(type,stream) {
      return aToken(stream.current(),
                    stream.column(),
                    stream.indentation(),
                    type);
    }

    function fakeToken(type) {
      return aToken(type,0,0,type);
    }

    function peekToken(state,depth) {
      var len = state.tokenStack.length;
      var dep = (depth ? depth : 1);

      if (len < dep) {
        return false;
      }else {
        return state.tokenStack[len-dep];
      }
    }

    function pushToken(state,token) {

      if (!(token.type == "comment" || token.type == "whitespace")) {
        state.tokenStack = maybe_drop_pre(state.tokenStack,token);
        state.tokenStack = maybe_drop_post(state.tokenStack);
      }
    }

    function maybe_drop_pre(s,token) {
      var last = s.length-1;

      if (0 < last && s[last].type === "record" && token.type === "dot") {
        s.pop();
      }else if (0 < last && s[last].type === "group") {
        s.pop();
        s.push(token);
      }else {
        s.push(token);
      }
      return s;
    }

    function maybe_drop_post(s) {
      if (!s.length) return s
      var last = s.length-1;

      if (s[last].type === "dot") {
        return [];
      }
      if (last > 1 && s[last].type === "fun" && s[last-1].token === "fun") {
        return s.slice(0,last-1);
      }
      switch (s[last].token) {
      case "}":    return d(s,{g:["{"]});
      case "]":    return d(s,{i:["["]});
      case ")":    return d(s,{i:["("]});
      case ">>":   return d(s,{i:["<<"]});
      case "end":  return d(s,{i:["begin","case","fun","if","receive","try"]});
      case ",":    return d(s,{e:["begin","try","when","->",
                                  ",","(","[","{","<<"]});
      case "->":   return d(s,{r:["when"],
                               m:["try","if","case","receive"]});
      case ";":    return d(s,{E:["case","fun","if","receive","try","when"]});
      case "catch":return d(s,{e:["try"]});
      case "of":   return d(s,{e:["case"]});
      case "after":return d(s,{e:["receive","try"]});
      default:     return s;
      }
    }

    function d(stack,tt) {
      // stack is a stack of Token objects.
      // tt is an object; {type:tokens}
      // type is a char, tokens is a list of token strings.
      // The function returns (possibly truncated) stack.
      // It will descend the stack, looking for a Token such that Token.token
      //  is a member of tokens. If it does not find that, it will normally (but
      //  see "E" below) return stack. If it does find a match, it will remove
      //  all the Tokens between the top and the matched Token.
      // If type is "m", that is all it does.
      // If type is "i", it will also remove the matched Token and the top Token.
      // If type is "g", like "i", but add a fake "group" token at the top.
      // If type is "r", it will remove the matched Token, but not the top Token.
      // If type is "e", it will keep the matched Token but not the top Token.
      // If type is "E", it behaves as for type "e", except if there is no match,
      //  in which case it will return an empty stack.

      for (var type in tt) {
        var len = stack.length-1;
        var tokens = tt[type];
        for (var i = len-1; -1 < i ; i--) {
          if (is_member(stack[i].token,tokens)) {
            var ss = stack.slice(0,i);
            switch (type) {
            case "m": return ss.concat(stack[i]).concat(stack[len]);
            case "r": return ss.concat(stack[len]);
            case "i": return ss;
            case "g": return ss.concat(fakeToken("group"));
            case "E": return ss.concat(stack[i]);
            case "e": return ss.concat(stack[i]);
            }
          }
        }
      }
      return (type == "E" ? [] : stack);
    }

    /////////////////////////////////////////////////////////////////////////////
    // indenter

    function indenter$1(state, textAfter, cx) {
      var t;
      var wordAfter = wordafter(textAfter);
      var currT = peekToken(state,1);
      var prevT = peekToken(state,2);

      if (state.in_string || state.in_atom) {
        return null;
      }else if (!prevT) {
        return 0;
      }else if (currT.token == "when") {
        return currT.column + cx.unit;
      }else if (wordAfter === "when" && prevT.type === "function") {
        return prevT.indent+cx.unit;
      }else if (wordAfter === "(" && currT.token === "fun") {
        return  currT.column+3;
      }else if (wordAfter === "catch" && (t = getToken(state,["try"]))) {
        return t.column;
      }else if (is_member(wordAfter,["end","after","of"])) {
        t = getToken(state,["begin","case","fun","if","receive","try"]);
        return t ? t.column : null;
      }else if (is_member(wordAfter,closeParenWords)) {
        t = getToken(state,openParenWords);
        return t ? t.column : null;
      }else if (is_member(currT.token,[",","|","||"]) ||
                is_member(wordAfter,[",","|","||"])) {
        t = postcommaToken(state);
        return t ? t.column+t.token.length : cx.unit;
      }else if (currT.token == "->") {
        if (is_member(prevT.token, ["receive","case","if","try"])) {
          return prevT.column+cx.unit+cx.unit;
        }else {
          return prevT.column+cx.unit;
        }
      }else if (is_member(currT.token,openParenWords)) {
        return currT.column+currT.token.length;
      }else {
        t = defaultToken(state);
        return truthy(t) ? t.column+cx.unit : 0;
      }
    }

    function wordafter(str) {
      var m = str.match(/,|[a-z]+|\}|\]|\)|>>|\|+|\(/);

      return truthy(m) && (m.index === 0) ? m[0] : "";
    }

    function postcommaToken(state) {
      var objs = state.tokenStack.slice(0,-1);
      var i = getTokenIndex(objs,"type",["open_paren"]);

      return truthy(objs[i]) ? objs[i] : false;
    }

    function defaultToken(state) {
      var objs = state.tokenStack;
      var stop = getTokenIndex(objs,"type",["open_paren","separator","keyword"]);
      var oper = getTokenIndex(objs,"type",["operator"]);

      if (truthy(stop) && truthy(oper) && stop < oper) {
        return objs[stop+1];
      } else if (truthy(stop)) {
        return objs[stop];
      } else {
        return false;
      }
    }

    function getToken(state,tokens) {
      var objs = state.tokenStack;
      var i = getTokenIndex(objs,"token",tokens);

      return truthy(objs[i]) ? objs[i] : false;
    }

    function getTokenIndex(objs,propname,propvals) {

      for (var i = objs.length-1; -1 < i ; i--) {
        if (is_member(objs[i][propname],propvals)) {
          return i;
        }
      }
      return false;
    }

    function truthy(x) {
      return (x !== false) && (x != null);
    }

    /////////////////////////////////////////////////////////////////////////////
    // this object defines the mode

    const erlang = {
      startState() {
        return {tokenStack: [],
                in_string:  false,
                in_atom:    false};
      },

      token: tokenizer,

      indent: indenter$1,

      languageData: {
        commentTokens: {line: "%"}
      }
    };

    var erlang$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        erlang: erlang
    });

    function sql(parserConfig) {
      var client         = parserConfig.client || {},
          atoms          = parserConfig.atoms || {"false": true, "true": true, "null": true},
          builtin        = parserConfig.builtin || set(defaultBuiltin),
          keywords       = parserConfig.keywords || set(sqlKeywords),
          operatorChars  = parserConfig.operatorChars || /^[*+\-%<>!=&|~^\/]/,
          support        = parserConfig.support || {},
          hooks          = parserConfig.hooks || {},
          dateSQL        = parserConfig.dateSQL || {"date" : true, "time" : true, "timestamp" : true},
          backslashStringEscapes = parserConfig.backslashStringEscapes !== false,
          brackets       = parserConfig.brackets || /^[\{}\(\)\[\]]/,
          punctuation    = parserConfig.punctuation || /^[;.,:]/;

      function tokenBase(stream, state) {
        var ch = stream.next();

        // call hooks from the mime type
        if (hooks[ch]) {
          var result = hooks[ch](stream, state);
          if (result !== false) return result;
        }

        if (support.hexNumber &&
          ((ch == "0" && stream.match(/^[xX][0-9a-fA-F]+/))
          || (ch == "x" || ch == "X") && stream.match(/^'[0-9a-fA-F]+'/))) {
          // hex
          // ref: http://dev.mysql.com/doc/refman/5.5/en/hexadecimal-literals.html
          return "number";
        } else if (support.binaryNumber &&
          (((ch == "b" || ch == "B") && stream.match(/^'[01]+'/))
          || (ch == "0" && stream.match(/^b[01]+/)))) {
          // bitstring
          // ref: http://dev.mysql.com/doc/refman/5.5/en/bit-field-literals.html
          return "number";
        } else if (ch.charCodeAt(0) > 47 && ch.charCodeAt(0) < 58) {
          // numbers
          // ref: http://dev.mysql.com/doc/refman/5.5/en/number-literals.html
          stream.match(/^[0-9]*(\.[0-9]+)?([eE][-+]?[0-9]+)?/);
          support.decimallessFloat && stream.match(/^\.(?!\.)/);
          return "number";
        } else if (ch == "?" && (stream.eatSpace() || stream.eol() || stream.eat(";"))) {
          // placeholders
          return "macroName";
        } else if (ch == "'" || (ch == '"' && support.doubleQuote)) {
          // strings
          // ref: http://dev.mysql.com/doc/refman/5.5/en/string-literals.html
          state.tokenize = tokenLiteral(ch);
          return state.tokenize(stream, state);
        } else if ((((support.nCharCast && (ch == "n" || ch == "N"))
            || (support.charsetCast && ch == "_" && stream.match(/[a-z][a-z0-9]*/i)))
            && (stream.peek() == "'" || stream.peek() == '"'))) {
          // charset casting: _utf8'str', N'str', n'str'
          // ref: http://dev.mysql.com/doc/refman/5.5/en/string-literals.html
          return "keyword";
        } else if (support.escapeConstant && (ch == "e" || ch == "E")
            && (stream.peek() == "'" || (stream.peek() == '"' && support.doubleQuote))) {
          // escape constant: E'str', e'str'
          // ref: https://www.postgresql.org/docs/current/sql-syntax-lexical.html#SQL-SYNTAX-STRINGS-ESCAPE
          state.tokenize = function(stream, state) {
            return (state.tokenize = tokenLiteral(stream.next(), true))(stream, state);
          };
          return "keyword";
        } else if (support.commentSlashSlash && ch == "/" && stream.eat("/")) {
          // 1-line comment
          stream.skipToEnd();
          return "comment";
        } else if ((support.commentHash && ch == "#")
            || (ch == "-" && stream.eat("-") && (!support.commentSpaceRequired || stream.eat(" ")))) {
          // 1-line comments
          // ref: https://kb.askmonty.org/en/comment-syntax/
          stream.skipToEnd();
          return "comment";
        } else if (ch == "/" && stream.eat("*")) {
          // multi-line comments
          // ref: https://kb.askmonty.org/en/comment-syntax/
          state.tokenize = tokenComment(1);
          return state.tokenize(stream, state);
        } else if (ch == ".") {
          // .1 for 0.1
          if (support.zerolessFloat && stream.match(/^(?:\d+(?:e[+-]?\d+)?)/i))
            return "number";
          if (stream.match(/^\.+/))
            return null
          // .table_name (ODBC)
          // // ref: http://dev.mysql.com/doc/refman/5.6/en/identifier-qualifiers.html
          if (support.ODBCdotTable && stream.match(/^[\w\d_$#]+/))
            return "type";
        } else if (operatorChars.test(ch)) {
          // operators
          stream.eatWhile(operatorChars);
          return "operator";
        } else if (brackets.test(ch)) {
          // brackets
          return "bracket";
        } else if (punctuation.test(ch)) {
          // punctuation
          stream.eatWhile(punctuation);
          return "punctuation";
        } else if (ch == '{' &&
            (stream.match(/^( )*(d|D|t|T|ts|TS)( )*'[^']*'( )*}/) || stream.match(/^( )*(d|D|t|T|ts|TS)( )*"[^"]*"( )*}/))) {
          // dates (weird ODBC syntax)
          // ref: http://dev.mysql.com/doc/refman/5.5/en/date-and-time-literals.html
          return "number";
        } else {
          stream.eatWhile(/^[_\w\d]/);
          var word = stream.current().toLowerCase();
          // dates (standard SQL syntax)
          // ref: http://dev.mysql.com/doc/refman/5.5/en/date-and-time-literals.html
          if (dateSQL.hasOwnProperty(word) && (stream.match(/^( )+'[^']*'/) || stream.match(/^( )+"[^"]*"/)))
            return "number";
          if (atoms.hasOwnProperty(word)) return "atom";
          if (builtin.hasOwnProperty(word)) return "builtin";
          if (keywords.hasOwnProperty(word)) return "keyword";
          if (client.hasOwnProperty(word)) return "string.special";
          return null;
        }
      }

      // 'string', with char specified in quote escaped by '\'
      function tokenLiteral(quote, backslashEscapes) {
        return function(stream, state) {
          var escaped = false, ch;
          while ((ch = stream.next()) != null) {
            if (ch == quote && !escaped) {
              state.tokenize = tokenBase;
              break;
            }
            escaped = (backslashStringEscapes || backslashEscapes) && !escaped && ch == "\\";
          }
          return "string";
        };
      }
      function tokenComment(depth) {
        return function(stream, state) {
          var m = stream.match(/^.*?(\/\*|\*\/)/);
          if (!m) stream.skipToEnd();
          else if (m[1] == "/*") state.tokenize = tokenComment(depth + 1);
          else if (depth > 1) state.tokenize = tokenComment(depth - 1);
          else state.tokenize = tokenBase;
          return "comment"
        }
      }

      function pushContext(stream, state, type) {
        state.context = {
          prev: state.context,
          indent: stream.indentation(),
          col: stream.column(),
          type: type
        };
      }

      function popContext(state) {
        state.indent = state.context.indent;
        state.context = state.context.prev;
      }

      return {
        startState: function() {
          return {tokenize: tokenBase, context: null};
        },

        token: function(stream, state) {
          if (stream.sol()) {
            if (state.context && state.context.align == null)
              state.context.align = false;
          }
          if (state.tokenize == tokenBase && stream.eatSpace()) return null;

          var style = state.tokenize(stream, state);
          if (style == "comment") return style;

          if (state.context && state.context.align == null)
            state.context.align = true;

          var tok = stream.current();
          if (tok == "(")
            pushContext(stream, state, ")");
          else if (tok == "[")
            pushContext(stream, state, "]");
          else if (state.context && state.context.type == tok)
            popContext(state);
          return style;
        },

        indent: function(state, textAfter, iCx) {
          var cx = state.context;
          if (!cx) return null;
          var closing = textAfter.charAt(0) == cx.type;
          if (cx.align) return cx.col + (closing ? 0 : 1);
          else return cx.indent + (closing ? 0 : iCx.unit);
        },

        languageData: {
          commentTokens: {
            line: support.commentSlashSlash ? "//" : support.commentHash ? "#" : "--",
            block: {open: "/*", close: "*/"}
          },
          closeBrackets: {brackets: ["(", "[", "{", "'", '"', "`"]}
        }
      };
    }
    // `identifier`
    function hookIdentifier(stream) {
      // MySQL/MariaDB identifiers
      // ref: http://dev.mysql.com/doc/refman/5.6/en/identifier-qualifiers.html
      var ch;
      while ((ch = stream.next()) != null) {
        if (ch == "`" && !stream.eat("`")) return "string.special";
      }
      stream.backUp(stream.current().length - 1);
      return stream.eatWhile(/\w/) ? "string.special" : null;
    }

    // "identifier"
    function hookIdentifierDoublequote(stream) {
      // Standard SQL /SQLite identifiers
      // ref: http://web.archive.org/web/20160813185132/http://savage.net.au/SQL/sql-99.bnf.html#delimited%20identifier
      // ref: http://sqlite.org/lang_keywords.html
      var ch;
      while ((ch = stream.next()) != null) {
        if (ch == "\"" && !stream.eat("\"")) return "string.special";
      }
      stream.backUp(stream.current().length - 1);
      return stream.eatWhile(/\w/) ? "string.special" : null;
    }

    // variable token
    function hookVar(stream) {
      // variables
      // @@prefix.varName @varName
      // varName can be quoted with ` or ' or "
      // ref: http://dev.mysql.com/doc/refman/5.5/en/user-variables.html
      if (stream.eat("@")) {
        stream.match('session.');
        stream.match('local.');
        stream.match('global.');
      }

      if (stream.eat("'")) {
        stream.match(/^.*'/);
        return "string.special";
      } else if (stream.eat('"')) {
        stream.match(/^.*"/);
        return "string.special";
      } else if (stream.eat("`")) {
        stream.match(/^.*`/);
        return "string.special";
      } else if (stream.match(/^[0-9a-zA-Z$\.\_]+/)) {
        return "string.special";
      }
      return null;
    }
    // short client keyword token
    function hookClient(stream) {
      // \N means NULL
      // ref: http://dev.mysql.com/doc/refman/5.5/en/null-values.html
      if (stream.eat("N")) {
        return "atom";
      }
      // \g, etc
      // ref: http://dev.mysql.com/doc/refman/5.5/en/mysql-commands.html
      return stream.match(/^[a-zA-Z.#!?]/) ? "string.special" : null;
    }

    // these keywords are used by all SQL dialects (however, a mode can still overwrite it)
    var sqlKeywords = "alter and as asc between by count create delete desc distinct drop from group having in insert into is join like not on or order select set table union update values where limit ";

    // turn a space-separated list into an array
    function set(str) {
      var obj = {}, words = str.split(" ");
      for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
      return obj;
    }

    var defaultBuiltin = "bool boolean bit blob enum long longblob longtext medium mediumblob mediumint mediumtext time timestamp tinyblob tinyint tinytext text bigint int int1 int2 int3 int4 int8 integer float float4 float8 double char varbinary varchar varcharacter precision real date datetime year unsigned signed decimal numeric";

    // A generic SQL Mode. It's not a standard, it just try to support what is generally supported
    const standardSQL = sql({
      keywords: set(sqlKeywords + "begin"),
      builtin: set(defaultBuiltin),
      atoms: set("false true null unknown"),
      dateSQL: set("date time timestamp"),
      support: set("ODBCdotTable doubleQuote binaryNumber hexNumber")
    });

    const msSQL = sql({
      client: set("$partition binary_checksum checksum connectionproperty context_info current_request_id error_line error_message error_number error_procedure error_severity error_state formatmessage get_filestream_transaction_context getansinull host_id host_name isnull isnumeric min_active_rowversion newid newsequentialid rowcount_big xact_state object_id"),
      keywords: set(sqlKeywords + "begin trigger proc view index for add constraint key primary foreign collate clustered nonclustered declare exec go if use index holdlock nolock nowait paglock readcommitted readcommittedlock readpast readuncommitted repeatableread rowlock serializable snapshot tablock tablockx updlock with"),
      builtin: set("bigint numeric bit smallint decimal smallmoney int tinyint money float real char varchar text nchar nvarchar ntext binary varbinary image cursor timestamp hierarchyid uniqueidentifier sql_variant xml table "),
      atoms: set("is not null like and or in left right between inner outer join all any some cross unpivot pivot exists"),
      operatorChars: /^[*+\-%<>!=^\&|\/]/,
      brackets: /^[\{}\(\)]/,
      punctuation: /^[;.,:/]/,
      backslashStringEscapes: false,
      dateSQL: set("date datetimeoffset datetime2 smalldatetime datetime time"),
      hooks: {
        "@":   hookVar
      }
    });

    const mySQL = sql({
      client: set("charset clear connect edit ego exit go help nopager notee nowarning pager print prompt quit rehash source status system tee"),
      keywords: set(sqlKeywords + "accessible action add after algorithm all analyze asensitive at authors auto_increment autocommit avg avg_row_length before binary binlog both btree cache call cascade cascaded case catalog_name chain change changed character check checkpoint checksum class_origin client_statistics close coalesce code collate collation collations column columns comment commit committed completion concurrent condition connection consistent constraint contains continue contributors convert cross current current_date current_time current_timestamp current_user cursor data database databases day_hour day_microsecond day_minute day_second deallocate dec declare default delay_key_write delayed delimiter des_key_file describe deterministic dev_pop dev_samp deviance diagnostics directory disable discard distinctrow div dual dumpfile each elseif enable enclosed end ends engine engines enum errors escape escaped even event events every execute exists exit explain extended fast fetch field fields first flush for force foreign found_rows full fulltext function general get global grant grants group group_concat handler hash help high_priority hosts hour_microsecond hour_minute hour_second if ignore ignore_server_ids import index index_statistics infile inner innodb inout insensitive insert_method install interval invoker isolation iterate key keys kill language last leading leave left level limit linear lines list load local localtime localtimestamp lock logs low_priority master master_heartbeat_period master_ssl_verify_server_cert masters match max max_rows maxvalue message_text middleint migrate min min_rows minute_microsecond minute_second mod mode modifies modify mutex mysql_errno natural next no no_write_to_binlog offline offset one online open optimize option optionally out outer outfile pack_keys parser partition partitions password phase plugin plugins prepare preserve prev primary privileges procedure processlist profile profiles purge query quick range read read_write reads real rebuild recover references regexp relaylog release remove rename reorganize repair repeatable replace require resignal restrict resume return returns revoke right rlike rollback rollup row row_format rtree savepoint schedule schema schema_name schemas second_microsecond security sensitive separator serializable server session share show signal slave slow smallint snapshot soname spatial specific sql sql_big_result sql_buffer_result sql_cache sql_calc_found_rows sql_no_cache sql_small_result sqlexception sqlstate sqlwarning ssl start starting starts status std stddev stddev_pop stddev_samp storage straight_join subclass_origin sum suspend table_name table_statistics tables tablespace temporary terminated to trailing transaction trigger triggers truncate uncommitted undo uninstall unique unlock upgrade usage use use_frm user user_resources user_statistics using utc_date utc_time utc_timestamp value variables varying view views warnings when while with work write xa xor year_month zerofill begin do then else loop repeat"),
      builtin: set("bool boolean bit blob decimal double float long longblob longtext medium mediumblob mediumint mediumtext time timestamp tinyblob tinyint tinytext text bigint int int1 int2 int3 int4 int8 integer float float4 float8 double char varbinary varchar varcharacter precision date datetime year unsigned signed numeric"),
      atoms: set("false true null unknown"),
      operatorChars: /^[*+\-%<>!=&|^]/,
      dateSQL: set("date time timestamp"),
      support: set("ODBCdotTable decimallessFloat zerolessFloat binaryNumber hexNumber doubleQuote nCharCast charsetCast commentHash commentSpaceRequired"),
      hooks: {
        "@":   hookVar,
        "`":   hookIdentifier,
        "\\":  hookClient
      }
    });

    const mariaDB = sql({
      client: set("charset clear connect edit ego exit go help nopager notee nowarning pager print prompt quit rehash source status system tee"),
      keywords: set(sqlKeywords + "accessible action add after algorithm all always analyze asensitive at authors auto_increment autocommit avg avg_row_length before binary binlog both btree cache call cascade cascaded case catalog_name chain change changed character check checkpoint checksum class_origin client_statistics close coalesce code collate collation collations column columns comment commit committed completion concurrent condition connection consistent constraint contains continue contributors convert cross current current_date current_time current_timestamp current_user cursor data database databases day_hour day_microsecond day_minute day_second deallocate dec declare default delay_key_write delayed delimiter des_key_file describe deterministic dev_pop dev_samp deviance diagnostics directory disable discard distinctrow div dual dumpfile each elseif enable enclosed end ends engine engines enum errors escape escaped even event events every execute exists exit explain extended fast fetch field fields first flush for force foreign found_rows full fulltext function general generated get global grant grants group groupby_concat handler hard hash help high_priority hosts hour_microsecond hour_minute hour_second if ignore ignore_server_ids import index index_statistics infile inner innodb inout insensitive insert_method install interval invoker isolation iterate key keys kill language last leading leave left level limit linear lines list load local localtime localtimestamp lock logs low_priority master master_heartbeat_period master_ssl_verify_server_cert masters match max max_rows maxvalue message_text middleint migrate min min_rows minute_microsecond minute_second mod mode modifies modify mutex mysql_errno natural next no no_write_to_binlog offline offset one online open optimize option optionally out outer outfile pack_keys parser partition partitions password persistent phase plugin plugins prepare preserve prev primary privileges procedure processlist profile profiles purge query quick range read read_write reads real rebuild recover references regexp relaylog release remove rename reorganize repair repeatable replace require resignal restrict resume return returns revoke right rlike rollback rollup row row_format rtree savepoint schedule schema schema_name schemas second_microsecond security sensitive separator serializable server session share show shutdown signal slave slow smallint snapshot soft soname spatial specific sql sql_big_result sql_buffer_result sql_cache sql_calc_found_rows sql_no_cache sql_small_result sqlexception sqlstate sqlwarning ssl start starting starts status std stddev stddev_pop stddev_samp storage straight_join subclass_origin sum suspend table_name table_statistics tables tablespace temporary terminated to trailing transaction trigger triggers truncate uncommitted undo uninstall unique unlock upgrade usage use use_frm user user_resources user_statistics using utc_date utc_time utc_timestamp value variables varying view views virtual warnings when while with work write xa xor year_month zerofill begin do then else loop repeat"),
      builtin: set("bool boolean bit blob decimal double float long longblob longtext medium mediumblob mediumint mediumtext time timestamp tinyblob tinyint tinytext text bigint int int1 int2 int3 int4 int8 integer float float4 float8 double char varbinary varchar varcharacter precision date datetime year unsigned signed numeric"),
      atoms: set("false true null unknown"),
      operatorChars: /^[*+\-%<>!=&|^]/,
      dateSQL: set("date time timestamp"),
      support: set("ODBCdotTable decimallessFloat zerolessFloat binaryNumber hexNumber doubleQuote nCharCast charsetCast commentHash commentSpaceRequired"),
      hooks: {
        "@":   hookVar,
        "`":   hookIdentifier,
        "\\":  hookClient
      }
    });

    // provided by the phpLiteAdmin project - phpliteadmin.org
    const sqlite = sql({
      // commands of the official SQLite client, ref: https://www.sqlite.org/cli.html#dotcmd
      client: set("auth backup bail binary changes check clone databases dbinfo dump echo eqp exit explain fullschema headers help import imposter indexes iotrace limit lint load log mode nullvalue once open output print prompt quit read restore save scanstats schema separator session shell show stats system tables testcase timeout timer trace vfsinfo vfslist vfsname width"),
      // ref: http://sqlite.org/lang_keywords.html
      keywords: set(sqlKeywords + "abort action add after all analyze attach autoincrement before begin cascade case cast check collate column commit conflict constraint cross current_date current_time current_timestamp database default deferrable deferred detach each else end escape except exclusive exists explain fail for foreign full glob if ignore immediate index indexed initially inner instead intersect isnull key left limit match natural no notnull null of offset outer plan pragma primary query raise recursive references regexp reindex release rename replace restrict right rollback row savepoint temp temporary then to transaction trigger unique using vacuum view virtual when with without"),
      // SQLite is weakly typed, ref: http://sqlite.org/datatype3.html. This is just a list of some common types.
      builtin: set("bool boolean bit blob decimal double float long longblob longtext medium mediumblob mediumint mediumtext time timestamp tinyblob tinyint tinytext text clob bigint int int2 int8 integer float double char varchar date datetime year unsigned signed numeric real"),
      // ref: http://sqlite.org/syntax/literal-value.html
      atoms: set("null current_date current_time current_timestamp"),
      // ref: http://sqlite.org/lang_expr.html#binaryops
      operatorChars: /^[*+\-%<>!=&|/~]/,
      // SQLite is weakly typed, ref: http://sqlite.org/datatype3.html. This is just a list of some common types.
      dateSQL: set("date time timestamp datetime"),
      support: set("decimallessFloat zerolessFloat"),
      identifierQuote: "\"",  //ref: http://sqlite.org/lang_keywords.html
      hooks: {
        // bind-parameters ref:http://sqlite.org/lang_expr.html#varparam
        "@":   hookVar,
        ":":   hookVar,
        "?":   hookVar,
        "$":   hookVar,
        // The preferred way to escape Identifiers is using double quotes, ref: http://sqlite.org/lang_keywords.html
        "\"":   hookIdentifierDoublequote,
        // there is also support for backticks, ref: http://sqlite.org/lang_keywords.html
        "`":   hookIdentifier
      }
    });

    // the query language used by Apache Cassandra is called CQL, but this mime type
    // is called Cassandra to avoid confusion with Contextual Query Language
    const cassandra = sql({
      client: { },
      keywords: set("add all allow alter and any apply as asc authorize batch begin by clustering columnfamily compact consistency count create custom delete desc distinct drop each_quorum exists filtering from grant if in index insert into key keyspace keyspaces level limit local_one local_quorum modify nan norecursive nosuperuser not of on one order password permission permissions primary quorum rename revoke schema select set storage superuser table three to token truncate ttl two type unlogged update use user users using values where with writetime"),
      builtin: set("ascii bigint blob boolean counter decimal double float frozen inet int list map static text timestamp timeuuid tuple uuid varchar varint"),
      atoms: set("false true infinity NaN"),
      operatorChars: /^[<>=]/,
      dateSQL: { },
      support: set("commentSlashSlash decimallessFloat"),
      hooks: { }
    });

    // this is based on Peter Raganitsch's 'plsql' mode
    const plSQL = sql({
      client:     set("appinfo arraysize autocommit autoprint autorecovery autotrace blockterminator break btitle cmdsep colsep compatibility compute concat copycommit copytypecheck define describe echo editfile embedded escape exec execute feedback flagger flush heading headsep instance linesize lno loboffset logsource long longchunksize markup native newpage numformat numwidth pagesize pause pno recsep recsepchar release repfooter repheader serveroutput shiftinout show showmode size spool sqlblanklines sqlcase sqlcode sqlcontinue sqlnumber sqlpluscompatibility sqlprefix sqlprompt sqlterminator suffix tab term termout time timing trimout trimspool ttitle underline verify version wrap"),
      keywords:   set("abort accept access add all alter and any array arraylen as asc assert assign at attributes audit authorization avg base_table begin between binary_integer body boolean by case cast char char_base check close cluster clusters colauth column comment commit compress connect connected constant constraint crash create current currval cursor data_base database date dba deallocate debugoff debugon decimal declare default definition delay delete desc digits dispose distinct do drop else elseif elsif enable end entry escape exception exception_init exchange exclusive exists exit external fast fetch file for force form from function generic goto grant group having identified if immediate in increment index indexes indicator initial initrans insert interface intersect into is key level library like limited local lock log logging long loop master maxextents maxtrans member minextents minus mislabel mode modify multiset new next no noaudit nocompress nologging noparallel not nowait number_base object of off offline on online only open option or order out package parallel partition pctfree pctincrease pctused pls_integer positive positiven pragma primary prior private privileges procedure public raise range raw read rebuild record ref references refresh release rename replace resource restrict return returning returns reverse revoke rollback row rowid rowlabel rownum rows run savepoint schema segment select separate session set share snapshot some space split sql start statement storage subtype successful synonym tabauth table tables tablespace task terminate then to trigger truncate type union unique unlimited unrecoverable unusable update use using validate value values variable view views when whenever where while with work"),
      builtin:    set("abs acos add_months ascii asin atan atan2 average bfile bfilename bigserial bit blob ceil character chartorowid chr clob concat convert cos cosh count dec decode deref dual dump dup_val_on_index empty error exp false float floor found glb greatest hextoraw initcap instr instrb int integer isopen last_day least length lengthb ln lower lpad ltrim lub make_ref max min mlslabel mod months_between natural naturaln nchar nclob new_time next_day nextval nls_charset_decl_len nls_charset_id nls_charset_name nls_initcap nls_lower nls_sort nls_upper nlssort no_data_found notfound null number numeric nvarchar2 nvl others power rawtohex real reftohex round rowcount rowidtochar rowtype rpad rtrim serial sign signtype sin sinh smallint soundex sqlcode sqlerrm sqrt stddev string substr substrb sum sysdate tan tanh to_char text to_date to_label to_multi_byte to_number to_single_byte translate true trunc uid unlogged upper user userenv varchar varchar2 variance varying vsize xml"),
      operatorChars: /^[*\/+\-%<>!=~]/,
      dateSQL:    set("date time timestamp"),
      support:    set("doubleQuote nCharCast zerolessFloat binaryNumber hexNumber")
    });

    // Created to support specific hive keywords
    const hive = sql({
      keywords: set("select alter $elem$ $key$ $value$ add after all analyze and archive as asc before between binary both bucket buckets by cascade case cast change cluster clustered clusterstatus collection column columns comment compute concatenate continue create cross cursor data database databases dbproperties deferred delete delimited desc describe directory disable distinct distribute drop else enable end escaped exclusive exists explain export extended external fetch fields fileformat first format formatted from full function functions grant group having hold_ddltime idxproperties if import in index indexes inpath inputdriver inputformat insert intersect into is items join keys lateral left like limit lines load local location lock locks mapjoin materialized minus msck no_drop nocompress not of offline on option or order out outer outputdriver outputformat overwrite partition partitioned partitions percent plus preserve procedure purge range rcfile read readonly reads rebuild recordreader recordwriter recover reduce regexp rename repair replace restrict revoke right rlike row schema schemas semi sequencefile serde serdeproperties set shared show show_database sort sorted ssl statistics stored streamtable table tables tablesample tblproperties temporary terminated textfile then tmp to touch transform trigger unarchive undo union uniquejoin unlock update use using utc utc_tmestamp view when where while with admin authorization char compact compactions conf cube current current_date current_timestamp day decimal defined dependency directories elem_type exchange file following for grouping hour ignore inner interval jar less logical macro minute month more none noscan over owner partialscan preceding pretty principals protection reload rewrite role roles rollup rows second server sets skewed transactions truncate unbounded unset uri user values window year"),
      builtin: set("bool boolean long timestamp tinyint smallint bigint int float double date datetime unsigned string array struct map uniontype key_type utctimestamp value_type varchar"),
      atoms: set("false true null unknown"),
      operatorChars: /^[*+\-%<>!=]/,
      dateSQL: set("date timestamp"),
      support: set("ODBCdotTable doubleQuote binaryNumber hexNumber")
    });

    const pgSQL = sql({
      client: set("source"),
      // For PostgreSQL - https://www.postgresql.org/docs/11/sql-keywords-appendix.html
      // For pl/pgsql lang - https://github.com/postgres/postgres/blob/REL_11_2/src/pl/plpgsql/src/pl_scanner.c
      keywords: set(sqlKeywords + "a abort abs absent absolute access according action ada add admin after aggregate alias all allocate also alter always analyse analyze and any are array array_agg array_max_cardinality as asc asensitive assert assertion assignment asymmetric at atomic attach attribute attributes authorization avg backward base64 before begin begin_frame begin_partition bernoulli between bigint binary bit bit_length blob blocked bom boolean both breadth by c cache call called cardinality cascade cascaded case cast catalog catalog_name ceil ceiling chain char char_length character character_length character_set_catalog character_set_name character_set_schema characteristics characters check checkpoint class class_origin clob close cluster coalesce cobol collate collation collation_catalog collation_name collation_schema collect column column_name columns command_function command_function_code comment comments commit committed concurrently condition condition_number configuration conflict connect connection connection_name constant constraint constraint_catalog constraint_name constraint_schema constraints constructor contains content continue control conversion convert copy corr corresponding cost count covar_pop covar_samp create cross csv cube cume_dist current current_catalog current_date current_default_transform_group current_path current_role current_row current_schema current_time current_timestamp current_transform_group_for_type current_user cursor cursor_name cycle data database datalink datatype date datetime_interval_code datetime_interval_precision day db deallocate debug dec decimal declare default defaults deferrable deferred defined definer degree delete delimiter delimiters dense_rank depends depth deref derived desc describe descriptor detach detail deterministic diagnostics dictionary disable discard disconnect dispatch distinct dlnewcopy dlpreviouscopy dlurlcomplete dlurlcompleteonly dlurlcompletewrite dlurlpath dlurlpathonly dlurlpathwrite dlurlscheme dlurlserver dlvalue do document domain double drop dump dynamic dynamic_function dynamic_function_code each element else elseif elsif empty enable encoding encrypted end end_frame end_partition endexec enforced enum equals errcode error escape event every except exception exclude excluding exclusive exec execute exists exit exp explain expression extension external extract false family fetch file filter final first first_value flag float floor following for force foreach foreign fortran forward found frame_row free freeze from fs full function functions fusion g general generated get global go goto grant granted greatest group grouping groups handler having header hex hierarchy hint hold hour id identity if ignore ilike immediate immediately immutable implementation implicit import in include including increment indent index indexes indicator info inherit inherits initially inline inner inout input insensitive insert instance instantiable instead int integer integrity intersect intersection interval into invoker is isnull isolation join k key key_member key_type label lag language large last last_value lateral lead leading leakproof least left length level library like like_regex limit link listen ln load local localtime localtimestamp location locator lock locked log logged loop lower m map mapping match matched materialized max max_cardinality maxvalue member merge message message_length message_octet_length message_text method min minute minvalue mod mode modifies module month more move multiset mumps name names namespace national natural nchar nclob nesting new next nfc nfd nfkc nfkd nil no none normalize normalized not nothing notice notify notnull nowait nth_value ntile null nullable nullif nulls number numeric object occurrences_regex octet_length octets of off offset oids old on only open operator option options or order ordering ordinality others out outer output over overlaps overlay overriding owned owner p pad parallel parameter parameter_mode parameter_name parameter_ordinal_position parameter_specific_catalog parameter_specific_name parameter_specific_schema parser partial partition pascal passing passthrough password path percent percent_rank percentile_cont percentile_disc perform period permission pg_context pg_datatype_name pg_exception_context pg_exception_detail pg_exception_hint placing plans pli policy portion position position_regex power precedes preceding precision prepare prepared preserve primary print_strict_params prior privileges procedural procedure procedures program public publication query quote raise range rank read reads real reassign recheck recovery recursive ref references referencing refresh regr_avgx regr_avgy regr_count regr_intercept regr_r2 regr_slope regr_sxx regr_sxy regr_syy reindex relative release rename repeatable replace replica requiring reset respect restart restore restrict result result_oid return returned_cardinality returned_length returned_octet_length returned_sqlstate returning returns reverse revoke right role rollback rollup routine routine_catalog routine_name routine_schema routines row row_count row_number rows rowtype rule savepoint scale schema schema_name schemas scope scope_catalog scope_name scope_schema scroll search second section security select selective self sensitive sequence sequences serializable server server_name session session_user set setof sets share show similar simple size skip slice smallint snapshot some source space specific specific_name specifictype sql sqlcode sqlerror sqlexception sqlstate sqlwarning sqrt stable stacked standalone start state statement static statistics stddev_pop stddev_samp stdin stdout storage strict strip structure style subclass_origin submultiset subscription substring substring_regex succeeds sum symmetric sysid system system_time system_user t table table_name tables tablesample tablespace temp template temporary text then ties time timestamp timezone_hour timezone_minute to token top_level_count trailing transaction transaction_active transactions_committed transactions_rolled_back transform transforms translate translate_regex translation treat trigger trigger_catalog trigger_name trigger_schema trim trim_array true truncate trusted type types uescape unbounded uncommitted under unencrypted union unique unknown unlink unlisten unlogged unnamed unnest until untyped update upper uri usage use_column use_variable user user_defined_type_catalog user_defined_type_code user_defined_type_name user_defined_type_schema using vacuum valid validate validator value value_of values var_pop var_samp varbinary varchar variable_conflict variadic varying verbose version versioning view views volatile warning when whenever where while whitespace width_bucket window with within without work wrapper write xml xmlagg xmlattributes xmlbinary xmlcast xmlcomment xmlconcat xmldeclaration xmldocument xmlelement xmlexists xmlforest xmliterate xmlnamespaces xmlparse xmlpi xmlquery xmlroot xmlschema xmlserialize xmltable xmltext xmlvalidate year yes zone"),
      // https://www.postgresql.org/docs/11/datatype.html
      builtin: set("bigint int8 bigserial serial8 bit varying varbit boolean bool box bytea character char varchar cidr circle date double precision float8 inet integer int int4 interval json jsonb line lseg macaddr macaddr8 money numeric decimal path pg_lsn point polygon real float4 smallint int2 smallserial serial2 serial serial4 text time without zone with timetz timestamp timestamptz tsquery tsvector txid_snapshot uuid xml"),
      atoms: set("false true null unknown"),
      operatorChars: /^[*\/+\-%<>!=&|^\/#@?~]/,
      backslashStringEscapes: false,
      dateSQL: set("date time timestamp"),
      support: set("ODBCdotTable decimallessFloat zerolessFloat binaryNumber hexNumber nCharCast charsetCast escapeConstant")
    });

    // Google's SQL-like query language, GQL
    const gql = sql({
      keywords: set("ancestor and asc by contains desc descendant distinct from group has in is limit offset on order select superset where"),
      atoms: set("false true"),
      builtin: set("blob datetime first key __key__ string integer double boolean null"),
      operatorChars: /^[*+\-%<>!=]/
    });

    // Greenplum
    const gpSQL = sql({
      client: set("source"),
      //https://github.com/greenplum-db/gpdb/blob/master/src/include/parser/kwlist.h
      keywords: set("abort absolute access action active add admin after aggregate all also alter always analyse analyze and any array as asc assertion assignment asymmetric at authorization backward before begin between bigint binary bit boolean both by cache called cascade cascaded case cast chain char character characteristics check checkpoint class close cluster coalesce codegen collate column comment commit committed concurrency concurrently configuration connection constraint constraints contains content continue conversion copy cost cpu_rate_limit create createdb createexttable createrole createuser cross csv cube current current_catalog current_date current_role current_schema current_time current_timestamp current_user cursor cycle data database day deallocate dec decimal declare decode default defaults deferrable deferred definer delete delimiter delimiters deny desc dictionary disable discard distinct distributed do document domain double drop dxl each else enable encoding encrypted end enum errors escape every except exchange exclude excluding exclusive execute exists explain extension external extract false family fetch fields filespace fill filter first float following for force foreign format forward freeze from full function global grant granted greatest group group_id grouping handler hash having header hold host hour identity if ignore ilike immediate immutable implicit in including inclusive increment index indexes inherit inherits initially inline inner inout input insensitive insert instead int integer intersect interval into invoker is isnull isolation join key language large last leading least left level like limit list listen load local localtime localtimestamp location lock log login mapping master match maxvalue median merge minute minvalue missing mode modifies modify month move name names national natural nchar new newline next no nocreatedb nocreateexttable nocreaterole nocreateuser noinherit nologin none noovercommit nosuperuser not nothing notify notnull nowait null nullif nulls numeric object of off offset oids old on only operator option options or order ordered others out outer over overcommit overlaps overlay owned owner parser partial partition partitions passing password percent percentile_cont percentile_disc placing plans position preceding precision prepare prepared preserve primary prior privileges procedural procedure protocol queue quote randomly range read readable reads real reassign recheck recursive ref references reindex reject relative release rename repeatable replace replica reset resource restart restrict returning returns revoke right role rollback rollup rootpartition row rows rule savepoint scatter schema scroll search second security segment select sequence serializable session session_user set setof sets share show similar simple smallint some split sql stable standalone start statement statistics stdin stdout storage strict strip subpartition subpartitions substring superuser symmetric sysid system table tablespace temp template temporary text then threshold ties time timestamp to trailing transaction treat trigger trim true truncate trusted type unbounded uncommitted unencrypted union unique unknown unlisten until update user using vacuum valid validation validator value values varchar variadic varying verbose version view volatile web when where whitespace window with within without work writable write xml xmlattributes xmlconcat xmlelement xmlexists xmlforest xmlparse xmlpi xmlroot xmlserialize year yes zone"),
      builtin: set("bigint int8 bigserial serial8 bit varying varbit boolean bool box bytea character char varchar cidr circle date double precision float float8 inet integer int int4 interval json jsonb line lseg macaddr macaddr8 money numeric decimal path pg_lsn point polygon real float4 smallint int2 smallserial serial2 serial serial4 text time without zone with timetz timestamp timestamptz tsquery tsvector txid_snapshot uuid xml"),
      atoms: set("false true null unknown"),
      operatorChars: /^[*+\-%<>!=&|^\/#@?~]/,
      dateSQL: set("date time timestamp"),
      support: set("ODBCdotTable decimallessFloat zerolessFloat binaryNumber hexNumber nCharCast charsetCast")
    });

    // Spark SQL
    const sparkSQL = sql({
      keywords: set("add after all alter analyze and anti archive array as asc at between bucket buckets by cache cascade case cast change clear cluster clustered codegen collection column columns comment commit compact compactions compute concatenate cost create cross cube current current_date current_timestamp database databases data dbproperties defined delete delimited deny desc describe dfs directories distinct distribute drop else end escaped except exchange exists explain export extended external false fields fileformat first following for format formatted from full function functions global grant group grouping having if ignore import in index indexes inner inpath inputformat insert intersect interval into is items join keys last lateral lazy left like limit lines list load local location lock locks logical macro map minus msck natural no not null nulls of on optimize option options or order out outer outputformat over overwrite partition partitioned partitions percent preceding principals purge range recordreader recordwriter recover reduce refresh regexp rename repair replace reset restrict revoke right rlike role roles rollback rollup row rows schema schemas select semi separated serde serdeproperties set sets show skewed sort sorted start statistics stored stratify struct table tables tablesample tblproperties temp temporary terminated then to touch transaction transactions transform true truncate unarchive unbounded uncache union unlock unset use using values view when where window with"),
      builtin: set("tinyint smallint int bigint boolean float double string binary timestamp decimal array map struct uniontype delimited serde sequencefile textfile rcfile inputformat outputformat"),
      atoms: set("false true null"),
      operatorChars: /^[*\/+\-%<>!=~&|^]/,
      dateSQL: set("date time timestamp"),
      support: set("ODBCdotTable doubleQuote zerolessFloat")
    });

    // Esper
    const esper = sql({
      client: set("source"),
      // http://www.espertech.com/esper/release-5.5.0/esper-reference/html/appendix_keywords.html
      keywords: set("alter and as asc between by count create delete desc distinct drop from group having in insert into is join like not on or order select set table union update values where limit after all and as at asc avedev avg between by case cast coalesce count create current_timestamp day days delete define desc distinct else end escape events every exists false first from full group having hour hours in inner insert instanceof into irstream is istream join last lastweekday left limit like max match_recognize matches median measures metadatasql min minute minutes msec millisecond milliseconds not null offset on or order outer output partition pattern prev prior regexp retain-union retain-intersection right rstream sec second seconds select set some snapshot sql stddev sum then true unidirectional until update variable weekday when where window"),
      builtin: {},
      atoms: set("false true null"),
      operatorChars: /^[*+\-%<>!=&|^\/#@?~]/,
      dateSQL: set("time"),
      support: set("decimallessFloat zerolessFloat binaryNumber hexNumber")
    });

    /*
      How options are used by SQL Mode
      =================================================

      keywords:
        A list of keywords you want to be highlighted.
      builtin:
        A list of builtin types you want to be highlighted (if you want types to be of class "builtin" instead of "keyword").
      operatorChars:
        All characters that must be handled as operators.
      client:
        Commands parsed and executed by the client (not the server).
      support:
        A list of supported syntaxes which are not common, but are supported by more than 1 DBMS.
        * ODBCdotTable: .tableName
        * zerolessFloat: .1
        * doubleQuote
        * nCharCast: N'string'
        * charsetCast: _utf8'string'
        * commentHash: use # char for comments
        * commentSlashSlash: use // for comments
        * commentSpaceRequired: require a space after -- for comments
      atoms:
        Keywords that must be highlighted as atoms,. Some DBMS's support more atoms than others:
        UNKNOWN, INFINITY, UNDERFLOW, NaN...
      dateSQL:
        Used for date/time SQL standard syntax, because not all DBMS's support same temporal types.
    */

    var sql$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        sql: sql,
        standardSQL: standardSQL,
        msSQL: msSQL,
        mySQL: mySQL,
        mariaDB: mariaDB,
        sqlite: sqlite,
        cassandra: cassandra,
        plSQL: plSQL,
        hive: hive,
        pgSQL: pgSQL,
        gql: gql,
        gpSQL: gpSQL,
        sparkSQL: sparkSQL,
        esper: esper
    });

    const factor = simpleMode({
        start: [
          // comments
          {regex: /#?!.*/, token: "comment"},
          // strings """, multiline --> state
          {regex: /"""/, token: "string", next: "string3"},
          {regex: /(STRING:)(\s)/, token: ["keyword", null], next: "string2"},
          {regex: /\S*?"/, token: "string", next: "string"},
          // numbers: dec, hex, unicode, bin, fractional, complex
          {regex: /(?:0x[\d,a-f]+)|(?:0o[0-7]+)|(?:0b[0,1]+)|(?:\-?\d+.?\d*)(?=\s)/, token: "number"},
          //{regex: /[+-]?/} //fractional
          // definition: defining word, defined word, etc
          {regex: /((?:GENERIC)|\:?\:)(\s+)(\S+)(\s+)(\()/, token: ["keyword", null, "def", null, "bracket"], next: "stack"},
          // method definition: defining word, type, defined word, etc
          {regex: /(M\:)(\s+)(\S+)(\s+)(\S+)/, token: ["keyword", null, "def", null, "tag"]},
          // vocabulary using --> state
          {regex: /USING\:/, token: "keyword", next: "vocabulary"},
          // vocabulary definition/use
          {regex: /(USE\:|IN\:)(\s+)(\S+)(?=\s|$)/, token: ["keyword", null, "tag"]},
          // definition: a defining word, defined word
          {regex: /(\S+\:)(\s+)(\S+)(?=\s|$)/, token: ["keyword", null, "def"]},
          // "keywords", incl. ; t f . [ ] { } defining words
          {regex: /(?:;|\\|t|f|if|loop|while|until|do|PRIVATE>|<PRIVATE|\.|\S*\[|\]|\S*\{|\})(?=\s|$)/, token: "keyword"},
          // <constructors> and the like
          {regex: /\S+[\)>\.\*\?]+(?=\s|$)/, token: "builtin"},
          {regex: /[\)><]+\S+(?=\s|$)/, token: "builtin"},
          // operators
          {regex: /(?:[\+\-\=\/\*<>])(?=\s|$)/, token: "keyword"},
          // any id (?)
          {regex: /\S+/, token: "variable"},
          {regex: /\s+|./, token: null}
        ],
        vocabulary: [
          {regex: /;/, token: "keyword", next: "start"},
          {regex: /\S+/, token: "tag"},
          {regex: /\s+|./, token: null}
        ],
        string: [
          {regex: /(?:[^\\]|\\.)*?"/, token: "string", next: "start"},
          {regex: /.*/, token: "string"}
        ],
        string2: [
          {regex: /^;/, token: "keyword", next: "start"},
          {regex: /.*/, token: "string"}
        ],
        string3: [
          {regex: /(?:[^\\]|\\.)*?"""/, token: "string", next: "start"},
          {regex: /.*/, token: "string"}
        ],
        stack: [
          {regex: /\)/, token: "bracket", next: "start"},
          {regex: /--/, token: "bracket"},
          {regex: /\S+/, token: "meta"},
          {regex: /\s+|./, token: null}
        ],
        languageData: {
          dontIndentStates: ["start", "vocabulary", "string", "string3", "stack"],
          commentTokens: {line: "!"}
        }
      });

    var factor$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        factor: factor
    });

    var keywords$y = {
      "term": true,
      "method": true, "accu": true,
      "rule": true, "then": true, "is": true, "and": true, "or": true,
      "if": true, "default": true
    };

    var start_blocks = {
      "var_input": true,
      "var_output": true,
      "fuzzify": true,
      "defuzzify": true,
      "function_block": true,
      "ruleblock": true
    };

    var end_blocks = {
      "end_ruleblock": true,
      "end_defuzzify": true,
      "end_function_block": true,
      "end_fuzzify": true,
      "end_var": true
    };

    var atoms$a = {
      "true": true, "false": true, "nan": true,
      "real": true, "min": true, "max": true, "cog": true, "cogs": true
    };

    var isOperatorChar$c = /[+\-*&^%:=<>!|\/]/;

    function tokenBase$B(stream, state) {
      var ch = stream.next();

      if (/[\d\.]/.test(ch)) {
        if (ch == ".") {
          stream.match(/^[0-9]+([eE][\-+]?[0-9]+)?/);
        } else if (ch == "0") {
          stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);
        } else {
          stream.match(/^[0-9]*\.?[0-9]*([eE][\-+]?[0-9]+)?/);
        }
        return "number";
      }

      if (ch == "/" || ch == "(") {
        if (stream.eat("*")) {
          state.tokenize = tokenComment$g;
          return tokenComment$g(stream, state);
        }
        if (stream.eat("/")) {
          stream.skipToEnd();
          return "comment";
        }
      }
      if (isOperatorChar$c.test(ch)) {
        stream.eatWhile(isOperatorChar$c);
        return "operator";
      }
      stream.eatWhile(/[\w\$_\xa1-\uffff]/);

      var cur = stream.current().toLowerCase();
      if (keywords$y.propertyIsEnumerable(cur) ||
          start_blocks.propertyIsEnumerable(cur) ||
          end_blocks.propertyIsEnumerable(cur)) {
        return "keyword";
      }
      if (atoms$a.propertyIsEnumerable(cur)) return "atom";
      return "variable";
    }


    function tokenComment$g(stream, state) {
      var maybeEnd = false, ch;
      while (ch = stream.next()) {
        if ((ch == "/" || ch == ")") && maybeEnd) {
          state.tokenize = tokenBase$B;
          break;
        }
        maybeEnd = (ch == "*");
      }
      return "comment";
    }

    function Context$8(indented, column, type, align, prev) {
      this.indented = indented;
      this.column = column;
      this.type = type;
      this.align = align;
      this.prev = prev;
    }

    function pushContext$b(state, col, type) {
      return state.context = new Context$8(state.indented, col, type, null, state.context);
    }

    function popContext$b(state) {
      if (!state.context.prev) return;
      var t = state.context.type;
      if (t == "end_block")
        state.indented = state.context.indented;
      return state.context = state.context.prev;
    }

    // Interface

    const fcl = {
      startState: function(indentUnit) {
        return {
          tokenize: null,
          context: new Context$8(-indentUnit, 0, "top", false),
          indented: 0,
          startOfLine: true
        };
      },

      token: function(stream, state) {
        var ctx = state.context;
        if (stream.sol()) {
          if (ctx.align == null) ctx.align = false;
          state.indented = stream.indentation();
          state.startOfLine = true;
        }
        if (stream.eatSpace()) return null;

        var style = (state.tokenize || tokenBase$B)(stream, state);
        if (style == "comment") return style;
        if (ctx.align == null) ctx.align = true;

        var cur = stream.current().toLowerCase();

        if (start_blocks.propertyIsEnumerable(cur)) pushContext$b(state, stream.column(), "end_block");
        else if (end_blocks.propertyIsEnumerable(cur))  popContext$b(state);

        state.startOfLine = false;
        return style;
      },

      indent: function(state, textAfter, cx) {
        if (state.tokenize != tokenBase$B && state.tokenize != null) return 0;
        var ctx = state.context;

        var closing = end_blocks.propertyIsEnumerable(textAfter);
        if (ctx.align) return ctx.column + (closing ? 0 : 1);
        else return ctx.indented + (closing ? 0 : cx.unit);
      },

      languageData: {
        commentTokens: {line: "//", block: {open: "(*", close: "*)"}}
      }
    };

    var fcl$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        fcl: fcl
    });

    function toWordList(words) {
      var ret = [];
      words.split(' ').forEach(function(e){
        ret.push({name: e});
      });
      return ret;
    }

    var coreWordList = toWordList(
      'INVERT AND OR XOR\
 2* 2/ LSHIFT RSHIFT\
 0= = 0< < > U< MIN MAX\
 2DROP 2DUP 2OVER 2SWAP ?DUP DEPTH DROP DUP OVER ROT SWAP\
 >R R> R@\
 + - 1+ 1- ABS NEGATE\
 S>D * M* UM*\
 FM/MOD SM/REM UM/MOD */ */MOD / /MOD MOD\
 HERE , @ ! CELL+ CELLS C, C@ C! CHARS 2@ 2!\
 ALIGN ALIGNED +! ALLOT\
 CHAR [CHAR] [ ] BL\
 FIND EXECUTE IMMEDIATE COUNT LITERAL STATE\
 ; DOES> >BODY\
 EVALUATE\
 SOURCE >IN\
 <# # #S #> HOLD SIGN BASE >NUMBER HEX DECIMAL\
 FILL MOVE\
 . CR EMIT SPACE SPACES TYPE U. .R U.R\
 ACCEPT\
 TRUE FALSE\
 <> U> 0<> 0>\
 NIP TUCK ROLL PICK\
 2>R 2R@ 2R>\
 WITHIN UNUSED MARKER\
 I J\
 TO\
 COMPILE, [COMPILE]\
 SAVE-INPUT RESTORE-INPUT\
 PAD ERASE\
 2LITERAL DNEGATE\
 D- D+ D0< D0= D2* D2/ D< D= DMAX DMIN D>S DABS\
 M+ M*/ D. D.R 2ROT DU<\
 CATCH THROW\
 FREE RESIZE ALLOCATE\
 CS-PICK CS-ROLL\
 GET-CURRENT SET-CURRENT FORTH-WORDLIST GET-ORDER SET-ORDER\
 PREVIOUS SEARCH-WORDLIST WORDLIST FIND ALSO ONLY FORTH DEFINITIONS ORDER\
 -TRAILING /STRING SEARCH COMPARE CMOVE CMOVE> BLANK SLITERAL');

    var immediateWordList = toWordList('IF ELSE THEN BEGIN WHILE REPEAT UNTIL RECURSE [IF] [ELSE] [THEN] ?DO DO LOOP +LOOP UNLOOP LEAVE EXIT AGAIN CASE OF ENDOF ENDCASE');

    function searchWordList (wordList, word) {
      var i;
      for (i = wordList.length - 1; i >= 0; i--) {
        if (wordList[i].name === word.toUpperCase()) {
          return wordList[i];
        }
      }
      return undefined;
    }
    const forth = {
      startState: function() {
        return {
          state: '',
          base: 10,
          coreWordList: coreWordList,
          immediateWordList: immediateWordList,
          wordList: []
        };
      },
      token: function (stream, stt) {
        var mat;
        if (stream.eatSpace()) {
          return null;
        }
        if (stt.state === '') { // interpretation
          if (stream.match(/^(\]|:NONAME)(\s|$)/i)) {
            stt.state = ' compilation';
            return 'builtin';
          }
          mat = stream.match(/^(\:)\s+(\S+)(\s|$)+/);
          if (mat) {
            stt.wordList.push({name: mat[2].toUpperCase()});
            stt.state = ' compilation';
            return 'def';
          }
          mat = stream.match(/^(VARIABLE|2VARIABLE|CONSTANT|2CONSTANT|CREATE|POSTPONE|VALUE|WORD)\s+(\S+)(\s|$)+/i);
          if (mat) {
            stt.wordList.push({name: mat[2].toUpperCase()});
            return 'def';
          }
          mat = stream.match(/^(\'|\[\'\])\s+(\S+)(\s|$)+/);
          if (mat) {
            return 'builtin'
          }
        } else { // compilation
          // ; [
          if (stream.match(/^(\;|\[)(\s)/)) {
            stt.state = '';
            stream.backUp(1);
            return 'builtin';
          }
          if (stream.match(/^(\;|\[)($)/)) {
            stt.state = '';
            return 'builtin';
          }
          if (stream.match(/^(POSTPONE)\s+\S+(\s|$)+/)) {
            return 'builtin';
          }
        }

        // dynamic wordlist
        mat = stream.match(/^(\S+)(\s+|$)/);
        if (mat) {
          if (searchWordList(stt.wordList, mat[1]) !== undefined) {
            return 'variable';
          }

          // comments
          if (mat[1] === '\\') {
            stream.skipToEnd();
            return 'comment';
          }

          // core words
          if (searchWordList(stt.coreWordList, mat[1]) !== undefined) {
            return 'builtin';
          }
          if (searchWordList(stt.immediateWordList, mat[1]) !== undefined) {
            return 'keyword';
          }

          if (mat[1] === '(') {
            stream.eatWhile(function (s) { return s !== ')'; });
            stream.eat(')');
            return 'comment';
          }

          // // strings
          if (mat[1] === '.(') {
            stream.eatWhile(function (s) { return s !== ')'; });
            stream.eat(')');
            return 'string';
          }
          if (mat[1] === 'S"' || mat[1] === '."' || mat[1] === 'C"') {
            stream.eatWhile(function (s) { return s !== '"'; });
            stream.eat('"');
            return 'string';
          }

          // numbers
          if (mat[1] - 0xfffffffff) {
            return 'number';
          }
          // if (mat[1].match(/^[-+]?[0-9]+\.[0-9]*/)) {
          //     return 'number';
          // }

          return 'atom';
        }
      }
    };

    var forth$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        forth: forth
    });

    function words$e(array) {
      var keys = {};
      for (var i = 0; i < array.length; ++i) {
        keys[array[i]] = true;
      }
      return keys;
    }

    var keywords$x = words$e([
      "abstract", "accept", "allocatable", "allocate",
      "array", "assign", "asynchronous", "backspace",
      "bind", "block", "byte", "call", "case",
      "class", "close", "common", "contains",
      "continue", "cycle", "data", "deallocate",
      "decode", "deferred", "dimension", "do",
      "elemental", "else", "encode", "end",
      "endif", "entry", "enumerator", "equivalence",
      "exit", "external", "extrinsic", "final",
      "forall", "format", "function", "generic",
      "go", "goto", "if", "implicit", "import", "include",
      "inquire", "intent", "interface", "intrinsic",
      "module", "namelist", "non_intrinsic",
      "non_overridable", "none", "nopass",
      "nullify", "open", "optional", "options",
      "parameter", "pass", "pause", "pointer",
      "print", "private", "program", "protected",
      "public", "pure", "read", "recursive", "result",
      "return", "rewind", "save", "select", "sequence",
      "stop", "subroutine", "target", "then", "to", "type",
      "use", "value", "volatile", "where", "while",
      "write"]);
    var builtins$8 = words$e(["abort", "abs", "access", "achar", "acos",
                          "adjustl", "adjustr", "aimag", "aint", "alarm",
                          "all", "allocated", "alog", "amax", "amin",
                          "amod", "and", "anint", "any", "asin",
                          "associated", "atan", "besj", "besjn", "besy",
                          "besyn", "bit_size", "btest", "cabs", "ccos",
                          "ceiling", "cexp", "char", "chdir", "chmod",
                          "clog", "cmplx", "command_argument_count",
                          "complex", "conjg", "cos", "cosh", "count",
                          "cpu_time", "cshift", "csin", "csqrt", "ctime",
                          "c_funloc", "c_loc", "c_associated", "c_null_ptr",
                          "c_null_funptr", "c_f_pointer", "c_null_char",
                          "c_alert", "c_backspace", "c_form_feed",
                          "c_new_line", "c_carriage_return",
                          "c_horizontal_tab", "c_vertical_tab", "dabs",
                          "dacos", "dasin", "datan", "date_and_time",
                          "dbesj", "dbesj", "dbesjn", "dbesy", "dbesy",
                          "dbesyn", "dble", "dcos", "dcosh", "ddim", "derf",
                          "derfc", "dexp", "digits", "dim", "dint", "dlog",
                          "dlog", "dmax", "dmin", "dmod", "dnint",
                          "dot_product", "dprod", "dsign", "dsinh",
                          "dsin", "dsqrt", "dtanh", "dtan", "dtime",
                          "eoshift", "epsilon", "erf", "erfc", "etime",
                          "exit", "exp", "exponent", "extends_type_of",
                          "fdate", "fget", "fgetc", "float", "floor",
                          "flush", "fnum", "fputc", "fput", "fraction",
                          "fseek", "fstat", "ftell", "gerror", "getarg",
                          "get_command", "get_command_argument",
                          "get_environment_variable", "getcwd",
                          "getenv", "getgid", "getlog", "getpid",
                          "getuid", "gmtime", "hostnm", "huge", "iabs",
                          "iachar", "iand", "iargc", "ibclr", "ibits",
                          "ibset", "ichar", "idate", "idim", "idint",
                          "idnint", "ieor", "ierrno", "ifix", "imag",
                          "imagpart", "index", "int", "ior", "irand",
                          "isatty", "ishft", "ishftc", "isign",
                          "iso_c_binding", "is_iostat_end", "is_iostat_eor",
                          "itime", "kill", "kind", "lbound", "len", "len_trim",
                          "lge", "lgt", "link", "lle", "llt", "lnblnk", "loc",
                          "log", "logical", "long", "lshift", "lstat", "ltime",
                          "matmul", "max", "maxexponent", "maxloc", "maxval",
                          "mclock", "merge", "move_alloc", "min", "minexponent",
                          "minloc", "minval", "mod", "modulo", "mvbits",
                          "nearest", "new_line", "nint", "not", "or", "pack",
                          "perror", "precision", "present", "product", "radix",
                          "rand", "random_number", "random_seed", "range",
                          "real", "realpart", "rename", "repeat", "reshape",
                          "rrspacing", "rshift", "same_type_as", "scale",
                          "scan", "second", "selected_int_kind",
                          "selected_real_kind", "set_exponent", "shape",
                          "short", "sign", "signal", "sinh", "sin", "sleep",
                          "sngl", "spacing", "spread", "sqrt", "srand", "stat",
                          "sum", "symlnk", "system", "system_clock", "tan",
                          "tanh", "time", "tiny", "transfer", "transpose",
                          "trim", "ttynam", "ubound", "umask", "unlink",
                          "unpack", "verify", "xor", "zabs", "zcos", "zexp",
                          "zlog", "zsin", "zsqrt"]);

    var dataTypes =  words$e(["c_bool", "c_char", "c_double", "c_double_complex",
                            "c_float", "c_float_complex", "c_funptr", "c_int",
                            "c_int16_t", "c_int32_t", "c_int64_t", "c_int8_t",
                            "c_int_fast16_t", "c_int_fast32_t", "c_int_fast64_t",
                            "c_int_fast8_t", "c_int_least16_t", "c_int_least32_t",
                            "c_int_least64_t", "c_int_least8_t", "c_intmax_t",
                            "c_intptr_t", "c_long", "c_long_double",
                            "c_long_double_complex", "c_long_long", "c_ptr",
                            "c_short", "c_signed_char", "c_size_t", "character",
                            "complex", "double", "integer", "logical", "real"]);
    var isOperatorChar$b = /[+\-*&=<>\/\:]/;
    var litOperator = new RegExp("(\.and\.|\.or\.|\.eq\.|\.lt\.|\.le\.|\.gt\.|\.ge\.|\.ne\.|\.not\.|\.eqv\.|\.neqv\.)", "i");

    function tokenBase$A(stream, state) {

      if (stream.match(litOperator)){
        return 'operator';
      }

      var ch = stream.next();
      if (ch == "!") {
        stream.skipToEnd();
        return "comment";
      }
      if (ch == '"' || ch == "'") {
        state.tokenize = tokenString$m(ch);
        return state.tokenize(stream, state);
      }
      if (/[\[\]\(\),]/.test(ch)) {
        return null;
      }
      if (/\d/.test(ch)) {
        stream.eatWhile(/[\w\.]/);
        return "number";
      }
      if (isOperatorChar$b.test(ch)) {
        stream.eatWhile(isOperatorChar$b);
        return "operator";
      }
      stream.eatWhile(/[\w\$_]/);
      var word = stream.current().toLowerCase();

      if (keywords$x.hasOwnProperty(word)){
        return 'keyword';
      }
      if (builtins$8.hasOwnProperty(word) || dataTypes.hasOwnProperty(word)) {
        return 'builtin';
      }
      return "variable";
    }

    function tokenString$m(quote) {
      return function(stream, state) {
        var escaped = false, next, end = false;
        while ((next = stream.next()) != null) {
          if (next == quote && !escaped) {
            end = true;
            break;
          }
          escaped = !escaped && next == "\\";
        }
        if (end || !escaped) state.tokenize = null;
        return "string";
      };
    }

    // Interface

    const fortran = {
      startState: function() {
        return {tokenize: null};
      },

      token: function(stream, state) {
        if (stream.eatSpace()) return null;
        var style = (state.tokenize || tokenBase$A)(stream, state);
        if (style == "comment" || style == "meta") return style;
        return style;
      }
    };

    var fortran$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        fortran: fortran
    });

    function mlLike(parserConfig) {
      var words = {
        'as': 'keyword',
        'do': 'keyword',
        'else': 'keyword',
        'end': 'keyword',
        'exception': 'keyword',
        'fun': 'keyword',
        'functor': 'keyword',
        'if': 'keyword',
        'in': 'keyword',
        'include': 'keyword',
        'let': 'keyword',
        'of': 'keyword',
        'open': 'keyword',
        'rec': 'keyword',
        'struct': 'keyword',
        'then': 'keyword',
        'type': 'keyword',
        'val': 'keyword',
        'while': 'keyword',
        'with': 'keyword'
      };

      var extraWords = parserConfig.extraWords || {};
      for (var prop in extraWords) {
        if (extraWords.hasOwnProperty(prop)) {
          words[prop] = parserConfig.extraWords[prop];
        }
      }
      var hintWords = [];
      for (var k in words) { hintWords.push(k); }

      function tokenBase(stream, state) {
        var ch = stream.next();

        if (ch === '"') {
          state.tokenize = tokenString;
          return state.tokenize(stream, state);
        }
        if (ch === '{') {
          if (stream.eat('|')) {
            state.longString = true;
            state.tokenize = tokenLongString;
            return state.tokenize(stream, state);
          }
        }
        if (ch === '(') {
          if (stream.eat('*')) {
            state.commentLevel++;
            state.tokenize = tokenComment;
            return state.tokenize(stream, state);
          }
        }
        if (ch === '~' || ch === '?') {
          stream.eatWhile(/\w/);
          return 'variableName.special';
        }
        if (ch === '`') {
          stream.eatWhile(/\w/);
          return 'quote';
        }
        if (ch === '/' && parserConfig.slashComments && stream.eat('/')) {
          stream.skipToEnd();
          return 'comment';
        }
        if (/\d/.test(ch)) {
          if (ch === '0' && stream.eat(/[bB]/)) {
            stream.eatWhile(/[01]/);
          } if (ch === '0' && stream.eat(/[xX]/)) {
            stream.eatWhile(/[0-9a-fA-F]/);
          } if (ch === '0' && stream.eat(/[oO]/)) {
            stream.eatWhile(/[0-7]/);
          } else {
            stream.eatWhile(/[\d_]/);
            if (stream.eat('.')) {
              stream.eatWhile(/[\d]/);
            }
            if (stream.eat(/[eE]/)) {
              stream.eatWhile(/[\d\-+]/);
            }
          }
          return 'number';
        }
        if ( /[+\-*&%=<>!?|@\.~:]/.test(ch)) {
          return 'operator';
        }
        if (/[\w\xa1-\uffff]/.test(ch)) {
          stream.eatWhile(/[\w\xa1-\uffff]/);
          var cur = stream.current();
          return words.hasOwnProperty(cur) ? words[cur] : 'variable';
        }
        return null
      }

      function tokenString(stream, state) {
        var next, end = false, escaped = false;
        while ((next = stream.next()) != null) {
          if (next === '"' && !escaped) {
            end = true;
            break;
          }
          escaped = !escaped && next === '\\';
        }
        if (end && !escaped) {
          state.tokenize = tokenBase;
        }
        return 'string';
      }
      function tokenComment(stream, state) {
        var prev, next;
        while(state.commentLevel > 0 && (next = stream.next()) != null) {
          if (prev === '(' && next === '*') state.commentLevel++;
          if (prev === '*' && next === ')') state.commentLevel--;
          prev = next;
        }
        if (state.commentLevel <= 0) {
          state.tokenize = tokenBase;
        }
        return 'comment';
      }

      function tokenLongString(stream, state) {
        var prev, next;
        while (state.longString && (next = stream.next()) != null) {
          if (prev === '|' && next === '}') state.longString = false;
          prev = next;
        }
        if (!state.longString) {
          state.tokenize = tokenBase;
        }
        return 'string';
      }

      return {
        startState: function() {return {tokenize: tokenBase, commentLevel: 0, longString: false};},
        token: function(stream, state) {
          if (stream.eatSpace()) return null;
          return state.tokenize(stream, state);
        },

        languageData: {
          autocomplete: hintWords,
          commentTokens: {
            line: parserConfig.slashComments ? "//" : undefined,
            block: {open: "(*", close: "*)"}
          }
        }
      };
    }
    const oCaml = mlLike({
      extraWords: {
        'and': 'keyword',
        'assert': 'keyword',
        'begin': 'keyword',
        'class': 'keyword',
        'constraint': 'keyword',
        'done': 'keyword',
        'downto': 'keyword',
        'external': 'keyword',
        'function': 'keyword',
        'initializer': 'keyword',
        'lazy': 'keyword',
        'match': 'keyword',
        'method': 'keyword',
        'module': 'keyword',
        'mutable': 'keyword',
        'new': 'keyword',
        'nonrec': 'keyword',
        'object': 'keyword',
        'private': 'keyword',
        'sig': 'keyword',
        'to': 'keyword',
        'try': 'keyword',
        'value': 'keyword',
        'virtual': 'keyword',
        'when': 'keyword',

        // builtins
        'raise': 'builtin',
        'failwith': 'builtin',
        'true': 'builtin',
        'false': 'builtin',

        // Pervasives builtins
        'asr': 'builtin',
        'land': 'builtin',
        'lor': 'builtin',
        'lsl': 'builtin',
        'lsr': 'builtin',
        'lxor': 'builtin',
        'mod': 'builtin',
        'or': 'builtin',

        // More Pervasives
        'raise_notrace': 'builtin',
        'trace': 'builtin',
        'exit': 'builtin',
        'print_string': 'builtin',
        'print_endline': 'builtin',

         'int': 'type',
         'float': 'type',
         'bool': 'type',
         'char': 'type',
         'string': 'type',
         'unit': 'type',

         // Modules
         'List': 'builtin'
      }
    });

    const fSharp = mlLike({
      extraWords: {
        'abstract': 'keyword',
        'assert': 'keyword',
        'base': 'keyword',
        'begin': 'keyword',
        'class': 'keyword',
        'default': 'keyword',
        'delegate': 'keyword',
        'do!': 'keyword',
        'done': 'keyword',
        'downcast': 'keyword',
        'downto': 'keyword',
        'elif': 'keyword',
        'extern': 'keyword',
        'finally': 'keyword',
        'for': 'keyword',
        'function': 'keyword',
        'global': 'keyword',
        'inherit': 'keyword',
        'inline': 'keyword',
        'interface': 'keyword',
        'internal': 'keyword',
        'lazy': 'keyword',
        'let!': 'keyword',
        'match': 'keyword',
        'member': 'keyword',
        'module': 'keyword',
        'mutable': 'keyword',
        'namespace': 'keyword',
        'new': 'keyword',
        'null': 'keyword',
        'override': 'keyword',
        'private': 'keyword',
        'public': 'keyword',
        'return!': 'keyword',
        'return': 'keyword',
        'select': 'keyword',
        'static': 'keyword',
        'to': 'keyword',
        'try': 'keyword',
        'upcast': 'keyword',
        'use!': 'keyword',
        'use': 'keyword',
        'void': 'keyword',
        'when': 'keyword',
        'yield!': 'keyword',
        'yield': 'keyword',

        // Reserved words
        'atomic': 'keyword',
        'break': 'keyword',
        'checked': 'keyword',
        'component': 'keyword',
        'const': 'keyword',
        'constraint': 'keyword',
        'constructor': 'keyword',
        'continue': 'keyword',
        'eager': 'keyword',
        'event': 'keyword',
        'external': 'keyword',
        'fixed': 'keyword',
        'method': 'keyword',
        'mixin': 'keyword',
        'object': 'keyword',
        'parallel': 'keyword',
        'process': 'keyword',
        'protected': 'keyword',
        'pure': 'keyword',
        'sealed': 'keyword',
        'tailcall': 'keyword',
        'trait': 'keyword',
        'virtual': 'keyword',
        'volatile': 'keyword',

        // builtins
        'List': 'builtin',
        'Seq': 'builtin',
        'Map': 'builtin',
        'Set': 'builtin',
        'Option': 'builtin',
        'int': 'builtin',
        'string': 'builtin',
        'not': 'builtin',
        'true': 'builtin',
        'false': 'builtin',

        'raise': 'builtin',
        'failwith': 'builtin'
      },
      slashComments: true
    });

    const sml = mlLike({
      extraWords: {
        'abstype': 'keyword',
        'and': 'keyword',
        'andalso': 'keyword',
        'case': 'keyword',
        'datatype': 'keyword',
        'fn': 'keyword',
        'handle': 'keyword',
        'infix': 'keyword',
        'infixr': 'keyword',
        'local': 'keyword',
        'nonfix': 'keyword',
        'op': 'keyword',
        'orelse': 'keyword',
        'raise': 'keyword',
        'withtype': 'keyword',
        'eqtype': 'keyword',
        'sharing': 'keyword',
        'sig': 'keyword',
        'signature': 'keyword',
        'structure': 'keyword',
        'where': 'keyword',
        'true': 'keyword',
        'false': 'keyword',

        // types
        'int': 'builtin',
        'real': 'builtin',
        'string': 'builtin',
        'char': 'builtin',
        'bool': 'builtin'
      },
      slashComments: true
    });

    var mllike = /*#__PURE__*/Object.freeze({
        __proto__: null,
        oCaml: oCaml,
        fSharp: fSharp,
        sml: sml
    });

    function mkGas(arch) {
      // If an architecture is specified, its initialization function may
      // populate this array with custom parsing functions which will be
      // tried in the event that the standard functions do not find a match.
      var custom = [];

      // The symbol used to start a line comment changes based on the target
      // architecture.
      // If no architecture is pased in "parserConfig" then only multiline
      // comments will have syntax support.
      var lineCommentStartSymbol = "";

      // These directives are architecture independent.
      // Machine specific directives should go in their respective
      // architecture initialization function.
      // Reference:
      // http://sourceware.org/binutils/docs/as/Pseudo-Ops.html#Pseudo-Ops
      var directives = {
        ".abort" : "builtin",
        ".align" : "builtin",
        ".altmacro" : "builtin",
        ".ascii" : "builtin",
        ".asciz" : "builtin",
        ".balign" : "builtin",
        ".balignw" : "builtin",
        ".balignl" : "builtin",
        ".bundle_align_mode" : "builtin",
        ".bundle_lock" : "builtin",
        ".bundle_unlock" : "builtin",
        ".byte" : "builtin",
        ".cfi_startproc" : "builtin",
        ".comm" : "builtin",
        ".data" : "builtin",
        ".def" : "builtin",
        ".desc" : "builtin",
        ".dim" : "builtin",
        ".double" : "builtin",
        ".eject" : "builtin",
        ".else" : "builtin",
        ".elseif" : "builtin",
        ".end" : "builtin",
        ".endef" : "builtin",
        ".endfunc" : "builtin",
        ".endif" : "builtin",
        ".equ" : "builtin",
        ".equiv" : "builtin",
        ".eqv" : "builtin",
        ".err" : "builtin",
        ".error" : "builtin",
        ".exitm" : "builtin",
        ".extern" : "builtin",
        ".fail" : "builtin",
        ".file" : "builtin",
        ".fill" : "builtin",
        ".float" : "builtin",
        ".func" : "builtin",
        ".global" : "builtin",
        ".gnu_attribute" : "builtin",
        ".hidden" : "builtin",
        ".hword" : "builtin",
        ".ident" : "builtin",
        ".if" : "builtin",
        ".incbin" : "builtin",
        ".include" : "builtin",
        ".int" : "builtin",
        ".internal" : "builtin",
        ".irp" : "builtin",
        ".irpc" : "builtin",
        ".lcomm" : "builtin",
        ".lflags" : "builtin",
        ".line" : "builtin",
        ".linkonce" : "builtin",
        ".list" : "builtin",
        ".ln" : "builtin",
        ".loc" : "builtin",
        ".loc_mark_labels" : "builtin",
        ".local" : "builtin",
        ".long" : "builtin",
        ".macro" : "builtin",
        ".mri" : "builtin",
        ".noaltmacro" : "builtin",
        ".nolist" : "builtin",
        ".octa" : "builtin",
        ".offset" : "builtin",
        ".org" : "builtin",
        ".p2align" : "builtin",
        ".popsection" : "builtin",
        ".previous" : "builtin",
        ".print" : "builtin",
        ".protected" : "builtin",
        ".psize" : "builtin",
        ".purgem" : "builtin",
        ".pushsection" : "builtin",
        ".quad" : "builtin",
        ".reloc" : "builtin",
        ".rept" : "builtin",
        ".sbttl" : "builtin",
        ".scl" : "builtin",
        ".section" : "builtin",
        ".set" : "builtin",
        ".short" : "builtin",
        ".single" : "builtin",
        ".size" : "builtin",
        ".skip" : "builtin",
        ".sleb128" : "builtin",
        ".space" : "builtin",
        ".stab" : "builtin",
        ".string" : "builtin",
        ".struct" : "builtin",
        ".subsection" : "builtin",
        ".symver" : "builtin",
        ".tag" : "builtin",
        ".text" : "builtin",
        ".title" : "builtin",
        ".type" : "builtin",
        ".uleb128" : "builtin",
        ".val" : "builtin",
        ".version" : "builtin",
        ".vtable_entry" : "builtin",
        ".vtable_inherit" : "builtin",
        ".warning" : "builtin",
        ".weak" : "builtin",
        ".weakref" : "builtin",
        ".word" : "builtin"
      };

      var registers = {};

      function x86() {
        lineCommentStartSymbol = "#";

        registers.ax  = "variable";
        registers.eax = "variableName.special";
        registers.rax = "variableName.special";

        registers.bx  = "variable";
        registers.ebx = "variableName.special";
        registers.rbx = "variableName.special";

        registers.cx  = "variable";
        registers.ecx = "variableName.special";
        registers.rcx = "variableName.special";

        registers.dx  = "variable";
        registers.edx = "variableName.special";
        registers.rdx = "variableName.special";

        registers.si  = "variable";
        registers.esi = "variableName.special";
        registers.rsi = "variableName.special";

        registers.di  = "variable";
        registers.edi = "variableName.special";
        registers.rdi = "variableName.special";

        registers.sp  = "variable";
        registers.esp = "variableName.special";
        registers.rsp = "variableName.special";

        registers.bp  = "variable";
        registers.ebp = "variableName.special";
        registers.rbp = "variableName.special";

        registers.ip  = "variable";
        registers.eip = "variableName.special";
        registers.rip = "variableName.special";

        registers.cs  = "keyword";
        registers.ds  = "keyword";
        registers.ss  = "keyword";
        registers.es  = "keyword";
        registers.fs  = "keyword";
        registers.gs  = "keyword";
      }

      function armv6() {
        // Reference:
        // http://infocenter.arm.com/help/topic/com.arm.doc.qrc0001l/QRC0001_UAL.pdf
        // http://infocenter.arm.com/help/topic/com.arm.doc.ddi0301h/DDI0301H_arm1176jzfs_r0p7_trm.pdf
        lineCommentStartSymbol = "@";
        directives.syntax = "builtin";

        registers.r0  = "variable";
        registers.r1  = "variable";
        registers.r2  = "variable";
        registers.r3  = "variable";
        registers.r4  = "variable";
        registers.r5  = "variable";
        registers.r6  = "variable";
        registers.r7  = "variable";
        registers.r8  = "variable";
        registers.r9  = "variable";
        registers.r10 = "variable";
        registers.r11 = "variable";
        registers.r12 = "variable";

        registers.sp  = "variableName.special";
        registers.lr  = "variableName.special";
        registers.pc  = "variableName.special";
        registers.r13 = registers.sp;
        registers.r14 = registers.lr;
        registers.r15 = registers.pc;

        custom.push(function(ch, stream) {
          if (ch === '#') {
            stream.eatWhile(/\w/);
            return "number";
          }
        });
      }

      if (arch === "x86") {
        x86();
      } else if (arch === "arm" || arch === "armv6") {
        armv6();
      }

      function nextUntilUnescaped(stream, end) {
        var escaped = false, next;
        while ((next = stream.next()) != null) {
          if (next === end && !escaped) {
            return false;
          }
          escaped = !escaped && next === "\\";
        }
        return escaped;
      }

      function clikeComment(stream, state) {
        var maybeEnd = false, ch;
        while ((ch = stream.next()) != null) {
          if (ch === "/" && maybeEnd) {
            state.tokenize = null;
            break;
          }
          maybeEnd = (ch === "*");
        }
        return "comment";
      }

      return {
        startState: function() {
          return {
            tokenize: null
          };
        },

        token: function(stream, state) {
          if (state.tokenize) {
            return state.tokenize(stream, state);
          }

          if (stream.eatSpace()) {
            return null;
          }

          var style, cur, ch = stream.next();

          if (ch === "/") {
            if (stream.eat("*")) {
              state.tokenize = clikeComment;
              return clikeComment(stream, state);
            }
          }

          if (ch === lineCommentStartSymbol) {
            stream.skipToEnd();
            return "comment";
          }

          if (ch === '"') {
            nextUntilUnescaped(stream, '"');
            return "string";
          }

          if (ch === '.') {
            stream.eatWhile(/\w/);
            cur = stream.current().toLowerCase();
            style = directives[cur];
            return style || null;
          }

          if (ch === '=') {
            stream.eatWhile(/\w/);
            return "tag";
          }

          if (ch === '{') {
            return "bracket";
          }

          if (ch === '}') {
            return "bracket";
          }

          if (/\d/.test(ch)) {
            if (ch === "0" && stream.eat("x")) {
              stream.eatWhile(/[0-9a-fA-F]/);
              return "number";
            }
            stream.eatWhile(/\d/);
            return "number";
          }

          if (/\w/.test(ch)) {
            stream.eatWhile(/\w/);
            if (stream.eat(":")) {
              return 'tag';
            }
            cur = stream.current().toLowerCase();
            style = registers[cur];
            return style || null;
          }

          for (var i = 0; i < custom.length; i++) {
            style = custom[i](ch, stream, state);
            if (style) {
              return style;
            }
          }
        },

        languageData: {
          commentTokens: {
            line: lineCommentStartSymbol,
            block: {open: "/*", close: "*/"}
          }
        }
      };
    }
    const gas = mkGas("x86");
    const gasArm = mkGas("arm");

    var gas$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        gas: gas,
        gasArm: gasArm
    });

    const gherkin = {
      startState: function () {
        return {
          lineNumber: 0,
          tableHeaderLine: false,
          allowFeature: true,
          allowBackground: false,
          allowScenario: false,
          allowSteps: false,
          allowPlaceholders: false,
          allowMultilineArgument: false,
          inMultilineString: false,
          inMultilineTable: false,
          inKeywordLine: false
        };
      },
      token: function (stream, state) {
        if (stream.sol()) {
          state.lineNumber++;
          state.inKeywordLine = false;
          if (state.inMultilineTable) {
            state.tableHeaderLine = false;
            if (!stream.match(/\s*\|/, false)) {
              state.allowMultilineArgument = false;
              state.inMultilineTable = false;
            }
          }
        }

        stream.eatSpace();

        if (state.allowMultilineArgument) {

          // STRING
          if (state.inMultilineString) {
            if (stream.match('"""')) {
              state.inMultilineString = false;
              state.allowMultilineArgument = false;
            } else {
              stream.match(/.*/);
            }
            return "string";
          }

          // TABLE
          if (state.inMultilineTable) {
            if (stream.match(/\|\s*/)) {
              return "bracket";
            } else {
              stream.match(/[^\|]*/);
              return state.tableHeaderLine ? "header" : "string";
            }
          }

          // DETECT START
          if (stream.match('"""')) {
            // String
            state.inMultilineString = true;
            return "string";
          } else if (stream.match("|")) {
            // Table
            state.inMultilineTable = true;
            state.tableHeaderLine = true;
            return "bracket";
          }

        }

        // LINE COMMENT
        if (stream.match(/#.*/)) {
          return "comment";

          // TAG
        } else if (!state.inKeywordLine && stream.match(/@\S+/)) {
          return "tag";

          // FEATURE
        } else if (!state.inKeywordLine && state.allowFeature && stream.match(/(機能|功能|フィーチャ|기능|โครงหลัก|ความสามารถ|ความต้องการทางธุรกิจ|ಹೆಚ್ಚಳ|గుణము|ਮੁਹਾਂਦਰਾ|ਨਕਸ਼ ਨੁਹਾਰ|ਖਾਸੀਅਤ|रूप लेख|وِیژگی|خاصية|תכונה|Функціонал|Функция|Функционалност|Функционал|Үзенчәлеклелек|Свойство|Особина|Мөмкинлек|Могућност|Λειτουργία|Δυνατότητα|Właściwość|Vlastnosť|Trajto|Tính năng|Savybė|Pretty much|Požiadavka|Požadavek|Potrzeba biznesowa|Özellik|Osobina|Ominaisuus|Omadus|OH HAI|Mogućnost|Mogucnost|Jellemző|Hwæt|Hwaet|Funzionalità|Funktionalitéit|Funktionalität|Funkcja|Funkcionalnost|Funkcionalitāte|Funkcia|Fungsi|Functionaliteit|Funcționalitate|Funcţionalitate|Functionalitate|Funcionalitat|Funcionalidade|Fonctionnalité|Fitur|Fīča|Feature|Eiginleiki|Egenskap|Egenskab|Característica|Caracteristica|Business Need|Aspekt|Arwedd|Ahoy matey!|Ability):/)) {
          state.allowScenario = true;
          state.allowBackground = true;
          state.allowPlaceholders = false;
          state.allowSteps = false;
          state.allowMultilineArgument = false;
          state.inKeywordLine = true;
          return "keyword";

          // BACKGROUND
        } else if (!state.inKeywordLine && state.allowBackground && stream.match(/(背景|배경|แนวคิด|ಹಿನ್ನೆಲೆ|నేపథ్యం|ਪਿਛੋਕੜ|पृष्ठभूमि|زمینه|الخلفية|רקע|Тарих|Предыстория|Предистория|Позадина|Передумова|Основа|Контекст|Кереш|Υπόβαθρο|Założenia|Yo\-ho\-ho|Tausta|Taust|Situācija|Rerefons|Pozadina|Pozadie|Pozadí|Osnova|Latar Belakang|Kontext|Konteksts|Kontekstas|Kontekst|Háttér|Hannergrond|Grundlage|Geçmiş|Fundo|Fono|First off|Dis is what went down|Dasar|Contexto|Contexte|Context|Contesto|Cenário de Fundo|Cenario de Fundo|Cefndir|Bối cảnh|Bakgrunnur|Bakgrunn|Bakgrund|Baggrund|Background|B4|Antecedents|Antecedentes|Ær|Aer|Achtergrond):/)) {
          state.allowPlaceholders = false;
          state.allowSteps = true;
          state.allowBackground = false;
          state.allowMultilineArgument = false;
          state.inKeywordLine = true;
          return "keyword";

          // SCENARIO OUTLINE
        } else if (!state.inKeywordLine && state.allowScenario && stream.match(/(場景大綱|场景大纲|劇本大綱|剧本大纲|テンプレ|シナリオテンプレート|シナリオテンプレ|シナリオアウトライン|시나리오 개요|สรุปเหตุการณ์|โครงสร้างของเหตุการณ์|ವಿವರಣೆ|కథనం|ਪਟਕਥਾ ਰੂਪ ਰੇਖਾ|ਪਟਕਥਾ ਢਾਂਚਾ|परिदृश्य रूपरेखा|سيناريو مخطط|الگوی سناریو|תבנית תרחיש|Сценарийның төзелеше|Сценарий структураси|Структура сценарію|Структура сценария|Структура сценарија|Скица|Рамка на сценарий|Концепт|Περιγραφή Σεναρίου|Wharrimean is|Template Situai|Template Senario|Template Keadaan|Tapausaihio|Szenariogrundriss|Szablon scenariusza|Swa hwær swa|Swa hwaer swa|Struktura scenarija|Structură scenariu|Structura scenariu|Skica|Skenario konsep|Shiver me timbers|Senaryo taslağı|Schema dello scenario|Scenariomall|Scenariomal|Scenario Template|Scenario Outline|Scenario Amlinellol|Scenārijs pēc parauga|Scenarijaus šablonas|Reckon it's like|Raamstsenaarium|Plang vum Szenario|Plan du Scénario|Plan du scénario|Osnova scénáře|Osnova Scenára|Náčrt Scenáru|Náčrt Scénáře|Náčrt Scenára|MISHUN SRSLY|Menggariskan Senario|Lýsing Dæma|Lýsing Atburðarásar|Konturo de la scenaro|Koncept|Khung tình huống|Khung kịch bản|Forgatókönyv vázlat|Esquema do Cenário|Esquema do Cenario|Esquema del escenario|Esquema de l'escenari|Esbozo do escenario|Delineação do Cenário|Delineacao do Cenario|All y'all|Abstrakt Scenario|Abstract Scenario):/)) {
          state.allowPlaceholders = true;
          state.allowSteps = true;
          state.allowMultilineArgument = false;
          state.inKeywordLine = true;
          return "keyword";

          // EXAMPLES
        } else if (state.allowScenario && stream.match(/(例子|例|サンプル|예|ชุดของเหตุการณ์|ชุดของตัวอย่าง|ಉದಾಹರಣೆಗಳು|ఉదాహరణలు|ਉਦਾਹਰਨਾਂ|उदाहरण|نمونه ها|امثلة|דוגמאות|Үрнәкләр|Сценарији|Примеры|Примери|Приклади|Мисоллар|Мисаллар|Σενάρια|Παραδείγματα|You'll wanna|Voorbeelden|Variantai|Tapaukset|Se þe|Se the|Se ðe|Scenarios|Scenariji|Scenarijai|Przykłady|Primjeri|Primeri|Příklady|Príklady|Piemēri|Példák|Pavyzdžiai|Paraugs|Örnekler|Juhtumid|Exemplos|Exemples|Exemple|Exempel|EXAMPLZ|Examples|Esempi|Enghreifftiau|Ekzemploj|Eksempler|Ejemplos|Dữ liệu|Dead men tell no tales|Dæmi|Contoh|Cenários|Cenarios|Beispiller|Beispiele|Atburðarásir):/)) {
          state.allowPlaceholders = false;
          state.allowSteps = true;
          state.allowBackground = false;
          state.allowMultilineArgument = true;
          return "keyword";

          // SCENARIO
        } else if (!state.inKeywordLine && state.allowScenario && stream.match(/(場景|场景|劇本|剧本|シナリオ|시나리오|เหตุการณ์|ಕಥಾಸಾರಾಂಶ|సన్నివేశం|ਪਟਕਥਾ|परिदृश्य|سيناريو|سناریو|תרחיש|Сценарій|Сценарио|Сценарий|Пример|Σενάριο|Tình huống|The thing of it is|Tapaus|Szenario|Swa|Stsenaarium|Skenario|Situai|Senaryo|Senario|Scenaro|Scenariusz|Scenariu|Scénario|Scenario|Scenarijus|Scenārijs|Scenarij|Scenarie|Scénář|Scenár|Primer|MISHUN|Kịch bản|Keadaan|Heave to|Forgatókönyv|Escenario|Escenari|Cenário|Cenario|Awww, look mate|Atburðarás):/)) {
          state.allowPlaceholders = false;
          state.allowSteps = true;
          state.allowBackground = false;
          state.allowMultilineArgument = false;
          state.inKeywordLine = true;
          return "keyword";

          // STEPS
        } else if (!state.inKeywordLine && state.allowSteps && stream.match(/(那麼|那么|而且|當|当|并且|同時|同时|前提|假设|假設|假定|假如|但是|但し|並且|もし|ならば|ただし|しかし|かつ|하지만|조건|먼저|만일|만약|단|그리고|그러면|และ |เมื่อ |แต่ |ดังนั้น |กำหนดให้ |ಸ್ಥಿತಿಯನ್ನು |ಮತ್ತು |ನೀಡಿದ |ನಂತರ |ಆದರೆ |మరియు |చెప్పబడినది |కాని |ఈ పరిస్థితిలో |అప్పుడు |ਪਰ |ਤਦ |ਜੇਕਰ |ਜਿਵੇਂ ਕਿ |ਜਦੋਂ |ਅਤੇ |यदि |परन्तु |पर |तब |तदा |तथा |जब |चूंकि |किन्तु |कदा |और |अगर |و |هنگامی |متى |لكن |عندما |ثم |بفرض |با فرض |اما |اذاً |آنگاه |כאשר |וגם |בהינתן |אזי |אז |אבל |Якщо |Һәм |Унда |Тоді |Тогда |То |Также |Та |Пусть |Припустимо, що |Припустимо |Онда |Но |Нехай |Нәтиҗәдә |Лекин |Ләкин |Коли |Когда |Когато |Када |Кад |К тому же |І |И |Задато |Задати |Задате |Если |Допустим |Дано |Дадено |Вә |Ва |Бирок |Әмма |Әйтик |Әгәр |Аммо |Али |Але |Агар |А також |А |Τότε |Όταν |Και |Δεδομένου |Αλλά |Þurh |Þegar |Þa þe |Þá |Þa |Zatati |Zakładając |Zadato |Zadate |Zadano |Zadani |Zadan |Za předpokladu |Za predpokladu |Youse know when youse got |Youse know like when |Yna |Yeah nah |Y'know |Y |Wun |Wtedy |When y'all |When |Wenn |WEN |wann |Ve |Và |Und |Un |ugeholl |Too right |Thurh |Thì |Then y'all |Then |Tha the |Tha |Tetapi |Tapi |Tak |Tada |Tad |Stel |Soit |Siis |Și |Şi |Si |Sed |Se |Så |Quando |Quand |Quan |Pryd |Potom |Pokud |Pokiaľ |Però |Pero |Pak |Oraz |Onda |Ond |Oletetaan |Og |Och |O zaman |Niin |Nhưng |När |Når |Mutta |Men |Mas |Maka |Majd |Mając |Mais |Maar |mä |Ma |Lorsque |Lorsqu'|Logo |Let go and haul |Kun |Kuid |Kui |Kiedy |Khi |Ketika |Kemudian |Keď |Když |Kaj |Kai |Kada |Kad |Jeżeli |Jeśli |Ja |It's just unbelievable |Ir |I CAN HAZ |I |Ha |Givun |Givet |Given y'all |Given |Gitt |Gegeven |Gegeben seien |Gegeben sei |Gdy |Gangway! |Fakat |Étant donnés |Etant donnés |Étant données |Etant données |Étant donnée |Etant donnée |Étant donné |Etant donné |Et |És |Entonces |Entón |Então |Entao |En |Eğer ki |Ef |Eeldades |E |Ðurh |Duota |Dun |Donitaĵo |Donat |Donada |Do |Diyelim ki |Diberi |Dengan |Den youse gotta |DEN |De |Dato |Dați fiind |Daţi fiind |Dati fiind |Dati |Date fiind |Date |Data |Dat fiind |Dar |Dann |dann |Dan |Dados |Dado |Dadas |Dada |Ða ðe |Ða |Cuando |Cho |Cando |Când |Cand |Cal |But y'all |But at the end of the day I reckon |BUT |But |Buh |Blimey! |Biết |Bet |Bagi |Aye |awer |Avast! |Atunci |Atesa |Atès |Apabila |Anrhegedig a |Angenommen |And y'all |And |AN |An |an |Amikor |Amennyiben |Ama |Als |Alors |Allora |Ali |Aleshores |Ale |Akkor |Ak |Adott |Ac |Aber |A zároveň |A tiež |A taktiež |A také |A |a |7 |\* )/)) {
          state.inStep = true;
          state.allowPlaceholders = true;
          state.allowMultilineArgument = true;
          state.inKeywordLine = true;
          return "keyword";

          // INLINE STRING
        } else if (stream.match(/"[^"]*"?/)) {
          return "string";

          // PLACEHOLDER
        } else if (state.allowPlaceholders && stream.match(/<[^>]*>?/)) {
          return "variable";

          // Fall through
        } else {
          stream.next();
          stream.eatWhile(/[^@"<#]/);
          return null;
        }
      }
    };

    var gherkin$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        gherkin: gherkin
    });

    var keywords$w = {
      "break":true, "case":true, "chan":true, "const":true, "continue":true,
      "default":true, "defer":true, "else":true, "fallthrough":true, "for":true,
      "func":true, "go":true, "goto":true, "if":true, "import":true,
      "interface":true, "map":true, "package":true, "range":true, "return":true,
      "select":true, "struct":true, "switch":true, "type":true, "var":true,
      "bool":true, "byte":true, "complex64":true, "complex128":true,
      "float32":true, "float64":true, "int8":true, "int16":true, "int32":true,
      "int64":true, "string":true, "uint8":true, "uint16":true, "uint32":true,
      "uint64":true, "int":true, "uint":true, "uintptr":true, "error": true,
      "rune":true
    };

    var atoms$9 = {
      "true":true, "false":true, "iota":true, "nil":true, "append":true,
      "cap":true, "close":true, "complex":true, "copy":true, "delete":true, "imag":true,
      "len":true, "make":true, "new":true, "panic":true, "print":true,
      "println":true, "real":true, "recover":true
    };

    var isOperatorChar$a = /[+\-*&^%:=<>!|\/]/;

    var curPunc$9;

    function tokenBase$z(stream, state) {
      var ch = stream.next();
      if (ch == '"' || ch == "'" || ch == "`") {
        state.tokenize = tokenString$l(ch);
        return state.tokenize(stream, state);
      }
      if (/[\d\.]/.test(ch)) {
        if (ch == ".") {
          stream.match(/^[0-9]+([eE][\-+]?[0-9]+)?/);
        } else if (ch == "0") {
          stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);
        } else {
          stream.match(/^[0-9]*\.?[0-9]*([eE][\-+]?[0-9]+)?/);
        }
        return "number";
      }
      if (/[\[\]{}\(\),;\:\.]/.test(ch)) {
        curPunc$9 = ch;
        return null;
      }
      if (ch == "/") {
        if (stream.eat("*")) {
          state.tokenize = tokenComment$f;
          return tokenComment$f(stream, state);
        }
        if (stream.eat("/")) {
          stream.skipToEnd();
          return "comment";
        }
      }
      if (isOperatorChar$a.test(ch)) {
        stream.eatWhile(isOperatorChar$a);
        return "operator";
      }
      stream.eatWhile(/[\w\$_\xa1-\uffff]/);
      var cur = stream.current();
      if (keywords$w.propertyIsEnumerable(cur)) {
        if (cur == "case" || cur == "default") curPunc$9 = "case";
        return "keyword";
      }
      if (atoms$9.propertyIsEnumerable(cur)) return "atom";
      return "variable";
    }

    function tokenString$l(quote) {
      return function(stream, state) {
        var escaped = false, next, end = false;
        while ((next = stream.next()) != null) {
          if (next == quote && !escaped) {end = true; break;}
          escaped = !escaped && quote != "`" && next == "\\";
        }
        if (end || !(escaped || quote == "`"))
          state.tokenize = tokenBase$z;
        return "string";
      };
    }

    function tokenComment$f(stream, state) {
      var maybeEnd = false, ch;
      while (ch = stream.next()) {
        if (ch == "/" && maybeEnd) {
          state.tokenize = tokenBase$z;
          break;
        }
        maybeEnd = (ch == "*");
      }
      return "comment";
    }

    function Context$7(indented, column, type, align, prev) {
      this.indented = indented;
      this.column = column;
      this.type = type;
      this.align = align;
      this.prev = prev;
    }
    function pushContext$a(state, col, type) {
      return state.context = new Context$7(state.indented, col, type, null, state.context);
    }
    function popContext$a(state) {
      if (!state.context.prev) return;
      var t = state.context.type;
      if (t == ")" || t == "]" || t == "}")
        state.indented = state.context.indented;
      return state.context = state.context.prev;
    }

    // Interface

    const go = {
      startState: function(indentUnit) {
        return {
          tokenize: null,
          context: new Context$7(-indentUnit, 0, "top", false),
          indented: 0,
          startOfLine: true
        };
      },

      token: function(stream, state) {
        var ctx = state.context;
        if (stream.sol()) {
          if (ctx.align == null) ctx.align = false;
          state.indented = stream.indentation();
          state.startOfLine = true;
          if (ctx.type == "case") ctx.type = "}";
        }
        if (stream.eatSpace()) return null;
        curPunc$9 = null;
        var style = (state.tokenize || tokenBase$z)(stream, state);
        if (style == "comment") return style;
        if (ctx.align == null) ctx.align = true;

        if (curPunc$9 == "{") pushContext$a(state, stream.column(), "}");
        else if (curPunc$9 == "[") pushContext$a(state, stream.column(), "]");
        else if (curPunc$9 == "(") pushContext$a(state, stream.column(), ")");
        else if (curPunc$9 == "case") ctx.type = "case";
        else if (curPunc$9 == "}" && ctx.type == "}") popContext$a(state);
        else if (curPunc$9 == ctx.type) popContext$a(state);
        state.startOfLine = false;
        return style;
      },

      indent: function(state, textAfter, cx) {
        if (state.tokenize != tokenBase$z && state.tokenize != null) return null;
        var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);
        if (ctx.type == "case" && /^(?:case|default)\b/.test(textAfter)) {
          state.context.type = "}";
          return ctx.indented;
        }
        var closing = firstChar == ctx.type;
        if (ctx.align) return ctx.column + (closing ? 0 : 1);
        else return ctx.indented + (closing ? 0 : cx.unit);
      },

      languageData: {
        indentOnInput: /^\s([{}]|case |default\s*:)$/,
        commentTokens: {line: "//", block: {open: "/*", close: "*/"}}
      }
    };

    var go$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        go: go
    });

    function words$d(str) {
      var obj = {}, words = str.split(" ");
      for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
      return obj;
    }
    var keywords$v = words$d(
      "abstract as assert boolean break byte case catch char class const continue def default " +
        "do double else enum extends final finally float for goto if implements import in " +
        "instanceof int interface long native new package private protected public return " +
        "short static strictfp super switch synchronized threadsafe throw throws trait transient " +
        "try void volatile while");
    var blockKeywords$2 = words$d("catch class def do else enum finally for if interface switch trait try while");
    var standaloneKeywords = words$d("return break continue");
    var atoms$8 = words$d("null true false this");

    var curPunc$8;
    function tokenBase$y(stream, state) {
      var ch = stream.next();
      if (ch == '"' || ch == "'") {
        return startString(ch, stream, state);
      }
      if (/[\[\]{}\(\),;\:\.]/.test(ch)) {
        curPunc$8 = ch;
        return null;
      }
      if (/\d/.test(ch)) {
        stream.eatWhile(/[\w\.]/);
        if (stream.eat(/eE/)) { stream.eat(/\+\-/); stream.eatWhile(/\d/); }
        return "number";
      }
      if (ch == "/") {
        if (stream.eat("*")) {
          state.tokenize.push(tokenComment$e);
          return tokenComment$e(stream, state);
        }
        if (stream.eat("/")) {
          stream.skipToEnd();
          return "comment";
        }
        if (expectExpression(state.lastToken, false)) {
          return startString(ch, stream, state);
        }
      }
      if (ch == "-" && stream.eat(">")) {
        curPunc$8 = "->";
        return null;
      }
      if (/[+\-*&%=<>!?|\/~]/.test(ch)) {
        stream.eatWhile(/[+\-*&%=<>|~]/);
        return "operator";
      }
      stream.eatWhile(/[\w\$_]/);
      if (ch == "@") { stream.eatWhile(/[\w\$_\.]/); return "meta"; }
      if (state.lastToken == ".") return "property";
      if (stream.eat(":")) { curPunc$8 = "proplabel"; return "property"; }
      var cur = stream.current();
      if (atoms$8.propertyIsEnumerable(cur)) { return "atom"; }
      if (keywords$v.propertyIsEnumerable(cur)) {
        if (blockKeywords$2.propertyIsEnumerable(cur)) curPunc$8 = "newstatement";
        else if (standaloneKeywords.propertyIsEnumerable(cur)) curPunc$8 = "standalone";
        return "keyword";
      }
      return "variable";
    }
    tokenBase$y.isBase = true;

    function startString(quote, stream, state) {
      var tripleQuoted = false;
      if (quote != "/" && stream.eat(quote)) {
        if (stream.eat(quote)) tripleQuoted = true;
        else return "string";
      }
      function t(stream, state) {
        var escaped = false, next, end = !tripleQuoted;
        while ((next = stream.next()) != null) {
          if (next == quote && !escaped) {
            if (!tripleQuoted) { break; }
            if (stream.match(quote + quote)) { end = true; break; }
          }
          if (quote == '"' && next == "$" && !escaped && stream.eat("{")) {
            state.tokenize.push(tokenBaseUntilBrace$1());
            return "string";
          }
          escaped = !escaped && next == "\\";
        }
        if (end) state.tokenize.pop();
        return "string";
      }
      state.tokenize.push(t);
      return t(stream, state);
    }

    function tokenBaseUntilBrace$1() {
      var depth = 1;
      function t(stream, state) {
        if (stream.peek() == "}") {
          depth--;
          if (depth == 0) {
            state.tokenize.pop();
            return state.tokenize[state.tokenize.length-1](stream, state);
          }
        } else if (stream.peek() == "{") {
          depth++;
        }
        return tokenBase$y(stream, state);
      }
      t.isBase = true;
      return t;
    }

    function tokenComment$e(stream, state) {
      var maybeEnd = false, ch;
      while (ch = stream.next()) {
        if (ch == "/" && maybeEnd) {
          state.tokenize.pop();
          break;
        }
        maybeEnd = (ch == "*");
      }
      return "comment";
    }

    function expectExpression(last, newline) {
      return !last || last == "operator" || last == "->" || /[\.\[\{\(,;:]/.test(last) ||
        last == "newstatement" || last == "keyword" || last == "proplabel" ||
        (last == "standalone" && !newline);
    }

    function Context$6(indented, column, type, align, prev) {
      this.indented = indented;
      this.column = column;
      this.type = type;
      this.align = align;
      this.prev = prev;
    }
    function pushContext$9(state, col, type) {
      return state.context = new Context$6(state.indented, col, type, null, state.context);
    }
    function popContext$9(state) {
      var t = state.context.type;
      if (t == ")" || t == "]" || t == "}")
        state.indented = state.context.indented;
      return state.context = state.context.prev;
    }

    // Interface

    const groovy = {
      startState: function(indentUnit) {
        return {
          tokenize: [tokenBase$y],
          context: new Context$6(-indentUnit, 0, "top", false),
          indented: 0,
          startOfLine: true,
          lastToken: null
        };
      },

      token: function(stream, state) {
        var ctx = state.context;
        if (stream.sol()) {
          if (ctx.align == null) ctx.align = false;
          state.indented = stream.indentation();
          state.startOfLine = true;
          // Automatic semicolon insertion
          if (ctx.type == "statement" && !expectExpression(state.lastToken, true)) {
            popContext$9(state); ctx = state.context;
          }
        }
        if (stream.eatSpace()) return null;
        curPunc$8 = null;
        var style = state.tokenize[state.tokenize.length-1](stream, state);
        if (style == "comment") return style;
        if (ctx.align == null) ctx.align = true;

        if ((curPunc$8 == ";" || curPunc$8 == ":") && ctx.type == "statement") popContext$9(state);
        // Handle indentation for {x -> \n ... }
        else if (curPunc$8 == "->" && ctx.type == "statement" && ctx.prev.type == "}") {
          popContext$9(state);
          state.context.align = false;
        }
        else if (curPunc$8 == "{") pushContext$9(state, stream.column(), "}");
        else if (curPunc$8 == "[") pushContext$9(state, stream.column(), "]");
        else if (curPunc$8 == "(") pushContext$9(state, stream.column(), ")");
        else if (curPunc$8 == "}") {
          while (ctx.type == "statement") ctx = popContext$9(state);
          if (ctx.type == "}") ctx = popContext$9(state);
          while (ctx.type == "statement") ctx = popContext$9(state);
        }
        else if (curPunc$8 == ctx.type) popContext$9(state);
        else if (ctx.type == "}" || ctx.type == "top" || (ctx.type == "statement" && curPunc$8 == "newstatement"))
          pushContext$9(state, stream.column(), "statement");
        state.startOfLine = false;
        state.lastToken = curPunc$8 || style;
        return style;
      },

      indent: function(state, textAfter, cx) {
        if (!state.tokenize[state.tokenize.length-1].isBase) return null;
        var firstChar = textAfter && textAfter.charAt(0), ctx = state.context;
        if (ctx.type == "statement" && !expectExpression(state.lastToken, true)) ctx = ctx.prev;
        var closing = firstChar == ctx.type;
        if (ctx.type == "statement") return ctx.indented + (firstChar == "{" ? 0 : cx.unit);
        else if (ctx.align) return ctx.column + (closing ? 0 : 1);
        else return ctx.indented + (closing ? 0 : cx.unit);
      },

      languageData: {
        indentOnInput: /^\s*[{}]$/,
        commentTokens: {line: "//", block: {open: "/*", close: "*/"}},
        closeBrackets: {brackets: ["(", "[", "{", "'", '"', "'''", '"""']}
      }
    };

    var groovy$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        groovy: groovy
    });

    function switchState(source, setState, f) {
      setState(f);
      return f(source, setState);
    }

    // These should all be Unicode extended, as per the Haskell 2010 report
    var smallRE = /[a-z_]/;
    var largeRE = /[A-Z]/;
    var digitRE = /\d/;
    var hexitRE = /[0-9A-Fa-f]/;
    var octitRE = /[0-7]/;
    var idRE = /[a-z_A-Z0-9'\xa1-\uffff]/;
    var symbolRE = /[-!#$%&*+.\/<=>?@\\^|~:]/;
    var specialRE = /[(),;[\]`{}]/;
    var whiteCharRE = /[ \t\v\f]/; // newlines are handled in tokenizer

    function normal$1(source, setState) {
      if (source.eatWhile(whiteCharRE)) {
        return null;
      }

      var ch = source.next();
      if (specialRE.test(ch)) {
        if (ch == '{' && source.eat('-')) {
          var t = "comment";
          if (source.eat('#')) {
            t = "meta";
          }
          return switchState(source, setState, ncomment(t, 1));
        }
        return null;
      }

      if (ch == '\'') {
        if (source.eat('\\')) {
          source.next();  // should handle other escapes here
        }
        else {
          source.next();
        }
        if (source.eat('\'')) {
          return "string";
        }
        return "error";
      }

      if (ch == '"') {
        return switchState(source, setState, stringLiteral);
      }

      if (largeRE.test(ch)) {
        source.eatWhile(idRE);
        if (source.eat('.')) {
          return "qualifier";
        }
        return "type";
      }

      if (smallRE.test(ch)) {
        source.eatWhile(idRE);
        return "variable";
      }

      if (digitRE.test(ch)) {
        if (ch == '0') {
          if (source.eat(/[xX]/)) {
            source.eatWhile(hexitRE); // should require at least 1
            return "integer";
          }
          if (source.eat(/[oO]/)) {
            source.eatWhile(octitRE); // should require at least 1
            return "number";
          }
        }
        source.eatWhile(digitRE);
        var t = "number";
        if (source.match(/^\.\d+/)) {
          t = "number";
        }
        if (source.eat(/[eE]/)) {
          t = "number";
          source.eat(/[-+]/);
          source.eatWhile(digitRE); // should require at least 1
        }
        return t;
      }

      if (ch == "." && source.eat("."))
        return "keyword";

      if (symbolRE.test(ch)) {
        if (ch == '-' && source.eat(/-/)) {
          source.eatWhile(/-/);
          if (!source.eat(symbolRE)) {
            source.skipToEnd();
            return "comment";
          }
        }
        source.eatWhile(symbolRE);
        return "variable"
      }

      return "error";
    }

    function ncomment(type, nest) {
      if (nest == 0) {
        return normal$1;
      }
      return function(source, setState) {
        var currNest = nest;
        while (!source.eol()) {
          var ch = source.next();
          if (ch == '{' && source.eat('-')) {
            ++currNest;
          }
          else if (ch == '-' && source.eat('}')) {
            --currNest;
            if (currNest == 0) {
              setState(normal$1);
              return type;
            }
          }
        }
        setState(ncomment(type, currNest));
        return type;
      };
    }

    function stringLiteral(source, setState) {
      while (!source.eol()) {
        var ch = source.next();
        if (ch == '"') {
          setState(normal$1);
          return "string";
        }
        if (ch == '\\') {
          if (source.eol() || source.eat(whiteCharRE)) {
            setState(stringGap);
            return "string";
          }
          if (source.eat('&')) ;
          else {
            source.next(); // should handle other escapes here
          }
        }
      }
      setState(normal$1);
      return "error";
    }

    function stringGap(source, setState) {
      if (source.eat('\\')) {
        return switchState(source, setState, stringLiteral);
      }
      source.next();
      setState(normal$1);
      return "error";
    }


    var wellKnownWords = (function() {
      var wkw = {};
      function setType(t) {
        return function () {
          for (var i = 0; i < arguments.length; i++)
            wkw[arguments[i]] = t;
        };
      }

      setType("keyword")(
        "case", "class", "data", "default", "deriving", "do", "else", "foreign",
        "if", "import", "in", "infix", "infixl", "infixr", "instance", "let",
        "module", "newtype", "of", "then", "type", "where", "_");

      setType("keyword")(
        "\.\.", ":", "::", "=", "\\", "<-", "->", "@", "~", "=>");

      setType("builtin")(
        "!!", "$!", "$", "&&", "+", "++", "-", ".", "/", "/=", "<", "<*", "<=",
        "<$>", "<*>", "=<<", "==", ">", ">=", ">>", ">>=", "^", "^^", "||", "*",
        "*>", "**");

      setType("builtin")(
        "Applicative", "Bool", "Bounded", "Char", "Double", "EQ", "Either", "Enum",
        "Eq", "False", "FilePath", "Float", "Floating", "Fractional", "Functor",
        "GT", "IO", "IOError", "Int", "Integer", "Integral", "Just", "LT", "Left",
        "Maybe", "Monad", "Nothing", "Num", "Ord", "Ordering", "Rational", "Read",
        "ReadS", "Real", "RealFloat", "RealFrac", "Right", "Show", "ShowS",
        "String", "True");

      setType("builtin")(
        "abs", "acos", "acosh", "all", "and", "any", "appendFile", "asTypeOf",
        "asin", "asinh", "atan", "atan2", "atanh", "break", "catch", "ceiling",
        "compare", "concat", "concatMap", "const", "cos", "cosh", "curry",
        "cycle", "decodeFloat", "div", "divMod", "drop", "dropWhile", "either",
        "elem", "encodeFloat", "enumFrom", "enumFromThen", "enumFromThenTo",
        "enumFromTo", "error", "even", "exp", "exponent", "fail", "filter",
        "flip", "floatDigits", "floatRadix", "floatRange", "floor", "fmap",
        "foldl", "foldl1", "foldr", "foldr1", "fromEnum", "fromInteger",
        "fromIntegral", "fromRational", "fst", "gcd", "getChar", "getContents",
        "getLine", "head", "id", "init", "interact", "ioError", "isDenormalized",
        "isIEEE", "isInfinite", "isNaN", "isNegativeZero", "iterate", "last",
        "lcm", "length", "lex", "lines", "log", "logBase", "lookup", "map",
        "mapM", "mapM_", "max", "maxBound", "maximum", "maybe", "min", "minBound",
        "minimum", "mod", "negate", "not", "notElem", "null", "odd", "or",
        "otherwise", "pi", "pred", "print", "product", "properFraction", "pure",
        "putChar", "putStr", "putStrLn", "quot", "quotRem", "read", "readFile",
        "readIO", "readList", "readLn", "readParen", "reads", "readsPrec",
        "realToFrac", "recip", "rem", "repeat", "replicate", "return", "reverse",
        "round", "scaleFloat", "scanl", "scanl1", "scanr", "scanr1", "seq",
        "sequence", "sequence_", "show", "showChar", "showList", "showParen",
        "showString", "shows", "showsPrec", "significand", "signum", "sin",
        "sinh", "snd", "span", "splitAt", "sqrt", "subtract", "succ", "sum",
        "tail", "take", "takeWhile", "tan", "tanh", "toEnum", "toInteger",
        "toRational", "truncate", "uncurry", "undefined", "unlines", "until",
        "unwords", "unzip", "unzip3", "userError", "words", "writeFile", "zip",
        "zip3", "zipWith", "zipWith3");

      return wkw;
    })();

    const haskell = {
      startState: function ()  { return { f: normal$1 }; },
      copyState:  function (s) { return { f: s.f }; },

      token: function(stream, state) {
        var t = state.f(stream, function(s) { state.f = s; });
        var w = stream.current();
        return wellKnownWords.hasOwnProperty(w) ? wellKnownWords[w] : t;
      },

      languageData: {
        commentTokens: {line: "--", block: {open: "{-", close: "-}"}}
      }
    };

    var haskell$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        haskell: haskell
    });

    // Tokenizer

    function kw(type) {return {type: type, style: "keyword"};}
    var A = kw("keyword a"), B = kw("keyword b"), C = kw("keyword c");
    var operator$1 = kw("operator"), atom$1 = {type: "atom", style: "atom"}, attribute$1 = {type:"attribute", style: "attribute"};
    var type$3 = kw("typedef");
    var keywords$u = {
      "if": A, "while": A, "else": B, "do": B, "try": B,
      "return": C, "break": C, "continue": C, "new": C, "throw": C,
      "var": kw("var"), "inline":attribute$1, "static": attribute$1, "using":kw("import"),
      "public": attribute$1, "private": attribute$1, "cast": kw("cast"), "import": kw("import"), "macro": kw("macro"),
      "function": kw("function"), "catch": kw("catch"), "untyped": kw("untyped"), "callback": kw("cb"),
      "for": kw("for"), "switch": kw("switch"), "case": kw("case"), "default": kw("default"),
      "in": operator$1, "never": kw("property_access"), "trace":kw("trace"),
      "class": type$3, "abstract":type$3, "enum":type$3, "interface":type$3, "typedef":type$3, "extends":type$3, "implements":type$3, "dynamic":type$3,
      "true": atom$1, "false": atom$1, "null": atom$1
    };

    var isOperatorChar$9 = /[+\-*&%=<>!?|]/;

    function chain$7(stream, state, f) {
      state.tokenize = f;
      return f(stream, state);
    }

    function toUnescaped(stream, end) {
      var escaped = false, next;
      while ((next = stream.next()) != null) {
        if (next == end && !escaped)
          return true;
        escaped = !escaped && next == "\\";
      }
    }

    // Used as scratch variables to communicate multiple values without
    // consing up tons of objects.
    var type$3, content;
    function ret$1(tp, style, cont) {
      type$3 = tp; content = cont;
      return style;
    }

    function haxeTokenBase(stream, state) {
      var ch = stream.next();
      if (ch == '"' || ch == "'") {
        return chain$7(stream, state, haxeTokenString(ch));
      } else if (/[\[\]{}\(\),;\:\.]/.test(ch)) {
        return ret$1(ch);
      } else if (ch == "0" && stream.eat(/x/i)) {
        stream.eatWhile(/[\da-f]/i);
        return ret$1("number", "number");
      } else if (/\d/.test(ch) || ch == "-" && stream.eat(/\d/)) {
        stream.match(/^\d*(?:\.\d*(?!\.))?(?:[eE][+\-]?\d+)?/);
        return ret$1("number", "number");
      } else if (state.reAllowed && (ch == "~" && stream.eat(/\//))) {
        toUnescaped(stream, "/");
        stream.eatWhile(/[gimsu]/);
        return ret$1("regexp", "string.special");
      } else if (ch == "/") {
        if (stream.eat("*")) {
          return chain$7(stream, state, haxeTokenComment);
        } else if (stream.eat("/")) {
          stream.skipToEnd();
          return ret$1("comment", "comment");
        } else {
          stream.eatWhile(isOperatorChar$9);
          return ret$1("operator", null, stream.current());
        }
      } else if (ch == "#") {
        stream.skipToEnd();
        return ret$1("conditional", "meta");
      } else if (ch == "@") {
        stream.eat(/:/);
        stream.eatWhile(/[\w_]/);
        return ret$1 ("metadata", "meta");
      } else if (isOperatorChar$9.test(ch)) {
        stream.eatWhile(isOperatorChar$9);
        return ret$1("operator", null, stream.current());
      } else {
        var word;
        if(/[A-Z]/.test(ch)) {
          stream.eatWhile(/[\w_<>]/);
          word = stream.current();
          return ret$1("type", "type", word);
        } else {
          stream.eatWhile(/[\w_]/);
          var word = stream.current(), known = keywords$u.propertyIsEnumerable(word) && keywords$u[word];
          return (known && state.kwAllowed) ? ret$1(known.type, known.style, word) :
            ret$1("variable", "variable", word);
        }
      }
    }

    function haxeTokenString(quote) {
      return function(stream, state) {
        if (toUnescaped(stream, quote))
          state.tokenize = haxeTokenBase;
        return ret$1("string", "string");
      };
    }

    function haxeTokenComment(stream, state) {
      var maybeEnd = false, ch;
      while (ch = stream.next()) {
        if (ch == "/" && maybeEnd) {
          state.tokenize = haxeTokenBase;
          break;
        }
        maybeEnd = (ch == "*");
      }
      return ret$1("comment", "comment");
    }

    // Parser

    var atomicTypes = {"atom": true, "number": true, "variable": true, "string": true, "regexp": true};

    function HaxeLexical(indented, column, type, align, prev, info) {
      this.indented = indented;
      this.column = column;
      this.type = type;
      this.prev = prev;
      this.info = info;
      if (align != null) this.align = align;
    }

    function inScope(state, varname) {
      for (var v = state.localVars; v; v = v.next)
        if (v.name == varname) return true;
    }

    function parseHaxe(state, style, type, content, stream) {
      var cc = state.cc;
      // Communicate our context to the combinators.
      // (Less wasteful than consing up a hundred closures on every call.)
      cx.state = state; cx.stream = stream; cx.marked = null, cx.cc = cc;

      if (!state.lexical.hasOwnProperty("align"))
        state.lexical.align = true;

      while(true) {
        var combinator = cc.length ? cc.pop() : statement;
        if (combinator(type, content)) {
          while(cc.length && cc[cc.length - 1].lex)
            cc.pop()();
          if (cx.marked) return cx.marked;
          if (type == "variable" && inScope(state, content)) return "variableName.local";
          if (type == "variable" && imported(state, content)) return "variableName.special";
          return style;
        }
      }
    }

    function imported(state, typename) {
      if (/[a-z]/.test(typename.charAt(0)))
        return false;
      var len = state.importedtypes.length;
      for (var i = 0; i<len; i++)
        if(state.importedtypes[i]==typename) return true;
    }

    function registerimport(importname) {
      var state = cx.state;
      for (var t = state.importedtypes; t; t = t.next)
        if(t.name == importname) return;
      state.importedtypes = { name: importname, next: state.importedtypes };
    }
    // Combinator utils

    var cx = {state: null, column: null, marked: null, cc: null};
    function pass$2() {
      for (var i = arguments.length - 1; i >= 0; i--) cx.cc.push(arguments[i]);
    }
    function cont$1() {
      pass$2.apply(null, arguments);
      return true;
    }
    function inList(name, list) {
      for (var v = list; v; v = v.next)
        if (v.name == name) return true;
      return false;
    }
    function register(varname) {
      var state = cx.state;
      if (state.context) {
        cx.marked = "def";
        if (inList(varname, state.localVars)) return;
        state.localVars = {name: varname, next: state.localVars};
      } else if (state.globalVars) {
        if (inList(varname, state.globalVars)) return;
        state.globalVars = {name: varname, next: state.globalVars};
      }
    }

    // Combinators

    var defaultVars = {name: "this", next: null};
    function pushcontext() {
      if (!cx.state.context) cx.state.localVars = defaultVars;
      cx.state.context = {prev: cx.state.context, vars: cx.state.localVars};
    }
    function popcontext() {
      cx.state.localVars = cx.state.context.vars;
      cx.state.context = cx.state.context.prev;
    }
    popcontext.lex = true;
    function pushlex(type, info) {
      var result = function() {
        var state = cx.state;
        state.lexical = new HaxeLexical(state.indented, cx.stream.column(), type, null, state.lexical, info);
      };
      result.lex = true;
      return result;
    }
    function poplex() {
      var state = cx.state;
      if (state.lexical.prev) {
        if (state.lexical.type == ")")
          state.indented = state.lexical.indented;
        state.lexical = state.lexical.prev;
      }
    }
    poplex.lex = true;

    function expect(wanted) {
      function f(type) {
        if (type == wanted) return cont$1();
        else if (wanted == ";") return pass$2();
        else return cont$1(f);
      }
      return f;
    }

    function statement(type) {
      if (type == "@") return cont$1(metadef);
      if (type == "var") return cont$1(pushlex("vardef"), vardef1, expect(";"), poplex);
      if (type == "keyword a") return cont$1(pushlex("form"), expression, statement, poplex);
      if (type == "keyword b") return cont$1(pushlex("form"), statement, poplex);
      if (type == "{") return cont$1(pushlex("}"), pushcontext, block, poplex, popcontext);
      if (type == ";") return cont$1();
      if (type == "attribute") return cont$1(maybeattribute);
      if (type == "function") return cont$1(functiondef);
      if (type == "for") return cont$1(pushlex("form"), expect("("), pushlex(")"), forspec1, expect(")"),
                                     poplex, statement, poplex);
      if (type == "variable") return cont$1(pushlex("stat"), maybelabel);
      if (type == "switch") return cont$1(pushlex("form"), expression, pushlex("}", "switch"), expect("{"),
                                        block, poplex, poplex);
      if (type == "case") return cont$1(expression, expect(":"));
      if (type == "default") return cont$1(expect(":"));
      if (type == "catch") return cont$1(pushlex("form"), pushcontext, expect("("), funarg, expect(")"),
                                       statement, poplex, popcontext);
      if (type == "import") return cont$1(importdef, expect(";"));
      if (type == "typedef") return cont$1(typedef);
      return pass$2(pushlex("stat"), expression, expect(";"), poplex);
    }
    function expression(type) {
      if (atomicTypes.hasOwnProperty(type)) return cont$1(maybeoperator);
      if (type == "type" ) return cont$1(maybeoperator);
      if (type == "function") return cont$1(functiondef);
      if (type == "keyword c") return cont$1(maybeexpression);
      if (type == "(") return cont$1(pushlex(")"), maybeexpression, expect(")"), poplex, maybeoperator);
      if (type == "operator") return cont$1(expression);
      if (type == "[") return cont$1(pushlex("]"), commasep(maybeexpression, "]"), poplex, maybeoperator);
      if (type == "{") return cont$1(pushlex("}"), commasep(objprop, "}"), poplex, maybeoperator);
      return cont$1();
    }
    function maybeexpression(type) {
      if (type.match(/[;\}\)\],]/)) return pass$2();
      return pass$2(expression);
    }

    function maybeoperator(type, value) {
      if (type == "operator" && /\+\+|--/.test(value)) return cont$1(maybeoperator);
      if (type == "operator" || type == ":") return cont$1(expression);
      if (type == ";") return;
      if (type == "(") return cont$1(pushlex(")"), commasep(expression, ")"), poplex, maybeoperator);
      if (type == ".") return cont$1(property$1, maybeoperator);
      if (type == "[") return cont$1(pushlex("]"), expression, expect("]"), poplex, maybeoperator);
    }

    function maybeattribute(type) {
      if (type == "attribute") return cont$1(maybeattribute);
      if (type == "function") return cont$1(functiondef);
      if (type == "var") return cont$1(vardef1);
    }

    function metadef(type) {
      if(type == ":") return cont$1(metadef);
      if(type == "variable") return cont$1(metadef);
      if(type == "(") return cont$1(pushlex(")"), commasep(metaargs, ")"), poplex, statement);
    }
    function metaargs(type) {
      if(type == "variable") return cont$1();
    }

    function importdef (type, value) {
      if(type == "variable" && /[A-Z]/.test(value.charAt(0))) { registerimport(value); return cont$1(); }
      else if(type == "variable" || type == "property" || type == "." || value == "*") return cont$1(importdef);
    }

    function typedef (type, value)
    {
      if(type == "variable" && /[A-Z]/.test(value.charAt(0))) { registerimport(value); return cont$1(); }
      else if (type == "type" && /[A-Z]/.test(value.charAt(0))) { return cont$1(); }
    }

    function maybelabel(type) {
      if (type == ":") return cont$1(poplex, statement);
      return pass$2(maybeoperator, expect(";"), poplex);
    }
    function property$1(type) {
      if (type == "variable") {cx.marked = "property"; return cont$1();}
    }
    function objprop(type) {
      if (type == "variable") cx.marked = "property";
      if (atomicTypes.hasOwnProperty(type)) return cont$1(expect(":"), expression);
    }
    function commasep(what, end) {
      function proceed(type) {
        if (type == ",") return cont$1(what, proceed);
        if (type == end) return cont$1();
        return cont$1(expect(end));
      }
      return function(type) {
        if (type == end) return cont$1();
        else return pass$2(what, proceed);
      };
    }
    function block(type) {
      if (type == "}") return cont$1();
      return pass$2(statement, block);
    }
    function vardef1(type, value) {
      if (type == "variable"){register(value); return cont$1(typeuse, vardef2);}
      return cont$1();
    }
    function vardef2(type, value) {
      if (value == "=") return cont$1(expression, vardef2);
      if (type == ",") return cont$1(vardef1);
    }
    function forspec1(type, value) {
      if (type == "variable") {
        register(value);
        return cont$1(forin, expression)
      } else {
        return pass$2()
      }
    }
    function forin(_type, value) {
      if (value == "in") return cont$1();
    }
    function functiondef(type, value) {
      //function names starting with upper-case letters are recognised as types, so cludging them together here.
      if (type == "variable" || type == "type") {register(value); return cont$1(functiondef);}
      if (value == "new") return cont$1(functiondef);
      if (type == "(") return cont$1(pushlex(")"), pushcontext, commasep(funarg, ")"), poplex, typeuse, statement, popcontext);
    }
    function typeuse(type) {
      if(type == ":") return cont$1(typestring);
    }
    function typestring(type) {
      if(type == "type") return cont$1();
      if(type == "variable") return cont$1();
      if(type == "{") return cont$1(pushlex("}"), commasep(typeprop, "}"), poplex);
    }
    function typeprop(type) {
      if(type == "variable") return cont$1(typeuse);
    }
    function funarg(type, value) {
      if (type == "variable") {register(value); return cont$1(typeuse);}
    }

    // Interface
    const haxe = {
      startState: function(indentUnit) {
        var defaulttypes = ["Int", "Float", "String", "Void", "Std", "Bool", "Dynamic", "Array"];
        var state = {
          tokenize: haxeTokenBase,
          reAllowed: true,
          kwAllowed: true,
          cc: [],
          lexical: new HaxeLexical(-indentUnit, 0, "block", false),
          importedtypes: defaulttypes,
          context: null,
          indented: 0
        };
        return state;
      },

      token: function(stream, state) {
        if (stream.sol()) {
          if (!state.lexical.hasOwnProperty("align"))
            state.lexical.align = false;
          state.indented = stream.indentation();
        }
        if (stream.eatSpace()) return null;
        var style = state.tokenize(stream, state);
        if (type$3 == "comment") return style;
        state.reAllowed = !!(type$3 == "operator" || type$3 == "keyword c" || type$3.match(/^[\[{}\(,;:]$/));
        state.kwAllowed = type$3 != '.';
        return parseHaxe(state, style, type$3, content, stream);
      },

      indent: function(state, textAfter, cx) {
        if (state.tokenize != haxeTokenBase) return 0;
        var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical;
        if (lexical.type == "stat" && firstChar == "}") lexical = lexical.prev;
        var type = lexical.type, closing = firstChar == type;
        if (type == "vardef") return lexical.indented + 4;
        else if (type == "form" && firstChar == "{") return lexical.indented;
        else if (type == "stat" || type == "form") return lexical.indented + cx.unit;
        else if (lexical.info == "switch" && !closing)
          return lexical.indented + (/^(?:case|default)\b/.test(textAfter) ? cx.unit : 2 * cx.unit);
        else if (lexical.align) return lexical.column + (closing ? 0 : 1);
        else return lexical.indented + (closing ? 0 : cx.unit);
      },

      languageData: {
        indentOnInput: /^\s*[{}]$/,
        commentTokens: {line: "//", block: {open: "/*", close: "*/"}}
      }
    };

    const hxml = {
      startState: function () {
        return {
          define: false,
          inString: false
        };
      },
      token: function (stream, state) {
        var ch = stream.peek();
        var sol = stream.sol();

        ///* comments */
        if (ch == "#") {
          stream.skipToEnd();
          return "comment";
        }
        if (sol && ch == "-") {
          var style = "variable-2";

          stream.eat(/-/);

          if (stream.peek() == "-") {
            stream.eat(/-/);
            style = "keyword a";
          }

          if (stream.peek() == "D") {
            stream.eat(/[D]/);
            style = "keyword c";
            state.define = true;
          }

          stream.eatWhile(/[A-Z]/i);
          return style;
        }

        var ch = stream.peek();

        if (state.inString == false && ch == "'") {
          state.inString = true;
          stream.next();
        }

        if (state.inString == true) {
          if (stream.skipTo("'")) ; else {
            stream.skipToEnd();
          }

          if (stream.peek() == "'") {
            stream.next();
            state.inString = false;
          }

          return "string";
        }

        stream.next();
        return null;
      },
      languageData: {
        commentTokens: {line: "#"}
      }
    };

    var haxe$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        haxe: haxe,
        hxml: hxml
    });

    function failFirstLine(stream, state) {
      stream.skipToEnd();
      state.cur = header$1;
      return "error";
    }

    function start(stream, state) {
      if (stream.match(/^HTTP\/\d\.\d/)) {
        state.cur = responseStatusCode;
        return "keyword";
      } else if (stream.match(/^[A-Z]+/) && /[ \t]/.test(stream.peek())) {
        state.cur = requestPath;
        return "keyword";
      } else {
        return failFirstLine(stream, state);
      }
    }

    function responseStatusCode(stream, state) {
      var code = stream.match(/^\d+/);
      if (!code) return failFirstLine(stream, state);

      state.cur = responseStatusText;
      var status = Number(code[0]);
      if (status >= 100 && status < 400) {
        return "atom";
      } else {
        return "error";
      }
    }

    function responseStatusText(stream, state) {
      stream.skipToEnd();
      state.cur = header$1;
      return null;
    }

    function requestPath(stream, state) {
      stream.eatWhile(/\S/);
      state.cur = requestProtocol;
      return "string.special";
    }

    function requestProtocol(stream, state) {
      if (stream.match(/^HTTP\/\d\.\d$/)) {
        state.cur = header$1;
        return "keyword";
      } else {
        return failFirstLine(stream, state);
      }
    }

    function header$1(stream) {
      if (stream.sol() && !stream.eat(/[ \t]/)) {
        if (stream.match(/^.*?:/)) {
          return "atom";
        } else {
          stream.skipToEnd();
          return "error";
        }
      } else {
        stream.skipToEnd();
        return "string";
      }
    }

    function body(stream) {
      stream.skipToEnd();
      return null;
    }

    const http = {
      token: function(stream, state) {
        var cur = state.cur;
        if (cur != header$1 && cur != body && stream.eatSpace()) return null;
        return cur(stream, state);
      },

      blankLine: function(state) {
        state.cur = body;
      },

      startState: function() {
        return {cur: start};
      }
    };

    var http$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        http: http
    });

    function wordRegexp$b(words) {
      return new RegExp('^((' + words.join(')|(') + '))\\b', 'i');
    }
    var builtinArray$1 = [
      'a_correlate', 'abs', 'acos', 'adapt_hist_equal', 'alog',
      'alog2', 'alog10', 'amoeba', 'annotate', 'app_user_dir',
      'app_user_dir_query', 'arg_present', 'array_equal', 'array_indices',
      'arrow', 'ascii_template', 'asin', 'assoc', 'atan',
      'axis', 'axis', 'bandpass_filter', 'bandreject_filter', 'barplot',
      'bar_plot', 'beseli', 'beselj', 'beselk', 'besely',
      'beta', 'biginteger', 'bilinear', 'bin_date', 'binary_template',
      'bindgen', 'binomial', 'bit_ffs', 'bit_population', 'blas_axpy',
      'blk_con', 'boolarr', 'boolean', 'boxplot', 'box_cursor',
      'breakpoint', 'broyden', 'bubbleplot', 'butterworth', 'bytarr',
      'byte', 'byteorder', 'bytscl', 'c_correlate', 'calendar',
      'caldat', 'call_external', 'call_function', 'call_method',
      'call_procedure', 'canny', 'catch', 'cd', 'cdf', 'ceil',
      'chebyshev', 'check_math', 'chisqr_cvf', 'chisqr_pdf', 'choldc',
      'cholsol', 'cindgen', 'cir_3pnt', 'clipboard', 'close',
      'clust_wts', 'cluster', 'cluster_tree', 'cmyk_convert', 'code_coverage',
      'color_convert', 'color_exchange', 'color_quan', 'color_range_map',
      'colorbar', 'colorize_sample', 'colormap_applicable',
      'colormap_gradient', 'colormap_rotation', 'colortable',
      'comfit', 'command_line_args', 'common', 'compile_opt', 'complex',
      'complexarr', 'complexround', 'compute_mesh_normals', 'cond', 'congrid',
      'conj', 'constrained_min', 'contour', 'contour', 'convert_coord',
      'convol', 'convol_fft', 'coord2to3', 'copy_lun', 'correlate',
      'cos', 'cosh', 'cpu', 'cramer', 'createboxplotdata',
      'create_cursor', 'create_struct', 'create_view', 'crossp', 'crvlength',
      'ct_luminance', 'cti_test', 'cursor', 'curvefit', 'cv_coord',
      'cvttobm', 'cw_animate', 'cw_animate_getp', 'cw_animate_load',
      'cw_animate_run', 'cw_arcball', 'cw_bgroup', 'cw_clr_index',
      'cw_colorsel', 'cw_defroi', 'cw_field', 'cw_filesel', 'cw_form',
      'cw_fslider', 'cw_light_editor', 'cw_light_editor_get',
      'cw_light_editor_set', 'cw_orient', 'cw_palette_editor',
      'cw_palette_editor_get', 'cw_palette_editor_set', 'cw_pdmenu',
      'cw_rgbslider', 'cw_tmpl', 'cw_zoom', 'db_exists',
      'dblarr', 'dcindgen', 'dcomplex', 'dcomplexarr', 'define_key',
      'define_msgblk', 'define_msgblk_from_file', 'defroi', 'defsysv',
      'delvar', 'dendro_plot', 'dendrogram', 'deriv', 'derivsig',
      'determ', 'device', 'dfpmin', 'diag_matrix', 'dialog_dbconnect',
      'dialog_message', 'dialog_pickfile', 'dialog_printersetup',
      'dialog_printjob', 'dialog_read_image',
      'dialog_write_image', 'dictionary', 'digital_filter', 'dilate', 'dindgen',
      'dissolve', 'dist', 'distance_measure', 'dlm_load', 'dlm_register',
      'doc_library', 'double', 'draw_roi', 'edge_dog', 'efont',
      'eigenql', 'eigenvec', 'ellipse', 'elmhes', 'emboss',
      'empty', 'enable_sysrtn', 'eof', 'eos', 'erase',
      'erf', 'erfc', 'erfcx', 'erode', 'errorplot',
      'errplot', 'estimator_filter', 'execute', 'exit', 'exp',
      'expand', 'expand_path', 'expint', 'extract', 'extract_slice',
      'f_cvf', 'f_pdf', 'factorial', 'fft', 'file_basename',
      'file_chmod', 'file_copy', 'file_delete', 'file_dirname',
      'file_expand_path', 'file_gunzip', 'file_gzip', 'file_info',
      'file_lines', 'file_link', 'file_mkdir', 'file_move',
      'file_poll_input', 'file_readlink', 'file_same',
      'file_search', 'file_tar', 'file_test', 'file_untar', 'file_unzip',
      'file_which', 'file_zip', 'filepath', 'findgen', 'finite',
      'fix', 'flick', 'float', 'floor', 'flow3',
      'fltarr', 'flush', 'format_axis_values', 'forward_function', 'free_lun',
      'fstat', 'fulstr', 'funct', 'function', 'fv_test',
      'fx_root', 'fz_roots', 'gamma', 'gamma_ct', 'gauss_cvf',
      'gauss_pdf', 'gauss_smooth', 'gauss2dfit', 'gaussfit',
      'gaussian_function', 'gaussint', 'get_drive_list', 'get_dxf_objects',
      'get_kbrd', 'get_login_info',
      'get_lun', 'get_screen_size', 'getenv', 'getwindows', 'greg2jul',
      'grib', 'grid_input', 'grid_tps', 'grid3', 'griddata',
      'gs_iter', 'h_eq_ct', 'h_eq_int', 'hanning', 'hash',
      'hdf', 'hdf5', 'heap_free', 'heap_gc', 'heap_nosave',
      'heap_refcount', 'heap_save', 'help', 'hilbert', 'hist_2d',
      'hist_equal', 'histogram', 'hls', 'hough', 'hqr',
      'hsv', 'i18n_multibytetoutf8',
      'i18n_multibytetowidechar', 'i18n_utf8tomultibyte',
      'i18n_widechartomultibyte',
      'ibeta', 'icontour', 'iconvertcoord', 'idelete', 'identity',
      'idl_base64', 'idl_container', 'idl_validname',
      'idlexbr_assistant', 'idlitsys_createtool',
      'idlunit', 'iellipse', 'igamma', 'igetcurrent', 'igetdata',
      'igetid', 'igetproperty', 'iimage', 'image', 'image_cont',
      'image_statistics', 'image_threshold', 'imaginary', 'imap', 'indgen',
      'int_2d', 'int_3d', 'int_tabulated', 'intarr', 'interpol',
      'interpolate', 'interval_volume', 'invert', 'ioctl', 'iopen',
      'ir_filter', 'iplot', 'ipolygon', 'ipolyline', 'iputdata',
      'iregister', 'ireset', 'iresolve', 'irotate', 'isa',
      'isave', 'iscale', 'isetcurrent', 'isetproperty', 'ishft',
      'isocontour', 'isosurface', 'isurface', 'itext', 'itranslate',
      'ivector', 'ivolume', 'izoom', 'journal', 'json_parse',
      'json_serialize', 'jul2greg', 'julday', 'keyword_set', 'krig2d',
      'kurtosis', 'kw_test', 'l64indgen', 'la_choldc', 'la_cholmprove',
      'la_cholsol', 'la_determ', 'la_eigenproblem', 'la_eigenql', 'la_eigenvec',
      'la_elmhes', 'la_gm_linear_model', 'la_hqr', 'la_invert',
      'la_least_square_equality', 'la_least_squares', 'la_linear_equation',
      'la_ludc', 'la_lumprove', 'la_lusol',
      'la_svd', 'la_tridc', 'la_trimprove', 'la_triql', 'la_trired',
      'la_trisol', 'label_date', 'label_region', 'ladfit', 'laguerre',
      'lambda', 'lambdap', 'lambertw', 'laplacian', 'least_squares_filter',
      'leefilt', 'legend', 'legendre', 'linbcg', 'lindgen',
      'linfit', 'linkimage', 'list', 'll_arc_distance', 'lmfit',
      'lmgr', 'lngamma', 'lnp_test', 'loadct', 'locale_get',
      'logical_and', 'logical_or', 'logical_true', 'lon64arr', 'lonarr',
      'long', 'long64', 'lsode', 'lu_complex', 'ludc',
      'lumprove', 'lusol', 'm_correlate', 'machar', 'make_array',
      'make_dll', 'make_rt', 'map', 'mapcontinents', 'mapgrid',
      'map_2points', 'map_continents', 'map_grid', 'map_image', 'map_patch',
      'map_proj_forward', 'map_proj_image', 'map_proj_info',
      'map_proj_init', 'map_proj_inverse',
      'map_set', 'matrix_multiply', 'matrix_power', 'max', 'md_test',
      'mean', 'meanabsdev', 'mean_filter', 'median', 'memory',
      'mesh_clip', 'mesh_decimate', 'mesh_issolid',
      'mesh_merge', 'mesh_numtriangles',
      'mesh_obj', 'mesh_smooth', 'mesh_surfacearea',
      'mesh_validate', 'mesh_volume',
      'message', 'min', 'min_curve_surf', 'mk_html_help', 'modifyct',
      'moment', 'morph_close', 'morph_distance',
      'morph_gradient', 'morph_hitormiss',
      'morph_open', 'morph_thin', 'morph_tophat', 'multi', 'n_elements',
      'n_params', 'n_tags', 'ncdf', 'newton', 'noise_hurl',
      'noise_pick', 'noise_scatter', 'noise_slur', 'norm', 'obj_class',
      'obj_destroy', 'obj_hasmethod', 'obj_isa', 'obj_new', 'obj_valid',
      'objarr', 'on_error', 'on_ioerror', 'online_help', 'openr',
      'openu', 'openw', 'oplot', 'oploterr', 'orderedhash',
      'p_correlate', 'parse_url', 'particle_trace', 'path_cache', 'path_sep',
      'pcomp', 'plot', 'plot3d', 'plot', 'plot_3dbox',
      'plot_field', 'ploterr', 'plots', 'polar_contour', 'polar_surface',
      'polyfill', 'polyshade', 'pnt_line', 'point_lun', 'polarplot',
      'poly', 'poly_2d', 'poly_area', 'poly_fit', 'polyfillv',
      'polygon', 'polyline', 'polywarp', 'popd', 'powell',
      'pref_commit', 'pref_get', 'pref_set', 'prewitt', 'primes',
      'print', 'printf', 'printd', 'pro', 'product',
      'profile', 'profiler', 'profiles', 'project_vol', 'ps_show_fonts',
      'psafm', 'pseudo', 'ptr_free', 'ptr_new', 'ptr_valid',
      'ptrarr', 'pushd', 'qgrid3', 'qhull', 'qromb',
      'qromo', 'qsimp', 'query_*', 'query_ascii', 'query_bmp',
      'query_csv', 'query_dicom', 'query_gif', 'query_image', 'query_jpeg',
      'query_jpeg2000', 'query_mrsid', 'query_pict', 'query_png', 'query_ppm',
      'query_srf', 'query_tiff', 'query_video', 'query_wav', 'r_correlate',
      'r_test', 'radon', 'randomn', 'randomu', 'ranks',
      'rdpix', 'read', 'readf', 'read_ascii', 'read_binary',
      'read_bmp', 'read_csv', 'read_dicom', 'read_gif', 'read_image',
      'read_interfile', 'read_jpeg', 'read_jpeg2000', 'read_mrsid', 'read_pict',
      'read_png', 'read_ppm', 'read_spr', 'read_srf', 'read_sylk',
      'read_tiff', 'read_video', 'read_wav', 'read_wave', 'read_x11_bitmap',
      'read_xwd', 'reads', 'readu', 'real_part', 'rebin',
      'recall_commands', 'recon3', 'reduce_colors', 'reform', 'region_grow',
      'register_cursor', 'regress', 'replicate',
      'replicate_inplace', 'resolve_all',
      'resolve_routine', 'restore', 'retall', 'return', 'reverse',
      'rk4', 'roberts', 'rot', 'rotate', 'round',
      'routine_filepath', 'routine_info', 'rs_test', 's_test', 'save',
      'savgol', 'scale3', 'scale3d', 'scatterplot', 'scatterplot3d',
      'scope_level', 'scope_traceback', 'scope_varfetch',
      'scope_varname', 'search2d',
      'search3d', 'sem_create', 'sem_delete', 'sem_lock', 'sem_release',
      'set_plot', 'set_shading', 'setenv', 'sfit', 'shade_surf',
      'shade_surf_irr', 'shade_volume', 'shift', 'shift_diff', 'shmdebug',
      'shmmap', 'shmunmap', 'shmvar', 'show3', 'showfont',
      'signum', 'simplex', 'sin', 'sindgen', 'sinh',
      'size', 'skewness', 'skip_lun', 'slicer3', 'slide_image',
      'smooth', 'sobel', 'socket', 'sort', 'spawn',
      'sph_4pnt', 'sph_scat', 'spher_harm', 'spl_init', 'spl_interp',
      'spline', 'spline_p', 'sprsab', 'sprsax', 'sprsin',
      'sprstp', 'sqrt', 'standardize', 'stddev', 'stop',
      'strarr', 'strcmp', 'strcompress', 'streamline', 'streamline',
      'stregex', 'stretch', 'string', 'strjoin', 'strlen',
      'strlowcase', 'strmatch', 'strmessage', 'strmid', 'strpos',
      'strput', 'strsplit', 'strtrim', 'struct_assign', 'struct_hide',
      'strupcase', 'surface', 'surface', 'surfr', 'svdc',
      'svdfit', 'svsol', 'swap_endian', 'swap_endian_inplace', 'symbol',
      'systime', 't_cvf', 't_pdf', 't3d', 'tag_names',
      'tan', 'tanh', 'tek_color', 'temporary', 'terminal_size',
      'tetra_clip', 'tetra_surface', 'tetra_volume', 'text', 'thin',
      'thread', 'threed', 'tic', 'time_test2', 'timegen',
      'timer', 'timestamp', 'timestamptovalues', 'tm_test', 'toc',
      'total', 'trace', 'transpose', 'tri_surf', 'triangulate',
      'trigrid', 'triql', 'trired', 'trisol', 'truncate_lun',
      'ts_coef', 'ts_diff', 'ts_fcast', 'ts_smooth', 'tv',
      'tvcrs', 'tvlct', 'tvrd', 'tvscl', 'typename',
      'uindgen', 'uint', 'uintarr', 'ul64indgen', 'ulindgen',
      'ulon64arr', 'ulonarr', 'ulong', 'ulong64', 'uniq',
      'unsharp_mask', 'usersym', 'value_locate', 'variance', 'vector',
      'vector_field', 'vel', 'velovect', 'vert_t3d', 'voigt',
      'volume', 'voronoi', 'voxel_proj', 'wait', 'warp_tri',
      'watershed', 'wdelete', 'wf_draw', 'where', 'widget_base',
      'widget_button', 'widget_combobox', 'widget_control',
      'widget_displaycontextmenu', 'widget_draw',
      'widget_droplist', 'widget_event', 'widget_info',
      'widget_label', 'widget_list',
      'widget_propertysheet', 'widget_slider', 'widget_tab',
      'widget_table', 'widget_text',
      'widget_tree', 'widget_tree_move', 'widget_window',
      'wiener_filter', 'window',
      'window', 'write_bmp', 'write_csv', 'write_gif', 'write_image',
      'write_jpeg', 'write_jpeg2000', 'write_nrif', 'write_pict', 'write_png',
      'write_ppm', 'write_spr', 'write_srf', 'write_sylk', 'write_tiff',
      'write_video', 'write_wav', 'write_wave', 'writeu', 'wset',
      'wshow', 'wtn', 'wv_applet', 'wv_cwt', 'wv_cw_wavelet',
      'wv_denoise', 'wv_dwt', 'wv_fn_coiflet',
      'wv_fn_daubechies', 'wv_fn_gaussian',
      'wv_fn_haar', 'wv_fn_morlet', 'wv_fn_paul',
      'wv_fn_symlet', 'wv_import_data',
      'wv_import_wavelet', 'wv_plot3d_wps', 'wv_plot_multires',
      'wv_pwt', 'wv_tool_denoise',
      'xbm_edit', 'xdisplayfile', 'xdxf', 'xfont', 'xinteranimate',
      'xloadct', 'xmanager', 'xmng_tmpl', 'xmtool', 'xobjview',
      'xobjview_rotate', 'xobjview_write_image',
      'xpalette', 'xpcolor', 'xplot3d',
      'xregistered', 'xroi', 'xsq_test', 'xsurface', 'xvaredit',
      'xvolume', 'xvolume_rotate', 'xvolume_write_image',
      'xyouts', 'zlib_compress', 'zlib_uncompress', 'zoom', 'zoom_24'
    ];
    var builtins$7 = wordRegexp$b(builtinArray$1);

    var keywordArray$2 = [
      'begin', 'end', 'endcase', 'endfor',
      'endwhile', 'endif', 'endrep', 'endforeach',
      'break', 'case', 'continue', 'for',
      'foreach', 'goto', 'if', 'then', 'else',
      'repeat', 'until', 'switch', 'while',
      'do', 'pro', 'function'
    ];
    var keywords$t = wordRegexp$b(keywordArray$2);

    var identifiers$7 = new RegExp('^[_a-z\xa1-\uffff][_a-z0-9\xa1-\uffff]*', 'i');

    var singleOperators$5 = /[+\-*&=<>\/@#~$]/;
    var boolOperators = new RegExp('(and|or|eq|lt|le|gt|ge|ne|not)', 'i');

    function tokenBase$x(stream) {
      // whitespaces
      if (stream.eatSpace()) return null;

      // Handle one line Comments
      if (stream.match(';')) {
        stream.skipToEnd();
        return 'comment';
      }

      // Handle Number Literals
      if (stream.match(/^[0-9\.+-]/, false)) {
        if (stream.match(/^[+-]?0x[0-9a-fA-F]+/))
          return 'number';
        if (stream.match(/^[+-]?\d*\.\d+([EeDd][+-]?\d+)?/))
          return 'number';
        if (stream.match(/^[+-]?\d+([EeDd][+-]?\d+)?/))
          return 'number';
      }

      // Handle Strings
      if (stream.match(/^"([^"]|(""))*"/)) { return 'string'; }
      if (stream.match(/^'([^']|(''))*'/)) { return 'string'; }

      // Handle words
      if (stream.match(keywords$t)) { return 'keyword'; }
      if (stream.match(builtins$7)) { return 'builtin'; }
      if (stream.match(identifiers$7)) { return 'variable'; }

      if (stream.match(singleOperators$5) || stream.match(boolOperators)) {
        return 'operator'; }

      // Handle non-detected items
      stream.next();
      return null;
    }
    const idl = {
      token: function(stream) {
        return tokenBase$x(stream);
      },
      languageData: {
        autocomplete: builtinArray$1.concat(keywordArray$2)
      }
    };

    var idl$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        idl: idl
    });

    function mkJavaScript(parserConfig) {
      var statementIndent = parserConfig.statementIndent;
      var jsonldMode = parserConfig.jsonld;
      var jsonMode = parserConfig.json || jsonldMode;
      var isTS = parserConfig.typescript;
      var wordRE = parserConfig.wordCharacters || /[\w$\xa1-\uffff]/;

      // Tokenizer

      var keywords = function(){
        function kw(type) {return {type: type, style: "keyword"};}
        var A = kw("keyword a"), B = kw("keyword b"), C = kw("keyword c"), D = kw("keyword d");
        var operator = kw("operator"), atom = {type: "atom", style: "atom"};

        return {
          "if": kw("if"), "while": A, "with": A, "else": B, "do": B, "try": B, "finally": B,
          "return": D, "break": D, "continue": D, "new": kw("new"), "delete": C, "void": C, "throw": C,
          "debugger": kw("debugger"), "var": kw("var"), "const": kw("var"), "let": kw("var"),
          "function": kw("function"), "catch": kw("catch"),
          "for": kw("for"), "switch": kw("switch"), "case": kw("case"), "default": kw("default"),
          "in": operator, "typeof": operator, "instanceof": operator,
          "true": atom, "false": atom, "null": atom, "undefined": atom, "NaN": atom, "Infinity": atom,
          "this": kw("this"), "class": kw("class"), "super": kw("atom"),
          "yield": C, "export": kw("export"), "import": kw("import"), "extends": C,
          "await": C
        };
      }();

      var isOperatorChar = /[+\-*&%=<>!?|~^@]/;
      var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)"/;

      function readRegexp(stream) {
        var escaped = false, next, inSet = false;
        while ((next = stream.next()) != null) {
          if (!escaped) {
            if (next == "/" && !inSet) return;
            if (next == "[") inSet = true;
            else if (inSet && next == "]") inSet = false;
          }
          escaped = !escaped && next == "\\";
        }
      }

      // Used as scratch variables to communicate multiple values without
      // consing up tons of objects.
      var type, content;
      function ret(tp, style, cont) {
        type = tp; content = cont;
        return style;
      }
      function tokenBase(stream, state) {
        var ch = stream.next();
        if (ch == '"' || ch == "'") {
          state.tokenize = tokenString(ch);
          return state.tokenize(stream, state);
        } else if (ch == "." && stream.match(/^\d[\d_]*(?:[eE][+\-]?[\d_]+)?/)) {
          return ret("number", "number");
        } else if (ch == "." && stream.match("..")) {
          return ret("spread", "meta");
        } else if (/[\[\]{}\(\),;\:\.]/.test(ch)) {
          return ret(ch);
        } else if (ch == "=" && stream.eat(">")) {
          return ret("=>", "operator");
        } else if (ch == "0" && stream.match(/^(?:x[\dA-Fa-f_]+|o[0-7_]+|b[01_]+)n?/)) {
          return ret("number", "number");
        } else if (/\d/.test(ch)) {
          stream.match(/^[\d_]*(?:n|(?:\.[\d_]*)?(?:[eE][+\-]?[\d_]+)?)?/);
          return ret("number", "number");
        } else if (ch == "/") {
          if (stream.eat("*")) {
            state.tokenize = tokenComment;
            return tokenComment(stream, state);
          } else if (stream.eat("/")) {
            stream.skipToEnd();
            return ret("comment", "comment");
          } else if (expressionAllowed(stream, state, 1)) {
            readRegexp(stream);
            stream.match(/^\b(([gimyus])(?![gimyus]*\2))+\b/);
            return ret("regexp", "string.special");
          } else {
            stream.eat("=");
            return ret("operator", "operator", stream.current());
          }
        } else if (ch == "`") {
          state.tokenize = tokenQuasi;
          return tokenQuasi(stream, state);
        } else if (ch == "#" && stream.peek() == "!") {
          stream.skipToEnd();
          return ret("meta", "meta");
        } else if (ch == "#" && stream.eatWhile(wordRE)) {
          return ret("variable", "property")
        } else if (ch == "<" && stream.match("!--") ||
                   (ch == "-" && stream.match("->") && !/\S/.test(stream.string.slice(0, stream.start)))) {
          stream.skipToEnd();
          return ret("comment", "comment")
        } else if (isOperatorChar.test(ch)) {
          if (ch != ">" || !state.lexical || state.lexical.type != ">") {
            if (stream.eat("=")) {
              if (ch == "!" || ch == "=") stream.eat("=");
            } else if (/[<>*+\-|&?]/.test(ch)) {
              stream.eat(ch);
              if (ch == ">") stream.eat(ch);
            }
          }
          if (ch == "?" && stream.eat(".")) return ret(".")
          return ret("operator", "operator", stream.current());
        } else if (wordRE.test(ch)) {
          stream.eatWhile(wordRE);
          var word = stream.current();
          if (state.lastType != ".") {
            if (keywords.propertyIsEnumerable(word)) {
              var kw = keywords[word];
              return ret(kw.type, kw.style, word)
            }
            if (word == "async" && stream.match(/^(\s|\/\*([^*]|\*(?!\/))*?\*\/)*[\[\(\w]/, false))
              return ret("async", "keyword", word)
          }
          return ret("variable", "variable", word)
        }
      }

      function tokenString(quote) {
        return function(stream, state) {
          var escaped = false, next;
          if (jsonldMode && stream.peek() == "@" && stream.match(isJsonldKeyword)){
            state.tokenize = tokenBase;
            return ret("jsonld-keyword", "meta");
          }
          while ((next = stream.next()) != null) {
            if (next == quote && !escaped) break;
            escaped = !escaped && next == "\\";
          }
          if (!escaped) state.tokenize = tokenBase;
          return ret("string", "string");
        };
      }

      function tokenComment(stream, state) {
        var maybeEnd = false, ch;
        while (ch = stream.next()) {
          if (ch == "/" && maybeEnd) {
            state.tokenize = tokenBase;
            break;
          }
          maybeEnd = (ch == "*");
        }
        return ret("comment", "comment");
      }

      function tokenQuasi(stream, state) {
        var escaped = false, next;
        while ((next = stream.next()) != null) {
          if (!escaped && (next == "`" || next == "$" && stream.eat("{"))) {
            state.tokenize = tokenBase;
            break;
          }
          escaped = !escaped && next == "\\";
        }
        return ret("quasi", "string.special", stream.current());
      }

      var brackets = "([{}])";
      // This is a crude lookahead trick to try and notice that we're
      // parsing the argument patterns for a fat-arrow function before we
      // actually hit the arrow token. It only works if the arrow is on
      // the same line as the arguments and there's no strange noise
      // (comments) in between. Fallback is to only notice when we hit the
      // arrow, and not declare the arguments as locals for the arrow
      // body.
      function findFatArrow(stream, state) {
        if (state.fatArrowAt) state.fatArrowAt = null;
        var arrow = stream.string.indexOf("=>", stream.start);
        if (arrow < 0) return;

        if (isTS) { // Try to skip TypeScript return type declarations after the arguments
          var m = /:\s*(?:\w+(?:<[^>]*>|\[\])?|\{[^}]*\})\s*$/.exec(stream.string.slice(stream.start, arrow));
          if (m) arrow = m.index;
        }

        var depth = 0, sawSomething = false;
        for (var pos = arrow - 1; pos >= 0; --pos) {
          var ch = stream.string.charAt(pos);
          var bracket = brackets.indexOf(ch);
          if (bracket >= 0 && bracket < 3) {
            if (!depth) { ++pos; break; }
            if (--depth == 0) { if (ch == "(") sawSomething = true; break; }
          } else if (bracket >= 3 && bracket < 6) {
            ++depth;
          } else if (wordRE.test(ch)) {
            sawSomething = true;
          } else if (/["'\/`]/.test(ch)) {
            for (;; --pos) {
              if (pos == 0) return
              var next = stream.string.charAt(pos - 1);
              if (next == ch && stream.string.charAt(pos - 2) != "\\") { pos--; break }
            }
          } else if (sawSomething && !depth) {
            ++pos;
            break;
          }
        }
        if (sawSomething && !depth) state.fatArrowAt = pos;
      }

      // Parser

      var atomicTypes = {"atom": true, "number": true, "variable": true, "string": true,
                         "regexp": true, "this": true, "import": true, "jsonld-keyword": true};

      function JSLexical(indented, column, type, align, prev, info) {
        this.indented = indented;
        this.column = column;
        this.type = type;
        this.prev = prev;
        this.info = info;
        if (align != null) this.align = align;
      }

      function inScope(state, varname) {
        for (var v = state.localVars; v; v = v.next)
          if (v.name == varname) return true;
        for (var cx = state.context; cx; cx = cx.prev) {
          for (var v = cx.vars; v; v = v.next)
            if (v.name == varname) return true;
        }
      }

      function parseJS(state, style, type, content, stream) {
        var cc = state.cc;
        // Communicate our context to the combinators.
        // (Less wasteful than consing up a hundred closures on every call.)
        cx.state = state; cx.stream = stream; cx.marked = null; cx.cc = cc; cx.style = style;

        if (!state.lexical.hasOwnProperty("align"))
          state.lexical.align = true;

        while(true) {
          var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;
          if (combinator(type, content)) {
            while(cc.length && cc[cc.length - 1].lex)
              cc.pop()();
            if (cx.marked) return cx.marked;
            if (type == "variable" && inScope(state, content)) return "variableName.local";
            return style;
          }
        }
      }

      // Combinator utils

      var cx = {state: null, column: null, marked: null, cc: null};
      function pass() {
        for (var i = arguments.length - 1; i >= 0; i--) cx.cc.push(arguments[i]);
      }
      function cont() {
        pass.apply(null, arguments);
        return true;
      }
      function inList(name, list) {
        for (var v = list; v; v = v.next) if (v.name == name) return true
        return false;
      }
      function register(varname) {
        var state = cx.state;
        cx.marked = "def";
        if (state.context) {
          if (state.lexical.info == "var" && state.context && state.context.block) {
            // FIXME function decls are also not block scoped
            var newContext = registerVarScoped(varname, state.context);
            if (newContext != null) {
              state.context = newContext;
              return
            }
          } else if (!inList(varname, state.localVars)) {
            state.localVars = new Var(varname, state.localVars);
            return
          }
        }
        // Fall through means this is global
        if (parserConfig.globalVars && !inList(varname, state.globalVars))
          state.globalVars = new Var(varname, state.globalVars);
      }
      function registerVarScoped(varname, context) {
        if (!context) {
          return null
        } else if (context.block) {
          var inner = registerVarScoped(varname, context.prev);
          if (!inner) return null
          if (inner == context.prev) return context
          return new Context(inner, context.vars, true)
        } else if (inList(varname, context.vars)) {
          return context
        } else {
          return new Context(context.prev, new Var(varname, context.vars), false)
        }
      }

      function isModifier(name) {
        return name == "public" || name == "private" || name == "protected" || name == "abstract" || name == "readonly"
      }

      // Combinators

      function Context(prev, vars, block) { this.prev = prev; this.vars = vars; this.block = block; }
      function Var(name, next) { this.name = name; this.next = next; }

      var defaultVars = new Var("this", new Var("arguments", null));
      function pushcontext() {
        cx.state.context = new Context(cx.state.context, cx.state.localVars, false);
        cx.state.localVars = defaultVars;
      }
      function pushblockcontext() {
        cx.state.context = new Context(cx.state.context, cx.state.localVars, true);
        cx.state.localVars = null;
      }
      function popcontext() {
        cx.state.localVars = cx.state.context.vars;
        cx.state.context = cx.state.context.prev;
      }
      popcontext.lex = true;
      function pushlex(type, info) {
        var result = function() {
          var state = cx.state, indent = state.indented;
          if (state.lexical.type == "stat") indent = state.lexical.indented;
          else for (var outer = state.lexical; outer && outer.type == ")" && outer.align; outer = outer.prev)
            indent = outer.indented;
          state.lexical = new JSLexical(indent, cx.stream.column(), type, null, state.lexical, info);
        };
        result.lex = true;
        return result;
      }
      function poplex() {
        var state = cx.state;
        if (state.lexical.prev) {
          if (state.lexical.type == ")")
            state.indented = state.lexical.indented;
          state.lexical = state.lexical.prev;
        }
      }
      poplex.lex = true;

      function expect(wanted) {
        function exp(type) {
          if (type == wanted) return cont();
          else if (wanted == ";" || type == "}" || type == ")" || type == "]") return pass();
          else return cont(exp);
        }    return exp;
      }

      function statement(type, value) {
        if (type == "var") return cont(pushlex("vardef", value), vardef, expect(";"), poplex);
        if (type == "keyword a") return cont(pushlex("form"), parenExpr, statement, poplex);
        if (type == "keyword b") return cont(pushlex("form"), statement, poplex);
        if (type == "keyword d") return cx.stream.match(/^\s*$/, false) ? cont() : cont(pushlex("stat"), maybeexpression, expect(";"), poplex);
        if (type == "debugger") return cont(expect(";"));
        if (type == "{") return cont(pushlex("}"), pushblockcontext, block, poplex, popcontext);
        if (type == ";") return cont();
        if (type == "if") {
          if (cx.state.lexical.info == "else" && cx.state.cc[cx.state.cc.length - 1] == poplex)
            cx.state.cc.pop()();
          return cont(pushlex("form"), parenExpr, statement, poplex, maybeelse);
        }
        if (type == "function") return cont(functiondef);
        if (type == "for") return cont(pushlex("form"), pushblockcontext, forspec, statement, popcontext, poplex);
        if (type == "class" || (isTS && value == "interface")) {
          cx.marked = "keyword";
          return cont(pushlex("form", type == "class" ? type : value), className, poplex)
        }
        if (type == "variable") {
          if (isTS && value == "declare") {
            cx.marked = "keyword";
            return cont(statement)
          } else if (isTS && (value == "module" || value == "enum" || value == "type") && cx.stream.match(/^\s*\w/, false)) {
            cx.marked = "keyword";
            if (value == "enum") return cont(enumdef);
            else if (value == "type") return cont(typename, expect("operator"), typeexpr, expect(";"));
            else return cont(pushlex("form"), pattern, expect("{"), pushlex("}"), block, poplex, poplex)
          } else if (isTS && value == "namespace") {
            cx.marked = "keyword";
            return cont(pushlex("form"), expression, statement, poplex)
          } else if (isTS && value == "abstract") {
            cx.marked = "keyword";
            return cont(statement)
          } else {
            return cont(pushlex("stat"), maybelabel);
          }
        }
        if (type == "switch") return cont(pushlex("form"), parenExpr, expect("{"), pushlex("}", "switch"), pushblockcontext,
                                          block, poplex, poplex, popcontext);
        if (type == "case") return cont(expression, expect(":"));
        if (type == "default") return cont(expect(":"));
        if (type == "catch") return cont(pushlex("form"), pushcontext, maybeCatchBinding, statement, poplex, popcontext);
        if (type == "export") return cont(pushlex("stat"), afterExport, poplex);
        if (type == "import") return cont(pushlex("stat"), afterImport, poplex);
        if (type == "async") return cont(statement)
        if (value == "@") return cont(expression, statement)
        return pass(pushlex("stat"), expression, expect(";"), poplex);
      }
      function maybeCatchBinding(type) {
        if (type == "(") return cont(funarg, expect(")"))
      }
      function expression(type, value) {
        return expressionInner(type, value, false);
      }
      function expressionNoComma(type, value) {
        return expressionInner(type, value, true);
      }
      function parenExpr(type) {
        if (type != "(") return pass()
        return cont(pushlex(")"), maybeexpression, expect(")"), poplex)
      }
      function expressionInner(type, value, noComma) {
        if (cx.state.fatArrowAt == cx.stream.start) {
          var body = noComma ? arrowBodyNoComma : arrowBody;
          if (type == "(") return cont(pushcontext, pushlex(")"), commasep(funarg, ")"), poplex, expect("=>"), body, popcontext);
          else if (type == "variable") return pass(pushcontext, pattern, expect("=>"), body, popcontext);
        }

        var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;
        if (atomicTypes.hasOwnProperty(type)) return cont(maybeop);
        if (type == "function") return cont(functiondef, maybeop);
        if (type == "class" || (isTS && value == "interface")) { cx.marked = "keyword"; return cont(pushlex("form"), classExpression, poplex); }
        if (type == "keyword c" || type == "async") return cont(noComma ? expressionNoComma : expression);
        if (type == "(") return cont(pushlex(")"), maybeexpression, expect(")"), poplex, maybeop);
        if (type == "operator" || type == "spread") return cont(noComma ? expressionNoComma : expression);
        if (type == "[") return cont(pushlex("]"), arrayLiteral, poplex, maybeop);
        if (type == "{") return contCommasep(objprop, "}", null, maybeop);
        if (type == "quasi") return pass(quasi, maybeop);
        if (type == "new") return cont(maybeTarget(noComma));
        return cont();
      }
      function maybeexpression(type) {
        if (type.match(/[;\}\)\],]/)) return pass();
        return pass(expression);
      }

      function maybeoperatorComma(type, value) {
        if (type == ",") return cont(maybeexpression);
        return maybeoperatorNoComma(type, value, false);
      }
      function maybeoperatorNoComma(type, value, noComma) {
        var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;
        var expr = noComma == false ? expression : expressionNoComma;
        if (type == "=>") return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);
        if (type == "operator") {
          if (/\+\+|--/.test(value) || isTS && value == "!") return cont(me);
          if (isTS && value == "<" && cx.stream.match(/^([^<>]|<[^<>]*>)*>\s*\(/, false))
            return cont(pushlex(">"), commasep(typeexpr, ">"), poplex, me);
          if (value == "?") return cont(expression, expect(":"), expr);
          return cont(expr);
        }
        if (type == "quasi") { return pass(quasi, me); }
        if (type == ";") return;
        if (type == "(") return contCommasep(expressionNoComma, ")", "call", me);
        if (type == ".") return cont(property, me);
        if (type == "[") return cont(pushlex("]"), maybeexpression, expect("]"), poplex, me);
        if (isTS && value == "as") { cx.marked = "keyword"; return cont(typeexpr, me) }
        if (type == "regexp") {
          cx.state.lastType = cx.marked = "operator";
          cx.stream.backUp(cx.stream.pos - cx.stream.start - 1);
          return cont(expr)
        }
      }
      function quasi(type, value) {
        if (type != "quasi") return pass();
        if (value.slice(value.length - 2) != "${") return cont(quasi);
        return cont(maybeexpression, continueQuasi);
      }
      function continueQuasi(type) {
        if (type == "}") {
          cx.marked = "string.special";
          cx.state.tokenize = tokenQuasi;
          return cont(quasi);
        }
      }
      function arrowBody(type) {
        findFatArrow(cx.stream, cx.state);
        return pass(type == "{" ? statement : expression);
      }
      function arrowBodyNoComma(type) {
        findFatArrow(cx.stream, cx.state);
        return pass(type == "{" ? statement : expressionNoComma);
      }
      function maybeTarget(noComma) {
        return function(type) {
          if (type == ".") return cont(noComma ? targetNoComma : target);
          else if (type == "variable" && isTS) return cont(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma)
          else return pass(noComma ? expressionNoComma : expression);
        };
      }
      function target(_, value) {
        if (value == "target") { cx.marked = "keyword"; return cont(maybeoperatorComma); }
      }
      function targetNoComma(_, value) {
        if (value == "target") { cx.marked = "keyword"; return cont(maybeoperatorNoComma); }
      }
      function maybelabel(type) {
        if (type == ":") return cont(poplex, statement);
        return pass(maybeoperatorComma, expect(";"), poplex);
      }
      function property(type) {
        if (type == "variable") {cx.marked = "property"; return cont();}
      }
      function objprop(type, value) {
        if (type == "async") {
          cx.marked = "property";
          return cont(objprop);
        } else if (type == "variable" || cx.style == "keyword") {
          cx.marked = "property";
          if (value == "get" || value == "set") return cont(getterSetter);
          var m; // Work around fat-arrow-detection complication for detecting typescript typed arrow params
          if (isTS && cx.state.fatArrowAt == cx.stream.start && (m = cx.stream.match(/^\s*:\s*/, false)))
            cx.state.fatArrowAt = cx.stream.pos + m[0].length;
          return cont(afterprop);
        } else if (type == "number" || type == "string") {
          cx.marked = jsonldMode ? "property" : (cx.style + " property");
          return cont(afterprop);
        } else if (type == "jsonld-keyword") {
          return cont(afterprop);
        } else if (isTS && isModifier(value)) {
          cx.marked = "keyword";
          return cont(objprop)
        } else if (type == "[") {
          return cont(expression, maybetype, expect("]"), afterprop);
        } else if (type == "spread") {
          return cont(expressionNoComma, afterprop);
        } else if (value == "*") {
          cx.marked = "keyword";
          return cont(objprop);
        } else if (type == ":") {
          return pass(afterprop)
        }
      }
      function getterSetter(type) {
        if (type != "variable") return pass(afterprop);
        cx.marked = "property";
        return cont(functiondef);
      }
      function afterprop(type) {
        if (type == ":") return cont(expressionNoComma);
        if (type == "(") return pass(functiondef);
      }
      function commasep(what, end, sep) {
        function proceed(type, value) {
          if (sep ? sep.indexOf(type) > -1 : type == ",") {
            var lex = cx.state.lexical;
            if (lex.info == "call") lex.pos = (lex.pos || 0) + 1;
            return cont(function(type, value) {
              if (type == end || value == end) return pass()
              return pass(what)
            }, proceed);
          }
          if (type == end || value == end) return cont();
          if (sep && sep.indexOf(";") > -1) return pass(what)
          return cont(expect(end));
        }
        return function(type, value) {
          if (type == end || value == end) return cont();
          return pass(what, proceed);
        };
      }
      function contCommasep(what, end, info) {
        for (var i = 3; i < arguments.length; i++)
          cx.cc.push(arguments[i]);
        return cont(pushlex(end, info), commasep(what, end), poplex);
      }
      function block(type) {
        if (type == "}") return cont();
        return pass(statement, block);
      }
      function maybetype(type, value) {
        if (isTS) {
          if (type == ":") return cont(typeexpr);
          if (value == "?") return cont(maybetype);
        }
      }
      function maybetypeOrIn(type, value) {
        if (isTS && (type == ":" || value == "in")) return cont(typeexpr)
      }
      function mayberettype(type) {
        if (isTS && type == ":") {
          if (cx.stream.match(/^\s*\w+\s+is\b/, false)) return cont(expression, isKW, typeexpr)
          else return cont(typeexpr)
        }
      }
      function isKW(_, value) {
        if (value == "is") {
          cx.marked = "keyword";
          return cont()
        }
      }
      function typeexpr(type, value) {
        if (value == "keyof" || value == "typeof" || value == "infer" || value == "readonly") {
          cx.marked = "keyword";
          return cont(value == "typeof" ? expressionNoComma : typeexpr)
        }
        if (type == "variable" || value == "void") {
          cx.marked = "type";
          return cont(afterType)
        }
        if (value == "|" || value == "&") return cont(typeexpr)
        if (type == "string" || type == "number" || type == "atom") return cont(afterType);
        if (type == "[") return cont(pushlex("]"), commasep(typeexpr, "]", ","), poplex, afterType)
        if (type == "{") return cont(pushlex("}"), typeprops, poplex, afterType)
        if (type == "(") return cont(commasep(typearg, ")"), maybeReturnType, afterType)
        if (type == "<") return cont(commasep(typeexpr, ">"), typeexpr)
        if (type == "quasi") return pass(quasiType, afterType)
      }
      function maybeReturnType(type) {
        if (type == "=>") return cont(typeexpr)
      }
      function typeprops(type) {
        if (type.match(/[\}\)\]]/)) return cont()
        if (type == "," || type == ";") return cont(typeprops)
        return pass(typeprop, typeprops)
      }
      function typeprop(type, value) {
        if (type == "variable" || cx.style == "keyword") {
          cx.marked = "property";
          return cont(typeprop)
        } else if (value == "?" || type == "number" || type == "string") {
          return cont(typeprop)
        } else if (type == ":") {
          return cont(typeexpr)
        } else if (type == "[") {
          return cont(expect("variable"), maybetypeOrIn, expect("]"), typeprop)
        } else if (type == "(") {
          return pass(functiondecl, typeprop)
        } else if (!type.match(/[;\}\)\],]/)) {
          return cont()
        }
      }
      function quasiType(type, value) {
        if (type != "quasi") return pass();
        if (value.slice(value.length - 2) != "${") return cont(quasiType);
        return cont(typeexpr, continueQuasiType);
      }
      function continueQuasiType(type) {
       if (type == "}") {
          cx.marked = "string-2";
          cx.state.tokenize = tokenQuasi;
          return cont(quasiType);
        }
      }
      function typearg(type, value) {
        if (type == "variable" && cx.stream.match(/^\s*[?:]/, false) || value == "?") return cont(typearg)
        if (type == ":") return cont(typeexpr)
        if (type == "spread") return cont(typearg)
        return pass(typeexpr)
      }
      function afterType(type, value) {
        if (value == "<") return cont(pushlex(">"), commasep(typeexpr, ">"), poplex, afterType)
        if (value == "|" || type == "." || value == "&") return cont(typeexpr)
        if (type == "[") return cont(typeexpr, expect("]"), afterType)
        if (value == "extends" || value == "implements") { cx.marked = "keyword"; return cont(typeexpr) }
        if (value == "?") return cont(typeexpr, expect(":"), typeexpr)
      }
      function maybeTypeArgs(_, value) {
        if (value == "<") return cont(pushlex(">"), commasep(typeexpr, ">"), poplex, afterType)
      }
      function typeparam() {
        return pass(typeexpr, maybeTypeDefault)
      }
      function maybeTypeDefault(_, value) {
        if (value == "=") return cont(typeexpr)
      }
      function vardef(_, value) {
        if (value == "enum") {cx.marked = "keyword"; return cont(enumdef)}
        return pass(pattern, maybetype, maybeAssign, vardefCont);
      }
      function pattern(type, value) {
        if (isTS && isModifier(value)) { cx.marked = "keyword"; return cont(pattern) }
        if (type == "variable") { register(value); return cont(); }
        if (type == "spread") return cont(pattern);
        if (type == "[") return contCommasep(eltpattern, "]");
        if (type == "{") return contCommasep(proppattern, "}");
      }
      function proppattern(type, value) {
        if (type == "variable" && !cx.stream.match(/^\s*:/, false)) {
          register(value);
          return cont(maybeAssign);
        }
        if (type == "variable") cx.marked = "property";
        if (type == "spread") return cont(pattern);
        if (type == "}") return pass();
        if (type == "[") return cont(expression, expect(']'), expect(':'), proppattern);
        return cont(expect(":"), pattern, maybeAssign);
      }
      function eltpattern() {
        return pass(pattern, maybeAssign)
      }
      function maybeAssign(_type, value) {
        if (value == "=") return cont(expressionNoComma);
      }
      function vardefCont(type) {
        if (type == ",") return cont(vardef);
      }
      function maybeelse(type, value) {
        if (type == "keyword b" && value == "else") return cont(pushlex("form", "else"), statement, poplex);
      }
      function forspec(type, value) {
        if (value == "await") return cont(forspec);
        if (type == "(") return cont(pushlex(")"), forspec1, poplex);
      }
      function forspec1(type) {
        if (type == "var") return cont(vardef, forspec2);
        if (type == "variable") return cont(forspec2);
        return pass(forspec2)
      }
      function forspec2(type, value) {
        if (type == ")") return cont()
        if (type == ";") return cont(forspec2)
        if (value == "in" || value == "of") { cx.marked = "keyword"; return cont(expression, forspec2) }
        return pass(expression, forspec2)
      }
      function functiondef(type, value) {
        if (value == "*") {cx.marked = "keyword"; return cont(functiondef);}
        if (type == "variable") {register(value); return cont(functiondef);}
        if (type == "(") return cont(pushcontext, pushlex(")"), commasep(funarg, ")"), poplex, mayberettype, statement, popcontext);
        if (isTS && value == "<") return cont(pushlex(">"), commasep(typeparam, ">"), poplex, functiondef)
      }
      function functiondecl(type, value) {
        if (value == "*") {cx.marked = "keyword"; return cont(functiondecl);}
        if (type == "variable") {register(value); return cont(functiondecl);}
        if (type == "(") return cont(pushcontext, pushlex(")"), commasep(funarg, ")"), poplex, mayberettype, popcontext);
        if (isTS && value == "<") return cont(pushlex(">"), commasep(typeparam, ">"), poplex, functiondecl)
      }
      function typename(type, value) {
        if (type == "keyword" || type == "variable") {
          cx.marked = "type";
          return cont(typename)
        } else if (value == "<") {
          return cont(pushlex(">"), commasep(typeparam, ">"), poplex)
        }
      }
      function funarg(type, value) {
        if (value == "@") cont(expression, funarg);
        if (type == "spread") return cont(funarg);
        if (isTS && isModifier(value)) { cx.marked = "keyword"; return cont(funarg); }
        if (isTS && type == "this") return cont(maybetype, maybeAssign)
        return pass(pattern, maybetype, maybeAssign);
      }
      function classExpression(type, value) {
        // Class expressions may have an optional name.
        if (type == "variable") return className(type, value);
        return classNameAfter(type, value);
      }
      function className(type, value) {
        if (type == "variable") {register(value); return cont(classNameAfter);}
      }
      function classNameAfter(type, value) {
        if (value == "<") return cont(pushlex(">"), commasep(typeparam, ">"), poplex, classNameAfter)
        if (value == "extends" || value == "implements" || (isTS && type == ",")) {
          if (value == "implements") cx.marked = "keyword";
          return cont(isTS ? typeexpr : expression, classNameAfter);
        }
        if (type == "{") return cont(pushlex("}"), classBody, poplex);
      }
      function classBody(type, value) {
        if (type == "async" ||
            (type == "variable" &&
             (value == "static" || value == "get" || value == "set" || (isTS && isModifier(value))) &&
             cx.stream.match(/^\s+[\w$\xa1-\uffff]/, false))) {
          cx.marked = "keyword";
          return cont(classBody);
        }
        if (type == "variable" || cx.style == "keyword") {
          cx.marked = "property";
          return cont(classfield, classBody);
        }
        if (type == "number" || type == "string") return cont(classfield, classBody);
        if (type == "[")
          return cont(expression, maybetype, expect("]"), classfield, classBody)
        if (value == "*") {
          cx.marked = "keyword";
          return cont(classBody);
        }
        if (isTS && type == "(") return pass(functiondecl, classBody)
        if (type == ";" || type == ",") return cont(classBody);
        if (type == "}") return cont();
        if (value == "@") return cont(expression, classBody)
      }
      function classfield(type, value) {
        if (value == "!" || value == "?") return cont(classfield)
        if (type == ":") return cont(typeexpr, maybeAssign)
        if (value == "=") return cont(expressionNoComma)
        var context = cx.state.lexical.prev, isInterface = context && context.info == "interface";
        return pass(isInterface ? functiondecl : functiondef)
      }
      function afterExport(type, value) {
        if (value == "*") { cx.marked = "keyword"; return cont(maybeFrom, expect(";")); }
        if (value == "default") { cx.marked = "keyword"; return cont(expression, expect(";")); }
        if (type == "{") return cont(commasep(exportField, "}"), maybeFrom, expect(";"));
        return pass(statement);
      }
      function exportField(type, value) {
        if (value == "as") { cx.marked = "keyword"; return cont(expect("variable")); }
        if (type == "variable") return pass(expressionNoComma, exportField);
      }
      function afterImport(type) {
        if (type == "string") return cont();
        if (type == "(") return pass(expression);
        if (type == ".") return pass(maybeoperatorComma);
        return pass(importSpec, maybeMoreImports, maybeFrom);
      }
      function importSpec(type, value) {
        if (type == "{") return contCommasep(importSpec, "}");
        if (type == "variable") register(value);
        if (value == "*") cx.marked = "keyword";
        return cont(maybeAs);
      }
      function maybeMoreImports(type) {
        if (type == ",") return cont(importSpec, maybeMoreImports)
      }
      function maybeAs(_type, value) {
        if (value == "as") { cx.marked = "keyword"; return cont(importSpec); }
      }
      function maybeFrom(_type, value) {
        if (value == "from") { cx.marked = "keyword"; return cont(expression); }
      }
      function arrayLiteral(type) {
        if (type == "]") return cont();
        return pass(commasep(expressionNoComma, "]"));
      }
      function enumdef() {
        return pass(pushlex("form"), pattern, expect("{"), pushlex("}"), commasep(enummember, "}"), poplex, poplex)
      }
      function enummember() {
        return pass(pattern, maybeAssign);
      }

      function isContinuedStatement(state, textAfter) {
        return state.lastType == "operator" || state.lastType == "," ||
          isOperatorChar.test(textAfter.charAt(0)) ||
          /[,.]/.test(textAfter.charAt(0));
      }

      function expressionAllowed(stream, state, backUp) {
        return state.tokenize == tokenBase &&
          /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\[{}\(,;:]|=>)$/.test(state.lastType) ||
          (state.lastType == "quasi" && /\{\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0))))
      }

      // Interface

      return {
        startState: function(indentUnit) {
          var state = {
            tokenize: tokenBase,
            lastType: "sof",
            cc: [],
            lexical: new JSLexical(-indentUnit, 0, "block", false),
            localVars: parserConfig.localVars,
            context: parserConfig.localVars && new Context(null, null, false),
            indented: 0
          };
          if (parserConfig.globalVars && typeof parserConfig.globalVars == "object")
            state.globalVars = parserConfig.globalVars;
          return state;
        },

        token: function(stream, state) {
          if (stream.sol()) {
            if (!state.lexical.hasOwnProperty("align"))
              state.lexical.align = false;
            state.indented = stream.indentation();
            findFatArrow(stream, state);
          }
          if (state.tokenize != tokenComment && stream.eatSpace()) return null;
          var style = state.tokenize(stream, state);
          if (type == "comment") return style;
          state.lastType = type == "operator" && (content == "++" || content == "--") ? "incdec" : type;
          return parseJS(state, style, type, content, stream);
        },

        indent: function(state, textAfter, cx) {
          if (state.tokenize == tokenComment || state.tokenize == tokenQuasi) return null;
          if (state.tokenize != tokenBase) return 0;
          var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical, top;
          // Kludge to prevent 'maybelse' from blocking lexical scope pops
          if (!/^\s*else\b/.test(textAfter)) for (var i = state.cc.length - 1; i >= 0; --i) {
            var c = state.cc[i];
            if (c == poplex) lexical = lexical.prev;
            else if (c != maybeelse && c != popcontext) break;
          }
          while ((lexical.type == "stat" || lexical.type == "form") &&
                 (firstChar == "}" || ((top = state.cc[state.cc.length - 1]) &&
                                       (top == maybeoperatorComma || top == maybeoperatorNoComma) &&
                                       !/^[,\.=+\-*:?[\(]/.test(textAfter))))
            lexical = lexical.prev;
          if (statementIndent && lexical.type == ")" && lexical.prev.type == "stat")
            lexical = lexical.prev;
          var type = lexical.type, closing = firstChar == type;

          if (type == "vardef") return lexical.indented + (state.lastType == "operator" || state.lastType == "," ? lexical.info.length + 1 : 0);
          else if (type == "form" && firstChar == "{") return lexical.indented;
          else if (type == "form") return lexical.indented + cx.unit;
          else if (type == "stat")
            return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || cx.unit : 0);
          else if (lexical.info == "switch" && !closing && parserConfig.doubleIndentSwitch != false)
            return lexical.indented + (/^(?:case|default)\b/.test(textAfter) ? cx.unit : 2 * cx.unit);
          else if (lexical.align) return lexical.column + (closing ? 0 : 1);
          else return lexical.indented + (closing ? 0 : cx.unit);
        },

        languageData: {
          indentOnInput: /^\s*(?:case .*?:|default:|\{|\})$/,
          commentTokens: jsonMode ? undefined : {line: "//", block: {open: "/*", close: "*/"}},
          closeBrackets: {brackets: ["(", "[", "{", "'", '"', "`"]},
          wordChars: "$"
        }
      };
    }
    const javascript = mkJavaScript({});
    const json = mkJavaScript({json: true});
    const jsonld = mkJavaScript({jsonld: true});
    const typescript = mkJavaScript({typescript: true});

    var javascript$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        javascript: javascript,
        json: json,
        jsonld: jsonld,
        typescript: typescript
    });

    var keywords$s = ["and", "as", "block", "endblock", "by", "cycle", "debug", "else", "elif",
                    "extends", "filter", "endfilter", "firstof", "for",
                    "endfor", "if", "endif", "ifchanged", "endifchanged",
                    "ifequal", "endifequal", "ifnotequal",
                    "endifnotequal", "in", "include", "load", "not", "now", "or",
                    "parsed", "regroup", "reversed", "spaceless",
                    "endspaceless", "ssi", "templatetag", "openblock",
                    "closeblock", "openvariable", "closevariable",
                    "openbrace", "closebrace", "opencomment",
                    "closecomment", "widthratio", "url", "with", "endwith",
                    "get_current_language", "trans", "endtrans", "noop", "blocktrans",
                    "endblocktrans", "get_available_languages",
                    "get_current_language_bidi", "plural"],
        operator = /^[+\-*&%=<>!?|~^]/,
        sign = /^[:\[\(\{]/,
        atom = ["true", "false"],
        number = /^(\d[+\-\*\/])?\d+(\.\d+)?/;

    keywords$s = new RegExp("((" + keywords$s.join(")|(") + "))\\b");
    atom = new RegExp("((" + atom.join(")|(") + "))\\b");

    function tokenBase$w (stream, state) {
      var ch = stream.peek();

      //Comment
      if (state.incomment) {
        if(!stream.skipTo("#}")) {
          stream.skipToEnd();
        } else {
          stream.eatWhile(/\#|}/);
          state.incomment = false;
        }
        return "comment";
        //Tag
      } else if (state.intag) {
        //After operator
        if(state.operator) {
          state.operator = false;
          if(stream.match(atom)) {
            return "atom";
          }
          if(stream.match(number)) {
            return "number";
          }
        }
        //After sign
        if(state.sign) {
          state.sign = false;
          if(stream.match(atom)) {
            return "atom";
          }
          if(stream.match(number)) {
            return "number";
          }
        }

        if(state.instring) {
          if(ch == state.instring) {
            state.instring = false;
          }
          stream.next();
          return "string";
        } else if(ch == "'" || ch == '"') {
          state.instring = ch;
          stream.next();
          return "string";
        } else if(stream.match(state.intag + "}") || stream.eat("-") && stream.match(state.intag + "}")) {
          state.intag = false;
          return "tag";
        } else if(stream.match(operator)) {
          state.operator = true;
          return "operator";
        } else if(stream.match(sign)) {
          state.sign = true;
        } else {
          if(stream.eat(" ") || stream.sol()) {
            if(stream.match(keywords$s)) {
              return "keyword";
            }
            if(stream.match(atom)) {
              return "atom";
            }
            if(stream.match(number)) {
              return "number";
            }
            if(stream.sol()) {
              stream.next();
            }
          } else {
            stream.next();
          }

        }
        return "variable";
      } else if (stream.eat("{")) {
        if (stream.eat("#")) {
          state.incomment = true;
          if(!stream.skipTo("#}")) {
            stream.skipToEnd();
          } else {
            stream.eatWhile(/\#|}/);
            state.incomment = false;
          }
          return "comment";
          //Open tag
        } else if (ch = stream.eat(/\{|%/)) {
          //Cache close tag
          state.intag = ch;
          if(ch == "{") {
            state.intag = "}";
          }
          stream.eat("-");
          return "tag";
        }
      }
      stream.next();
    }
    const jinja2 = {
      startState: function () {
        return {tokenize: tokenBase$w};
      },
      token: function (stream, state) {
        return state.tokenize(stream, state);
      },
      languageData: {
        commentTokens: {block: {open: "{#", close: "#}"}}
      }
    };

    var jinja2$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        jinja2: jinja2
    });

    function wordRegexp$a(words, end) {
      if (typeof end === "undefined") { end = "\\b"; }
      return new RegExp("^((" + words.join(")|(") + "))" + end);
    }

    var octChar = "\\\\[0-7]{1,3}";
    var hexChar = "\\\\x[A-Fa-f0-9]{1,2}";
    var sChar = "\\\\[abefnrtv0%?'\"\\\\]";
    var uChar = "([^\\u0027\\u005C\\uD800-\\uDFFF]|[\\uD800-\\uDFFF][\\uDC00-\\uDFFF])";

    var operators$3 = wordRegexp$a([
      "[<>]:", "[<>=]=", "<<=?", ">>>?=?", "=>", "->", "\\/\\/",
      "[\\\\%*+\\-<>!=\\/^|&\\u00F7\\u22BB]=?", "\\?", "\\$", "~", ":",
      "\\u00D7", "\\u2208", "\\u2209", "\\u220B", "\\u220C", "\\u2218",
      "\\u221A", "\\u221B", "\\u2229", "\\u222A", "\\u2260", "\\u2264",
      "\\u2265", "\\u2286", "\\u2288", "\\u228A", "\\u22C5",
      "\\b(in|isa)\\b(?!\.?\\()"], "");
    var delimiters = /^[;,()[\]{}]/;
    var identifiers$6 = /^[_A-Za-z\u00A1-\u2217\u2219-\uFFFF][\w\u00A1-\u2217\u2219-\uFFFF]*!*/;

    var chars = wordRegexp$a([octChar, hexChar, sChar, uChar], "'");

    var openersList = ["begin", "function", "type", "struct", "immutable", "let",
                       "macro", "for", "while", "quote", "if", "else", "elseif", "try",
                       "finally", "catch", "do"];

    var closersList = ["end", "else", "elseif", "catch", "finally"];

    var keywordsList = ["if", "else", "elseif", "while", "for", "begin", "let",
                        "end", "do", "try", "catch", "finally", "return", "break", "continue",
                        "global", "local", "const", "export", "import", "importall", "using",
                        "function", "where", "macro", "module", "baremodule", "struct", "type",
                        "mutable", "immutable", "quote", "typealias", "abstract", "primitive",
                        "bitstype"];

    var builtinsList = ["true", "false", "nothing", "NaN", "Inf"];

    var openers = wordRegexp$a(openersList);
    var closers = wordRegexp$a(closersList);
    var keywords$r = wordRegexp$a(keywordsList);
    var builtins$6 = wordRegexp$a(builtinsList);

    var macro = /^@[_A-Za-z][\w]*/;
    var symbol = /^:[_A-Za-z\u00A1-\uFFFF][\w\u00A1-\uFFFF]*!*/;
    var stringPrefixes$1 = /^(`|([_A-Za-z\u00A1-\uFFFF]*"("")?))/;

    function inArray(state) {
      return (state.nestedArrays > 0);
    }

    function inGenerator(state) {
      return (state.nestedGenerators > 0);
    }

    function currentScope$1(state, n) {
      if (typeof(n) === "undefined") { n = 0; }
      if (state.scopes.length <= n) {
        return null;
      }
      return state.scopes[state.scopes.length - (n + 1)];
    }

    // tokenizers
    function tokenBase$v(stream, state) {
      // Handle multiline comments
      if (stream.match('#=', false)) {
        state.tokenize = tokenComment$d;
        return state.tokenize(stream, state);
      }

      // Handle scope changes
      var leavingExpr = state.leavingExpr;
      if (stream.sol()) {
        leavingExpr = false;
      }
      state.leavingExpr = false;

      if (leavingExpr) {
        if (stream.match(/^'+/)) {
          return "operator";
        }
      }

      if (stream.match(/\.{4,}/)) {
        return "error";
      } else if (stream.match(/\.{1,3}/)) {
        return "operator";
      }

      if (stream.eatSpace()) {
        return null;
      }

      var ch = stream.peek();

      // Handle single line comments
      if (ch === '#') {
        stream.skipToEnd();
        return "comment";
      }

      if (ch === '[') {
        state.scopes.push('[');
        state.nestedArrays++;
      }

      if (ch === '(') {
        state.scopes.push('(');
        state.nestedGenerators++;
      }

      if (inArray(state) && ch === ']') {
        while (state.scopes.length && currentScope$1(state) !== "[") { state.scopes.pop(); }
        state.scopes.pop();
        state.nestedArrays--;
        state.leavingExpr = true;
      }

      if (inGenerator(state) && ch === ')') {
        while (state.scopes.length && currentScope$1(state) !== "(") { state.scopes.pop(); }
        state.scopes.pop();
        state.nestedGenerators--;
        state.leavingExpr = true;
      }

      if (inArray(state)) {
        if (state.lastToken == "end" && stream.match(':')) {
          return "operator";
        }
        if (stream.match('end')) {
          return "number";
        }
      }

      var match;
      if (match = stream.match(openers, false)) {
        state.scopes.push(match[0]);
      }

      if (stream.match(closers, false)) {
        state.scopes.pop();
      }

      // Handle type annotations
      if (stream.match(/^::(?![:\$])/)) {
        state.tokenize = tokenAnnotation;
        return state.tokenize(stream, state);
      }

      // Handle symbols
      if (!leavingExpr && stream.match(symbol) ||
          stream.match(/:([<>]:|<<=?|>>>?=?|->|\/\/|\.{2,3}|[\.\\%*+\-<>!\/^|&]=?|[~\?\$])/)) {
        return "builtin";
      }

      // Handle parametric types
      //if (stream.match(/^{[^}]*}(?=\()/)) {
      //  return "builtin";
      //}

      // Handle operators and Delimiters
      if (stream.match(operators$3)) {
        return "operator";
      }

      // Handle Number Literals
      if (stream.match(/^\.?\d/, false)) {
        var imMatcher = RegExp(/^im\b/);
        var numberLiteral = false;
        if (stream.match(/^0x\.[0-9a-f_]+p[\+\-]?[_\d]+/i)) { numberLiteral = true; }
        // Integers
        if (stream.match(/^0x[0-9a-f_]+/i)) { numberLiteral = true; } // Hex
        if (stream.match(/^0b[01_]+/i)) { numberLiteral = true; } // Binary
        if (stream.match(/^0o[0-7_]+/i)) { numberLiteral = true; } // Octal
        // Floats
        if (stream.match(/^(?:(?:\d[_\d]*)?\.(?!\.)(?:\d[_\d]*)?|\d[_\d]*\.(?!\.)(?:\d[_\d]*))?([Eef][\+\-]?[_\d]+)?/i)) { numberLiteral = true; }
        if (stream.match(/^\d[_\d]*(e[\+\-]?\d+)?/i)) { numberLiteral = true; } // Decimal
        if (numberLiteral) {
          // Integer literals may be "long"
          stream.match(imMatcher);
          state.leavingExpr = true;
          return "number";
        }
      }

      // Handle Chars
      if (stream.match("'")) {
        state.tokenize = tokenChar;
        return state.tokenize(stream, state);
      }

      // Handle Strings
      if (stream.match(stringPrefixes$1)) {
        state.tokenize = tokenStringFactory$1(stream.current());
        return state.tokenize(stream, state);
      }

      if (stream.match(macro)) {
        return "meta";
      }

      if (stream.match(delimiters)) {
        return null;
      }

      if (stream.match(keywords$r)) {
        return "keyword";
      }

      if (stream.match(builtins$6)) {
        return "builtin";
      }

      var isDefinition = state.isDefinition || state.lastToken == "function" ||
          state.lastToken == "macro" || state.lastToken == "type" ||
          state.lastToken == "struct" || state.lastToken == "immutable";

      if (stream.match(identifiers$6)) {
        if (isDefinition) {
          if (stream.peek() === '.') {
            state.isDefinition = true;
            return "variable";
          }
          state.isDefinition = false;
          return "def";
        }
        state.leavingExpr = true;
        return "variable";
      }

      // Handle non-detected items
      stream.next();
      return "error";
    }

    function tokenAnnotation(stream, state) {
      stream.match(/.*?(?=[,;{}()=\s]|$)/);
      if (stream.match('{')) {
        state.nestedParameters++;
      } else if (stream.match('}') && state.nestedParameters > 0) {
        state.nestedParameters--;
      }
      if (state.nestedParameters > 0) {
        stream.match(/.*?(?={|})/) || stream.next();
      } else if (state.nestedParameters == 0) {
        state.tokenize = tokenBase$v;
      }
      return "builtin";
    }

    function tokenComment$d(stream, state) {
      if (stream.match('#=')) {
        state.nestedComments++;
      }
      if (!stream.match(/.*?(?=(#=|=#))/)) {
        stream.skipToEnd();
      }
      if (stream.match('=#')) {
        state.nestedComments--;
        if (state.nestedComments == 0)
          state.tokenize = tokenBase$v;
      }
      return "comment";
    }

    function tokenChar(stream, state) {
      var isChar = false, match;
      if (stream.match(chars)) {
        isChar = true;
      } else if (match = stream.match(/\\u([a-f0-9]{1,4})(?=')/i)) {
        var value = parseInt(match[1], 16);
        if (value <= 55295 || value >= 57344) { // (U+0,U+D7FF), (U+E000,U+FFFF)
          isChar = true;
          stream.next();
        }
      } else if (match = stream.match(/\\U([A-Fa-f0-9]{5,8})(?=')/)) {
        var value = parseInt(match[1], 16);
        if (value <= 1114111) { // U+10FFFF
          isChar = true;
          stream.next();
        }
      }
      if (isChar) {
        state.leavingExpr = true;
        state.tokenize = tokenBase$v;
        return "string";
      }
      if (!stream.match(/^[^']+(?=')/)) { stream.skipToEnd(); }
      if (stream.match("'")) { state.tokenize = tokenBase$v; }
      return "error";
    }

    function tokenStringFactory$1(delimiter) {
      if (delimiter.substr(-3) === '"""') {
        delimiter = '"""';
      } else if (delimiter.substr(-1) === '"') {
        delimiter = '"';
      }
      function tokenString(stream, state) {
        if (stream.eat('\\')) {
          stream.next();
        } else if (stream.match(delimiter)) {
          state.tokenize = tokenBase$v;
          state.leavingExpr = true;
          return "string";
        } else {
          stream.eat(/[`"]/);
        }
        stream.eatWhile(/[^\\`"]/);
        return "string";
      }
      return tokenString;
    }

    const julia = {
      startState: function() {
        return {
          tokenize: tokenBase$v,
          scopes: [],
          lastToken: null,
          leavingExpr: false,
          isDefinition: false,
          nestedArrays: 0,
          nestedComments: 0,
          nestedGenerators: 0,
          nestedParameters: 0,
          firstParenPos: -1
        };
      },

      token: function(stream, state) {
        var style = state.tokenize(stream, state);
        var current = stream.current();

        if (current && style) {
          state.lastToken = current;
        }

        return style;
      },

      indent: function(state, textAfter, cx) {
        var delta = 0;
        if ( textAfter === ']' || textAfter === ')' || /^end\b/.test(textAfter) ||
             /^else/.test(textAfter) || /^catch\b/.test(textAfter) || /^elseif\b/.test(textAfter) ||
             /^finally/.test(textAfter) ) {
          delta = -1;
        }
        return (state.scopes.length + delta) * cx.unit;
      },

      languageData: {
        indentOnInput: /^\s*(end|else|catch|finally)\b$/,
        commentTokens: {line: "#", block: {open: "#=", close: "=#"}},
        closeBrackets: {brackets: ["(", "[", "{", '"']},
        autocomplete: keywordsList.concat(builtinsList)
      }
    };

    var julia$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        julia: julia
    });

    var tokenBase$u = function(stream, state) {
      var next_rule = state.next || "start";
      if (next_rule) {
        state.next = state.next;
        var nr = Rules[next_rule];
        if (nr.splice) {
          for (var i$ = 0; i$ < nr.length; ++i$) {
            var r = nr[i$];
            if (r.regex && stream.match(r.regex)) {
              state.next = r.next || state.next;
              return r.token;
            }
          }
          stream.next();
          return 'error';
        }
        if (stream.match(r = Rules[next_rule])) {
          if (r.regex && stream.match(r.regex)) {
            state.next = r.next;
            return r.token;
          } else {
            stream.next();
            return 'error';
          }
        }
      }
      stream.next();
      return 'error';
    };

    var identifier$1 = '(?![\\d\\s])[$\\w\\xAA-\\uFFDC](?:(?!\\s)[$\\w\\xAA-\\uFFDC]|-[A-Za-z])*';
    var indenter = RegExp('(?:[({[=:]|[-~]>|\\b(?:e(?:lse|xport)|d(?:o|efault)|t(?:ry|hen)|finally|import(?:\\s*all)?|const|var|let|new|catch(?:\\s*' + identifier$1 + ')?))\\s*$');
    var keywordend = '(?![$\\w]|-[A-Za-z]|\\s*:(?![:=]))';
    var stringfill = {
      token: 'string',
      regex: '.+'
    };
    var Rules = {
      start: [
        {
          token: 'docComment',
          regex: '/\\*',
          next: 'comment'
        }, {
          token: 'comment',
          regex: '#.*'
        }, {
          token: 'keyword',
          regex: '(?:t(?:h(?:is|row|en)|ry|ypeof!?)|c(?:on(?:tinue|st)|a(?:se|tch)|lass)|i(?:n(?:stanceof)?|mp(?:ort(?:\\s+all)?|lements)|[fs])|d(?:e(?:fault|lete|bugger)|o)|f(?:or(?:\\s+own)?|inally|unction)|s(?:uper|witch)|e(?:lse|x(?:tends|port)|val)|a(?:nd|rguments)|n(?:ew|ot)|un(?:less|til)|w(?:hile|ith)|o[fr]|return|break|let|var|loop)' + keywordend
        }, {
          token: 'atom',
          regex: '(?:true|false|yes|no|on|off|null|void|undefined)' + keywordend
        }, {
          token: 'invalid',
          regex: '(?:p(?:ackage|r(?:ivate|otected)|ublic)|i(?:mplements|nterface)|enum|static|yield)' + keywordend
        }, {
          token: 'className.standard',
          regex: '(?:R(?:e(?:gExp|ferenceError)|angeError)|S(?:tring|yntaxError)|E(?:rror|valError)|Array|Boolean|Date|Function|Number|Object|TypeError|URIError)' + keywordend
        }, {
          token: 'variableName.function.standard',
          regex: '(?:is(?:NaN|Finite)|parse(?:Int|Float)|Math|JSON|(?:en|de)codeURI(?:Component)?)' + keywordend
        }, {
          token: 'variableName.standard',
          regex: '(?:t(?:hat|il|o)|f(?:rom|allthrough)|it|by|e)' + keywordend
        }, {
          token: 'variableName',
          regex: identifier$1 + '\\s*:(?![:=])'
        }, {
          token: 'variableName',
          regex: identifier$1
        }, {
          token: 'operatorKeyword',
          regex: '(?:\\.{3}|\\s+\\?)'
        }, {
          token: 'keyword',
          regex: '(?:@+|::|\\.\\.)',
          next: 'key'
        }, {
          token: 'operatorKeyword',
          regex: '\\.\\s*',
          next: 'key'
        }, {
          token: 'string',
          regex: '\\\\\\S[^\\s,;)}\\]]*'
        }, {
          token: 'docString',
          regex: '\'\'\'',
          next: 'qdoc'
        }, {
          token: 'docString',
          regex: '"""',
          next: 'qqdoc'
        }, {
          token: 'string',
          regex: '\'',
          next: 'qstring'
        }, {
          token: 'string',
          regex: '"',
          next: 'qqstring'
        }, {
          token: 'string',
          regex: '`',
          next: 'js'
        }, {
          token: 'string',
          regex: '<\\[',
          next: 'words'
        }, {
          token: 'regexp',
          regex: '//',
          next: 'heregex'
        }, {
          token: 'regexp',
          regex: '\\/(?:[^[\\/\\n\\\\]*(?:(?:\\\\.|\\[[^\\]\\n\\\\]*(?:\\\\.[^\\]\\n\\\\]*)*\\])[^[\\/\\n\\\\]*)*)\\/[gimy$]{0,4}',
          next: 'key'
        }, {
          token: 'number',
          regex: '(?:0x[\\da-fA-F][\\da-fA-F_]*|(?:[2-9]|[12]\\d|3[0-6])r[\\da-zA-Z][\\da-zA-Z_]*|(?:\\d[\\d_]*(?:\\.\\d[\\d_]*)?|\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[\\w$]*)'
        }, {
          token: 'paren',
          regex: '[({[]'
        }, {
          token: 'paren',
          regex: '[)}\\]]',
          next: 'key'
        }, {
          token: 'operatorKeyword',
          regex: '\\S+'
        }, {
          token: 'content',
          regex: '\\s+'
        }
      ],
      heregex: [
        {
          token: 'regexp',
          regex: '.*?//[gimy$?]{0,4}',
          next: 'start'
        }, {
          token: 'regexp',
          regex: '\\s*#{'
        }, {
          token: 'comment',
          regex: '\\s+(?:#.*)?'
        }, {
          token: 'regexp',
          regex: '\\S+'
        }
      ],
      key: [
        {
          token: 'operatorKeyword',
          regex: '[.?@!]+'
        }, {
          token: 'variableName',
          regex: identifier$1,
          next: 'start'
        }, {
          token: 'content',
          regex: '',
          next: 'start'
        }
      ],
      comment: [
        {
          token: 'docComment',
          regex: '.*?\\*/',
          next: 'start'
        }, {
          token: 'docComment',
          regex: '.+'
        }
      ],
      qdoc: [
        {
          token: 'string',
          regex: ".*?'''",
          next: 'key'
        }, stringfill
      ],
      qqdoc: [
        {
          token: 'string',
          regex: '.*?"""',
          next: 'key'
        }, stringfill
      ],
      qstring: [
        {
          token: 'string',
          regex: '[^\\\\\']*(?:\\\\.[^\\\\\']*)*\'',
          next: 'key'
        }, stringfill
      ],
      qqstring: [
        {
          token: 'string',
          regex: '[^\\\\"]*(?:\\\\.[^\\\\"]*)*"',
          next: 'key'
        }, stringfill
      ],
      js: [
        {
          token: 'string',
          regex: '[^\\\\`]*(?:\\\\.[^\\\\`]*)*`',
          next: 'key'
        }, stringfill
      ],
      words: [
        {
          token: 'string',
          regex: '.*?\\]>',
          next: 'key'
        }, stringfill
      ]
    };
    for (var idx in Rules) {
      var r$2 = Rules[idx];
      if (r$2.splice) {
        for (var i = 0, len = r$2.length; i < len; ++i) {
          var rr = r$2[i];
          if (typeof rr.regex === 'string') {
            Rules[idx][i].regex = new RegExp('^' + rr.regex);
          }
        }
      } else if (typeof rr.regex === 'string') {
        Rules[idx].regex = new RegExp('^' + r$2.regex);
      }
    }

    const liveScript = {
      startState: function(){
        return {
          next: 'start',
          lastToken: {style: null, indent: 0, content: ""}
        };
      },
      token: function(stream, state){
        while (stream.pos == stream.start)
          var style = tokenBase$u(stream, state);
        state.lastToken = {
          style: style,
          indent: stream.indentation(),
          content: stream.current()
        };
        return style.replace(/\./g, ' ');
      },
      indent: function(state){
        var indentation = state.lastToken.indent;
        if (state.lastToken.content.match(indenter)) {
          indentation += 2;
        }
        return indentation;
      }
    };

    var livescript = /*#__PURE__*/Object.freeze({
        __proto__: null,
        liveScript: liveScript
    });

    function prefixRE(words) {
      return new RegExp("^(?:" + words.join("|") + ")", "i");
    }
    function wordRE(words) {
      return new RegExp("^(?:" + words.join("|") + ")$", "i");
    }

    // long list of standard functions from lua manual
    var builtins$5 = wordRE([
      "_G","_VERSION","assert","collectgarbage","dofile","error","getfenv","getmetatable","ipairs","load",
      "loadfile","loadstring","module","next","pairs","pcall","print","rawequal","rawget","rawset","require",
      "select","setfenv","setmetatable","tonumber","tostring","type","unpack","xpcall",

      "coroutine.create","coroutine.resume","coroutine.running","coroutine.status","coroutine.wrap","coroutine.yield",

      "debug.debug","debug.getfenv","debug.gethook","debug.getinfo","debug.getlocal","debug.getmetatable",
      "debug.getregistry","debug.getupvalue","debug.setfenv","debug.sethook","debug.setlocal","debug.setmetatable",
      "debug.setupvalue","debug.traceback",

      "close","flush","lines","read","seek","setvbuf","write",

      "io.close","io.flush","io.input","io.lines","io.open","io.output","io.popen","io.read","io.stderr","io.stdin",
      "io.stdout","io.tmpfile","io.type","io.write",

      "math.abs","math.acos","math.asin","math.atan","math.atan2","math.ceil","math.cos","math.cosh","math.deg",
      "math.exp","math.floor","math.fmod","math.frexp","math.huge","math.ldexp","math.log","math.log10","math.max",
      "math.min","math.modf","math.pi","math.pow","math.rad","math.random","math.randomseed","math.sin","math.sinh",
      "math.sqrt","math.tan","math.tanh",

      "os.clock","os.date","os.difftime","os.execute","os.exit","os.getenv","os.remove","os.rename","os.setlocale",
      "os.time","os.tmpname",

      "package.cpath","package.loaded","package.loaders","package.loadlib","package.path","package.preload",
      "package.seeall",

      "string.byte","string.char","string.dump","string.find","string.format","string.gmatch","string.gsub",
      "string.len","string.lower","string.match","string.rep","string.reverse","string.sub","string.upper",

      "table.concat","table.insert","table.maxn","table.remove","table.sort"
    ]);
    var keywords$q = wordRE(["and","break","elseif","false","nil","not","or","return",
                           "true","function", "end", "if", "then", "else", "do",
                           "while", "repeat", "until", "for", "in", "local" ]);

    var indentTokens = wordRE(["function", "if","repeat","do", "\\(", "{"]);
    var dedentTokens = wordRE(["end", "until", "\\)", "}"]);
    var dedentPartial = prefixRE(["end", "until", "\\)", "}", "else", "elseif"]);

    function readBracket(stream) {
      var level = 0;
      while (stream.eat("=")) ++level;
      stream.eat("[");
      return level;
    }

    function normal(stream, state) {
      var ch = stream.next();
      if (ch == "-" && stream.eat("-")) {
        if (stream.eat("[") && stream.eat("["))
          return (state.cur = bracketed(readBracket(stream), "comment"))(stream, state);
        stream.skipToEnd();
        return "comment";
      }
      if (ch == "\"" || ch == "'")
        return (state.cur = string(ch))(stream, state);
      if (ch == "[" && /[\[=]/.test(stream.peek()))
        return (state.cur = bracketed(readBracket(stream), "string"))(stream, state);
      if (/\d/.test(ch)) {
        stream.eatWhile(/[\w.%]/);
        return "number";
      }
      if (/[\w_]/.test(ch)) {
        stream.eatWhile(/[\w\\\-_.]/);
        return "variable";
      }
      return null;
    }

    function bracketed(level, style) {
      return function(stream, state) {
        var curlev = null, ch;
        while ((ch = stream.next()) != null) {
          if (curlev == null) {if (ch == "]") curlev = 0;}
          else if (ch == "=") ++curlev;
          else if (ch == "]" && curlev == level) { state.cur = normal; break; }
          else curlev = null;
        }
        return style;
      };
    }

    function string(quote) {
      return function(stream, state) {
        var escaped = false, ch;
        while ((ch = stream.next()) != null) {
          if (ch == quote && !escaped) break;
          escaped = !escaped && ch == "\\";
        }
        if (!escaped) state.cur = normal;
        return "string";
      };
    }

    const lua = {
      startState: function(basecol) {
        return {basecol: basecol || 0, indentDepth: 0, cur: normal};
      },

      token: function(stream, state) {
        if (stream.eatSpace()) return null;
        var style = state.cur(stream, state);
        var word = stream.current();
        if (style == "variable") {
          if (keywords$q.test(word)) style = "keyword";
          else if (builtins$5.test(word)) style = "builtin";
        }
        if ((style != "comment") && (style != "string")){
          if (indentTokens.test(word)) ++state.indentDepth;
          else if (dedentTokens.test(word)) --state.indentDepth;
        }
        return style;
      },

      indent: function(state, textAfter, cx) {
        var closing = dedentPartial.test(textAfter);
        return state.basecol + cx.unit * (state.indentDepth - (closing ? 1 : 0));
      },

      languageData: {
        indentOnInput: /^\s*(?:end|until|else|\)|\})$/,
        commentTokens: {line: "--", block: {open: "--[[", close: "]]--"}}
      }
    };

    var lua$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        lua: lua
    });

    function parseWords$2(str) {
      var obj = {}, words = str.split(" ");
      for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
      return obj;
    }
    var specials$1 = parseWords$2("$! $$ $& $? $+ $abook $abs $active $activecid " +
                              "$activewid $address $addtok $agent $agentname $agentstat $agentver " +
                              "$alias $and $anick $ansi2mirc $aop $appactive $appstate $asc $asctime " +
                              "$asin $atan $avoice $away $awaymsg $awaytime $banmask $base $bfind " +
                              "$binoff $biton $bnick $bvar $bytes $calc $cb $cd $ceil $chan $chanmodes " +
                              "$chantypes $chat $chr $cid $clevel $click $cmdbox $cmdline $cnick $color " +
                              "$com $comcall $comchan $comerr $compact $compress $comval $cos $count " +
                              "$cr $crc $creq $crlf $ctime $ctimer $ctrlenter $date $day $daylight " +
                              "$dbuh $dbuw $dccignore $dccport $dde $ddename $debug $decode $decompress " +
                              "$deltok $devent $dialog $did $didreg $didtok $didwm $disk $dlevel $dll " +
                              "$dllcall $dname $dns $duration $ebeeps $editbox $emailaddr $encode $error " +
                              "$eval $event $exist $feof $ferr $fgetc $file $filename $filtered $finddir " +
                              "$finddirn $findfile $findfilen $findtok $fline $floor $fopen $fread $fserve " +
                              "$fulladdress $fulldate $fullname $fullscreen $get $getdir $getdot $gettok $gmt " +
                              "$group $halted $hash $height $hfind $hget $highlight $hnick $hotline " +
                              "$hotlinepos $ial $ialchan $ibl $idle $iel $ifmatch $ignore $iif $iil " +
                              "$inelipse $ini $inmidi $inpaste $inpoly $input $inrect $inroundrect " +
                              "$insong $instok $int $inwave $ip $isalias $isbit $isdde $isdir $isfile " +
                              "$isid $islower $istok $isupper $keychar $keyrpt $keyval $knick $lactive " +
                              "$lactivecid $lactivewid $left $len $level $lf $line $lines $link $lock " +
                              "$lock $locked $log $logstamp $logstampfmt $longfn $longip $lower $ltimer " +
                              "$maddress $mask $matchkey $matchtok $md5 $me $menu $menubar $menucontext " +
                              "$menutype $mid $middir $mircdir $mircexe $mircini $mklogfn $mnick $mode " +
                              "$modefirst $modelast $modespl $mouse $msfile $network $newnick $nick $nofile " +
                              "$nopath $noqt $not $notags $notify $null $numeric $numok $oline $onpoly " +
                              "$opnick $or $ord $os $passivedcc $pic $play $pnick $port $portable $portfree " +
                              "$pos $prefix $prop $protect $puttok $qt $query $rand $r $rawmsg $read $readomo " +
                              "$readn $regex $regml $regsub $regsubex $remove $remtok $replace $replacex " +
                              "$reptok $result $rgb $right $round $scid $scon $script $scriptdir $scriptline " +
                              "$sdir $send $server $serverip $sfile $sha1 $shortfn $show $signal $sin " +
                              "$site $sline $snick $snicks $snotify $sock $sockbr $sockerr $sockname " +
                              "$sorttok $sound $sqrt $ssl $sreq $sslready $status $strip $str $stripped " +
                              "$syle $submenu $switchbar $tan $target $ticks $time $timer $timestamp " +
                              "$timestampfmt $timezone $tip $titlebar $toolbar $treebar $trust $ulevel " +
                              "$ulist $upper $uptime $url $usermode $v1 $v2 $var $vcmd $vcmdstat $vcmdver " +
                              "$version $vnick $vol $wid $width $wildsite $wildtok $window $wrap $xor");
    var keywords$p = parseWords$2("abook ajinvite alias aline ame amsg anick aop auser autojoin avoice " +
                              "away background ban bcopy beep bread break breplace bset btrunc bunset bwrite " +
                              "channel clear clearall cline clipboard close cnick color comclose comopen " +
                              "comreg continue copy creq ctcpreply ctcps dcc dccserver dde ddeserver " +
                              "debug dec describe dialog did didtok disable disconnect dlevel dline dll " +
                              "dns dqwindow drawcopy drawdot drawfill drawline drawpic drawrect drawreplace " +
                              "drawrot drawsave drawscroll drawtext ebeeps echo editbox emailaddr enable " +
                              "events exit fclose filter findtext finger firewall flash flist flood flush " +
                              "flushini font fopen fseek fsend fserve fullname fwrite ghide gload gmove " +
                              "gopts goto gplay gpoint gqreq groups gshow gsize gstop gtalk gunload hadd " +
                              "halt haltdef hdec hdel help hfree hinc hload hmake hop hsave ial ialclear " +
                              "ialmark identd if ignore iline inc invite iuser join kick linesep links list " +
                              "load loadbuf localinfo log mdi me menubar mkdir mnick mode msg nick noop notice " +
                              "notify omsg onotice part partall pdcc perform play playctrl pop protect pvoice " +
                              "qme qmsg query queryn quit raw reload remini remote remove rename renwin " +
                              "reseterror resetidle return rlevel rline rmdir run ruser save savebuf saveini " +
                              "say scid scon server set showmirc signam sline sockaccept sockclose socklist " +
                              "socklisten sockmark sockopen sockpause sockread sockrename sockudp sockwrite " +
                              "sound speak splay sreq strip switchbar timer timestamp titlebar tnick tokenize " +
                              "toolbar topic tray treebar ulist unload unset unsetall updatenl url uwho " +
                              "var vcadd vcmd vcrem vol while whois window winhelp write writeint if isalnum " +
                              "isalpha isaop isavoice isban ischan ishop isignore isin isincs isletter islower " +
                              "isnotify isnum ison isop isprotect isreg isupper isvoice iswm iswmcs " +
                              "elseif else goto menu nicklist status title icon size option text edit " +
                              "button check radio box scroll list combo link tab item");
    var functions$2 = parseWords$2("if elseif else and not or eq ne in ni for foreach while switch");
    var isOperatorChar$8 = /[+\-*&%=<>!?^\/\|]/;
    function chain$6(stream, state, f) {
      state.tokenize = f;
      return f(stream, state);
    }
    function tokenBase$t(stream, state) {
      var beforeParams = state.beforeParams;
      state.beforeParams = false;
      var ch = stream.next();
      if (/[\[\]{}\(\),\.]/.test(ch)) {
        if (ch == "(" && beforeParams) state.inParams = true;
        else if (ch == ")") state.inParams = false;
        return null;
      }
      else if (/\d/.test(ch)) {
        stream.eatWhile(/[\w\.]/);
        return "number";
      }
      else if (ch == "\\") {
        stream.eat("\\");
        stream.eat(/./);
        return "number";
      }
      else if (ch == "/" && stream.eat("*")) {
        return chain$6(stream, state, tokenComment$c);
      }
      else if (ch == ";" && stream.match(/ *\( *\(/)) {
        return chain$6(stream, state, tokenUnparsed$2);
      }
      else if (ch == ";" && !state.inParams) {
        stream.skipToEnd();
        return "comment";
      }
      else if (ch == '"') {
        stream.eat(/"/);
        return "keyword";
      }
      else if (ch == "$") {
        stream.eatWhile(/[$_a-z0-9A-Z\.:]/);
        if (specials$1 && specials$1.propertyIsEnumerable(stream.current().toLowerCase())) {
          return "keyword";
        }
        else {
          state.beforeParams = true;
          return "builtin";
        }
      }
      else if (ch == "%") {
        stream.eatWhile(/[^,\s()]/);
        state.beforeParams = true;
        return "string";
      }
      else if (isOperatorChar$8.test(ch)) {
        stream.eatWhile(isOperatorChar$8);
        return "operator";
      }
      else {
        stream.eatWhile(/[\w\$_{}]/);
        var word = stream.current().toLowerCase();
        if (keywords$p && keywords$p.propertyIsEnumerable(word))
          return "keyword";
        if (functions$2 && functions$2.propertyIsEnumerable(word)) {
          state.beforeParams = true;
          return "keyword";
        }
        return null;
      }
    }
    function tokenComment$c(stream, state) {
      var maybeEnd = false, ch;
      while (ch = stream.next()) {
        if (ch == "/" && maybeEnd) {
          state.tokenize = tokenBase$t;
          break;
        }
        maybeEnd = (ch == "*");
      }
      return "comment";
    }
    function tokenUnparsed$2(stream, state) {
      var maybeEnd = 0, ch;
      while (ch = stream.next()) {
        if (ch == ";" && maybeEnd == 2) {
          state.tokenize = tokenBase$t;
          break;
        }
        if (ch == ")")
          maybeEnd++;
        else if (ch != " ")
          maybeEnd = 0;
      }
      return "meta";
    }
    const mirc = {
      startState: function() {
        return {
          tokenize: tokenBase$t,
          beforeParams: false,
          inParams: false
        };
      },
      token: function(stream, state) {
        if (stream.eatSpace()) return null;
        return state.tokenize(stream, state);
      }
    };

    var mirc$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        mirc: mirc
    });

    // used pattern building blocks
    var Identifier = '[a-zA-Z\\$][a-zA-Z0-9\\$]*';
    var pBase      = "(?:\\d+)";
    var pFloat     = "(?:\\.\\d+|\\d+\\.\\d*|\\d+)";
    var pFloatBase = "(?:\\.\\w+|\\w+\\.\\w*|\\w+)";
    var pPrecision = "(?:`(?:`?"+pFloat+")?)";

    // regular expressions
    var reBaseForm        = new RegExp('(?:'+pBase+'(?:\\^\\^'+pFloatBase+pPrecision+'?(?:\\*\\^[+-]?\\d+)?))');
    var reFloatForm$1       = new RegExp('(?:' + pFloat + pPrecision + '?(?:\\*\\^[+-]?\\d+)?)');
    var reIdInContext     = new RegExp('(?:`?)(?:' + Identifier + ')(?:`(?:' + Identifier + '))*(?:`?)');

    function tokenBase$s(stream, state) {
      var ch;

      // get next character
      ch = stream.next();

      // string
      if (ch === '"') {
        state.tokenize = tokenString$k;
        return state.tokenize(stream, state);
      }

      // comment
      if (ch === '(') {
        if (stream.eat('*')) {
          state.commentLevel++;
          state.tokenize = tokenComment$b;
          return state.tokenize(stream, state);
        }
      }

      // go back one character
      stream.backUp(1);

      // look for numbers
      // Numbers in a baseform
      if (stream.match(reBaseForm, true, false)) {
        return 'number';
      }

      // Mathematica numbers. Floats (1.2, .2, 1.) can have optionally a precision (`float) or an accuracy definition
      // (``float). Note: while 1.2` is possible 1.2`` is not. At the end an exponent (float*^+12) can follow.
      if (stream.match(reFloatForm$1, true, false)) {
        return 'number';
      }

      /* In[23] and Out[34] */
      if (stream.match(/(?:In|Out)\[[0-9]*\]/, true, false)) {
        return 'atom';
      }

      // usage
      if (stream.match(/([a-zA-Z\$][a-zA-Z0-9\$]*(?:`[a-zA-Z0-9\$]+)*::usage)/, true, false)) {
        return 'meta';
      }

      // message
      if (stream.match(/([a-zA-Z\$][a-zA-Z0-9\$]*(?:`[a-zA-Z0-9\$]+)*::[a-zA-Z\$][a-zA-Z0-9\$]*):?/, true, false)) {
        return 'string.special';
      }

      // this makes a look-ahead match for something like variable:{_Integer}
      // the match is then forwarded to the mma-patterns tokenizer.
      if (stream.match(/([a-zA-Z\$][a-zA-Z0-9\$]*\s*:)(?:(?:[a-zA-Z\$][a-zA-Z0-9\$]*)|(?:[^:=>~@\^\&\*\)\[\]'\?,\|])).*/, true, false)) {
        return 'variableName.special';
      }

      // catch variables which are used together with Blank (_), BlankSequence (__) or BlankNullSequence (___)
      // Cannot start with a number, but can have numbers at any other position. Examples
      // blub__Integer, a1_, b34_Integer32
      if (stream.match(/[a-zA-Z\$][a-zA-Z0-9\$]*_+[a-zA-Z\$][a-zA-Z0-9\$]*/, true, false)) {
        return 'variableName.special';
      }
      if (stream.match(/[a-zA-Z\$][a-zA-Z0-9\$]*_+/, true, false)) {
        return 'variableName.special';
      }
      if (stream.match(/_+[a-zA-Z\$][a-zA-Z0-9\$]*/, true, false)) {
        return 'variableName.special';
      }

      // Named characters in Mathematica, like \[Gamma].
      if (stream.match(/\\\[[a-zA-Z\$][a-zA-Z0-9\$]*\]/, true, false)) {
        return 'character';
      }

      // Match all braces separately
      if (stream.match(/(?:\[|\]|{|}|\(|\))/, true, false)) {
        return 'bracket';
      }

      // Catch Slots (#, ##, #3, ##9 and the V10 named slots #name). I have never seen someone using more than one digit after #, so we match
      // only one.
      if (stream.match(/(?:#[a-zA-Z\$][a-zA-Z0-9\$]*|#+[0-9]?)/, true, false)) {
        return 'variableName.constant';
      }

      // Literals like variables, keywords, functions
      if (stream.match(reIdInContext, true, false)) {
        return 'keyword';
      }

      // operators. Note that operators like @@ or /; are matched separately for each symbol.
      if (stream.match(/(?:\\|\+|\-|\*|\/|,|;|\.|:|@|~|=|>|<|&|\||_|`|'|\^|\?|!|%)/, true, false)) {
        return 'operator';
      }

      // everything else is an error
      stream.next(); // advance the stream.
      return 'error';
    }

    function tokenString$k(stream, state) {
      var next, end = false, escaped = false;
      while ((next = stream.next()) != null) {
        if (next === '"' && !escaped) {
          end = true;
          break;
        }
        escaped = !escaped && next === '\\';
      }
      if (end && !escaped) {
        state.tokenize = tokenBase$s;
      }
      return 'string';
    }
    function tokenComment$b(stream, state) {
      var prev, next;
      while(state.commentLevel > 0 && (next = stream.next()) != null) {
        if (prev === '(' && next === '*') state.commentLevel++;
        if (prev === '*' && next === ')') state.commentLevel--;
        prev = next;
      }
      if (state.commentLevel <= 0) {
        state.tokenize = tokenBase$s;
      }
      return 'comment';
    }

    const mathematica = {
      startState: function() {return {tokenize: tokenBase$s, commentLevel: 0};},
      token: function(stream, state) {
        if (stream.eatSpace()) return null;
        return state.tokenize(stream, state);
      },
      languageData: {
        commentTokens: {block: {open: "(*", close: "*)"}}
      }
    };

    var mathematica$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        mathematica: mathematica
    });

    function words$c(str) {
      var obj = {}, words = str.split(" ");
      for (var i=0; i<words.length; ++i)
        obj[words[i]] = true;
      return obj;
    }

    var keywords$o = words$c("algorithm and annotation assert block break class connect connector constant constrainedby der discrete each else elseif elsewhen encapsulated end enumeration equation expandable extends external false final flow for function if import impure in initial inner input loop model not operator or outer output package parameter partial protected public pure record redeclare replaceable return stream then true type when while within");
    var builtin$1 = words$c("abs acos actualStream asin atan atan2 cardinality ceil cos cosh delay div edge exp floor getInstanceName homotopy inStream integer log log10 mod pre reinit rem semiLinear sign sin sinh spatialDistribution sqrt tan tanh");
    var atoms$7 = words$c("Real Boolean Integer String");

    var completions = [].concat(Object.keys(keywords$o), Object.keys(builtin$1), Object.keys(atoms$7));

    var isSingleOperatorChar$1 = /[;=\(:\),{}.*<>+\-\/^\[\]]/;
    var isDoubleOperatorChar$1 = /(:=|<=|>=|==|<>|\.\+|\.\-|\.\*|\.\/|\.\^)/;
    var isDigit = /[0-9]/;
    var isNonDigit = /[_a-zA-Z]/;

    function tokenLineComment$1(stream, state) {
      stream.skipToEnd();
      state.tokenize = null;
      return "comment";
    }

    function tokenBlockComment$1(stream, state) {
      var maybeEnd = false, ch;
      while (ch = stream.next()) {
        if (maybeEnd && ch == "/") {
          state.tokenize = null;
          break;
        }
        maybeEnd = (ch == "*");
      }
      return "comment";
    }

    function tokenString$j(stream, state) {
      var escaped = false, ch;
      while ((ch = stream.next()) != null) {
        if (ch == '"' && !escaped) {
          state.tokenize = null;
          state.sol = false;
          break;
        }
        escaped = !escaped && ch == "\\";
      }

      return "string";
    }

    function tokenIdent(stream, state) {
      stream.eatWhile(isDigit);
      while (stream.eat(isDigit) || stream.eat(isNonDigit)) { }


      var cur = stream.current();

      if(state.sol && (cur == "package" || cur == "model" || cur == "when" || cur == "connector")) state.level++;
      else if(state.sol && cur == "end" && state.level > 0) state.level--;

      state.tokenize = null;
      state.sol = false;

      if (keywords$o.propertyIsEnumerable(cur)) return "keyword";
      else if (builtin$1.propertyIsEnumerable(cur)) return "builtin";
      else if (atoms$7.propertyIsEnumerable(cur)) return "atom";
      else return "variable";
    }

    function tokenQIdent(stream, state) {
      while (stream.eat(/[^']/)) { }

      state.tokenize = null;
      state.sol = false;

      if(stream.eat("'"))
        return "variable";
      else
        return "error";
    }

    function tokenUnsignedNumber(stream, state) {
      stream.eatWhile(isDigit);
      if (stream.eat('.')) {
        stream.eatWhile(isDigit);
      }
      if (stream.eat('e') || stream.eat('E')) {
        if (!stream.eat('-'))
          stream.eat('+');
        stream.eatWhile(isDigit);
      }

      state.tokenize = null;
      state.sol = false;
      return "number";
    }

    // Interface
    const modelica = {
      startState: function() {
        return {
          tokenize: null,
          level: 0,
          sol: true
        };
      },

      token: function(stream, state) {
        if(state.tokenize != null) {
          return state.tokenize(stream, state);
        }

        if(stream.sol()) {
          state.sol = true;
        }

        // WHITESPACE
        if(stream.eatSpace()) {
          state.tokenize = null;
          return null;
        }

        var ch = stream.next();

        // LINECOMMENT
        if(ch == '/' && stream.eat('/')) {
          state.tokenize = tokenLineComment$1;
        }
        // BLOCKCOMMENT
        else if(ch == '/' && stream.eat('*')) {
          state.tokenize = tokenBlockComment$1;
        }
        // TWO SYMBOL TOKENS
        else if(isDoubleOperatorChar$1.test(ch+stream.peek())) {
          stream.next();
          state.tokenize = null;
          return "operator";
        }
        // SINGLE SYMBOL TOKENS
        else if(isSingleOperatorChar$1.test(ch)) {
          state.tokenize = null;
          return "operator";
        }
        // IDENT
        else if(isNonDigit.test(ch)) {
          state.tokenize = tokenIdent;
        }
        // Q-IDENT
        else if(ch == "'" && stream.peek() && stream.peek() != "'") {
          state.tokenize = tokenQIdent;
        }
        // STRING
        else if(ch == '"') {
          state.tokenize = tokenString$j;
        }
        // UNSIGNED_NUMBER
        else if(isDigit.test(ch)) {
          state.tokenize = tokenUnsignedNumber;
        }
        // ERROR
        else {
          state.tokenize = null;
          return "error";
        }

        return state.tokenize(stream, state);
      },

      indent: function(state, textAfter, cx) {
        if (state.tokenize != null) return null;

        var level = state.level;
        if(/(algorithm)/.test(textAfter)) level--;
        if(/(equation)/.test(textAfter)) level--;
        if(/(initial algorithm)/.test(textAfter)) level--;
        if(/(initial equation)/.test(textAfter)) level--;
        if(/(end)/.test(textAfter)) level--;

        if(level > 0)
          return cx.unit*level;
        else
          return 0;
      },

      languageData: {
        commentTokens: {line: "//", block: {open: "/*", close: "*/"}},
        autocomplete: completions
      }
    };

    var modelica$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        modelica: modelica
    });

    function wordRegexp$9(words) {
      return new RegExp("^((" + words.join(")|(") + "))\\b", "i");
    }

    var singleOperators$4 = new RegExp("^[\\+\\-\\*/&#!_?\\\\<>=\\'\\[\\]]");
    var doubleOperators$3 = new RegExp("^(('=)|(<=)|(>=)|('>)|('<)|([[)|(]])|(^$))");
    var singleDelimiters$2 = new RegExp("^[\\.,:]");
    var brackets = new RegExp("[()]");
    var identifiers$5 = new RegExp("^[%A-Za-z][A-Za-z0-9]*");
    var commandKeywords = ["break","close","do","else","for","goto", "halt", "hang", "if", "job","kill","lock","merge","new","open", "quit", "read", "set", "tcommit", "trollback", "tstart", "use", "view", "write", "xecute", "b","c","d","e","f","g", "h", "i", "j","k","l","m","n","o", "q", "r", "s", "tc", "tro", "ts", "u", "v", "w", "x"];
    // The following list includes intrinsic functions _and_ special variables
    var intrinsicFuncsWords = ["\\$ascii", "\\$char", "\\$data", "\\$ecode", "\\$estack", "\\$etrap", "\\$extract", "\\$find", "\\$fnumber", "\\$get", "\\$horolog", "\\$io", "\\$increment", "\\$job", "\\$justify", "\\$length", "\\$name", "\\$next", "\\$order", "\\$piece", "\\$qlength", "\\$qsubscript", "\\$query", "\\$quit", "\\$random", "\\$reverse", "\\$select", "\\$stack", "\\$test", "\\$text", "\\$translate", "\\$view", "\\$x", "\\$y", "\\$a", "\\$c", "\\$d", "\\$e", "\\$ec", "\\$es", "\\$et", "\\$f", "\\$fn", "\\$g", "\\$h", "\\$i", "\\$j", "\\$l", "\\$n", "\\$na", "\\$o", "\\$p", "\\$q", "\\$ql", "\\$qs", "\\$r", "\\$re", "\\$s", "\\$st", "\\$t", "\\$tr", "\\$v", "\\$z"];
    var intrinsicFuncs = wordRegexp$9(intrinsicFuncsWords);
    var command = wordRegexp$9(commandKeywords);

    function tokenBase$r(stream, state) {
      if (stream.sol()) {
        state.label = true;
        state.commandMode = 0;
      }

      // The <space> character has meaning in MUMPS. Ignoring consecutive
      // spaces would interfere with interpreting whether the next non-space
      // character belongs to the command or argument context.

      // Examine each character and update a mode variable whose interpretation is:
      //   >0 => command    0 => argument    <0 => command post-conditional
      var ch = stream.peek();

      if (ch == " " || ch == "\t") { // Pre-process <space>
        state.label = false;
        if (state.commandMode == 0)
          state.commandMode = 1;
        else if ((state.commandMode < 0) || (state.commandMode == 2))
          state.commandMode = 0;
      } else if ((ch != ".") && (state.commandMode > 0)) {
        if (ch == ":")
          state.commandMode = -1;   // SIS - Command post-conditional
        else
          state.commandMode = 2;
      }

      // Do not color parameter list as line tag
      if ((ch === "(") || (ch === "\u0009"))
        state.label = false;

      // MUMPS comment starts with ";"
      if (ch === ";") {
        stream.skipToEnd();
        return "comment";
      }

      // Number Literals // SIS/RLM - MUMPS permits canonic number followed by concatenate operator
      if (stream.match(/^[-+]?\d+(\.\d+)?([eE][-+]?\d+)?/))
        return "number";

      // Handle Strings
      if (ch == '"') {
        if (stream.skipTo('"')) {
          stream.next();
          return "string";
        } else {
          stream.skipToEnd();
          return "error";
        }
      }

      // Handle operators and Delimiters
      if (stream.match(doubleOperators$3) || stream.match(singleOperators$4))
        return "operator";

      // Prevents leading "." in DO block from falling through to error
      if (stream.match(singleDelimiters$2))
        return null;

      if (brackets.test(ch)) {
        stream.next();
        return "bracket";
      }

      if (state.commandMode > 0 && stream.match(command))
        return "controlKeyword";

      if (stream.match(intrinsicFuncs))
        return "builtin";

      if (stream.match(identifiers$5))
        return "variable";

      // Detect dollar-sign when not a documented intrinsic function
      // "^" may introduce a GVN or SSVN - Color same as function
      if (ch === "$" || ch === "^") {
        stream.next();
        return "builtin";
      }

      // MUMPS Indirection
      if (ch === "@") {
        stream.next();
        return "string.special";
      }

      if (/[\w%]/.test(ch)) {
        stream.eatWhile(/[\w%]/);
        return "variable";
      }

      // Handle non-detected items
      stream.next();
      return "error";
    }

    const mumps = {
      startState: function() {
        return {
          label: false,
          commandMode: 0
        };
      },

      token: function(stream, state) {
        var style = tokenBase$r(stream, state);
        if (state.label) return "tag";
        return style;
      }
    };

    var mumps$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        mumps: mumps
    });

    var rfc2822 = [
      "From", "Sender", "Reply-To", "To", "Cc", "Bcc", "Message-ID",
      "In-Reply-To", "References", "Resent-From", "Resent-Sender", "Resent-To",
      "Resent-Cc", "Resent-Bcc", "Resent-Message-ID", "Return-Path", "Received"
    ];
    var rfc2822NoEmail = [
      "Date", "Subject", "Comments", "Keywords", "Resent-Date"
    ];

    var whitespace = /^[ \t]/;
    var separator = /^From /; // See RFC 4155
    var rfc2822Header = new RegExp("^(" + rfc2822.join("|") + "): ");
    var rfc2822HeaderNoEmail = new RegExp("^(" + rfc2822NoEmail.join("|") + "): ");
    var header = /^[^:]+:/; // Optional fields defined in RFC 2822
    var email = /^[^ ]+@[^ ]+/;
    var untilEmail = /^.*?(?=[^ ]+?@[^ ]+)/;
    var bracketedEmail = /^<.*?>/;
    var untilBracketedEmail = /^.*?(?=<.*>)/;

    function styleForHeader(header) {
      if (header === "Subject") return "header";
      return "string";
    }

    function readToken$1(stream, state) {
      if (stream.sol()) {
        // From last line
        state.inSeparator = false;
        if (state.inHeader && stream.match(whitespace)) {
          // Header folding
          return null;
        } else {
          state.inHeader = false;
          state.header = null;
        }

        if (stream.match(separator)) {
          state.inHeaders = true;
          state.inSeparator = true;
          return "atom";
        }

        var match;
        var emailPermitted = false;
        if ((match = stream.match(rfc2822HeaderNoEmail)) ||
            (emailPermitted = true) && (match = stream.match(rfc2822Header))) {
          state.inHeaders = true;
          state.inHeader = true;
          state.emailPermitted = emailPermitted;
          state.header = match[1];
          return "atom";
        }

        // Use vim's heuristics: recognize custom headers only if the line is in a
        // block of legitimate headers.
        if (state.inHeaders && (match = stream.match(header))) {
          state.inHeader = true;
          state.emailPermitted = true;
          state.header = match[1];
          return "atom";
        }

        state.inHeaders = false;
        stream.skipToEnd();
        return null;
      }

      if (state.inSeparator) {
        if (stream.match(email)) return "link";
        if (stream.match(untilEmail)) return "atom";
        stream.skipToEnd();
        return "atom";
      }

      if (state.inHeader) {
        var style = styleForHeader(state.header);

        if (state.emailPermitted) {
          if (stream.match(bracketedEmail)) return style + " link";
          if (stream.match(untilBracketedEmail)) return style;
        }
        stream.skipToEnd();
        return style;
      }

      stream.skipToEnd();
      return null;
    }
    const mbox = {
      startState: function() {
        return {
          // Is in a mbox separator
          inSeparator: false,
          // Is in a mail header
          inHeader: false,
          // If bracketed email is permitted. Only applicable when inHeader
          emailPermitted: false,
          // Name of current header
          header: null,
          // Is in a region of mail headers
          inHeaders: false
        };
      },
      token: readToken$1,
      blankLine: function(state) {
        state.inHeaders = state.inSeparator = state.inHeader = false;
      },
      languageData: {
        autocomplete: rfc2822.concat(rfc2822NoEmail)
      }
    };

    var mbox$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        mbox: mbox
    });

    function words$b(str) {
      var obj = {}, words = str.split(" ");
      for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
      return obj;
    }

    var keywords$n = words$b(
      /* ngxDirectiveControl */ "break return rewrite set" +
        /* ngxDirective */ " accept_mutex accept_mutex_delay access_log add_after_body add_before_body add_header addition_types aio alias allow ancient_browser ancient_browser_value auth_basic auth_basic_user_file auth_http auth_http_header auth_http_timeout autoindex autoindex_exact_size autoindex_localtime charset charset_types client_body_buffer_size client_body_in_file_only client_body_in_single_buffer client_body_temp_path client_body_timeout client_header_buffer_size client_header_timeout client_max_body_size connection_pool_size create_full_put_path daemon dav_access dav_methods debug_connection debug_points default_type degradation degrade deny devpoll_changes devpoll_events directio directio_alignment empty_gif env epoll_events error_log eventport_events expires fastcgi_bind fastcgi_buffer_size fastcgi_buffers fastcgi_busy_buffers_size fastcgi_cache fastcgi_cache_key fastcgi_cache_methods fastcgi_cache_min_uses fastcgi_cache_path fastcgi_cache_use_stale fastcgi_cache_valid fastcgi_catch_stderr fastcgi_connect_timeout fastcgi_hide_header fastcgi_ignore_client_abort fastcgi_ignore_headers fastcgi_index fastcgi_intercept_errors fastcgi_max_temp_file_size fastcgi_next_upstream fastcgi_param fastcgi_pass_header fastcgi_pass_request_body fastcgi_pass_request_headers fastcgi_read_timeout fastcgi_send_lowat fastcgi_send_timeout fastcgi_split_path_info fastcgi_store fastcgi_store_access fastcgi_temp_file_write_size fastcgi_temp_path fastcgi_upstream_fail_timeout fastcgi_upstream_max_fails flv geoip_city geoip_country google_perftools_profiles gzip gzip_buffers gzip_comp_level gzip_disable gzip_hash gzip_http_version gzip_min_length gzip_no_buffer gzip_proxied gzip_static gzip_types gzip_vary gzip_window if_modified_since ignore_invalid_headers image_filter image_filter_buffer image_filter_jpeg_quality image_filter_transparency imap_auth imap_capabilities imap_client_buffer index ip_hash keepalive_requests keepalive_timeout kqueue_changes kqueue_events large_client_header_buffers limit_conn limit_conn_log_level limit_rate limit_rate_after limit_req limit_req_log_level limit_req_zone limit_zone lingering_time lingering_timeout lock_file log_format log_not_found log_subrequest map_hash_bucket_size map_hash_max_size master_process memcached_bind memcached_buffer_size memcached_connect_timeout memcached_next_upstream memcached_read_timeout memcached_send_timeout memcached_upstream_fail_timeout memcached_upstream_max_fails merge_slashes min_delete_depth modern_browser modern_browser_value msie_padding msie_refresh multi_accept open_file_cache open_file_cache_errors open_file_cache_events open_file_cache_min_uses open_file_cache_valid open_log_file_cache output_buffers override_charset perl perl_modules perl_require perl_set pid pop3_auth pop3_capabilities port_in_redirect postpone_gzipping postpone_output protocol proxy proxy_bind proxy_buffer proxy_buffer_size proxy_buffering proxy_buffers proxy_busy_buffers_size proxy_cache proxy_cache_key proxy_cache_methods proxy_cache_min_uses proxy_cache_path proxy_cache_use_stale proxy_cache_valid proxy_connect_timeout proxy_headers_hash_bucket_size proxy_headers_hash_max_size proxy_hide_header proxy_ignore_client_abort proxy_ignore_headers proxy_intercept_errors proxy_max_temp_file_size proxy_method proxy_next_upstream proxy_pass_error_message proxy_pass_header proxy_pass_request_body proxy_pass_request_headers proxy_read_timeout proxy_redirect proxy_send_lowat proxy_send_timeout proxy_set_body proxy_set_header proxy_ssl_session_reuse proxy_store proxy_store_access proxy_temp_file_write_size proxy_temp_path proxy_timeout proxy_upstream_fail_timeout proxy_upstream_max_fails random_index read_ahead real_ip_header recursive_error_pages request_pool_size reset_timedout_connection resolver resolver_timeout rewrite_log rtsig_overflow_events rtsig_overflow_test rtsig_overflow_threshold rtsig_signo satisfy secure_link_secret send_lowat send_timeout sendfile sendfile_max_chunk server_name_in_redirect server_names_hash_bucket_size server_names_hash_max_size server_tokens set_real_ip_from smtp_auth smtp_capabilities smtp_client_buffer smtp_greeting_delay so_keepalive source_charset ssi ssi_ignore_recycled_buffers ssi_min_file_chunk ssi_silent_errors ssi_types ssi_value_length ssl ssl_certificate ssl_certificate_key ssl_ciphers ssl_client_certificate ssl_crl ssl_dhparam ssl_engine ssl_prefer_server_ciphers ssl_protocols ssl_session_cache ssl_session_timeout ssl_verify_client ssl_verify_depth starttls stub_status sub_filter sub_filter_once sub_filter_types tcp_nodelay tcp_nopush thread_stack_size timeout timer_resolution types_hash_bucket_size types_hash_max_size underscores_in_headers uninitialized_variable_warn use user userid userid_domain userid_expires userid_mark userid_name userid_p3p userid_path userid_service valid_referers variables_hash_bucket_size variables_hash_max_size worker_connections worker_cpu_affinity worker_priority worker_processes worker_rlimit_core worker_rlimit_nofile worker_rlimit_sigpending worker_threads working_directory xclient xml_entities xslt_stylesheet xslt_typesdrew@li229-23"
    );

    var keywords_block = words$b(
      /* ngxDirectiveBlock */ "http mail events server types location upstream charset_map limit_except if geo map"
    );

    var keywords_important = words$b(
      /* ngxDirectiveImportant */ "include root server server_name listen internal proxy_pass memcached_pass fastcgi_pass try_files"
    );

    var type$2;
    function ret(style, tp) {type$2 = tp; return style;}

    function tokenBase$q(stream, state) {


      stream.eatWhile(/[\w\$_]/);

      var cur = stream.current();


      if (keywords$n.propertyIsEnumerable(cur)) {
        return "keyword";
      }
      else if (keywords_block.propertyIsEnumerable(cur)) {
        return "controlKeyword";
      }
      else if (keywords_important.propertyIsEnumerable(cur)) {
        return "controlKeyword";
      }
      /**/

      var ch = stream.next();
      if (ch == "@") {stream.eatWhile(/[\w\\\-]/); return ret("meta", stream.current());}
      else if (ch == "/" && stream.eat("*")) {
        state.tokenize = tokenCComment$2;
        return tokenCComment$2(stream, state);
      }
      else if (ch == "<" && stream.eat("!")) {
        state.tokenize = tokenSGMLComment;
        return tokenSGMLComment(stream, state);
      }
      else if (ch == "=") ret(null, "compare");
      else if ((ch == "~" || ch == "|") && stream.eat("=")) return ret(null, "compare");
      else if (ch == "\"" || ch == "'") {
        state.tokenize = tokenString$i(ch);
        return state.tokenize(stream, state);
      }
      else if (ch == "#") {
        stream.skipToEnd();
        return ret("comment", "comment");
      }
      else if (ch == "!") {
        stream.match(/^\s*\w*/);
        return ret("keyword", "important");
      }
      else if (/\d/.test(ch)) {
        stream.eatWhile(/[\w.%]/);
        return ret("number", "unit");
      }
      else if (/[,.+>*\/]/.test(ch)) {
        return ret(null, "select-op");
      }
      else if (/[;{}:\[\]]/.test(ch)) {
        return ret(null, ch);
      }
      else {
        stream.eatWhile(/[\w\\\-]/);
        return ret("variable", "variable");
      }
    }

    function tokenCComment$2(stream, state) {
      var maybeEnd = false, ch;
      while ((ch = stream.next()) != null) {
        if (maybeEnd && ch == "/") {
          state.tokenize = tokenBase$q;
          break;
        }
        maybeEnd = (ch == "*");
      }
      return ret("comment", "comment");
    }

    function tokenSGMLComment(stream, state) {
      var dashes = 0, ch;
      while ((ch = stream.next()) != null) {
        if (dashes >= 2 && ch == ">") {
          state.tokenize = tokenBase$q;
          break;
        }
        dashes = (ch == "-") ? dashes + 1 : 0;
      }
      return ret("comment", "comment");
    }

    function tokenString$i(quote) {
      return function(stream, state) {
        var escaped = false, ch;
        while ((ch = stream.next()) != null) {
          if (ch == quote && !escaped)
            break;
          escaped = !escaped && ch == "\\";
        }
        if (!escaped) state.tokenize = tokenBase$q;
        return ret("string", "string");
      };
    }

    const nginx = {
      startState: function() {
        return {tokenize: tokenBase$q,
                baseIndent: 0,
                stack: []};
      },

      token: function(stream, state) {
        if (stream.eatSpace()) return null;
        type$2 = null;
        var style = state.tokenize(stream, state);

        var context = state.stack[state.stack.length-1];
        if (type$2 == "hash" && context == "rule") style = "atom";
        else if (style == "variable") {
          if (context == "rule") style = "number";
          else if (!context || context == "@media{") style = "tag";
        }

        if (context == "rule" && /^[\{\};]$/.test(type$2))
          state.stack.pop();
        if (type$2 == "{") {
          if (context == "@media") state.stack[state.stack.length-1] = "@media{";
          else state.stack.push("{");
        }
        else if (type$2 == "}") state.stack.pop();
        else if (type$2 == "@media") state.stack.push("@media");
        else if (context == "{" && type$2 != "comment") state.stack.push("rule");
        return style;
      },

      indent: function(state, textAfter, cx) {
        var n = state.stack.length;
        if (/^\}/.test(textAfter))
          n -= state.stack[state.stack.length-1] == "rule" ? 2 : 1;
        return state.baseIndent + n * cx.unit;
      },

      languageData: {
        indentOnInput: /^\s*\}$/
      }
    };

    var nginx$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        nginx: nginx
    });

    const nsis = simpleMode({
      start:[
        // Numbers
        {regex: /(?:[+-]?)(?:0x[\d,a-f]+)|(?:0o[0-7]+)|(?:0b[0,1]+)|(?:\d+.?\d*)/, token: "number"},

        // Strings
        { regex: /"(?:[^\\"]|\\.)*"?/, token: "string" },
        { regex: /'(?:[^\\']|\\.)*'?/, token: "string" },
        { regex: /`(?:[^\\`]|\\.)*`?/, token: "string" },

        // Compile Time Commands
        {regex: /^\s*(?:\!(include|addincludedir|addplugindir|appendfile|cd|delfile|echo|error|execute|packhdr|pragma|finalize|getdllversion|gettlbversion|system|tempfile|warning|verbose|define|undef|insertmacro|macro|macroend|makensis|searchparse|searchreplace))\b/, token: "keyword"},

        // Conditional Compilation
        {regex: /^\s*(?:\!(if(?:n?def)?|ifmacron?def|macro))\b/, token: "keyword", indent: true},
        {regex: /^\s*(?:\!(else|endif|macroend))\b/, token: "keyword", dedent: true},

        // Runtime Commands
        {regex: /^\s*(?:Abort|AddBrandingImage|AddSize|AllowRootDirInstall|AllowSkipFiles|AutoCloseWindow|BGFont|BGGradient|BrandingText|BringToFront|Call|CallInstDLL|Caption|ChangeUI|CheckBitmap|ClearErrors|CompletedText|ComponentText|CopyFiles|CRCCheck|CreateDirectory|CreateFont|CreateShortCut|Delete|DeleteINISec|DeleteINIStr|DeleteRegKey|DeleteRegValue|DetailPrint|DetailsButtonText|DirText|DirVar|DirVerify|EnableWindow|EnumRegKey|EnumRegValue|Exch|Exec|ExecShell|ExecShellWait|ExecWait|ExpandEnvStrings|File|FileBufSize|FileClose|FileErrorText|FileOpen|FileRead|FileReadByte|FileReadUTF16LE|FileReadWord|FileWriteUTF16LE|FileSeek|FileWrite|FileWriteByte|FileWriteWord|FindClose|FindFirst|FindNext|FindWindow|FlushINI|GetCurInstType|GetCurrentAddress|GetDlgItem|GetDLLVersion|GetDLLVersionLocal|GetErrorLevel|GetFileTime|GetFileTimeLocal|GetFullPathName|GetFunctionAddress|GetInstDirError|GetKnownFolderPath|GetLabelAddress|GetTempFileName|Goto|HideWindow|Icon|IfAbort|IfErrors|IfFileExists|IfRebootFlag|IfRtlLanguage|IfShellVarContextAll|IfSilent|InitPluginsDir|InstallButtonText|InstallColors|InstallDir|InstallDirRegKey|InstProgressFlags|InstType|InstTypeGetText|InstTypeSetText|Int64Cmp|Int64CmpU|Int64Fmt|IntCmp|IntCmpU|IntFmt|IntOp|IntPtrCmp|IntPtrCmpU|IntPtrOp|IsWindow|LangString|LicenseBkColor|LicenseData|LicenseForceSelection|LicenseLangString|LicenseText|LoadAndSetImage|LoadLanguageFile|LockWindow|LogSet|LogText|ManifestDPIAware|ManifestLongPathAware|ManifestMaxVersionTested|ManifestSupportedOS|MessageBox|MiscButtonText|Name|Nop|OutFile|Page|PageCallbacks|PEAddResource|PEDllCharacteristics|PERemoveResource|PESubsysVer|Pop|Push|Quit|ReadEnvStr|ReadINIStr|ReadRegDWORD|ReadRegStr|Reboot|RegDLL|Rename|RequestExecutionLevel|ReserveFile|Return|RMDir|SearchPath|SectionGetFlags|SectionGetInstTypes|SectionGetSize|SectionGetText|SectionIn|SectionSetFlags|SectionSetInstTypes|SectionSetSize|SectionSetText|SendMessage|SetAutoClose|SetBrandingImage|SetCompress|SetCompressor|SetCompressorDictSize|SetCtlColors|SetCurInstType|SetDatablockOptimize|SetDateSave|SetDetailsPrint|SetDetailsView|SetErrorLevel|SetErrors|SetFileAttributes|SetFont|SetOutPath|SetOverwrite|SetRebootFlag|SetRegView|SetShellVarContext|SetSilent|ShowInstDetails|ShowUninstDetails|ShowWindow|SilentInstall|SilentUnInstall|Sleep|SpaceTexts|StrCmp|StrCmpS|StrCpy|StrLen|SubCaption|Unicode|UninstallButtonText|UninstallCaption|UninstallIcon|UninstallSubCaption|UninstallText|UninstPage|UnRegDLL|Var|VIAddVersionKey|VIFileVersion|VIProductVersion|WindowIcon|WriteINIStr|WriteRegBin|WriteRegDWORD|WriteRegExpandStr|WriteRegMultiStr|WriteRegNone|WriteRegStr|WriteUninstaller|XPStyle)\b/, token: "keyword"},
        {regex: /^\s*(?:Function|PageEx|Section(?:Group)?)\b/, token: "keyword", indent: true},
        {regex: /^\s*(?:(Function|PageEx|Section(?:Group)?)End)\b/, token: "keyword", dedent: true},

        // Command Options
        {regex: /\b(?:ARCHIVE|FILE_ATTRIBUTE_ARCHIVE|FILE_ATTRIBUTE_HIDDEN|FILE_ATTRIBUTE_NORMAL|FILE_ATTRIBUTE_OFFLINE|FILE_ATTRIBUTE_READONLY|FILE_ATTRIBUTE_SYSTEM|FILE_ATTRIBUTE_TEMPORARY|HIDDEN|HKCC|HKCR(32|64)?|HKCU(32|64)?|HKDD|HKEY_CLASSES_ROOT|HKEY_CURRENT_CONFIG|HKEY_CURRENT_USER|HKEY_DYN_DATA|HKEY_LOCAL_MACHINE|HKEY_PERFORMANCE_DATA|HKEY_USERS|HKLM(32|64)?|HKPD|HKU|IDABORT|IDCANCEL|IDD_DIR|IDD_INST|IDD_INSTFILES|IDD_LICENSE|IDD_SELCOM|IDD_UNINST|IDD_VERIFY|IDIGNORE|IDNO|IDOK|IDRETRY|IDYES|MB_ABORTRETRYIGNORE|MB_DEFBUTTON1|MB_DEFBUTTON2|MB_DEFBUTTON3|MB_DEFBUTTON4|MB_ICONEXCLAMATION|MB_ICONINFORMATION|MB_ICONQUESTION|MB_ICONSTOP|MB_OK|MB_OKCANCEL|MB_RETRYCANCEL|MB_RIGHT|MB_RTLREADING|MB_SETFOREGROUND|MB_TOPMOST|MB_USERICON|MB_YESNO|MB_YESNOCANCEL|NORMAL|OFFLINE|READONLY|SHCTX|SHELL_CONTEXT|SW_HIDE|SW_SHOWDEFAULT|SW_SHOWMAXIMIZED|SW_SHOWMINIMIZED|SW_SHOWNORMAL|SYSTEM|TEMPORARY)\b/, token: "atom"},
        {regex: /\b(?:admin|all|auto|both|bottom|bzip2|components|current|custom|directory|false|force|hide|highest|ifdiff|ifnewer|instfiles|lastused|leave|left|license|listonly|lzma|nevershow|none|normal|notset|off|on|right|show|silent|silentlog|textonly|top|true|try|un\.components|un\.custom|un\.directory|un\.instfiles|un\.license|uninstConfirm|user|Win10|Win7|Win8|WinVista|zlib)\b/, token: "builtin"},

        // LogicLib.nsh
        {regex: /\$\{(?:And(?:If(?:Not)?|Unless)|Break|Case(?:Else)?|Continue|Default|Do(?:Until|While)?|Else(?:If(?:Not)?|Unless)?|End(?:If|Select|Switch)|Exit(?:Do|For|While)|For(?:Each)?|If(?:Cmd|Not(?:Then)?|Then)?|Loop(?:Until|While)?|Or(?:If(?:Not)?|Unless)|Select|Switch|Unless|While)\}/, token: "controlKeyword", indent: true},

        // FileFunc.nsh
        {regex: /\$\{(?:BannerTrimPath|DirState|DriveSpace|Get(BaseName|Drives|ExeName|ExePath|FileAttributes|FileExt|FileName|FileVersion|Options|OptionsS|Parameters|Parent|Root|Size|Time)|Locate|RefreshShellIcons)\}/, token: "modifier", dedent: true},

        // Memento.nsh
        {regex: /\$\{(?:Memento(?:Section(?:Done|End|Restore|Save)?|UnselectedSection))\}/, token: "controlKeyword", dedent: true},

        // TextFunc.nsh
        {regex: /\$\{(?:Config(?:Read|ReadS|Write|WriteS)|File(?:Join|ReadFromEnd|Recode)|Line(?:Find|Read|Sum)|Text(?:Compare|CompareS)|TrimNewLines)\}/, token: "keyword", dedent: true},

        // WinVer.nsh
        {regex: /\$\{(?:(?:At(?:Least|Most)|Is)(?:ServicePack|Win(?:7|8|10|95|98|200(?:0|3|8(?:R2)?)|ME|NT4|Vista|XP))|Is(?:NT|Server))\}/, token: "variable", dedent: true},

        // WordFunc.nsh
        {regex: /\$\{(?:StrFilterS?|Version(?:Compare|Convert)|Word(?:AddS?|Find(?:(?:2|3)X)?S?|InsertS?|ReplaceS?))\}/, token: "keyword", dedent: true},

        // x64.nsh
        {regex: /\$\{(?:RunningX64)\}/, token: "variable", dedent: true},
        {regex: /\$\{(?:Disable|Enable)X64FSRedirection\}/, token: "keyword", dedent: true},

        // Line Comment
        {regex: /(#|;).*/, token: "comment"},

        // Block Comment
        {regex: /\/\*/, token: "comment", next: "comment"},

        // Operator
        {regex: /[-+\/*=<>!]+/, token: "operator"},

        // Variable
        {regex: /\$\w+/, token: "variable"},

        // Constant
        {regex: /\${[\w\.:-]+}/, token: "variableName.constant"},

        // Language String
        {regex: /\$\([\w\.:-]+\)/, token: "atom"}
      ],
      comment: [
        {regex: /.*?\*\//, token: "comment", next: "start"},
        {regex: /.*/, token: "comment"}
      ],
      languageData: {
        indentOnInput: /^\s*((Function|PageEx|Section|Section(Group)?)End|(\!(endif|macroend))|\$\{(End(If|Unless|While)|Loop(Until)|Next)\})$/,
        commentTokens: {line: "#", block: {open: "/*", close: "*/"}}
      }
    });

    var nsis$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        nsis: nsis
    });

    var Location = {
      PRE_SUBJECT         : 0,
      WRITING_SUB_URI     : 1,
      WRITING_BNODE_URI   : 2,
      PRE_PRED            : 3,
      WRITING_PRED_URI    : 4,
      PRE_OBJ             : 5,
      WRITING_OBJ_URI     : 6,
      WRITING_OBJ_BNODE   : 7,
      WRITING_OBJ_LITERAL : 8,
      WRITING_LIT_LANG    : 9,
      WRITING_LIT_TYPE    : 10,
      POST_OBJ            : 11,
      ERROR               : 12
    };
    function transitState(currState, c) {
      var currLocation = currState.location;
      var ret;

      // Opening.
      if     (currLocation == Location.PRE_SUBJECT && c == '<') ret = Location.WRITING_SUB_URI;
      else if(currLocation == Location.PRE_SUBJECT && c == '_') ret = Location.WRITING_BNODE_URI;
      else if(currLocation == Location.PRE_PRED    && c == '<') ret = Location.WRITING_PRED_URI;
      else if(currLocation == Location.PRE_OBJ     && c == '<') ret = Location.WRITING_OBJ_URI;
      else if(currLocation == Location.PRE_OBJ     && c == '_') ret = Location.WRITING_OBJ_BNODE;
      else if(currLocation == Location.PRE_OBJ     && c == '"') ret = Location.WRITING_OBJ_LITERAL;

      // Closing.
      else if(currLocation == Location.WRITING_SUB_URI     && c == '>') ret = Location.PRE_PRED;
      else if(currLocation == Location.WRITING_BNODE_URI   && c == ' ') ret = Location.PRE_PRED;
      else if(currLocation == Location.WRITING_PRED_URI    && c == '>') ret = Location.PRE_OBJ;
      else if(currLocation == Location.WRITING_OBJ_URI     && c == '>') ret = Location.POST_OBJ;
      else if(currLocation == Location.WRITING_OBJ_BNODE   && c == ' ') ret = Location.POST_OBJ;
      else if(currLocation == Location.WRITING_OBJ_LITERAL && c == '"') ret = Location.POST_OBJ;
      else if(currLocation == Location.WRITING_LIT_LANG && c == ' ') ret = Location.POST_OBJ;
      else if(currLocation == Location.WRITING_LIT_TYPE && c == '>') ret = Location.POST_OBJ;

      // Closing typed and language literal.
      else if(currLocation == Location.WRITING_OBJ_LITERAL && c == '@') ret = Location.WRITING_LIT_LANG;
      else if(currLocation == Location.WRITING_OBJ_LITERAL && c == '^') ret = Location.WRITING_LIT_TYPE;

      // Spaces.
      else if( c == ' ' &&
               (
                 currLocation == Location.PRE_SUBJECT ||
                   currLocation == Location.PRE_PRED    ||
                   currLocation == Location.PRE_OBJ     ||
                   currLocation == Location.POST_OBJ
               )
             ) ret = currLocation;

      // Reset.
      else if(currLocation == Location.POST_OBJ && c == '.') ret = Location.PRE_SUBJECT;

      // Error
      else ret = Location.ERROR;

      currState.location=ret;
    }

    const ntriples = {
      startState: function() {
        return {
          location : Location.PRE_SUBJECT,
          uris     : [],
          anchors  : [],
          bnodes   : [],
          langs    : [],
          types    : []
        };
      },
      token: function(stream, state) {
        var ch = stream.next();
        if(ch == '<') {
          transitState(state, ch);
          var parsedURI = '';
          stream.eatWhile( function(c) { if( c != '#' && c != '>' ) { parsedURI += c; return true; } return false;} );
          state.uris.push(parsedURI);
          if( stream.match('#', false) ) return 'variable';
          stream.next();
          transitState(state, '>');
          return 'variable';
        }
        if(ch == '#') {
          var parsedAnchor = '';
          stream.eatWhile(function(c) { if(c != '>' && c != ' ') { parsedAnchor+= c; return true; } return false;});
          state.anchors.push(parsedAnchor);
          return 'url';
        }
        if(ch == '>') {
          transitState(state, '>');
          return 'variable';
        }
        if(ch == '_') {
          transitState(state, ch);
          var parsedBNode = '';
          stream.eatWhile(function(c) { if( c != ' ' ) { parsedBNode += c; return true; } return false;});
          state.bnodes.push(parsedBNode);
          stream.next();
          transitState(state, ' ');
          return 'builtin';
        }
        if(ch == '"') {
          transitState(state, ch);
          stream.eatWhile( function(c) { return c != '"'; } );
          stream.next();
          if( stream.peek() != '@' && stream.peek() != '^' ) {
            transitState(state, '"');
          }
          return 'string';
        }
        if( ch == '@' ) {
          transitState(state, '@');
          var parsedLang = '';
          stream.eatWhile(function(c) { if( c != ' ' ) { parsedLang += c; return true; } return false;});
          state.langs.push(parsedLang);
          stream.next();
          transitState(state, ' ');
          return 'string.special';
        }
        if( ch == '^' ) {
          stream.next();
          transitState(state, '^');
          var parsedType = '';
          stream.eatWhile(function(c) { if( c != '>' ) { parsedType += c; return true; } return false;} );
          state.types.push(parsedType);
          stream.next();
          transitState(state, '>');
          return 'variable';
        }
        if( ch == ' ' ) {
          transitState(state, ch);
        }
        if( ch == '.' ) {
          transitState(state, ch);
        }
      }
    };

    var ntriples$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ntriples: ntriples
    });

    function wordRegexp$8(words) {
      return new RegExp("^((" + words.join(")|(") + "))\\b");
    }

    var singleOperators$3 = new RegExp("^[\\+\\-\\*/&|\\^~<>!@'\\\\]");
    var singleDelimiters$1 = new RegExp('^[\\(\\[\\{\\},:=;\\.]');
    var doubleOperators$2 = new RegExp("^((==)|(~=)|(<=)|(>=)|(<<)|(>>)|(\\.[\\+\\-\\*/\\^\\\\]))");
    var doubleDelimiters$1 = new RegExp("^((!=)|(\\+=)|(\\-=)|(\\*=)|(/=)|(&=)|(\\|=)|(\\^=))");
    var tripleDelimiters$1 = new RegExp("^((>>=)|(<<=))");
    var expressionEnd = new RegExp("^[\\]\\)]");
    var identifiers$4 = new RegExp("^[_A-Za-z\xa1-\uffff][_A-Za-z0-9\xa1-\uffff]*");

    var builtins$4 = wordRegexp$8([
      'error', 'eval', 'function', 'abs', 'acos', 'atan', 'asin', 'cos',
      'cosh', 'exp', 'log', 'prod', 'sum', 'log10', 'max', 'min', 'sign', 'sin', 'sinh',
      'sqrt', 'tan', 'reshape', 'break', 'zeros', 'default', 'margin', 'round', 'ones',
      'rand', 'syn', 'ceil', 'floor', 'size', 'clear', 'zeros', 'eye', 'mean', 'std', 'cov',
      'det', 'eig', 'inv', 'norm', 'rank', 'trace', 'expm', 'logm', 'sqrtm', 'linspace', 'plot',
      'title', 'xlabel', 'ylabel', 'legend', 'text', 'grid', 'meshgrid', 'mesh', 'num2str',
      'fft', 'ifft', 'arrayfun', 'cellfun', 'input', 'fliplr', 'flipud', 'ismember'
    ]);

    var keywords$m = wordRegexp$8([
      'return', 'case', 'switch', 'else', 'elseif', 'end', 'endif', 'endfunction',
      'if', 'otherwise', 'do', 'for', 'while', 'try', 'catch', 'classdef', 'properties', 'events',
      'methods', 'global', 'persistent', 'endfor', 'endwhile', 'printf', 'sprintf', 'disp', 'until',
      'continue', 'pkg'
    ]);


    // tokenizers
    function tokenTranspose(stream, state) {
      if (!stream.sol() && stream.peek() === '\'') {
        stream.next();
        state.tokenize = tokenBase$p;
        return 'operator';
      }
      state.tokenize = tokenBase$p;
      return tokenBase$p(stream, state);
    }


    function tokenComment$a(stream, state) {
      if (stream.match(/^.*%}/)) {
        state.tokenize = tokenBase$p;
        return 'comment';
      }  stream.skipToEnd();
      return 'comment';
    }

    function tokenBase$p(stream, state) {
      // whitespaces
      if (stream.eatSpace()) return null;

      // Handle one line Comments
      if (stream.match('%{')){
        state.tokenize = tokenComment$a;
        stream.skipToEnd();
        return 'comment';
      }

      if (stream.match(/^[%#]/)){
        stream.skipToEnd();
        return 'comment';
      }

      // Handle Number Literals
      if (stream.match(/^[0-9\.+-]/, false)) {
        if (stream.match(/^[+-]?0x[0-9a-fA-F]+[ij]?/)) {
          stream.tokenize = tokenBase$p;
          return 'number'; }    if (stream.match(/^[+-]?\d*\.\d+([EeDd][+-]?\d+)?[ij]?/)) { return 'number'; }    if (stream.match(/^[+-]?\d+([EeDd][+-]?\d+)?[ij]?/)) { return 'number'; }  }
      if (stream.match(wordRegexp$8(['nan','NaN','inf','Inf']))) { return 'number'; }
      // Handle Strings
      var m = stream.match(/^"(?:[^"]|"")*("|$)/) || stream.match(/^'(?:[^']|'')*('|$)/);
      if (m) { return m[1] ? 'string' : "error"; }

      // Handle words
      if (stream.match(keywords$m)) { return 'keyword'; }  if (stream.match(builtins$4)) { return 'builtin'; }  if (stream.match(identifiers$4)) { return 'variable'; }
      if (stream.match(singleOperators$3) || stream.match(doubleOperators$2)) { return 'operator'; }  if (stream.match(singleDelimiters$1) || stream.match(doubleDelimiters$1) || stream.match(tripleDelimiters$1)) { return null; }
      if (stream.match(expressionEnd)) {
        state.tokenize = tokenTranspose;
        return null;
      }

      // Handle non-detected items
      stream.next();
      return 'error';
    }

    const octave = {
      startState: function() {
        return {
          tokenize: tokenBase$p
        };
      },

      token: function(stream, state) {
        var style = state.tokenize(stream, state);
        if (style === 'number' || style === 'variable'){
          state.tokenize = tokenTranspose;
        }
        return style;
      },

      languageData: {
        commentTokens: {line: "%"}
      }
    };

    var octave$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        octave: octave
    });

    function wordRegexp$7(words) {
      return new RegExp("^((" + words.join(")|(") + "))\\b");
    }

    var singleOperators$2 = /[\^@!\|<>#~\.\*\-\+\\/,=]/;
    var doubleOperators$1 = /(<-)|(:=)|(=<)|(>=)|(<=)|(<:)|(>:)|(=:)|(\\=)|(\\=:)|(!!)|(==)|(::)/;
    var tripleOperators = /(:::)|(\.\.\.)|(=<:)|(>=:)/;

    var middle$1 = ["in", "then", "else", "of", "elseof", "elsecase", "elseif", "catch",
                  "finally", "with", "require", "prepare", "import", "export", "define", "do"];
    var end = ["end"];

    var atoms$6 = wordRegexp$7(["true", "false", "nil", "unit"]);
    var commonKeywords$3 = wordRegexp$7(["andthen", "at", "attr", "declare", "feat", "from", "lex",
                                     "mod", "div", "mode", "orelse", "parser", "prod", "prop", "scanner", "self", "syn", "token"]);
    var openingKeywords$1 = wordRegexp$7(["local", "proc", "fun", "case", "class", "if", "cond", "or", "dis",
                                      "choice", "not", "thread", "try", "raise", "lock", "for", "suchthat", "meth", "functor"]);
    var middleKeywords$1 = wordRegexp$7(middle$1);
    var endKeywords$1 = wordRegexp$7(end);

    // Tokenizers
    function tokenBase$o(stream, state) {
      if (stream.eatSpace()) {
        return null;
      }

      // Brackets
      if(stream.match(/[{}]/)) {
        return "bracket";
      }

      // Special [] keyword
      if (stream.match('[]')) {
        return "keyword"
      }

      // Operators
      if (stream.match(tripleOperators) || stream.match(doubleOperators$1)) {
        return "operator";
      }

      // Atoms
      if(stream.match(atoms$6)) {
        return 'atom';
      }

      // Opening keywords
      var matched = stream.match(openingKeywords$1);
      if (matched) {
        if (!state.doInCurrentLine)
          state.currentIndent++;
        else
          state.doInCurrentLine = false;

        // Special matching for signatures
        if(matched[0] == "proc" || matched[0] == "fun")
          state.tokenize = tokenFunProc;
        else if(matched[0] == "class")
          state.tokenize = tokenClass;
        else if(matched[0] == "meth")
          state.tokenize = tokenMeth;

        return 'keyword';
      }

      // Middle and other keywords
      if (stream.match(middleKeywords$1) || stream.match(commonKeywords$3)) {
        return "keyword"
      }

      // End keywords
      if (stream.match(endKeywords$1)) {
        state.currentIndent--;
        return 'keyword';
      }

      // Eat the next char for next comparisons
      var ch = stream.next();

      // Strings
      if (ch == '"' || ch == "'") {
        state.tokenize = tokenString$h(ch);
        return state.tokenize(stream, state);
      }

      // Numbers
      if (/[~\d]/.test(ch)) {
        if (ch == "~") {
          if(! /^[0-9]/.test(stream.peek()))
            return null;
          else if (( stream.next() == "0" && stream.match(/^[xX][0-9a-fA-F]+/)) || stream.match(/^[0-9]*(\.[0-9]+)?([eE][~+]?[0-9]+)?/))
            return "number";
        }

        if ((ch == "0" && stream.match(/^[xX][0-9a-fA-F]+/)) || stream.match(/^[0-9]*(\.[0-9]+)?([eE][~+]?[0-9]+)?/))
          return "number";

        return null;
      }

      // Comments
      if (ch == "%") {
        stream.skipToEnd();
        return 'comment';
      }
      else if (ch == "/") {
        if (stream.eat("*")) {
          state.tokenize = tokenComment$9;
          return tokenComment$9(stream, state);
        }
      }

      // Single operators
      if(singleOperators$2.test(ch)) {
        return "operator";
      }

      // If nothing match, we skip the entire alphanumerical block
      stream.eatWhile(/\w/);

      return "variable";
    }

    function tokenClass(stream, state) {
      if (stream.eatSpace()) {
        return null;
      }
      stream.match(/([A-Z][A-Za-z0-9_]*)|(`.+`)/);
      state.tokenize = tokenBase$o;
      return "type"
    }

    function tokenMeth(stream, state) {
      if (stream.eatSpace()) {
        return null;
      }
      stream.match(/([a-zA-Z][A-Za-z0-9_]*)|(`.+`)/);
      state.tokenize = tokenBase$o;
      return "def"
    }

    function tokenFunProc(stream, state) {
      if (stream.eatSpace()) {
        return null;
      }

      if(!state.hasPassedFirstStage && stream.eat("{")) {
        state.hasPassedFirstStage = true;
        return "bracket";
      }
      else if(state.hasPassedFirstStage) {
        stream.match(/([A-Z][A-Za-z0-9_]*)|(`.+`)|\$/);
        state.hasPassedFirstStage = false;
        state.tokenize = tokenBase$o;
        return "def"
      }
      else {
        state.tokenize = tokenBase$o;
        return null;
      }
    }

    function tokenComment$9(stream, state) {
      var maybeEnd = false, ch;
      while (ch = stream.next()) {
        if (ch == "/" && maybeEnd) {
          state.tokenize = tokenBase$o;
          break;
        }
        maybeEnd = (ch == "*");
      }
      return "comment";
    }

    function tokenString$h(quote) {
      return function (stream, state) {
        var escaped = false, next, end = false;
        while ((next = stream.next()) != null) {
          if (next == quote && !escaped) {
            end = true;
            break;
          }
          escaped = !escaped && next == "\\";
        }
        if (end || !escaped)
          state.tokenize = tokenBase$o;
        return "string";
      };
    }

    function buildElectricInputRegEx() {
      // Reindentation should occur on [] or on a match of any of
      // the block closing keywords, at the end of a line.
      var allClosings = middle$1.concat(end);
      return new RegExp("[\\[\\]]|(" + allClosings.join("|") + ")$");
    }

    const oz = {

      startState: function () {
        return {
          tokenize: tokenBase$o,
          currentIndent: 0,
          doInCurrentLine: false,
          hasPassedFirstStage: false
        };
      },

      token: function (stream, state) {
        if (stream.sol())
          state.doInCurrentLine = 0;

        return state.tokenize(stream, state);
      },

      indent: function (state, textAfter, cx) {
        var trueText = textAfter.replace(/^\s+|\s+$/g, '');

        if (trueText.match(endKeywords$1) || trueText.match(middleKeywords$1) || trueText.match(/(\[])/))
          return cx.unit * (state.currentIndent - 1);

        if (state.currentIndent < 0)
          return 0;

        return state.currentIndent * cx.unit
      },

      languageData: {
        indentOnInut: buildElectricInputRegEx(),
        commentTokens: {line: "%", block: {open: "/*", close: "*/"}}
      }
    };

    var oz$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        oz: oz
    });

    function words$a(str) {
      var obj = {}, words = str.split(" ");
      for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
      return obj;
    }
    var keywords$l = words$a(
      "absolute and array asm begin case const constructor destructor div do " +
        "downto else end file for function goto if implementation in inherited " +
        "inline interface label mod nil not object of operator or packed procedure " +
        "program record reintroduce repeat self set shl shr string then to type " +
        "unit until uses var while with xor as class dispinterface except exports " +
        "finalization finally initialization inline is library on out packed " +
        "property raise resourcestring threadvar try absolute abstract alias " +
        "assembler bitpacked break cdecl continue cppdecl cvar default deprecated " +
        "dynamic enumerator experimental export external far far16 forward generic " +
        "helper implements index interrupt iocheck local message name near " +
        "nodefault noreturn nostackframe oldfpccall otherwise overload override " +
        "pascal platform private protected public published read register " +
        "reintroduce result safecall saveregisters softfloat specialize static " +
        "stdcall stored strict unaligned unimplemented varargs virtual write");
    var atoms$5 = {"null": true};

    var isOperatorChar$7 = /[+\-*&%=<>!?|\/]/;

    function tokenBase$n(stream, state) {
      var ch = stream.next();
      if (ch == "#" && state.startOfLine) {
        stream.skipToEnd();
        return "meta";
      }
      if (ch == '"' || ch == "'") {
        state.tokenize = tokenString$g(ch);
        return state.tokenize(stream, state);
      }
      if (ch == "(" && stream.eat("*")) {
        state.tokenize = tokenComment$8;
        return tokenComment$8(stream, state);
      }
      if (ch == "{") {
        state.tokenize = tokenCommentBraces;
        return tokenCommentBraces(stream, state);
      }
      if (/[\[\]\(\),;\:\.]/.test(ch)) {
        return null;
      }
      if (/\d/.test(ch)) {
        stream.eatWhile(/[\w\.]/);
        return "number";
      }
      if (ch == "/") {
        if (stream.eat("/")) {
          stream.skipToEnd();
          return "comment";
        }
      }
      if (isOperatorChar$7.test(ch)) {
        stream.eatWhile(isOperatorChar$7);
        return "operator";
      }
      stream.eatWhile(/[\w\$_]/);
      var cur = stream.current();
      if (keywords$l.propertyIsEnumerable(cur)) return "keyword";
      if (atoms$5.propertyIsEnumerable(cur)) return "atom";
      return "variable";
    }

    function tokenString$g(quote) {
      return function(stream, state) {
        var escaped = false, next, end = false;
        while ((next = stream.next()) != null) {
          if (next == quote && !escaped) {end = true; break;}
          escaped = !escaped && next == "\\";
        }
        if (end || !escaped) state.tokenize = null;
        return "string";
      };
    }

    function tokenComment$8(stream, state) {
      var maybeEnd = false, ch;
      while (ch = stream.next()) {
        if (ch == ")" && maybeEnd) {
          state.tokenize = null;
          break;
        }
        maybeEnd = (ch == "*");
      }
      return "comment";
    }

    function tokenCommentBraces(stream, state) {
      var ch;
      while (ch = stream.next()) {
        if (ch == "}") {
          state.tokenize = null;
          break;
        }
      }
      return "comment";
    }

    // Interface

    const pascal = {
      startState: function() {
        return {tokenize: null};
      },

      token: function(stream, state) {
        if (stream.eatSpace()) return null;
        var style = (state.tokenize || tokenBase$n)(stream, state);
        if (style == "comment" || style == "meta") return style;
        return style;
      },

      languageData: {
        indentOnInput: /^\s*[{}]$/,
        commentTokens: {block: {open: "(*", close: "*)"}}
      }
    };

    var pascal$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        pascal: pascal
    });

    // it's like "peek", but need for look-ahead or look-behind if index < 0
    function look(stream, c){
      return stream.string.charAt(stream.pos+(c||0));
    }

    // return a part of prefix of current stream from current position
    function prefix(stream, c){
      if(c){
        var x=stream.pos-c;
        return stream.string.substr((x>=0?x:0),c);}
      else {
        return stream.string.substr(0,stream.pos-1);
      }
    }

    // return a part of suffix of current stream from current position
    function suffix(stream, c){
      var y=stream.string.length;
      var x=y-stream.pos+1;
      return stream.string.substr(stream.pos,(c&&c<y?c:x));
    }

    // eating and vomiting a part of stream from current position
    function eatSuffix(stream, c){
      var x=stream.pos+c;
      var y;
      if(x<=0)
        stream.pos=0;
      else if(x>=(y=stream.string.length-1))
        stream.pos=y;
      else
        stream.pos=x;
    }

    // http://perldoc.perl.org
    var PERL={                                      //   null - magic touch
      //   1 - keyword
      //   2 - def
      //   3 - atom
      //   4 - operator
      //   5 - builtin (predefined)
      //   [x,y] - x=1,2,3; y=must be defined if x{...}
      //      PERL operators
      '->':   4,
      '++':   4,
      '--':   4,
      '**':   4,
      //   ! ~ \ and unary + and -
      '=~':   4,
      '!~':   4,
      '*':   4,
      '/':   4,
      '%':   4,
      'x':   4,
      '+':   4,
      '-':   4,
      '.':   4,
      '<<':   4,
      '>>':   4,
      //   named unary operators
      '<':   4,
      '>':   4,
      '<=':   4,
      '>=':   4,
      'lt':   4,
      'gt':   4,
      'le':   4,
      'ge':   4,
      '==':   4,
      '!=':   4,
      '<=>':   4,
      'eq':   4,
      'ne':   4,
      'cmp':   4,
      '~~':   4,
      '&':   4,
      '|':   4,
      '^':   4,
      '&&':   4,
      '||':   4,
      '//':   4,
      '..':   4,
      '...':   4,
      '?':   4,
      ':':   4,
      '=':   4,
      '+=':   4,
      '-=':   4,
      '*=':   4,  //   etc. ???
      ',':   4,
      '=>':   4,
      '::':   4,
      //   list operators (rightward)
      'not':   4,
      'and':   4,
      'or':   4,
      'xor':   4,
      //      PERL predefined variables (I know, what this is a paranoid idea, but may be needed for people, who learn PERL, and for me as well, ...and may be for you?;)
      'BEGIN':   [5,1],
      'END':   [5,1],
      'PRINT':   [5,1],
      'PRINTF':   [5,1],
      'GETC':   [5,1],
      'READ':   [5,1],
      'READLINE':   [5,1],
      'DESTROY':   [5,1],
      'TIE':   [5,1],
      'TIEHANDLE':   [5,1],
      'UNTIE':   [5,1],
      'STDIN':    5,
      'STDIN_TOP':    5,
      'STDOUT':    5,
      'STDOUT_TOP':    5,
      'STDERR':    5,
      'STDERR_TOP':    5,
      '$ARG':    5,
      '$_':    5,
      '@ARG':    5,
      '@_':    5,
      '$LIST_SEPARATOR':    5,
      '$"':    5,
      '$PROCESS_ID':    5,
      '$PID':    5,
      '$$':    5,
      '$REAL_GROUP_ID':    5,
      '$GID':    5,
      '$(':    5,
      '$EFFECTIVE_GROUP_ID':    5,
      '$EGID':    5,
      '$)':    5,
      '$PROGRAM_NAME':    5,
      '$0':    5,
      '$SUBSCRIPT_SEPARATOR':    5,
      '$SUBSEP':    5,
      '$;':    5,
      '$REAL_USER_ID':    5,
      '$UID':    5,
      '$<':    5,
      '$EFFECTIVE_USER_ID':    5,
      '$EUID':    5,
      '$>':    5,
      '$a':    5,
      '$b':    5,
      '$COMPILING':    5,
      '$^C':    5,
      '$DEBUGGING':    5,
      '$^D':    5,
      '${^ENCODING}':    5,
      '$ENV':    5,
      '%ENV':    5,
      '$SYSTEM_FD_MAX':    5,
      '$^F':    5,
      '@F':    5,
      '${^GLOBAL_PHASE}':    5,
      '$^H':    5,
      '%^H':    5,
      '@INC':    5,
      '%INC':    5,
      '$INPLACE_EDIT':    5,
      '$^I':    5,
      '$^M':    5,
      '$OSNAME':    5,
      '$^O':    5,
      '${^OPEN}':    5,
      '$PERLDB':    5,
      '$^P':    5,
      '$SIG':    5,
      '%SIG':    5,
      '$BASETIME':    5,
      '$^T':    5,
      '${^TAINT}':    5,
      '${^UNICODE}':    5,
      '${^UTF8CACHE}':    5,
      '${^UTF8LOCALE}':    5,
      '$PERL_VERSION':    5,
      '$^V':    5,
      '${^WIN32_SLOPPY_STAT}':    5,
      '$EXECUTABLE_NAME':    5,
      '$^X':    5,
      '$1':    5, // - regexp $1, $2...
      '$MATCH':    5,
      '$&':    5,
      '${^MATCH}':    5,
      '$PREMATCH':    5,
      '$`':    5,
      '${^PREMATCH}':    5,
      '$POSTMATCH':    5,
      "$'":    5,
      '${^POSTMATCH}':    5,
      '$LAST_PAREN_MATCH':    5,
      '$+':    5,
      '$LAST_SUBMATCH_RESULT':    5,
      '$^N':    5,
      '@LAST_MATCH_END':    5,
      '@+':    5,
      '%LAST_PAREN_MATCH':    5,
      '%+':    5,
      '@LAST_MATCH_START':    5,
      '@-':    5,
      '%LAST_MATCH_START':    5,
      '%-':    5,
      '$LAST_REGEXP_CODE_RESULT':    5,
      '$^R':    5,
      '${^RE_DEBUG_FLAGS}':    5,
      '${^RE_TRIE_MAXBUF}':    5,
      '$ARGV':    5,
      '@ARGV':    5,
      'ARGV':    5,
      'ARGVOUT':    5,
      '$OUTPUT_FIELD_SEPARATOR':    5,
      '$OFS':    5,
      '$,':    5,
      '$INPUT_LINE_NUMBER':    5,
      '$NR':    5,
      '$.':    5,
      '$INPUT_RECORD_SEPARATOR':    5,
      '$RS':    5,
      '$/':    5,
      '$OUTPUT_RECORD_SEPARATOR':    5,
      '$ORS':    5,
      '$\\':    5,
      '$OUTPUT_AUTOFLUSH':    5,
      '$|':    5,
      '$ACCUMULATOR':    5,
      '$^A':    5,
      '$FORMAT_FORMFEED':    5,
      '$^L':    5,
      '$FORMAT_PAGE_NUMBER':    5,
      '$%':    5,
      '$FORMAT_LINES_LEFT':    5,
      '$-':    5,
      '$FORMAT_LINE_BREAK_CHARACTERS':    5,
      '$:':    5,
      '$FORMAT_LINES_PER_PAGE':    5,
      '$=':    5,
      '$FORMAT_TOP_NAME':    5,
      '$^':    5,
      '$FORMAT_NAME':    5,
      '$~':    5,
      '${^CHILD_ERROR_NATIVE}':    5,
      '$EXTENDED_OS_ERROR':    5,
      '$^E':    5,
      '$EXCEPTIONS_BEING_CAUGHT':    5,
      '$^S':    5,
      '$WARNING':    5,
      '$^W':    5,
      '${^WARNING_BITS}':    5,
      '$OS_ERROR':    5,
      '$ERRNO':    5,
      '$!':    5,
      '%OS_ERROR':    5,
      '%ERRNO':    5,
      '%!':    5,
      '$CHILD_ERROR':    5,
      '$?':    5,
      '$EVAL_ERROR':    5,
      '$@':    5,
      '$OFMT':    5,
      '$#':    5,
      '$*':    5,
      '$ARRAY_BASE':    5,
      '$[':    5,
      '$OLD_PERL_VERSION':    5,
      '$]':    5,
      //      PERL blocks
      'if':[1,1],
      elsif:[1,1],
      'else':[1,1],
      'while':[1,1],
      unless:[1,1],
      'for':[1,1],
      foreach:[1,1],
      //      PERL functions
      'abs':1,     // - absolute value function
      accept:1,     // - accept an incoming socket connect
      alarm:1,     // - schedule a SIGALRM
      'atan2':1,     // - arctangent of Y/X in the range -PI to PI
      bind:1,     // - binds an address to a socket
      binmode:1,     // - prepare binary files for I/O
      bless:1,     // - create an object
      bootstrap:1,     //
      'break':1,     // - break out of a "given" block
      caller:1,     // - get context of the current subroutine call
      chdir:1,     // - change your current working directory
      chmod:1,     // - changes the permissions on a list of files
      chomp:1,     // - remove a trailing record separator from a string
      chop:1,     // - remove the last character from a string
      chown:1,     // - change the ownership on a list of files
      chr:1,     // - get character this number represents
      chroot:1,     // - make directory new root for path lookups
      close:1,     // - close file (or pipe or socket) handle
      closedir:1,     // - close directory handle
      connect:1,     // - connect to a remote socket
      'continue':[1,1], // - optional trailing block in a while or foreach
      'cos':1,     // - cosine function
      crypt:1,     // - one-way passwd-style encryption
      dbmclose:1,     // - breaks binding on a tied dbm file
      dbmopen:1,     // - create binding on a tied dbm file
      'default':1,     //
      defined:1,     // - test whether a value, variable, or function is defined
      'delete':1,     // - deletes a value from a hash
      die:1,     // - raise an exception or bail out
      'do':1,     // - turn a BLOCK into a TERM
      dump:1,     // - create an immediate core dump
      each:1,     // - retrieve the next key/value pair from a hash
      endgrent:1,     // - be done using group file
      endhostent:1,     // - be done using hosts file
      endnetent:1,     // - be done using networks file
      endprotoent:1,     // - be done using protocols file
      endpwent:1,     // - be done using passwd file
      endservent:1,     // - be done using services file
      eof:1,     // - test a filehandle for its end
      'eval':1,     // - catch exceptions or compile and run code
      'exec':1,     // - abandon this program to run another
      exists:1,     // - test whether a hash key is present
      exit:1,     // - terminate this program
      'exp':1,     // - raise I to a power
      fcntl:1,     // - file control system call
      fileno:1,     // - return file descriptor from filehandle
      flock:1,     // - lock an entire file with an advisory lock
      fork:1,     // - create a new process just like this one
      format:1,     // - declare a picture format with use by the write() function
      formline:1,     // - internal function used for formats
      getc:1,     // - get the next character from the filehandle
      getgrent:1,     // - get next group record
      getgrgid:1,     // - get group record given group user ID
      getgrnam:1,     // - get group record given group name
      gethostbyaddr:1,     // - get host record given its address
      gethostbyname:1,     // - get host record given name
      gethostent:1,     // - get next hosts record
      getlogin:1,     // - return who logged in at this tty
      getnetbyaddr:1,     // - get network record given its address
      getnetbyname:1,     // - get networks record given name
      getnetent:1,     // - get next networks record
      getpeername:1,     // - find the other end of a socket connection
      getpgrp:1,     // - get process group
      getppid:1,     // - get parent process ID
      getpriority:1,     // - get current nice value
      getprotobyname:1,     // - get protocol record given name
      getprotobynumber:1,     // - get protocol record numeric protocol
      getprotoent:1,     // - get next protocols record
      getpwent:1,     // - get next passwd record
      getpwnam:1,     // - get passwd record given user login name
      getpwuid:1,     // - get passwd record given user ID
      getservbyname:1,     // - get services record given its name
      getservbyport:1,     // - get services record given numeric port
      getservent:1,     // - get next services record
      getsockname:1,     // - retrieve the sockaddr for a given socket
      getsockopt:1,     // - get socket options on a given socket
      given:1,     //
      glob:1,     // - expand filenames using wildcards
      gmtime:1,     // - convert UNIX time into record or string using Greenwich time
      'goto':1,     // - create spaghetti code
      grep:1,     // - locate elements in a list test true against a given criterion
      hex:1,     // - convert a string to a hexadecimal number
      'import':1,     // - patch a module's namespace into your own
      index:1,     // - find a substring within a string
      'int':1,     // - get the integer portion of a number
      ioctl:1,     // - system-dependent device control system call
      'join':1,     // - join a list into a string using a separator
      keys:1,     // - retrieve list of indices from a hash
      kill:1,     // - send a signal to a process or process group
      last:1,     // - exit a block prematurely
      lc:1,     // - return lower-case version of a string
      lcfirst:1,     // - return a string with just the next letter in lower case
      length:1,     // - return the number of bytes in a string
      'link':1,     // - create a hard link in the filesystem
      listen:1,     // - register your socket as a server
      local: 2,    // - create a temporary value for a global variable (dynamic scoping)
      localtime:1,     // - convert UNIX time into record or string using local time
      lock:1,     // - get a thread lock on a variable, subroutine, or method
      'log':1,     // - retrieve the natural logarithm for a number
      lstat:1,     // - stat a symbolic link
      m:null,  // - match a string with a regular expression pattern
      map:1,     // - apply a change to a list to get back a new list with the changes
      mkdir:1,     // - create a directory
      msgctl:1,     // - SysV IPC message control operations
      msgget:1,     // - get SysV IPC message queue
      msgrcv:1,     // - receive a SysV IPC message from a message queue
      msgsnd:1,     // - send a SysV IPC message to a message queue
      my: 2,    // - declare and assign a local variable (lexical scoping)
      'new':1,     //
      next:1,     // - iterate a block prematurely
      no:1,     // - unimport some module symbols or semantics at compile time
      oct:1,     // - convert a string to an octal number
      open:1,     // - open a file, pipe, or descriptor
      opendir:1,     // - open a directory
      ord:1,     // - find a character's numeric representation
      our: 2,    // - declare and assign a package variable (lexical scoping)
      pack:1,     // - convert a list into a binary representation
      'package':1,     // - declare a separate global namespace
      pipe:1,     // - open a pair of connected filehandles
      pop:1,     // - remove the last element from an array and return it
      pos:1,     // - find or set the offset for the last/next m//g search
      print:1,     // - output a list to a filehandle
      printf:1,     // - output a formatted list to a filehandle
      prototype:1,     // - get the prototype (if any) of a subroutine
      push:1,     // - append one or more elements to an array
      q:null,  // - singly quote a string
      qq:null,  // - doubly quote a string
      qr:null,  // - Compile pattern
      quotemeta:null,  // - quote regular expression magic characters
      qw:null,  // - quote a list of words
      qx:null,  // - backquote quote a string
      rand:1,     // - retrieve the next pseudorandom number
      read:1,     // - fixed-length buffered input from a filehandle
      readdir:1,     // - get a directory from a directory handle
      readline:1,     // - fetch a record from a file
      readlink:1,     // - determine where a symbolic link is pointing
      readpipe:1,     // - execute a system command and collect standard output
      recv:1,     // - receive a message over a Socket
      redo:1,     // - start this loop iteration over again
      ref:1,     // - find out the type of thing being referenced
      rename:1,     // - change a filename
      require:1,     // - load in external functions from a library at runtime
      reset:1,     // - clear all variables of a given name
      'return':1,     // - get out of a function early
      reverse:1,     // - flip a string or a list
      rewinddir:1,     // - reset directory handle
      rindex:1,     // - right-to-left substring search
      rmdir:1,     // - remove a directory
      s:null,  // - replace a pattern with a string
      say:1,     // - print with newline
      scalar:1,     // - force a scalar context
      seek:1,     // - reposition file pointer for random-access I/O
      seekdir:1,     // - reposition directory pointer
      select:1,     // - reset default output or do I/O multiplexing
      semctl:1,     // - SysV semaphore control operations
      semget:1,     // - get set of SysV semaphores
      semop:1,     // - SysV semaphore operations
      send:1,     // - send a message over a socket
      setgrent:1,     // - prepare group file for use
      sethostent:1,     // - prepare hosts file for use
      setnetent:1,     // - prepare networks file for use
      setpgrp:1,     // - set the process group of a process
      setpriority:1,     // - set a process's nice value
      setprotoent:1,     // - prepare protocols file for use
      setpwent:1,     // - prepare passwd file for use
      setservent:1,     // - prepare services file for use
      setsockopt:1,     // - set some socket options
      shift:1,     // - remove the first element of an array, and return it
      shmctl:1,     // - SysV shared memory operations
      shmget:1,     // - get SysV shared memory segment identifier
      shmread:1,     // - read SysV shared memory
      shmwrite:1,     // - write SysV shared memory
      shutdown:1,     // - close down just half of a socket connection
      'sin':1,     // - return the sine of a number
      sleep:1,     // - block for some number of seconds
      socket:1,     // - create a socket
      socketpair:1,     // - create a pair of sockets
      'sort':1,     // - sort a list of values
      splice:1,     // - add or remove elements anywhere in an array
      'split':1,     // - split up a string using a regexp delimiter
      sprintf:1,     // - formatted print into a string
      'sqrt':1,     // - square root function
      srand:1,     // - seed the random number generator
      stat:1,     // - get a file's status information
      state:1,     // - declare and assign a state variable (persistent lexical scoping)
      study:1,     // - optimize input data for repeated searches
      'sub':1,     // - declare a subroutine, possibly anonymously
      'substr':1,     // - get or alter a portion of a string
      symlink:1,     // - create a symbolic link to a file
      syscall:1,     // - execute an arbitrary system call
      sysopen:1,     // - open a file, pipe, or descriptor
      sysread:1,     // - fixed-length unbuffered input from a filehandle
      sysseek:1,     // - position I/O pointer on handle used with sysread and syswrite
      system:1,     // - run a separate program
      syswrite:1,     // - fixed-length unbuffered output to a filehandle
      tell:1,     // - get current seekpointer on a filehandle
      telldir:1,     // - get current seekpointer on a directory handle
      tie:1,     // - bind a variable to an object class
      tied:1,     // - get a reference to the object underlying a tied variable
      time:1,     // - return number of seconds since 1970
      times:1,     // - return elapsed time for self and child processes
      tr:null,  // - transliterate a string
      truncate:1,     // - shorten a file
      uc:1,     // - return upper-case version of a string
      ucfirst:1,     // - return a string with just the next letter in upper case
      umask:1,     // - set file creation mode mask
      undef:1,     // - remove a variable or function definition
      unlink:1,     // - remove one link to a file
      unpack:1,     // - convert binary structure into normal perl variables
      unshift:1,     // - prepend more elements to the beginning of a list
      untie:1,     // - break a tie binding to a variable
      use:1,     // - load in a module at compile time
      utime:1,     // - set a file's last access and modify times
      values:1,     // - return a list of the values in a hash
      vec:1,     // - test or set particular bits in a string
      wait:1,     // - wait for any child process to die
      waitpid:1,     // - wait for a particular child process to die
      wantarray:1,     // - get void vs scalar vs list context of current subroutine call
      warn:1,     // - print debugging info
      when:1,     //
      write:1,     // - print a picture record
      y:null}; // - transliterate a string

    var RXstyle="string.special";
    var RXmodifiers=/[goseximacplud]/;              // NOTE: "m", "s", "y" and "tr" need to correct real modifiers for each regexp type

    function tokenChain(stream,state,chain,style,tail){     // NOTE: chain.length > 2 is not working now (it's for s[...][...]geos;)
      state.chain=null;                               //                                                          12   3tail
      state.style=null;
      state.tail=null;
      state.tokenize=function(stream,state){
        var e=false,c,i=0;
        while(c=stream.next()){
          if(c===chain[i]&&!e){
            if(chain[++i]!==undefined){
              state.chain=chain[i];
              state.style=style;
              state.tail=tail;}
            else if(tail)
              stream.eatWhile(tail);
            state.tokenize=tokenPerl;
            return style;}
          e=!e&&c=="\\";}
        return style;};
      return state.tokenize(stream,state);}

    function tokenSOMETHING(stream,state,string){
      state.tokenize=function(stream,state){
        if(stream.string==string)
          state.tokenize=tokenPerl;
        stream.skipToEnd();
        return "string";};
      return state.tokenize(stream,state);}

    function tokenPerl(stream,state){
      if(stream.eatSpace())
        return null;
      if(state.chain)
        return tokenChain(stream,state,state.chain,state.style,state.tail);
      if(stream.match(/^\-?[\d\.]/,false))
        if(stream.match(/^(\-?(\d*\.\d+(e[+-]?\d+)?|\d+\.\d*)|0x[\da-fA-F]+|0b[01]+|\d+(e[+-]?\d+)?)/))
          return 'number';
      if(stream.match(/^<<(?=[_a-zA-Z])/)){                  // NOTE: <<SOMETHING\n...\nSOMETHING\n
        stream.eatWhile(/\w/);
        return tokenSOMETHING(stream,state,stream.current().substr(2));}
      if(stream.sol()&&stream.match(/^\=item(?!\w)/)){// NOTE: \n=item...\n=cut\n
        return tokenSOMETHING(stream,state,'=cut');}
      var ch=stream.next();
      if(ch=='"'||ch=="'"){                           // NOTE: ' or " or <<'SOMETHING'\n...\nSOMETHING\n or <<"SOMETHING"\n...\nSOMETHING\n
        if(prefix(stream, 3)=="<<"+ch){
          var p=stream.pos;
          stream.eatWhile(/\w/);
          var n=stream.current().substr(1);
          if(n&&stream.eat(ch))
            return tokenSOMETHING(stream,state,n);
          stream.pos=p;}
        return tokenChain(stream,state,[ch],"string");}
      if(ch=="q"){
        var c=look(stream, -2);
        if(!(c&&/\w/.test(c))){
          c=look(stream, 0);
          if(c=="x"){
            c=look(stream, 1);
            if(c=="("){
              eatSuffix(stream, 2);
              return tokenChain(stream,state,[")"],RXstyle,RXmodifiers);}
            if(c=="["){
              eatSuffix(stream, 2);
              return tokenChain(stream,state,["]"],RXstyle,RXmodifiers);}
            if(c=="{"){
              eatSuffix(stream, 2);
              return tokenChain(stream,state,["}"],RXstyle,RXmodifiers);}
            if(c=="<"){
              eatSuffix(stream, 2);
              return tokenChain(stream,state,[">"],RXstyle,RXmodifiers);}
            if(/[\^'"!~\/]/.test(c)){
              eatSuffix(stream, 1);
              return tokenChain(stream,state,[stream.eat(c)],RXstyle,RXmodifiers);}}
          else if(c=="q"){
            c=look(stream, 1);
            if(c=="("){
              eatSuffix(stream, 2);
              return tokenChain(stream,state,[")"],"string");}
            if(c=="["){
              eatSuffix(stream, 2);
              return tokenChain(stream,state,["]"],"string");}
            if(c=="{"){
              eatSuffix(stream, 2);
              return tokenChain(stream,state,["}"],"string");}
            if(c=="<"){
              eatSuffix(stream, 2);
              return tokenChain(stream,state,[">"],"string");}
            if(/[\^'"!~\/]/.test(c)){
              eatSuffix(stream, 1);
              return tokenChain(stream,state,[stream.eat(c)],"string");}}
          else if(c=="w"){
            c=look(stream, 1);
            if(c=="("){
              eatSuffix(stream, 2);
              return tokenChain(stream,state,[")"],"bracket");}
            if(c=="["){
              eatSuffix(stream, 2);
              return tokenChain(stream,state,["]"],"bracket");}
            if(c=="{"){
              eatSuffix(stream, 2);
              return tokenChain(stream,state,["}"],"bracket");}
            if(c=="<"){
              eatSuffix(stream, 2);
              return tokenChain(stream,state,[">"],"bracket");}
            if(/[\^'"!~\/]/.test(c)){
              eatSuffix(stream, 1);
              return tokenChain(stream,state,[stream.eat(c)],"bracket");}}
          else if(c=="r"){
            c=look(stream, 1);
            if(c=="("){
              eatSuffix(stream, 2);
              return tokenChain(stream,state,[")"],RXstyle,RXmodifiers);}
            if(c=="["){
              eatSuffix(stream, 2);
              return tokenChain(stream,state,["]"],RXstyle,RXmodifiers);}
            if(c=="{"){
              eatSuffix(stream, 2);
              return tokenChain(stream,state,["}"],RXstyle,RXmodifiers);}
            if(c=="<"){
              eatSuffix(stream, 2);
              return tokenChain(stream,state,[">"],RXstyle,RXmodifiers);}
            if(/[\^'"!~\/]/.test(c)){
              eatSuffix(stream, 1);
              return tokenChain(stream,state,[stream.eat(c)],RXstyle,RXmodifiers);}}
          else if(/[\^'"!~\/(\[{<]/.test(c)){
            if(c=="("){
              eatSuffix(stream, 1);
              return tokenChain(stream,state,[")"],"string");}
            if(c=="["){
              eatSuffix(stream, 1);
              return tokenChain(stream,state,["]"],"string");}
            if(c=="{"){
              eatSuffix(stream, 1);
              return tokenChain(stream,state,["}"],"string");}
            if(c=="<"){
              eatSuffix(stream, 1);
              return tokenChain(stream,state,[">"],"string");}
            if(/[\^'"!~\/]/.test(c)){
              return tokenChain(stream,state,[stream.eat(c)],"string");}}}}
      if(ch=="m"){
        var c=look(stream, -2);
        if(!(c&&/\w/.test(c))){
          c=stream.eat(/[(\[{<\^'"!~\/]/);
          if(c){
            if(/[\^'"!~\/]/.test(c)){
              return tokenChain(stream,state,[c],RXstyle,RXmodifiers);}
            if(c=="("){
              return tokenChain(stream,state,[")"],RXstyle,RXmodifiers);}
            if(c=="["){
              return tokenChain(stream,state,["]"],RXstyle,RXmodifiers);}
            if(c=="{"){
              return tokenChain(stream,state,["}"],RXstyle,RXmodifiers);}
            if(c=="<"){
              return tokenChain(stream,state,[">"],RXstyle,RXmodifiers);}}}}
      if(ch=="s"){
        var c=/[\/>\]})\w]/.test(look(stream, -2));
        if(!c){
          c=stream.eat(/[(\[{<\^'"!~\/]/);
          if(c){
            if(c=="[")
              return tokenChain(stream,state,["]","]"],RXstyle,RXmodifiers);
            if(c=="{")
              return tokenChain(stream,state,["}","}"],RXstyle,RXmodifiers);
            if(c=="<")
              return tokenChain(stream,state,[">",">"],RXstyle,RXmodifiers);
            if(c=="(")
              return tokenChain(stream,state,[")",")"],RXstyle,RXmodifiers);
            return tokenChain(stream,state,[c,c],RXstyle,RXmodifiers);}}}
      if(ch=="y"){
        var c=/[\/>\]})\w]/.test(look(stream, -2));
        if(!c){
          c=stream.eat(/[(\[{<\^'"!~\/]/);
          if(c){
            if(c=="[")
              return tokenChain(stream,state,["]","]"],RXstyle,RXmodifiers);
            if(c=="{")
              return tokenChain(stream,state,["}","}"],RXstyle,RXmodifiers);
            if(c=="<")
              return tokenChain(stream,state,[">",">"],RXstyle,RXmodifiers);
            if(c=="(")
              return tokenChain(stream,state,[")",")"],RXstyle,RXmodifiers);
            return tokenChain(stream,state,[c,c],RXstyle,RXmodifiers);}}}
      if(ch=="t"){
        var c=/[\/>\]})\w]/.test(look(stream, -2));
        if(!c){
          c=stream.eat("r");if(c){
            c=stream.eat(/[(\[{<\^'"!~\/]/);
            if(c){
              if(c=="[")
                return tokenChain(stream,state,["]","]"],RXstyle,RXmodifiers);
              if(c=="{")
                return tokenChain(stream,state,["}","}"],RXstyle,RXmodifiers);
              if(c=="<")
                return tokenChain(stream,state,[">",">"],RXstyle,RXmodifiers);
              if(c=="(")
                return tokenChain(stream,state,[")",")"],RXstyle,RXmodifiers);
              return tokenChain(stream,state,[c,c],RXstyle,RXmodifiers);}}}}
      if(ch=="`"){
        return tokenChain(stream,state,[ch],"builtin");}
      if(ch=="/"){
        if(!/~\s*$/.test(prefix(stream)))
          return "operator";
        else
          return tokenChain(stream,state,[ch],RXstyle,RXmodifiers);}
      if(ch=="$"){
        var p=stream.pos;
        if(stream.eatWhile(/\d/)||stream.eat("{")&&stream.eatWhile(/\d/)&&stream.eat("}"))
          return "builtin";
        else
          stream.pos=p;}
      if(/[$@%]/.test(ch)){
        var p=stream.pos;
        if(stream.eat("^")&&stream.eat(/[A-Z]/)||!/[@$%&]/.test(look(stream, -2))&&stream.eat(/[=|\\\-#?@;:&`~\^!\[\]*'"$+.,\/<>()]/)){
          var c=stream.current();
          if(PERL[c])
            return "builtin";}
        stream.pos=p;}
      if(/[$@%&]/.test(ch)){
        if(stream.eatWhile(/[\w$]/)||stream.eat("{")&&stream.eatWhile(/[\w$]/)&&stream.eat("}")){
          var c=stream.current();
          if(PERL[c])
            return "builtin";
          else
            return "variable";}}
      if(ch=="#"){
        if(look(stream, -2)!="$"){
          stream.skipToEnd();
          return "comment";}}
      if(/[:+\-\^*$&%@=<>!?|\/~\.]/.test(ch)){
        var p=stream.pos;
        stream.eatWhile(/[:+\-\^*$&%@=<>!?|\/~\.]/);
        if(PERL[stream.current()])
          return "operator";
        else
          stream.pos=p;}
      if(ch=="_"){
        if(stream.pos==1){
          if(suffix(stream, 6)=="_END__"){
            return tokenChain(stream,state,['\0'],"comment");}
          else if(suffix(stream, 7)=="_DATA__"){
            return tokenChain(stream,state,['\0'],"builtin");}
          else if(suffix(stream, 7)=="_C__"){
            return tokenChain(stream,state,['\0'],"string");}}}
      if(/\w/.test(ch)){
        var p=stream.pos;
        if(look(stream, -2)=="{"&&(look(stream, 0)=="}"||stream.eatWhile(/\w/)&&look(stream, 0)=="}"))
          return "string";
        else
          stream.pos=p;}
      if(/[A-Z]/.test(ch)){
        var l=look(stream, -2);
        var p=stream.pos;
        stream.eatWhile(/[A-Z_]/);
        if(/[\da-z]/.test(look(stream, 0))){
          stream.pos=p;}
        else {
          var c=PERL[stream.current()];
          if(!c)
            return "meta";
          if(c[1])
            c=c[0];
          if(l!=":"){
            if(c==1)
              return "keyword";
            else if(c==2)
              return "def";
            else if(c==3)
              return "atom";
            else if(c==4)
              return "operator";
            else if(c==5)
              return "builtin";
            else
              return "meta";}
          else
            return "meta";}}
      if(/[a-zA-Z_]/.test(ch)){
        var l=look(stream, -2);
        stream.eatWhile(/\w/);
        var c=PERL[stream.current()];
        if(!c)
          return "meta";
        if(c[1])
          c=c[0];
        if(l!=":"){
          if(c==1)
            return "keyword";
          else if(c==2)
            return "def";
          else if(c==3)
            return "atom";
          else if(c==4)
            return "operator";
          else if(c==5)
            return "builtin";
          else
            return "meta";}
        else
          return "meta";}
      return null;}

    const perl = {
      startState: function() {
        return {
          tokenize: tokenPerl,
          chain: null,
          style: null,
          tail: null
        };
      },
      token: function(stream, state) {
        return (state.tokenize || tokenPerl)(stream, state);
      },
      languageData: {
        commentTokens: {line: "#"},
        wordChars: "$"
      }
    };

    var perl$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        perl: perl
    });

    function words$9(str) {
      var obj = {}, words = str.split(" ");
      for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
      return obj;
    }

    // builtin funcs taken from trunk revision 1303237
    var pBuiltins = "ABS ACOS ARITY ASIN ATAN AVG BAGSIZE BINSTORAGE BLOOM BUILDBLOOM CBRT CEIL "
        + "CONCAT COR COS COSH COUNT COUNT_STAR COV CONSTANTSIZE CUBEDIMENSIONS DIFF DISTINCT DOUBLEABS "
        + "DOUBLEAVG DOUBLEBASE DOUBLEMAX DOUBLEMIN DOUBLEROUND DOUBLESUM EXP FLOOR FLOATABS FLOATAVG "
        + "FLOATMAX FLOATMIN FLOATROUND FLOATSUM GENERICINVOKER INDEXOF INTABS INTAVG INTMAX INTMIN "
        + "INTSUM INVOKEFORDOUBLE INVOKEFORFLOAT INVOKEFORINT INVOKEFORLONG INVOKEFORSTRING INVOKER "
        + "ISEMPTY JSONLOADER JSONMETADATA JSONSTORAGE LAST_INDEX_OF LCFIRST LOG LOG10 LOWER LONGABS "
        + "LONGAVG LONGMAX LONGMIN LONGSUM MAX MIN MAPSIZE MONITOREDUDF NONDETERMINISTIC OUTPUTSCHEMA  "
        + "PIGSTORAGE PIGSTREAMING RANDOM REGEX_EXTRACT REGEX_EXTRACT_ALL REPLACE ROUND SIN SINH SIZE "
        + "SQRT STRSPLIT SUBSTRING SUM STRINGCONCAT STRINGMAX STRINGMIN STRINGSIZE TAN TANH TOBAG "
        + "TOKENIZE TOMAP TOP TOTUPLE TRIM TEXTLOADER TUPLESIZE UCFIRST UPPER UTF8STORAGECONVERTER ";

    // taken from QueryLexer.g
    var pKeywords = "VOID IMPORT RETURNS DEFINE LOAD FILTER FOREACH ORDER CUBE DISTINCT COGROUP "
        + "JOIN CROSS UNION SPLIT INTO IF OTHERWISE ALL AS BY USING INNER OUTER ONSCHEMA PARALLEL "
        + "PARTITION GROUP AND OR NOT GENERATE FLATTEN ASC DESC IS STREAM THROUGH STORE MAPREDUCE "
        + "SHIP CACHE INPUT OUTPUT STDERROR STDIN STDOUT LIMIT SAMPLE LEFT RIGHT FULL EQ GT LT GTE LTE "
        + "NEQ MATCHES TRUE FALSE DUMP";

    // data types
    var pTypes = "BOOLEAN INT LONG FLOAT DOUBLE CHARARRAY BYTEARRAY BAG TUPLE MAP ";

    var builtins$3 = words$9(pBuiltins), keywords$k = words$9(pKeywords), types$4 = words$9(pTypes);

    var isOperatorChar$6 = /[*+\-%<>=&?:\/!|]/;

    function chain$5(stream, state, f) {
      state.tokenize = f;
      return f(stream, state);
    }

    function tokenComment$7(stream, state) {
      var isEnd = false;
      var ch;
      while(ch = stream.next()) {
        if(ch == "/" && isEnd) {
          state.tokenize = tokenBase$m;
          break;
        }
        isEnd = (ch == "*");
      }
      return "comment";
    }

    function tokenString$f(quote) {
      return function(stream, state) {
        var escaped = false, next, end = false;
        while((next = stream.next()) != null) {
          if (next == quote && !escaped) {
            end = true; break;
          }
          escaped = !escaped && next == "\\";
        }
        if (end || !escaped)
          state.tokenize = tokenBase$m;
        return "error";
      };
    }


    function tokenBase$m(stream, state) {
      var ch = stream.next();

      // is a start of string?
      if (ch == '"' || ch == "'")
        return chain$5(stream, state, tokenString$f(ch));
      // is it one of the special chars
      else if(/[\[\]{}\(\),;\.]/.test(ch))
        return null;
      // is it a number?
      else if(/\d/.test(ch)) {
        stream.eatWhile(/[\w\.]/);
        return "number";
      }
      // multi line comment or operator
      else if (ch == "/") {
        if (stream.eat("*")) {
          return chain$5(stream, state, tokenComment$7);
        }
        else {
          stream.eatWhile(isOperatorChar$6);
          return "operator";
        }
      }
      // single line comment or operator
      else if (ch=="-") {
        if(stream.eat("-")){
          stream.skipToEnd();
          return "comment";
        }
        else {
          stream.eatWhile(isOperatorChar$6);
          return "operator";
        }
      }
      // is it an operator
      else if (isOperatorChar$6.test(ch)) {
        stream.eatWhile(isOperatorChar$6);
        return "operator";
      }
      else {
        // get the while word
        stream.eatWhile(/[\w\$_]/);
        // is it one of the listed keywords?
        if (keywords$k && keywords$k.propertyIsEnumerable(stream.current().toUpperCase())) {
          //keywords can be used as variables like flatten(group), group.$0 etc..
          if (!stream.eat(")") && !stream.eat("."))
            return "keyword";
        }
        // is it one of the builtin functions?
        if (builtins$3 && builtins$3.propertyIsEnumerable(stream.current().toUpperCase()))
          return "builtin";
        // is it one of the listed types?
        if (types$4 && types$4.propertyIsEnumerable(stream.current().toUpperCase()))
          return "type";
        // default is a 'variable'
        return "variable";
      }
    }

    // Interface
    const pig = {
      startState: function() {
        return {
          tokenize: tokenBase$m,
          startOfLine: true
        };
      },

      token: function(stream, state) {
        if(stream.eatSpace()) return null;
        var style = state.tokenize(stream, state);
        return style;
      },

      languageData: {
        autocomplete: (pBuiltins + pTypes + pKeywords).split(" ")
      }
    };

    var pig$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        pig: pig
    });

    function buildRegexp(patterns, options) {
      options = options || {};
      var prefix = options.prefix !== undefined ? options.prefix : '^';
      var suffix = options.suffix !== undefined ? options.suffix : '\\b';

      for (var i = 0; i < patterns.length; i++) {
        if (patterns[i] instanceof RegExp) {
          patterns[i] = patterns[i].source;
        }
        else {
          patterns[i] = patterns[i].replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
        }
      }

      return new RegExp(prefix + '(' + patterns.join('|') + ')' + suffix, 'i');
    }

    var notCharacterOrDash = '(?=[^A-Za-z\\d\\-_]|$)';
    var varNames = /[\w\-:]/;
    var keywords$j = buildRegexp([
      /begin|break|catch|continue|data|default|do|dynamicparam/,
      /else|elseif|end|exit|filter|finally|for|foreach|from|function|if|in/,
      /param|process|return|switch|throw|trap|try|until|where|while/
    ], { suffix: notCharacterOrDash });

    var punctuation = /[\[\]{},;`\\\.]|@[({]/;
    var wordOperators$1 = buildRegexp([
      'f',
      /b?not/,
      /[ic]?split/, 'join',
      /is(not)?/, 'as',
      /[ic]?(eq|ne|[gl][te])/,
      /[ic]?(not)?(like|match|contains)/,
      /[ic]?replace/,
      /b?(and|or|xor)/
    ], { prefix: '-' });
    var symbolOperators = /[+\-*\/%]=|\+\+|--|\.\.|[+\-*&^%:=!|\/]|<(?!#)|(?!#)>/;
    var operators$2 = buildRegexp([wordOperators$1, symbolOperators], { suffix: '' });

    var numbers = /^((0x[\da-f]+)|((\d+\.\d+|\d\.|\.\d+|\d+)(e[\+\-]?\d+)?))[ld]?([kmgtp]b)?/i;

    var identifiers$3 = /^[A-Za-z\_][A-Za-z\-\_\d]*\b/;

    var symbolBuiltins = /[A-Z]:|%|\?/i;
    var namedBuiltins = buildRegexp([
      /Add-(Computer|Content|History|Member|PSSnapin|Type)/,
      /Checkpoint-Computer/,
      /Clear-(Content|EventLog|History|Host|Item(Property)?|Variable)/,
      /Compare-Object/,
      /Complete-Transaction/,
      /Connect-PSSession/,
      /ConvertFrom-(Csv|Json|SecureString|StringData)/,
      /Convert-Path/,
      /ConvertTo-(Csv|Html|Json|SecureString|Xml)/,
      /Copy-Item(Property)?/,
      /Debug-Process/,
      /Disable-(ComputerRestore|PSBreakpoint|PSRemoting|PSSessionConfiguration)/,
      /Disconnect-PSSession/,
      /Enable-(ComputerRestore|PSBreakpoint|PSRemoting|PSSessionConfiguration)/,
      /(Enter|Exit)-PSSession/,
      /Export-(Alias|Clixml|Console|Counter|Csv|FormatData|ModuleMember|PSSession)/,
      /ForEach-Object/,
      /Format-(Custom|List|Table|Wide)/,
      new RegExp('Get-(Acl|Alias|AuthenticodeSignature|ChildItem|Command|ComputerRestorePoint|Content|ControlPanelItem|Counter|Credential'
                 + '|Culture|Date|Event|EventLog|EventSubscriber|ExecutionPolicy|FormatData|Help|History|Host|HotFix|Item|ItemProperty|Job'
                 + '|Location|Member|Module|PfxCertificate|Process|PSBreakpoint|PSCallStack|PSDrive|PSProvider|PSSession|PSSessionConfiguration'
                 + '|PSSnapin|Random|Service|TraceSource|Transaction|TypeData|UICulture|Unique|Variable|Verb|WinEvent|WmiObject)'),
      /Group-Object/,
      /Import-(Alias|Clixml|Counter|Csv|LocalizedData|Module|PSSession)/,
      /ImportSystemModules/,
      /Invoke-(Command|Expression|History|Item|RestMethod|WebRequest|WmiMethod)/,
      /Join-Path/,
      /Limit-EventLog/,
      /Measure-(Command|Object)/,
      /Move-Item(Property)?/,
      new RegExp('New-(Alias|Event|EventLog|Item(Property)?|Module|ModuleManifest|Object|PSDrive|PSSession|PSSessionConfigurationFile'
                 + '|PSSessionOption|PSTransportOption|Service|TimeSpan|Variable|WebServiceProxy|WinEvent)'),
      /Out-(Default|File|GridView|Host|Null|Printer|String)/,
      /Pause/,
      /(Pop|Push)-Location/,
      /Read-Host/,
      /Receive-(Job|PSSession)/,
      /Register-(EngineEvent|ObjectEvent|PSSessionConfiguration|WmiEvent)/,
      /Remove-(Computer|Event|EventLog|Item(Property)?|Job|Module|PSBreakpoint|PSDrive|PSSession|PSSnapin|TypeData|Variable|WmiObject)/,
      /Rename-(Computer|Item(Property)?)/,
      /Reset-ComputerMachinePassword/,
      /Resolve-Path/,
      /Restart-(Computer|Service)/,
      /Restore-Computer/,
      /Resume-(Job|Service)/,
      /Save-Help/,
      /Select-(Object|String|Xml)/,
      /Send-MailMessage/,
      new RegExp('Set-(Acl|Alias|AuthenticodeSignature|Content|Date|ExecutionPolicy|Item(Property)?|Location|PSBreakpoint|PSDebug' +
                 '|PSSessionConfiguration|Service|StrictMode|TraceSource|Variable|WmiInstance)'),
      /Show-(Command|ControlPanelItem|EventLog)/,
      /Sort-Object/,
      /Split-Path/,
      /Start-(Job|Process|Service|Sleep|Transaction|Transcript)/,
      /Stop-(Computer|Job|Process|Service|Transcript)/,
      /Suspend-(Job|Service)/,
      /TabExpansion2/,
      /Tee-Object/,
      /Test-(ComputerSecureChannel|Connection|ModuleManifest|Path|PSSessionConfigurationFile)/,
      /Trace-Command/,
      /Unblock-File/,
      /Undo-Transaction/,
      /Unregister-(Event|PSSessionConfiguration)/,
      /Update-(FormatData|Help|List|TypeData)/,
      /Use-Transaction/,
      /Wait-(Event|Job|Process)/,
      /Where-Object/,
      /Write-(Debug|Error|EventLog|Host|Output|Progress|Verbose|Warning)/,
      /cd|help|mkdir|more|oss|prompt/,
      /ac|asnp|cat|cd|chdir|clc|clear|clhy|cli|clp|cls|clv|cnsn|compare|copy|cp|cpi|cpp|cvpa|dbp|del|diff|dir|dnsn|ebp/,
      /echo|epal|epcsv|epsn|erase|etsn|exsn|fc|fl|foreach|ft|fw|gal|gbp|gc|gci|gcm|gcs|gdr|ghy|gi|gjb|gl|gm|gmo|gp|gps/,
      /group|gsn|gsnp|gsv|gu|gv|gwmi|h|history|icm|iex|ihy|ii|ipal|ipcsv|ipmo|ipsn|irm|ise|iwmi|iwr|kill|lp|ls|man|md/,
      /measure|mi|mount|move|mp|mv|nal|ndr|ni|nmo|npssc|nsn|nv|ogv|oh|popd|ps|pushd|pwd|r|rbp|rcjb|rcsn|rd|rdr|ren|ri/,
      /rjb|rm|rmdir|rmo|rni|rnp|rp|rsn|rsnp|rujb|rv|rvpa|rwmi|sajb|sal|saps|sasv|sbp|sc|select|set|shcm|si|sl|sleep|sls/,
      /sort|sp|spjb|spps|spsv|start|sujb|sv|swmi|tee|trcm|type|where|wjb|write/
    ], { prefix: '', suffix: '' });
    var variableBuiltins = buildRegexp([
      /[$?^_]|Args|ConfirmPreference|ConsoleFileName|DebugPreference|Error|ErrorActionPreference|ErrorView|ExecutionContext/,
      /FormatEnumerationLimit|Home|Host|Input|MaximumAliasCount|MaximumDriveCount|MaximumErrorCount|MaximumFunctionCount/,
      /MaximumHistoryCount|MaximumVariableCount|MyInvocation|NestedPromptLevel|OutputEncoding|Pid|Profile|ProgressPreference/,
      /PSBoundParameters|PSCommandPath|PSCulture|PSDefaultParameterValues|PSEmailServer|PSHome|PSScriptRoot|PSSessionApplicationName/,
      /PSSessionConfigurationName|PSSessionOption|PSUICulture|PSVersionTable|Pwd|ShellId|StackTrace|VerbosePreference/,
      /WarningPreference|WhatIfPreference/,

      /Event|EventArgs|EventSubscriber|Sender/,
      /Matches|Ofs|ForEach|LastExitCode|PSCmdlet|PSItem|PSSenderInfo|This/,
      /true|false|null/
    ], { prefix: '\\$', suffix: '' });

    var builtins$2 = buildRegexp([symbolBuiltins, namedBuiltins, variableBuiltins], { suffix: notCharacterOrDash });

    var grammar = {
      keyword: keywords$j,
      number: numbers,
      operator: operators$2,
      builtin: builtins$2,
      punctuation: punctuation,
      variable: identifiers$3
    };

    // tokenizers
    function tokenBase$l(stream, state) {
      // Handle Comments
      //var ch = stream.peek();

      var parent = state.returnStack[state.returnStack.length - 1];
      if (parent && parent.shouldReturnFrom(state)) {
        state.tokenize = parent.tokenize;
        state.returnStack.pop();
        return state.tokenize(stream, state);
      }

      if (stream.eatSpace()) {
        return null;
      }

      if (stream.eat('(')) {
        state.bracketNesting += 1;
        return 'punctuation';
      }

      if (stream.eat(')')) {
        state.bracketNesting -= 1;
        return 'punctuation';
      }

      for (var key in grammar) {
        if (stream.match(grammar[key])) {
          return key;
        }
      }

      var ch = stream.next();

      // single-quote string
      if (ch === "'") {
        return tokenSingleQuoteString(stream, state);
      }

      if (ch === '$') {
        return tokenVariable$1(stream, state);
      }

      // double-quote string
      if (ch === '"') {
        return tokenDoubleQuoteString(stream, state);
      }

      if (ch === '<' && stream.eat('#')) {
        state.tokenize = tokenComment$6;
        return tokenComment$6(stream, state);
      }

      if (ch === '#') {
        stream.skipToEnd();
        return 'comment';
      }

      if (ch === '@') {
        var quoteMatch = stream.eat(/["']/);
        if (quoteMatch && stream.eol()) {
          state.tokenize = tokenMultiString;
          state.startQuote = quoteMatch[0];
          return tokenMultiString(stream, state);
        } else if (stream.eol()) {
          return 'error';
        } else if (stream.peek().match(/[({]/)) {
          return 'punctuation';
        } else if (stream.peek().match(varNames)) {
          // splatted variable
          return tokenVariable$1(stream, state);
        }
      }
      return 'error';
    }

    function tokenSingleQuoteString(stream, state) {
      var ch;
      while ((ch = stream.peek()) != null) {
        stream.next();

        if (ch === "'" && !stream.eat("'")) {
          state.tokenize = tokenBase$l;
          return 'string';
        }
      }

      return 'error';
    }

    function tokenDoubleQuoteString(stream, state) {
      var ch;
      while ((ch = stream.peek()) != null) {
        if (ch === '$') {
          state.tokenize = tokenStringInterpolation;
          return 'string';
        }

        stream.next();
        if (ch === '`') {
          stream.next();
          continue;
        }

        if (ch === '"' && !stream.eat('"')) {
          state.tokenize = tokenBase$l;
          return 'string';
        }
      }

      return 'error';
    }

    function tokenStringInterpolation(stream, state) {
      return tokenInterpolation(stream, state, tokenDoubleQuoteString);
    }

    function tokenMultiStringReturn(stream, state) {
      state.tokenize = tokenMultiString;
      state.startQuote = '"';
      return tokenMultiString(stream, state);
    }

    function tokenHereStringInterpolation(stream, state) {
      return tokenInterpolation(stream, state, tokenMultiStringReturn);
    }

    function tokenInterpolation(stream, state, parentTokenize) {
      if (stream.match('$(')) {
        var savedBracketNesting = state.bracketNesting;
        state.returnStack.push({
          /*jshint loopfunc:true */
          shouldReturnFrom: function(state) {
            return state.bracketNesting === savedBracketNesting;
          },
          tokenize: parentTokenize
        });
        state.tokenize = tokenBase$l;
        state.bracketNesting += 1;
        return 'punctuation';
      } else {
        stream.next();
        state.returnStack.push({
          shouldReturnFrom: function() { return true; },
          tokenize: parentTokenize
        });
        state.tokenize = tokenVariable$1;
        return state.tokenize(stream, state);
      }
    }

    function tokenComment$6(stream, state) {
      var maybeEnd = false, ch;
      while ((ch = stream.next()) != null) {
        if (maybeEnd && ch == '>') {
          state.tokenize = tokenBase$l;
          break;
        }
        maybeEnd = (ch === '#');
      }
      return 'comment';
    }

    function tokenVariable$1(stream, state) {
      var ch = stream.peek();
      if (stream.eat('{')) {
        state.tokenize = tokenVariableWithBraces;
        return tokenVariableWithBraces(stream, state);
      } else if (ch != undefined && ch.match(varNames)) {
        stream.eatWhile(varNames);
        state.tokenize = tokenBase$l;
        return 'variable';
      } else {
        state.tokenize = tokenBase$l;
        return 'error';
      }
    }

    function tokenVariableWithBraces(stream, state) {
      var ch;
      while ((ch = stream.next()) != null) {
        if (ch === '}') {
          state.tokenize = tokenBase$l;
          break;
        }
      }
      return 'variable';
    }

    function tokenMultiString(stream, state) {
      var quote = state.startQuote;
      if (stream.sol() && stream.match(new RegExp(quote + '@'))) {
        state.tokenize = tokenBase$l;
      }
      else if (quote === '"') {
        while (!stream.eol()) {
          var ch = stream.peek();
          if (ch === '$') {
            state.tokenize = tokenHereStringInterpolation;
            return 'string';
          }

          stream.next();
          if (ch === '`') {
            stream.next();
          }
        }
      }
      else {
        stream.skipToEnd();
      }

      return 'string';
    }

    const powerShell = {
      startState: function() {
        return {
          returnStack: [],
          bracketNesting: 0,
          tokenize: tokenBase$l
        };
      },

      token: function(stream, state) {
        return state.tokenize(stream, state);
      },

      languageData: {
        commentTokens: {line: "#", block: {open: "<#", close: "#>"}}
      }
    };

    var powershell = /*#__PURE__*/Object.freeze({
        __proto__: null,
        powerShell: powerShell
    });

    const properties = {
      token: function(stream, state) {
        var sol = stream.sol() || state.afterSection;
        var eol = stream.eol();

        state.afterSection = false;

        if (sol) {
          if (state.nextMultiline) {
            state.inMultiline = true;
            state.nextMultiline = false;
          } else {
            state.position = "def";
          }
        }

        if (eol && ! state.nextMultiline) {
          state.inMultiline = false;
          state.position = "def";
        }

        if (sol) {
          while(stream.eatSpace()) {}
        }

        var ch = stream.next();

        if (sol && (ch === "#" || ch === "!" || ch === ";")) {
          state.position = "comment";
          stream.skipToEnd();
          return "comment";
        } else if (sol && ch === "[") {
          state.afterSection = true;
          stream.skipTo("]"); stream.eat("]");
          return "header";
        } else if (ch === "=" || ch === ":") {
          state.position = "quote";
          return null;
        } else if (ch === "\\" && state.position === "quote") {
          if (stream.eol()) {  // end of line?
            // Multiline value
            state.nextMultiline = true;
          }
        }

        return state.position;
      },

      startState: function() {
        return {
          position : "def",       // Current position, "def", "quote" or "comment"
          nextMultiline : false,  // Is the next line multiline value
          inMultiline : false,    // Is the current line a multiline value
          afterSection : false    // Did we just open a section
        };
      }

    };

    var properties$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        properties: properties
    });

    function wordRegexp$6(words) {
      return new RegExp("^((" + words.join(")|(") + "))\\b", "i");
    }
    var keywordArray$1 = [
      "package", "message", "import", "syntax",
      "required", "optional", "repeated", "reserved", "default", "extensions", "packed",
      "bool", "bytes", "double", "enum", "float", "string",
      "int32", "int64", "uint32", "uint64", "sint32", "sint64", "fixed32", "fixed64", "sfixed32", "sfixed64",
      "option", "service", "rpc", "returns"
    ];
    var keywords$i = wordRegexp$6(keywordArray$1);

    var identifiers$2 = new RegExp("^[_A-Za-z\xa1-\uffff][_A-Za-z0-9\xa1-\uffff]*");

    function tokenBase$k(stream) {
      // whitespaces
      if (stream.eatSpace()) return null;

      // Handle one line Comments
      if (stream.match("//")) {
        stream.skipToEnd();
        return "comment";
      }

      // Handle Number Literals
      if (stream.match(/^[0-9\.+-]/, false)) {
        if (stream.match(/^[+-]?0x[0-9a-fA-F]+/))
          return "number";
        if (stream.match(/^[+-]?\d*\.\d+([EeDd][+-]?\d+)?/))
          return "number";
        if (stream.match(/^[+-]?\d+([EeDd][+-]?\d+)?/))
          return "number";
      }

      // Handle Strings
      if (stream.match(/^"([^"]|(""))*"/)) { return "string"; }
      if (stream.match(/^'([^']|(''))*'/)) { return "string"; }

      // Handle words
      if (stream.match(keywords$i)) { return "keyword"; }
      if (stream.match(identifiers$2)) { return "variable"; }
      // Handle non-detected items
      stream.next();
      return null;
    }
    const protobuf = {
      token: tokenBase$k,
      languageData: {
        autocomplete: keywordArray$1
      }
    };

    var protobuf$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        protobuf: protobuf
    });

    // Stores the words from the define method
    var words$8 = {};
    // Taken, mostly, from the Puppet official variable standards regex
    var variable_regex = /({)?([a-z][a-z0-9_]*)?((::[a-z][a-z0-9_]*)*::)?[a-zA-Z0-9_]+(})?/;

    // Takes a string of words separated by spaces and adds them as
    // keys with the value of the first argument 'style'
    function define$2(style, string) {
      var split = string.split(' ');
      for (var i = 0; i < split.length; i++) {
        words$8[split[i]] = style;
      }
    }

    // Takes commonly known puppet types/words and classifies them to a style
    define$2('keyword', 'class define site node include import inherits');
    define$2('keyword', 'case if else in and elsif default or');
    define$2('atom', 'false true running present absent file directory undef');
    define$2('builtin', 'action augeas burst chain computer cron destination dport exec ' +
           'file filebucket group host icmp iniface interface jump k5login limit log_level ' +
           'log_prefix macauthorization mailalias maillist mcx mount nagios_command ' +
           'nagios_contact nagios_contactgroup nagios_host nagios_hostdependency ' +
           'nagios_hostescalation nagios_hostextinfo nagios_hostgroup nagios_service ' +
           'nagios_servicedependency nagios_serviceescalation nagios_serviceextinfo ' +
           'nagios_servicegroup nagios_timeperiod name notify outiface package proto reject ' +
           'resources router schedule scheduled_task selboolean selmodule service source ' +
           'sport ssh_authorized_key sshkey stage state table tidy todest toports tosource ' +
           'user vlan yumrepo zfs zone zpool');

    // After finding a start of a string ('|") this function attempts to find the end;
    // If a variable is encountered along the way, we display it differently when it
    // is encapsulated in a double-quoted string.
    function tokenString$e(stream, state) {
      var current, prev, found_var = false;
      while (!stream.eol() && (current = stream.next()) != state.pending) {
        if (current === '$' && prev != '\\' && state.pending == '"') {
          found_var = true;
          break;
        }
        prev = current;
      }
      if (found_var) {
        stream.backUp(1);
      }
      if (current == state.pending) {
        state.continueString = false;
      } else {
        state.continueString = true;
      }
      return "string";
    }

    // Main function
    function tokenize$3(stream, state) {
      // Matches one whole word
      var word = stream.match(/[\w]+/, false);
      // Matches attributes (i.e. ensure => present ; 'ensure' would be matched)
      var attribute = stream.match(/(\s+)?\w+\s+=>.*/, false);
      // Matches non-builtin resource declarations
      // (i.e. "apache::vhost {" or "mycustomclasss {" would be matched)
      var resource = stream.match(/(\s+)?[\w:_]+(\s+)?{/, false);
      // Matches virtual and exported resources (i.e. @@user { ; and the like)
      var special_resource = stream.match(/(\s+)?[@]{1,2}[\w:_]+(\s+)?{/, false);

      // Finally advance the stream
      var ch = stream.next();

      // Have we found a variable?
      if (ch === '$') {
        if (stream.match(variable_regex)) {
          // If so, and its in a string, assign it a different color
          return state.continueString ? 'variableName.special' : 'variable';
        }
        // Otherwise return an invalid variable
        return "error";
      }
      // Should we still be looking for the end of a string?
      if (state.continueString) {
        // If so, go through the loop again
        stream.backUp(1);
        return tokenString$e(stream, state);
      }
      // Are we in a definition (class, node, define)?
      if (state.inDefinition) {
        // If so, return def (i.e. for 'class myclass {' ; 'myclass' would be matched)
        if (stream.match(/(\s+)?[\w:_]+(\s+)?/)) {
          return 'def';
        }
        // Match the rest it the next time around
        stream.match(/\s+{/);
        state.inDefinition = false;
      }
      // Are we in an 'include' statement?
      if (state.inInclude) {
        // Match and return the included class
        stream.match(/(\s+)?\S+(\s+)?/);
        state.inInclude = false;
        return 'def';
      }
      // Do we just have a function on our hands?
      // In 'ensure_resource("myclass")', 'ensure_resource' is matched
      if (stream.match(/(\s+)?\w+\(/)) {
        stream.backUp(1);
        return 'def';
      }
      // Have we matched the prior attribute regex?
      if (attribute) {
        stream.match(/(\s+)?\w+/);
        return 'tag';
      }
      // Do we have Puppet specific words?
      if (word && words$8.hasOwnProperty(word)) {
        // Negates the initial next()
        stream.backUp(1);
        // rs move the stream
        stream.match(/[\w]+/);
        // We want to process these words differently
        // do to the importance they have in Puppet
        if (stream.match(/\s+\S+\s+{/, false)) {
          state.inDefinition = true;
        }
        if (word == 'include') {
          state.inInclude = true;
        }
        // Returns their value as state in the prior define methods
        return words$8[word];
      }
      // Is there a match on a reference?
      if (/(^|\s+)[A-Z][\w:_]+/.test(word)) {
        // Negate the next()
        stream.backUp(1);
        // Match the full reference
        stream.match(/(^|\s+)[A-Z][\w:_]+/);
        return 'def';
      }
      // Have we matched the prior resource regex?
      if (resource) {
        stream.match(/(\s+)?[\w:_]+/);
        return 'def';
      }
      // Have we matched the prior special_resource regex?
      if (special_resource) {
        stream.match(/(\s+)?[@]{1,2}/);
        return 'atom';
      }
      // Match all the comments. All of them.
      if (ch == "#") {
        stream.skipToEnd();
        return "comment";
      }
      // Have we found a string?
      if (ch == "'" || ch == '"') {
        // Store the type (single or double)
        state.pending = ch;
        // Perform the looping function to find the end
        return tokenString$e(stream, state);
      }
      // Match all the brackets
      if (ch == '{' || ch == '}') {
        return 'bracket';
      }
      // Match characters that we are going to assume
      // are trying to be regex
      if (ch == '/') {
        stream.match(/^[^\/]*\//);
        return 'string.special';
      }
      // Match all the numbers
      if (ch.match(/[0-9]/)) {
        stream.eatWhile(/[0-9]+/);
        return 'number';
      }
      // Match the '=' and '=>' operators
      if (ch == '=') {
        if (stream.peek() == '>') {
          stream.next();
        }
        return "operator";
      }
      // Keep advancing through all the rest
      stream.eatWhile(/[\w-]/);
      // Return a blank line for everything else
      return null;
    }
    // Start it all
    const puppet = {
      startState: function () {
        var state = {};
        state.inDefinition = false;
        state.inInclude = false;
        state.continueString = false;
        state.pending = false;
        return state;
      },
      token: function (stream, state) {
        // Strip the spaces, but regex will account for them eitherway
        if (stream.eatSpace()) return null;
        // Go through the main process
        return tokenize$3(stream, state);
      }
    };

    var puppet$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        puppet: puppet
    });

    var curPunc$7,
        keywords$h=buildRE(["abs","acos","aj","aj0","all","and","any","asc","asin","asof","atan","attr","avg","avgs","bin","by","ceiling","cols","cor","cos","count","cov","cross","csv","cut","delete","deltas","desc","dev","differ","distinct","div","do","each","ej","enlist","eval","except","exec","exit","exp","fby","fills","first","fkeys","flip","floor","from","get","getenv","group","gtime","hclose","hcount","hdel","hopen","hsym","iasc","idesc","if","ij","in","insert","inter","inv","key","keys","last","like","list","lj","load","log","lower","lsq","ltime","ltrim","mavg","max","maxs","mcount","md5","mdev","med","meta","min","mins","mmax","mmin","mmu","mod","msum","neg","next","not","null","or","over","parse","peach","pj","plist","prd","prds","prev","prior","rand","rank","ratios","raze","read0","read1","reciprocal","reverse","rload","rotate","rsave","rtrim","save","scan","select","set","setenv","show","signum","sin","sqrt","ss","ssr","string","sublist","sum","sums","sv","system","tables","tan","til","trim","txf","type","uj","ungroup","union","update","upper","upsert","value","var","view","views","vs","wavg","where","where","while","within","wj","wj1","wsum","xasc","xbar","xcol","xcols","xdesc","xexp","xgroup","xkey","xlog","xprev","xrank"]),
        E=/[|/&^!+:\\\-*%$=~#;@><,?_\'\"\[\(\]\)\s{}]/;
    function buildRE(w){return new RegExp("^("+w.join("|")+")$");}
    function tokenBase$j(stream,state){
      var sol=stream.sol(),c=stream.next();
      curPunc$7=null;
      if(sol)
        if(c=="/")
          return (state.tokenize=tokenLineComment)(stream,state);
      else if(c=="\\"){
        if(stream.eol()||/\s/.test(stream.peek()))
          return stream.skipToEnd(),/^\\\s*$/.test(stream.current())?(state.tokenize=tokenCommentToEOF)(stream):state.tokenize=tokenBase$j,"comment";
        else
          return state.tokenize=tokenBase$j,"builtin";
      }
      if(/\s/.test(c))
        return stream.peek()=="/"?(stream.skipToEnd(),"comment"):"null";
      if(c=='"')
        return (state.tokenize=tokenString$d)(stream,state);
      if(c=='`')
        return stream.eatWhile(/[A-Za-z\d_:\/.]/),"macroName";
      if(("."==c&&/\d/.test(stream.peek()))||/\d/.test(c)){
        var t=null;
        stream.backUp(1);
        if(stream.match(/^\d{4}\.\d{2}(m|\.\d{2}([DT](\d{2}(:\d{2}(:\d{2}(\.\d{1,9})?)?)?)?)?)/)
           || stream.match(/^\d+D(\d{2}(:\d{2}(:\d{2}(\.\d{1,9})?)?)?)/)
           || stream.match(/^\d{2}:\d{2}(:\d{2}(\.\d{1,9})?)?/)
           || stream.match(/^\d+[ptuv]{1}/))
          t="temporal";
        else if(stream.match(/^0[NwW]{1}/)
                || stream.match(/^0x[\da-fA-F]*/)
                || stream.match(/^[01]+[b]{1}/)
                || stream.match(/^\d+[chijn]{1}/)
                || stream.match(/-?\d*(\.\d*)?(e[+\-]?\d+)?(e|f)?/))
          t="number";
        return (t&&(!(c=stream.peek())||E.test(c)))?t:(stream.next(),"error");
      }
      if(/[A-Za-z]|\./.test(c))
        return stream.eatWhile(/[A-Za-z._\d]/),keywords$h.test(stream.current())?"keyword":"variable";
      if(/[|/&^!+:\\\-*%$=~#;@><\.,?_\']/.test(c))
        return null;
      if(/[{}\(\[\]\)]/.test(c))
        return null;
      return "error";
    }
    function tokenLineComment(stream,state){
      return stream.skipToEnd(),/\/\s*$/.test(stream.current())?(state.tokenize=tokenBlockComment)(stream,state):(state.tokenize=tokenBase$j),"comment";
    }
    function tokenBlockComment(stream,state){
      var f=stream.sol()&&stream.peek()=="\\";
      stream.skipToEnd();
      if(f&&/^\\\s*$/.test(stream.current()))
        state.tokenize=tokenBase$j;
      return "comment";
    }
    function tokenCommentToEOF(stream){return stream.skipToEnd(),"comment";}
    function tokenString$d(stream,state){
      var escaped=false,next,end=false;
      while((next=stream.next())){
        if(next=="\""&&!escaped){end=true;break;}
        escaped=!escaped&&next=="\\";
      }
      if(end)state.tokenize=tokenBase$j;
      return "string";
    }
    function pushContext$8(state,type,col){state.context={prev:state.context,indent:state.indent,col:col,type:type};}
    function popContext$8(state){state.indent=state.context.indent;state.context=state.context.prev;}
    const q = {
      startState:function(){
        return {tokenize:tokenBase$j,
               context:null,
               indent:0,
               col:0};
      },
      token:function(stream,state){
        if(stream.sol()){
          if(state.context&&state.context.align==null)
            state.context.align=false;
          state.indent=stream.indentation();
        }
        //if (stream.eatSpace()) return null;
        var style=state.tokenize(stream,state);
        if(style!="comment"&&state.context&&state.context.align==null&&state.context.type!="pattern"){
          state.context.align=true;
        }
        if(curPunc$7=="(")pushContext$8(state,")",stream.column());
        else if(curPunc$7=="[")pushContext$8(state,"]",stream.column());
        else if(curPunc$7=="{")pushContext$8(state,"}",stream.column());
        else if(/[\]\}\)]/.test(curPunc$7)){
          while(state.context&&state.context.type=="pattern")popContext$8(state);
          if(state.context&&curPunc$7==state.context.type)popContext$8(state);
        }
        else if(curPunc$7=="."&&state.context&&state.context.type=="pattern")popContext$8(state);
        else if(/atom|string|variable/.test(style)&&state.context){
          if(/[\}\]]/.test(state.context.type))
            pushContext$8(state,"pattern",stream.column());
          else if(state.context.type=="pattern"&&!state.context.align){
            state.context.align=true;
            state.context.col=stream.column();
          }
        }
        return style;
      },
      indent:function(state,textAfter,cx){
        var firstChar=textAfter&&textAfter.charAt(0);
        var context=state.context;
        if(/[\]\}]/.test(firstChar))
          while (context&&context.type=="pattern")context=context.prev;
        var closing=context&&firstChar==context.type;
        if(!context)
          return 0;
        else if(context.type=="pattern")
          return context.col;
        else if(context.align)
          return context.col+(closing?0:1);
        else
          return context.indent+(closing?0:cx.unit);
      }
    };

    var q$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        q: q
    });

    function wordObj$1(words) {
      var res = {};
      for (var i = 0; i < words.length; ++i) res[words[i]] = true;
      return res;
    }
    var commonAtoms$2 = ["NULL", "NA", "Inf", "NaN", "NA_integer_", "NA_real_", "NA_complex_", "NA_character_", "TRUE", "FALSE"];
    var commonBuiltins = ["list", "quote", "bquote", "eval", "return", "call", "parse", "deparse"];
    var commonKeywords$2 = ["if", "else", "repeat", "while", "function", "for", "in", "next", "break"];
    var commonBlockKeywords = ["if", "else", "repeat", "while", "function", "for"];

    var atoms$4 = wordObj$1(commonAtoms$2);
    var builtins$1 = wordObj$1(commonBuiltins);
    var keywords$g = wordObj$1(commonKeywords$2);
    var blockkeywords = wordObj$1(commonBlockKeywords);
    var opChars = /[+\-*\/^<>=!&|~$:]/;
    var curPunc$6;

    function tokenBase$i(stream, state) {
      curPunc$6 = null;
      var ch = stream.next();
      if (ch == "#") {
        stream.skipToEnd();
        return "comment";
      } else if (ch == "0" && stream.eat("x")) {
        stream.eatWhile(/[\da-f]/i);
        return "number";
      } else if (ch == "." && stream.eat(/\d/)) {
        stream.match(/\d*(?:e[+\-]?\d+)?/);
        return "number";
      } else if (/\d/.test(ch)) {
        stream.match(/\d*(?:\.\d+)?(?:e[+\-]\d+)?L?/);
        return "number";
      } else if (ch == "'" || ch == '"') {
        state.tokenize = tokenString$c(ch);
        return "string";
      } else if (ch == "`") {
        stream.match(/[^`]+`/);
        return "string.special";
      } else if (ch == "." && stream.match(/.(?:[.]|\d+)/)) {
        return "keyword";
      } else if (/[a-zA-Z\.]/.test(ch)) {
        stream.eatWhile(/[\w\.]/);
        var word = stream.current();
        if (atoms$4.propertyIsEnumerable(word)) return "atom";
        if (keywords$g.propertyIsEnumerable(word)) {
          // Block keywords start new blocks, except 'else if', which only starts
          // one new block for the 'if', no block for the 'else'.
          if (blockkeywords.propertyIsEnumerable(word) &&
              !stream.match(/\s*if(\s+|$)/, false))
            curPunc$6 = "block";
          return "keyword";
        }
        if (builtins$1.propertyIsEnumerable(word)) return "builtin";
        return "variable";
      } else if (ch == "%") {
        if (stream.skipTo("%")) stream.next();
        return "variableName.special";
      } else if (
        (ch == "<" && stream.eat("-")) ||
          (ch == "<" && stream.match("<-")) ||
          (ch == "-" && stream.match(/>>?/))
      ) {
        return "operator";
      } else if (ch == "=" && state.ctx.argList) {
        return "operator";
      } else if (opChars.test(ch)) {
        if (ch == "$") return "operator";
        stream.eatWhile(opChars);
        return "operator";
      } else if (/[\(\){}\[\];]/.test(ch)) {
        curPunc$6 = ch;
        if (ch == ";") return "punctuation";
        return null;
      } else {
        return null;
      }
    }

    function tokenString$c(quote) {
      return function(stream, state) {
        if (stream.eat("\\")) {
          var ch = stream.next();
          if (ch == "x") stream.match(/^[a-f0-9]{2}/i);
          else if ((ch == "u" || ch == "U") && stream.eat("{") && stream.skipTo("}")) stream.next();
          else if (ch == "u") stream.match(/^[a-f0-9]{4}/i);
          else if (ch == "U") stream.match(/^[a-f0-9]{8}/i);
          else if (/[0-7]/.test(ch)) stream.match(/^[0-7]{1,2}/);
          return "string.special";
        } else {
          var next;
          while ((next = stream.next()) != null) {
            if (next == quote) { state.tokenize = tokenBase$i; break; }
            if (next == "\\") { stream.backUp(1); break; }
          }
          return "string";
        }
      };
    }

    var ALIGN_YES = 1, ALIGN_NO = 2, BRACELESS = 4;

    function push(state, type, stream) {
      state.ctx = {type: type,
                   indent: state.indent,
                   flags: 0,
                   column: stream.column(),
                   prev: state.ctx};
    }
    function setFlag(state, flag) {
      var ctx = state.ctx;
      state.ctx = {type: ctx.type,
                   indent: ctx.indent,
                   flags: ctx.flags | flag,
                   column: ctx.column,
                   prev: ctx.prev};
    }
    function pop(state) {
      state.indent = state.ctx.indent;
      state.ctx = state.ctx.prev;
    }

    const r = {
      startState: function(indentUnit) {
        return {tokenize: tokenBase$i,
                ctx: {type: "top",
                      indent: -indentUnit,
                      flags: ALIGN_NO},
                indent: 0,
                afterIdent: false};
      },

      token: function(stream, state) {
        if (stream.sol()) {
          if ((state.ctx.flags & 3) == 0) state.ctx.flags |= ALIGN_NO;
          if (state.ctx.flags & BRACELESS) pop(state);
          state.indent = stream.indentation();
        }
        if (stream.eatSpace()) return null;
        var style = state.tokenize(stream, state);
        if (style != "comment" && (state.ctx.flags & ALIGN_NO) == 0) setFlag(state, ALIGN_YES);

        if ((curPunc$6 == ";" || curPunc$6 == "{" || curPunc$6 == "}") && state.ctx.type == "block") pop(state);
        if (curPunc$6 == "{") push(state, "}", stream);
        else if (curPunc$6 == "(") {
          push(state, ")", stream);
          if (state.afterIdent) state.ctx.argList = true;
        }
        else if (curPunc$6 == "[") push(state, "]", stream);
        else if (curPunc$6 == "block") push(state, "block", stream);
        else if (curPunc$6 == state.ctx.type) pop(state);
        else if (state.ctx.type == "block" && style != "comment") setFlag(state, BRACELESS);
        state.afterIdent = style == "variable" || style == "keyword";
        return style;
      },

      indent: function(state, textAfter, cx) {
        if (state.tokenize != tokenBase$i) return 0;
        var firstChar = textAfter && textAfter.charAt(0), ctx = state.ctx,
            closing = firstChar == ctx.type;
        if (ctx.flags & BRACELESS) ctx = ctx.prev;
        if (ctx.type == "block") return ctx.indent + (firstChar == "{" ? 0 : cx.unit);
        else if (ctx.flags & ALIGN_YES) return ctx.column + (closing ? 0 : 1);
        else return ctx.indent + (closing ? 0 : cx.unit);
      },

      languageData: {
        wordChars: ".",
        commentTokens: {line: "#"},
        autocomplete: commonAtoms$2.concat(commonBuiltins, commonKeywords$2)
      }
    };

    var r$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        r: r
    });

    var headerSeparator = /^-+$/;
    var headerLine = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)  ?\d{1,2} \d{2}:\d{2}(:\d{2})? [A-Z]{3,4} \d{4} - /;
    var simpleEmail = /^[\w+.-]+@[\w.-]+/;

    const rpmChanges = {
      token: function(stream) {
        if (stream.sol()) {
          if (stream.match(headerSeparator)) { return 'tag'; }
          if (stream.match(headerLine)) { return 'tag'; }
        }
        if (stream.match(simpleEmail)) { return 'string'; }
        stream.next();
        return null;
      }
    };

    // Quick and dirty spec file highlighting

    var arch = /^(i386|i586|i686|x86_64|ppc64le|ppc64|ppc|ia64|s390x|s390|sparc64|sparcv9|sparc|noarch|alphaev6|alpha|hppa|mipsel)/;

    var preamble = /^[a-zA-Z0-9()]+:/;
    var section = /^%(debug_package|package|description|prep|build|install|files|clean|changelog|preinstall|preun|postinstall|postun|pretrans|posttrans|pre|post|triggerin|triggerun|verifyscript|check|triggerpostun|triggerprein|trigger)/;
    var control_flow_complex = /^%(ifnarch|ifarch|if)/; // rpm control flow macros
    var control_flow_simple = /^%(else|endif)/; // rpm control flow macros
    var operators$1 = /^(\!|\?|\<\=|\<|\>\=|\>|\=\=|\&\&|\|\|)/; // operators in control flow macros

    const rpmSpec = {
      startState: function () {
        return {
          controlFlow: false,
          macroParameters: false,
          section: false
        };
      },
      token: function (stream, state) {
        var ch = stream.peek();
        if (ch == "#") { stream.skipToEnd(); return "comment"; }

        if (stream.sol()) {
          if (stream.match(preamble)) { return "header"; }
          if (stream.match(section)) { return "atom"; }
        }

        if (stream.match(/^\$\w+/)) { return "def"; } // Variables like '$RPM_BUILD_ROOT'
        if (stream.match(/^\$\{\w+\}/)) { return "def"; } // Variables like '${RPM_BUILD_ROOT}'

        if (stream.match(control_flow_simple)) { return "keyword"; }
        if (stream.match(control_flow_complex)) {
          state.controlFlow = true;
          return "keyword";
        }
        if (state.controlFlow) {
          if (stream.match(operators$1)) { return "operator"; }
          if (stream.match(/^(\d+)/)) { return "number"; }
          if (stream.eol()) { state.controlFlow = false; }
        }

        if (stream.match(arch)) {
          if (stream.eol()) { state.controlFlow = false; }
          return "number";
        }

        // Macros like '%make_install' or '%attr(0775,root,root)'
        if (stream.match(/^%[\w]+/)) {
          if (stream.match('(')) { state.macroParameters = true; }
          return "keyword";
        }
        if (state.macroParameters) {
          if (stream.match(/^\d+/)) { return "number";}
          if (stream.match(')')) {
            state.macroParameters = false;
            return "keyword";
          }
        }

        // Macros like '%{defined fedora}'
        if (stream.match(/^%\{\??[\w \-\:\!]+\}/)) {
          if (stream.eol()) { state.controlFlow = false; }
          return "def";
        }

        stream.next();
        return null;
      }
    };

    var rpm = /*#__PURE__*/Object.freeze({
        __proto__: null,
        rpmChanges: rpmChanges,
        rpmSpec: rpmSpec
    });

    function wordObj(words) {
      var o = {};
      for (var i = 0, e = words.length; i < e; ++i) o[words[i]] = true;
      return o;
    }

    var keywordList = [
      "alias", "and", "BEGIN", "begin", "break", "case", "class", "def", "defined?", "do", "else",
      "elsif", "END", "end", "ensure", "false", "for", "if", "in", "module", "next", "not", "or",
      "redo", "rescue", "retry", "return", "self", "super", "then", "true", "undef", "unless",
      "until", "when", "while", "yield", "nil", "raise", "throw", "catch", "fail", "loop", "callcc",
      "caller", "lambda", "proc", "public", "protected", "private", "require", "load",
      "require_relative", "extend", "autoload", "__END__", "__FILE__", "__LINE__", "__dir__"
    ], keywords$f = wordObj(keywordList);

    var indentWords = wordObj(["def", "class", "case", "for", "while", "until", "module", "then",
                               "catch", "loop", "proc", "begin"]);
    var dedentWords = wordObj(["end", "until"]);
    var opening$1 = {"[": "]", "{": "}", "(": ")"};
    var closing$1 = {"]": "[", "}": "{", ")": "("};

    var curPunc$5;

    function chain$4(newtok, stream, state) {
      state.tokenize.push(newtok);
      return newtok(stream, state);
    }

    function tokenBase$h(stream, state) {
      if (stream.sol() && stream.match("=begin") && stream.eol()) {
        state.tokenize.push(readBlockComment);
        return "comment";
      }
      if (stream.eatSpace()) return null;
      var ch = stream.next(), m;
      if (ch == "`" || ch == "'" || ch == '"') {
        return chain$4(readQuoted(ch, "string", ch == '"' || ch == "`"), stream, state);
      } else if (ch == "/") {
        if (regexpAhead(stream))
          return chain$4(readQuoted(ch, "string.special", true), stream, state);
        else
          return "operator";
      } else if (ch == "%") {
        var style = "string", embed = true;
        if (stream.eat("s")) style = "atom";
        else if (stream.eat(/[WQ]/)) style = "string";
        else if (stream.eat(/[r]/)) style = "string.special";
        else if (stream.eat(/[wxq]/)) { style = "string"; embed = false; }
        var delim = stream.eat(/[^\w\s=]/);
        if (!delim) return "operator";
        if (opening$1.propertyIsEnumerable(delim)) delim = opening$1[delim];
        return chain$4(readQuoted(delim, style, embed, true), stream, state);
      } else if (ch == "#") {
        stream.skipToEnd();
        return "comment";
      } else if (ch == "<" && (m = stream.match(/^<([-~])[\`\"\']?([a-zA-Z_?]\w*)[\`\"\']?(?:;|$)/))) {
        return chain$4(readHereDoc(m[2], m[1]), stream, state);
      } else if (ch == "0") {
        if (stream.eat("x")) stream.eatWhile(/[\da-fA-F]/);
        else if (stream.eat("b")) stream.eatWhile(/[01]/);
        else stream.eatWhile(/[0-7]/);
        return "number";
      } else if (/\d/.test(ch)) {
        stream.match(/^[\d_]*(?:\.[\d_]+)?(?:[eE][+\-]?[\d_]+)?/);
        return "number";
      } else if (ch == "?") {
        while (stream.match(/^\\[CM]-/)) {}
        if (stream.eat("\\")) stream.eatWhile(/\w/);
        else stream.next();
        return "string";
      } else if (ch == ":") {
        if (stream.eat("'")) return chain$4(readQuoted("'", "atom", false), stream, state);
        if (stream.eat('"')) return chain$4(readQuoted('"', "atom", true), stream, state);

        // :> :>> :< :<< are valid symbols
        if (stream.eat(/[\<\>]/)) {
          stream.eat(/[\<\>]/);
          return "atom";
        }

        // :+ :- :/ :* :| :& :! are valid symbols
        if (stream.eat(/[\+\-\*\/\&\|\:\!]/)) {
          return "atom";
        }

        // Symbols can't start by a digit
        if (stream.eat(/[a-zA-Z$@_\xa1-\uffff]/)) {
          stream.eatWhile(/[\w$\xa1-\uffff]/);
          // Only one ? ! = is allowed and only as the last character
          stream.eat(/[\?\!\=]/);
          return "atom";
        }
        return "operator";
      } else if (ch == "@" && stream.match(/^@?[a-zA-Z_\xa1-\uffff]/)) {
        stream.eat("@");
        stream.eatWhile(/[\w\xa1-\uffff]/);
        return "propertyName";
      } else if (ch == "$") {
        if (stream.eat(/[a-zA-Z_]/)) {
          stream.eatWhile(/[\w]/);
        } else if (stream.eat(/\d/)) {
          stream.eat(/\d/);
        } else {
          stream.next(); // Must be a special global like $: or $!
        }
        return "variableName.special";
      } else if (/[a-zA-Z_\xa1-\uffff]/.test(ch)) {
        stream.eatWhile(/[\w\xa1-\uffff]/);
        stream.eat(/[\?\!]/);
        if (stream.eat(":")) return "atom";
        return "variable";
      } else if (ch == "|" && (state.varList || state.lastTok == "{" || state.lastTok == "do")) {
        curPunc$5 = "|";
        return null;
      } else if (/[\(\)\[\]{}\\;]/.test(ch)) {
        curPunc$5 = ch;
        return null;
      } else if (ch == "-" && stream.eat(">")) {
        return "operator";
      } else if (/[=+\-\/*:\.^%<>~|]/.test(ch)) {
        var more = stream.eatWhile(/[=+\-\/*:\.^%<>~|]/);
        if (ch == "." && !more) curPunc$5 = ".";
        return "operator";
      } else {
        return null;
      }
    }

    function regexpAhead(stream) {
      var start = stream.pos, depth = 0, next, found = false, escaped = false;
      while ((next = stream.next()) != null) {
        if (!escaped) {
          if ("[{(".indexOf(next) > -1) {
            depth++;
          } else if ("]})".indexOf(next) > -1) {
            depth--;
            if (depth < 0) break
          } else if (next == "/" && depth == 0) {
            found = true;
            break
          }
          escaped = next == "\\";
        } else {
          escaped = false;
        }
      }
      stream.backUp(stream.pos - start);
      return found
    }

    function tokenBaseUntilBrace(depth) {
      if (!depth) depth = 1;
      return function(stream, state) {
        if (stream.peek() == "}") {
          if (depth == 1) {
            state.tokenize.pop();
            return state.tokenize[state.tokenize.length-1](stream, state);
          } else {
            state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace(depth - 1);
          }
        } else if (stream.peek() == "{") {
          state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace(depth + 1);
        }
        return tokenBase$h(stream, state);
      };
    }
    function tokenBaseOnce() {
      var alreadyCalled = false;
      return function(stream, state) {
        if (alreadyCalled) {
          state.tokenize.pop();
          return state.tokenize[state.tokenize.length-1](stream, state);
        }
        alreadyCalled = true;
        return tokenBase$h(stream, state);
      };
    }
    function readQuoted(quote, style, embed, unescaped) {
      return function(stream, state) {
        var escaped = false, ch;

        if (state.context.type === 'read-quoted-paused') {
          state.context = state.context.prev;
          stream.eat("}");
        }

        while ((ch = stream.next()) != null) {
          if (ch == quote && (unescaped || !escaped)) {
            state.tokenize.pop();
            break;
          }
          if (embed && ch == "#" && !escaped) {
            if (stream.eat("{")) {
              if (quote == "}") {
                state.context = {prev: state.context, type: 'read-quoted-paused'};
              }
              state.tokenize.push(tokenBaseUntilBrace());
              break;
            } else if (/[@\$]/.test(stream.peek())) {
              state.tokenize.push(tokenBaseOnce());
              break;
            }
          }
          escaped = !escaped && ch == "\\";
        }
        return style;
      };
    }
    function readHereDoc(phrase, mayIndent) {
      return function(stream, state) {
        if (mayIndent) stream.eatSpace();
        if (stream.match(phrase)) state.tokenize.pop();
        else stream.skipToEnd();
        return "string";
      };
    }
    function readBlockComment(stream, state) {
      if (stream.sol() && stream.match("=end") && stream.eol())
        state.tokenize.pop();
      stream.skipToEnd();
      return "comment";
    }

    const ruby = {
      startState: function(indentUnit) {
        return {tokenize: [tokenBase$h],
                indented: 0,
                context: {type: "top", indented: -indentUnit},
                continuedLine: false,
                lastTok: null,
                varList: false};
      },

      token: function(stream, state) {
        curPunc$5 = null;
        if (stream.sol()) state.indented = stream.indentation();
        var style = state.tokenize[state.tokenize.length-1](stream, state), kwtype;
        var thisTok = curPunc$5;
        if (style == "variable") {
          var word = stream.current();
          style = state.lastTok == "." ? "property"
            : keywords$f.propertyIsEnumerable(stream.current()) ? "keyword"
            : /^[A-Z]/.test(word) ? "tag"
            : (state.lastTok == "def" || state.lastTok == "class" || state.varList) ? "def"
            : "variable";
          if (style == "keyword") {
            thisTok = word;
            if (indentWords.propertyIsEnumerable(word)) kwtype = "indent";
            else if (dedentWords.propertyIsEnumerable(word)) kwtype = "dedent";
            else if ((word == "if" || word == "unless") && stream.column() == stream.indentation())
              kwtype = "indent";
            else if (word == "do" && state.context.indented < state.indented)
              kwtype = "indent";
          }
        }
        if (curPunc$5 || (style && style != "comment")) state.lastTok = thisTok;
        if (curPunc$5 == "|") state.varList = !state.varList;

        if (kwtype == "indent" || /[\(\[\{]/.test(curPunc$5))
          state.context = {prev: state.context, type: curPunc$5 || style, indented: state.indented};
        else if ((kwtype == "dedent" || /[\)\]\}]/.test(curPunc$5)) && state.context.prev)
          state.context = state.context.prev;

        if (stream.eol())
          state.continuedLine = (curPunc$5 == "\\" || style == "operator");
        return style;
      },

      indent: function(state, textAfter, cx) {
        if (state.tokenize[state.tokenize.length-1] != tokenBase$h) return null;
        var firstChar = textAfter && textAfter.charAt(0);
        var ct = state.context;
        var closed = ct.type == closing$1[firstChar] ||
            ct.type == "keyword" && /^(?:end|until|else|elsif|when|rescue)\b/.test(textAfter);
        return ct.indented + (closed ? 0 : cx.unit) +
          (state.continuedLine ? cx.unit : 0);
      },

      languageData: {
        indentOnInput: /^\s*(?:end|rescue|elsif|else|\})$/,
        commentTokens: {line: "#"},
        autocomplete: keywordList
      }
    };

    var ruby$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ruby: ruby
    });

    var words$7 = {};
    var isDoubleOperatorSym = {
      eq: 'operator',
      lt: 'operator',
      le: 'operator',
      gt: 'operator',
      ge: 'operator',
      "in": 'operator',
      ne: 'operator',
      or: 'operator'
    };
    var isDoubleOperatorChar = /(<=|>=|!=|<>)/;
    var isSingleOperatorChar = /[=\(:\),{}.*<>+\-\/^\[\]]/;

    // Takes a string of words separated by spaces and adds them as
    // keys with the value of the first argument 'style'
    function define$1(style, string, context) {
      if (context) {
        var split = string.split(' ');
        for (var i = 0; i < split.length; i++) {
          words$7[split[i]] = {style: style, state: context};
        }
      }
    }
    //datastep
    define$1('def', 'stack pgm view source debug nesting nolist', ['inDataStep']);
    define$1('def', 'if while until for do do; end end; then else cancel', ['inDataStep']);
    define$1('def', 'label format _n_ _error_', ['inDataStep']);
    define$1('def', 'ALTER BUFNO BUFSIZE CNTLLEV COMPRESS DLDMGACTION ENCRYPT ENCRYPTKEY EXTENDOBSCOUNTER GENMAX GENNUM INDEX LABEL OBSBUF OUTREP PW PWREQ READ REPEMPTY REPLACE REUSE ROLE SORTEDBY SPILL TOBSNO TYPE WRITE FILECLOSE FIRSTOBS IN OBS POINTOBS WHERE WHEREUP IDXNAME IDXWHERE DROP KEEP RENAME', ['inDataStep']);
    define$1('def', 'filevar finfo finv fipname fipnamel fipstate first firstobs floor', ['inDataStep']);
    define$1('def', 'varfmt varinfmt varlabel varlen varname varnum varray varrayx vartype verify vformat vformatd vformatdx vformatn vformatnx vformatw vformatwx vformatx vinarray vinarrayx vinformat vinformatd vinformatdx vinformatn vinformatnx vinformatw vinformatwx vinformatx vlabel vlabelx vlength vlengthx vname vnamex vnferr vtype vtypex weekday', ['inDataStep']);
    define$1('def', 'zipfips zipname zipnamel zipstate', ['inDataStep']);
    define$1('def', 'put putc putn', ['inDataStep']);
    define$1('builtin', 'data run', ['inDataStep']);


    //proc
    define$1('def', 'data', ['inProc']);

    // flow control for macros
    define$1('def', '%if %end %end; %else %else; %do %do; %then', ['inMacro']);

    //everywhere
    define$1('builtin', 'proc run; quit; libname filename %macro %mend option options', ['ALL']);

    define$1('def', 'footnote title libname ods', ['ALL']);
    define$1('def', '%let %put %global %sysfunc %eval ', ['ALL']);
    // automatic macro variables http://support.sas.com/documentation/cdl/en/mcrolref/61885/HTML/default/viewer.htm#a003167023.htm
    define$1('variable', '&sysbuffr &syscc &syscharwidth &syscmd &sysdate &sysdate9 &sysday &sysdevic &sysdmg &sysdsn &sysencoding &sysenv &syserr &syserrortext &sysfilrc &syshostname &sysindex &sysinfo &sysjobid &syslast &syslckrc &syslibrc &syslogapplname &sysmacroname &sysmenv &sysmsg &sysncpu &sysodspath &sysparm &syspbuff &sysprocessid &sysprocessname &sysprocname &sysrc &sysscp &sysscpl &sysscpl &syssite &sysstartid &sysstartname &systcpiphostname &systime &sysuserid &sysver &sysvlong &sysvlong4 &syswarningtext', ['ALL']);

    //footnote[1-9]? title[1-9]?

    //options statement
    define$1('def', 'source2 nosource2 page pageno pagesize', ['ALL']);

    //proc and datastep
    define$1('def', '_all_ _character_ _cmd_ _freq_ _i_ _infile_ _last_ _msg_ _null_ _numeric_ _temporary_ _type_ abort abs addr adjrsq airy alpha alter altlog altprint and arcos array arsin as atan attrc attrib attrn authserver autoexec awscontrol awsdef awsmenu awsmenumerge awstitle backward band base betainv between blocksize blshift bnot bor brshift bufno bufsize bxor by byerr byline byte calculated call cards cards4 catcache cbufno cdf ceil center cexist change chisq cinv class cleanup close cnonct cntllev coalesce codegen col collate collin column comamid comaux1 comaux2 comdef compbl compound compress config continue convert cos cosh cpuid create cross crosstab css curobs cv daccdb daccdbsl daccsl daccsyd dacctab dairy datalines datalines4 datejul datepart datetime day dbcslang dbcstype dclose ddfm ddm delete delimiter depdb depdbsl depsl depsyd deptab dequote descending descript design= device dflang dhms dif digamma dim dinfo display distinct dkricond dkrocond dlm dnum do dopen doptname doptnum dread drop dropnote dsname dsnferr echo else emaildlg emailid emailpw emailserver emailsys encrypt end endsas engine eof eov erf erfc error errorcheck errors exist exp fappend fclose fcol fdelete feedback fetch fetchobs fexist fget file fileclose fileexist filefmt filename fileref  fmterr fmtsearch fnonct fnote font fontalias  fopen foptname foptnum force formatted formchar formdelim formdlim forward fpoint fpos fput fread frewind frlen from fsep fuzz fwrite gaminv gamma getoption getvarc getvarn go goto group gwindow hbar hbound helpenv helploc hms honorappearance hosthelp hostprint hour hpct html hvar ibessel ibr id if index indexc indexw initcmd initstmt inner input inputc inputn inr insert int intck intnx into intrr invaliddata irr is jbessel join juldate keep kentb kurtosis label lag last lbound leave left length levels lgamma lib  library libref line linesize link list log log10 log2 logpdf logpmf logsdf lostcard lowcase lrecl ls macro macrogen maps mautosource max maxdec maxr mdy mean measures median memtype merge merror min minute missing missover mlogic mod mode model modify month mopen mort mprint mrecall msglevel msymtabmax mvarsize myy n nest netpv new news nmiss no nobatch nobs nocaps nocardimage nocenter nocharcode nocmdmac nocol nocum nodate nodbcs nodetails nodmr nodms nodmsbatch nodup nodupkey noduplicates noechoauto noequals noerrorabend noexitwindows nofullstimer noicon noimplmac noint nolist noloadlist nomiss nomlogic nomprint nomrecall nomsgcase nomstored nomultenvappl nonotes nonumber noobs noovp nopad nopercent noprint noprintinit normal norow norsasuser nosetinit  nosplash nosymbolgen note notes notitle notitles notsorted noverbose noxsync noxwait npv null number numkeys nummousekeys nway obs  on open     order ordinal otherwise out outer outp= output over ovp p(1 5 10 25 50 75 90 95 99) pad pad2  paired parm parmcards path pathdll pathname pdf peek peekc pfkey pmf point poisson poke position printer probbeta probbnml probchi probf probgam probhypr probit probnegb probnorm probsig probt procleave prt ps  pw pwreq qtr quote r ranbin rancau random ranexp rangam range ranks rannor ranpoi rantbl rantri ranuni rcorr read recfm register regr remote remove rename repeat repeated replace resolve retain return reuse reverse rewind right round rsquare rtf rtrace rtraceloc s s2 samploc sasautos sascontrol sasfrscr sasmsg sasmstore sasscript sasuser saving scan sdf second select selection separated seq serror set setcomm setot sign simple sin sinh siteinfo skewness skip sle sls sortedby sortpgm sortseq sortsize soundex  spedis splashlocation split spool sqrt start std stderr stdin stfips stimer stname stnamel stop stopover sub subgroup subpopn substr sum sumwgt symbol symbolgen symget symput sysget sysin sysleave sysmsg sysparm sysprint sysprintfont sysprod sysrc system t table tables tan tanh tapeclose tbufsize terminal test then timepart tinv  tnonct to today tol tooldef totper transformout translate trantab tranwrd trigamma trim trimn trunc truncover type unformatted uniform union until upcase update user usericon uss validate value var  weight when where while wincharset window work workinit workterm write wsum xsync xwait yearcutoff yes yyq  min max', ['inDataStep', 'inProc']);
    define$1('operator', 'and not ', ['inDataStep', 'inProc']);

    // Main function
    function tokenize$2(stream, state) {
      // Finally advance the stream
      var ch = stream.next();

      // BLOCKCOMMENT
      if (ch === '/' && stream.eat('*')) {
        state.continueComment = true;
        return "comment";
      } else if (state.continueComment === true) { // in comment block
        //comment ends at the beginning of the line
        if (ch === '*' && stream.peek() === '/') {
          stream.next();
          state.continueComment = false;
        } else if (stream.skipTo('*')) { //comment is potentially later in line
          stream.skipTo('*');
          stream.next();
          if (stream.eat('/'))
            state.continueComment = false;
        } else {
          stream.skipToEnd();
        }
        return "comment";
      }

      if (ch == "*" && stream.column() == stream.indentation()) {
        stream.skipToEnd();
        return "comment"
      }

      // DoubleOperator match
      var doubleOperator = ch + stream.peek();

      if ((ch === '"' || ch === "'") && !state.continueString) {
        state.continueString = ch;
        return "string"
      } else if (state.continueString) {
        if (state.continueString == ch) {
          state.continueString = null;
        } else if (stream.skipTo(state.continueString)) {
          // quote found on this line
          stream.next();
          state.continueString = null;
        } else {
          stream.skipToEnd();
        }
        return "string";
      } else if (state.continueString !== null && stream.eol()) {
        stream.skipTo(state.continueString) || stream.skipToEnd();
        return "string";
      } else if (/[\d\.]/.test(ch)) { //find numbers
        if (ch === ".")
          stream.match(/^[0-9]+([eE][\-+]?[0-9]+)?/);
        else if (ch === "0")
          stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);
        else
          stream.match(/^[0-9]*\.?[0-9]*([eE][\-+]?[0-9]+)?/);
        return "number";
      } else if (isDoubleOperatorChar.test(ch + stream.peek())) { // TWO SYMBOL TOKENS
        stream.next();
        return "operator";
      } else if (isDoubleOperatorSym.hasOwnProperty(doubleOperator)) {
        stream.next();
        if (stream.peek() === ' ')
          return isDoubleOperatorSym[doubleOperator.toLowerCase()];
      } else if (isSingleOperatorChar.test(ch)) { // SINGLE SYMBOL TOKENS
        return "operator";
      }

      // Matches one whole word -- even if the word is a character
      var word;
      if (stream.match(/[%&;\w]+/, false) != null) {
        word = ch + stream.match(/[%&;\w]+/, true);
        if (/&/.test(word)) return 'variable'
      } else {
        word = ch;
      }
      // the word after DATA PROC or MACRO
      if (state.nextword) {
        stream.match(/[\w]+/);
        // match memname.libname
        if (stream.peek() === '.') stream.skipTo(' ');
        state.nextword = false;
        return 'variableName.special';
      }

      word = word.toLowerCase();
      // Are we in a DATA Step?
      if (state.inDataStep) {
        if (word === 'run;' || stream.match(/run\s;/)) {
          state.inDataStep = false;
          return 'builtin';
        }
        // variable formats
        if ((word) && stream.next() === '.') {
          //either a format or libname.memname
          if (/\w/.test(stream.peek())) return 'variableName.special';
          else return 'variable';
        }
        // do we have a DATA Step keyword
        if (word && words$7.hasOwnProperty(word) &&
            (words$7[word].state.indexOf("inDataStep") !== -1 ||
             words$7[word].state.indexOf("ALL") !== -1)) {
          //backup to the start of the word
          if (stream.start < stream.pos)
            stream.backUp(stream.pos - stream.start);
          //advance the length of the word and return
          for (var i = 0; i < word.length; ++i) stream.next();
          return words$7[word].style;
        }
      }
      // Are we in an Proc statement?
      if (state.inProc) {
        if (word === 'run;' || word === 'quit;') {
          state.inProc = false;
          return 'builtin';
        }
        // do we have a proc keyword
        if (word && words$7.hasOwnProperty(word) &&
            (words$7[word].state.indexOf("inProc") !== -1 ||
             words$7[word].state.indexOf("ALL") !== -1)) {
          stream.match(/[\w]+/);
          return words$7[word].style;
        }
      }
      // Are we in a Macro statement?
      if (state.inMacro) {
        if (word === '%mend') {
          if (stream.peek() === ';') stream.next();
          state.inMacro = false;
          return 'builtin';
        }
        if (word && words$7.hasOwnProperty(word) &&
            (words$7[word].state.indexOf("inMacro") !== -1 ||
             words$7[word].state.indexOf("ALL") !== -1)) {
          stream.match(/[\w]+/);
          return words$7[word].style;
        }

        return 'atom';
      }
      // Do we have Keywords specific words?
      if (word && words$7.hasOwnProperty(word)) {
        // Negates the initial next()
        stream.backUp(1);
        // Actually move the stream
        stream.match(/[\w]+/);
        if (word === 'data' && /=/.test(stream.peek()) === false) {
          state.inDataStep = true;
          state.nextword = true;
          return 'builtin';
        }
        if (word === 'proc') {
          state.inProc = true;
          state.nextword = true;
          return 'builtin';
        }
        if (word === '%macro') {
          state.inMacro = true;
          state.nextword = true;
          return 'builtin';
        }
        if (/title[1-9]/.test(word)) return 'def';

        if (word === 'footnote') {
          stream.eat(/[1-9]/);
          return 'def';
        }

        // Returns their value as state in the prior define methods
        if (state.inDataStep === true && words$7[word].state.indexOf("inDataStep") !== -1)
          return words$7[word].style;
        if (state.inProc === true && words$7[word].state.indexOf("inProc") !== -1)
          return words$7[word].style;
        if (state.inMacro === true && words$7[word].state.indexOf("inMacro") !== -1)
          return words$7[word].style;
        if (words$7[word].state.indexOf("ALL") !== -1)
          return words$7[word].style;
        return null;
      }
      // Unrecognized syntax
      return null;
    }

    const sas = {
      startState: function () {
        return {
          inDataStep: false,
          inProc: false,
          inMacro: false,
          nextword: false,
          continueString: null,
          continueComment: false
        };
      },
      token: function (stream, state) {
        // Strip the spaces, but regex will account for them either way
        if (stream.eatSpace()) return null;
        // Go through the main process
        return tokenize$2(stream, state);
      },

      languageData: {
        commentTokens: {block: {open: "/*", close: "*/"}}
      }
    };

    var sas$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        sas: sas
    });

    var BUILTIN = "builtin", COMMENT = "comment", STRING = "string",
        ATOM = "atom", NUMBER = "number", BRACKET = "bracket";
    var INDENT_WORD_SKIP = 2;

    function makeKeywords(str) {
      var obj = {}, words = str.split(" ");
      for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
      return obj;
    }

    var keywords$e = makeKeywords("λ case-lambda call/cc class cond-expand define-class define-values exit-handler field import inherit init-field interface let*-values let-values let/ec mixin opt-lambda override protect provide public rename require require-for-syntax syntax syntax-case syntax-error unit/sig unless when with-syntax and begin call-with-current-continuation call-with-input-file call-with-output-file case cond define define-syntax define-macro defmacro delay do dynamic-wind else for-each if lambda let let* let-syntax letrec letrec-syntax map or syntax-rules abs acos angle append apply asin assoc assq assv atan boolean? caar cadr call-with-input-file call-with-output-file call-with-values car cdddar cddddr cdr ceiling char->integer char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? char? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display eof-object? eq? equal? eqv? eval even? exact->inexact exact? exp expt #f floor force gcd imag-part inexact->exact inexact? input-port? integer->char integer? interaction-environment lcm length list list->string list->vector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number->string number? numerator odd? open-input-file open-output-file output-port? pair? peek-char port? positive? procedure? quasiquote quote quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string string->list string->number string->symbol string-append string-ci<=? string-ci<? string-ci=? string-ci>=? string-ci>? string-copy string-fill! string-length string-ref string-set! string<=? string<? string=? string>=? string>? string? substring symbol->string symbol? #t tan transcript-off transcript-on truncate values vector vector->list vector-fill! vector-length vector-ref vector-set! with-input-from-file with-output-to-file write write-char zero?");
    var indentKeys = makeKeywords("define let letrec let* lambda define-macro defmacro let-syntax letrec-syntax let-values let*-values define-syntax syntax-rules define-values when unless");

    function stateStack(indent, type, prev) { // represents a state stack object
      this.indent = indent;
      this.type = type;
      this.prev = prev;
    }

    function pushStack(state, indent, type) {
      state.indentStack = new stateStack(indent, type, state.indentStack);
    }

    function popStack(state) {
      state.indentStack = state.indentStack.prev;
    }

    var binaryMatcher = new RegExp(/^(?:[-+]i|[-+][01]+#*(?:\/[01]+#*)?i|[-+]?[01]+#*(?:\/[01]+#*)?@[-+]?[01]+#*(?:\/[01]+#*)?|[-+]?[01]+#*(?:\/[01]+#*)?[-+](?:[01]+#*(?:\/[01]+#*)?)?i|[-+]?[01]+#*(?:\/[01]+#*)?)(?=[()\s;"]|$)/i);
    var octalMatcher = new RegExp(/^(?:[-+]i|[-+][0-7]+#*(?:\/[0-7]+#*)?i|[-+]?[0-7]+#*(?:\/[0-7]+#*)?@[-+]?[0-7]+#*(?:\/[0-7]+#*)?|[-+]?[0-7]+#*(?:\/[0-7]+#*)?[-+](?:[0-7]+#*(?:\/[0-7]+#*)?)?i|[-+]?[0-7]+#*(?:\/[0-7]+#*)?)(?=[()\s;"]|$)/i);
    var hexMatcher = new RegExp(/^(?:[-+]i|[-+][\da-f]+#*(?:\/[\da-f]+#*)?i|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?@[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?[-+](?:[\da-f]+#*(?:\/[\da-f]+#*)?)?i|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?)(?=[()\s;"]|$)/i);
    var decimalMatcher = new RegExp(/^(?:[-+]i|[-+](?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)i|[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)@[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)|[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)[-+](?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)?i|(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*))(?=[()\s;"]|$)/i);

    function isBinaryNumber (stream) {
      return stream.match(binaryMatcher);
    }

    function isOctalNumber (stream) {
      return stream.match(octalMatcher);
    }

    function isDecimalNumber (stream, backup) {
      if (backup === true) {
        stream.backUp(1);
      }
      return stream.match(decimalMatcher);
    }

    function isHexNumber (stream) {
      return stream.match(hexMatcher);
    }

    const scheme = {
      startState: function () {
        return {
          indentStack: null,
          indentation: 0,
          mode: false,
          sExprComment: false,
          sExprQuote: false
        };
      },

      token: function (stream, state) {
        if (state.indentStack == null && stream.sol()) {
          // update indentation, but only if indentStack is empty
          state.indentation = stream.indentation();
        }

        // skip spaces
        if (stream.eatSpace()) {
          return null;
        }
        var returnType = null;

        switch(state.mode){
        case "string": // multi-line string parsing mode
          var next, escaped = false;
          while ((next = stream.next()) != null) {
            if (next == "\"" && !escaped) {

              state.mode = false;
              break;
            }
            escaped = !escaped && next == "\\";
          }
          returnType = STRING; // continue on in scheme-string mode
          break;
        case "comment": // comment parsing mode
          var next, maybeEnd = false;
          while ((next = stream.next()) != null) {
            if (next == "#" && maybeEnd) {

              state.mode = false;
              break;
            }
            maybeEnd = (next == "|");
          }
          returnType = COMMENT;
          break;
        case "s-expr-comment": // s-expr commenting mode
          state.mode = false;
          if(stream.peek() == "(" || stream.peek() == "["){
            // actually start scheme s-expr commenting mode
            state.sExprComment = 0;
          }else {
            // if not we just comment the entire of the next token
            stream.eatWhile(/[^\s\(\)\[\]]/); // eat symbol atom
            returnType = COMMENT;
            break;
          }
        default: // default parsing mode
          var ch = stream.next();

          if (ch == "\"") {
            state.mode = "string";
            returnType = STRING;

          } else if (ch == "'") {
            if (stream.peek() == "(" || stream.peek() == "["){
              if (typeof state.sExprQuote != "number") {
                state.sExprQuote = 0;
              } // else already in a quoted expression
              returnType = ATOM;
            } else {
              stream.eatWhile(/[\w_\-!$%&*+\.\/:<=>?@\^~]/);
              returnType = ATOM;
            }
          } else if (ch == '#') {
            if (stream.eat("|")) {                    // Multi-line comment
              state.mode = "comment"; // toggle to comment mode
              returnType = COMMENT;
            } else if (stream.eat(/[tf]/i)) {            // #t/#f (atom)
              returnType = ATOM;
            } else if (stream.eat(';')) {                // S-Expr comment
              state.mode = "s-expr-comment";
              returnType = COMMENT;
            } else {
              var numTest = null, hasExactness = false, hasRadix = true;
              if (stream.eat(/[ei]/i)) {
                hasExactness = true;
              } else {
                stream.backUp(1);       // must be radix specifier
              }
              if (stream.match(/^#b/i)) {
                numTest = isBinaryNumber;
              } else if (stream.match(/^#o/i)) {
                numTest = isOctalNumber;
              } else if (stream.match(/^#x/i)) {
                numTest = isHexNumber;
              } else if (stream.match(/^#d/i)) {
                numTest = isDecimalNumber;
              } else if (stream.match(/^[-+0-9.]/, false)) {
                hasRadix = false;
                numTest = isDecimalNumber;
                // re-consume the initial # if all matches failed
              } else if (!hasExactness) {
                stream.eat('#');
              }
              if (numTest != null) {
                if (hasRadix && !hasExactness) {
                  // consume optional exactness after radix
                  stream.match(/^#[ei]/i);
                }
                if (numTest(stream))
                  returnType = NUMBER;
              }
            }
          } else if (/^[-+0-9.]/.test(ch) && isDecimalNumber(stream, true)) { // match non-prefixed number, must be decimal
            returnType = NUMBER;
          } else if (ch == ";") { // comment
            stream.skipToEnd(); // rest of the line is a comment
            returnType = COMMENT;
          } else if (ch == "(" || ch == "[") {
            var keyWord = ''; var indentTemp = stream.column(), letter;
            /**
               Either
               (indent-word ..
               (non-indent-word ..
               (;something else, bracket, etc.
            */

            while ((letter = stream.eat(/[^\s\(\[\;\)\]]/)) != null) {
              keyWord += letter;
            }

            if (keyWord.length > 0 && indentKeys.propertyIsEnumerable(keyWord)) { // indent-word

              pushStack(state, indentTemp + INDENT_WORD_SKIP, ch);
            } else { // non-indent word
              // we continue eating the spaces
              stream.eatSpace();
              if (stream.eol() || stream.peek() == ";") {
                // nothing significant after
                // we restart indentation 1 space after
                pushStack(state, indentTemp + 1, ch);
              } else {
                pushStack(state, indentTemp + stream.current().length, ch); // else we match
              }
            }
            stream.backUp(stream.current().length - 1); // undo all the eating

            if(typeof state.sExprComment == "number") state.sExprComment++;
            if(typeof state.sExprQuote == "number") state.sExprQuote++;

            returnType = BRACKET;
          } else if (ch == ")" || ch == "]") {
            returnType = BRACKET;
            if (state.indentStack != null && state.indentStack.type == (ch == ")" ? "(" : "[")) {
              popStack(state);

              if(typeof state.sExprComment == "number"){
                if(--state.sExprComment == 0){
                  returnType = COMMENT; // final closing bracket
                  state.sExprComment = false; // turn off s-expr commenting mode
                }
              }
              if(typeof state.sExprQuote == "number"){
                if(--state.sExprQuote == 0){
                  returnType = ATOM; // final closing bracket
                  state.sExprQuote = false; // turn off s-expr quote mode
                }
              }
            }
          } else {
            stream.eatWhile(/[\w_\-!$%&*+\.\/:<=>?@\^~]/);

            if (keywords$e && keywords$e.propertyIsEnumerable(stream.current())) {
              returnType = BUILTIN;
            } else returnType = "variable";
          }
        }
        return (typeof state.sExprComment == "number") ? COMMENT : ((typeof state.sExprQuote == "number") ? ATOM : returnType);
      },

      indent: function (state) {
        if (state.indentStack == null) return state.indentation;
        return state.indentStack.indent;
      },

      languageData: {
        closeBrackets: {brackets: ["(", "[", "{", '"']},
        commentTokens: {line: ";;"}
      }
    };

    var scheme$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        scheme: scheme
    });

    var words$6 = {};
    function define(style, dict) {
      for(var i = 0; i < dict.length; i++) {
        words$6[dict[i]] = style;
      }
    }
    var commonAtoms$1 = ["true", "false"];
    var commonKeywords$1 = ["if", "then", "do", "else", "elif", "while", "until", "for", "in", "esac", "fi",
                          "fin", "fil", "done", "exit", "set", "unset", "export", "function"];
    var commonCommands = ["ab", "awk", "bash", "beep", "cat", "cc", "cd", "chown", "chmod", "chroot", "clear",
                          "cp", "curl", "cut", "diff", "echo", "find", "gawk", "gcc", "get", "git", "grep", "hg", "kill", "killall",
                          "ln", "ls", "make", "mkdir", "openssl", "mv", "nc", "nl", "node", "npm", "ping", "ps", "restart", "rm",
                          "rmdir", "sed", "service", "sh", "shopt", "shred", "source", "sort", "sleep", "ssh", "start", "stop",
                          "su", "sudo", "svn", "tee", "telnet", "top", "touch", "vi", "vim", "wall", "wc", "wget", "who", "write",
                          "yes", "zsh"];

    define('atom', commonAtoms$1);
    define('keyword', commonKeywords$1);
    define('builtin', commonCommands);

    function tokenBase$g(stream, state) {
      if (stream.eatSpace()) return null;

      var sol = stream.sol();
      var ch = stream.next();

      if (ch === '\\') {
        stream.next();
        return null;
      }
      if (ch === '\'' || ch === '"' || ch === '`') {
        state.tokens.unshift(tokenString$b(ch, ch === "`" ? "quote" : "string"));
        return tokenize$1(stream, state);
      }
      if (ch === '#') {
        if (sol && stream.eat('!')) {
          stream.skipToEnd();
          return 'meta'; // 'comment'?
        }
        stream.skipToEnd();
        return 'comment';
      }
      if (ch === '$') {
        state.tokens.unshift(tokenDollar);
        return tokenize$1(stream, state);
      }
      if (ch === '+' || ch === '=') {
        return 'operator';
      }
      if (ch === '-') {
        stream.eat('-');
        stream.eatWhile(/\w/);
        return 'attribute';
      }
      if (ch == "<") {
        if (stream.match("<<")) return "operator"
        var heredoc = stream.match(/^<-?\s*['"]?([^'"]*)['"]?/);
        if (heredoc) {
          state.tokens.unshift(tokenHeredoc(heredoc[1]));
          return 'string.special'
        }
      }
      if (/\d/.test(ch)) {
        stream.eatWhile(/\d/);
        if(stream.eol() || !/\w/.test(stream.peek())) {
          return 'number';
        }
      }
      stream.eatWhile(/[\w-]/);
      var cur = stream.current();
      if (stream.peek() === '=' && /\w+/.test(cur)) return 'def';
      return words$6.hasOwnProperty(cur) ? words$6[cur] : null;
    }

    function tokenString$b(quote, style) {
      var close = quote == "(" ? ")" : quote == "{" ? "}" : quote;
      return function(stream, state) {
        var next, escaped = false;
        while ((next = stream.next()) != null) {
          if (next === close && !escaped) {
            state.tokens.shift();
            break;
          } else if (next === '$' && !escaped && quote !== "'" && stream.peek() != close) {
            escaped = true;
            stream.backUp(1);
            state.tokens.unshift(tokenDollar);
            break;
          } else if (!escaped && quote !== close && next === quote) {
            state.tokens.unshift(tokenString$b(quote, style));
            return tokenize$1(stream, state)
          } else if (!escaped && /['"]/.test(next) && !/['"]/.test(quote)) {
            state.tokens.unshift(tokenStringStart(next, "string"));
            stream.backUp(1);
            break;
          }
          escaped = !escaped && next === '\\';
        }
        return style;
      };
    }
    function tokenStringStart(quote, style) {
      return function(stream, state) {
        state.tokens[0] = tokenString$b(quote, style);
        stream.next();
        return tokenize$1(stream, state)
      }
    }

    var tokenDollar = function(stream, state) {
      if (state.tokens.length > 1) stream.eat('$');
      var ch = stream.next();
      if (/['"({]/.test(ch)) {
        state.tokens[0] = tokenString$b(ch, ch == "(" ? "quote" : ch == "{" ? "def" : "string");
        return tokenize$1(stream, state);
      }
      if (!/\d/.test(ch)) stream.eatWhile(/\w/);
      state.tokens.shift();
      return 'def';
    };

    function tokenHeredoc(delim) {
      return function(stream, state) {
        if (stream.sol() && stream.string == delim) state.tokens.shift();
        stream.skipToEnd();
        return "string.special"
      }
    }

    function tokenize$1(stream, state) {
      return (state.tokens[0] || tokenBase$g) (stream, state);
    }
    const shell = {
      startState: function() {return {tokens:[]};},
      token: function(stream, state) {
        return tokenize$1(stream, state);
      },
      languageData: {
        autocomplete: commonAtoms$1.concat(commonKeywords$1, commonCommands),
        closeBrackets: {brackets: ["(", "[", "{", "'", '"', "`"]},
        commentTokens: {line: "#"}
      }
    };

    var shell$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        shell: shell
    });

    function words$5(str) {
      var obj = {}, words = str.split(" ");
      for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
      return obj;
    }

    var keywords$d = words$5("if elsif else stop require");
    var atoms$3 = words$5("true false not");

    function tokenBase$f(stream, state) {

      var ch = stream.next();
      if (ch == "/" && stream.eat("*")) {
        state.tokenize = tokenCComment$1;
        return tokenCComment$1(stream, state);
      }

      if (ch === '#') {
        stream.skipToEnd();
        return "comment";
      }

      if (ch == "\"") {
        state.tokenize = tokenString$a(ch);
        return state.tokenize(stream, state);
      }

      if (ch == "(") {
        state._indent.push("(");
        // add virtual angel wings so that editor behaves...
        // ...more sane incase of broken brackets
        state._indent.push("{");
        return null;
      }

      if (ch === "{") {
        state._indent.push("{");
        return null;
      }

      if (ch == ")")  {
        state._indent.pop();
        state._indent.pop();
      }

      if (ch === "}") {
        state._indent.pop();
        return null;
      }

      if (ch == ",")
        return null;

      if (ch == ";")
        return null;


      if (/[{}\(\),;]/.test(ch))
        return null;

      // 1*DIGIT "K" / "M" / "G"
      if (/\d/.test(ch)) {
        stream.eatWhile(/[\d]/);
        stream.eat(/[KkMmGg]/);
        return "number";
      }

      // ":" (ALPHA / "_") *(ALPHA / DIGIT / "_")
      if (ch == ":") {
        stream.eatWhile(/[a-zA-Z_]/);
        stream.eatWhile(/[a-zA-Z0-9_]/);

        return "operator";
      }

      stream.eatWhile(/\w/);
      var cur = stream.current();

      // "text:" *(SP / HTAB) (hash-comment / CRLF)
      // *(multiline-literal / multiline-dotstart)
      // "." CRLF
      if ((cur == "text") && stream.eat(":"))
      {
        state.tokenize = tokenMultiLineString;
        return "string";
      }

      if (keywords$d.propertyIsEnumerable(cur))
        return "keyword";

      if (atoms$3.propertyIsEnumerable(cur))
        return "atom";

      return null;
    }

    function tokenMultiLineString(stream, state)
    {
      state._multiLineString = true;
      // the first line is special it may contain a comment
      if (!stream.sol()) {
        stream.eatSpace();

        if (stream.peek() == "#") {
          stream.skipToEnd();
          return "comment";
        }

        stream.skipToEnd();
        return "string";
      }

      if ((stream.next() == ".")  && (stream.eol()))
      {
        state._multiLineString = false;
        state.tokenize = tokenBase$f;
      }

      return "string";
    }

    function tokenCComment$1(stream, state) {
      var maybeEnd = false, ch;
      while ((ch = stream.next()) != null) {
        if (maybeEnd && ch == "/") {
          state.tokenize = tokenBase$f;
          break;
        }
        maybeEnd = (ch == "*");
      }
      return "comment";
    }

    function tokenString$a(quote) {
      return function(stream, state) {
        var escaped = false, ch;
        while ((ch = stream.next()) != null) {
          if (ch == quote && !escaped)
            break;
          escaped = !escaped && ch == "\\";
        }
        if (!escaped) state.tokenize = tokenBase$f;
        return "string";
      };
    }

    const sieve = {
      startState: function(base) {
        return {tokenize: tokenBase$f,
                baseIndent: base || 0,
                _indent: []};
      },

      token: function(stream, state) {
        if (stream.eatSpace())
          return null;

        return (state.tokenize || tokenBase$f)(stream, state);
      },

      indent: function(state, _textAfter, cx) {
        var length = state._indent.length;
        if (_textAfter && (_textAfter[0] == "}"))
          length--;

        if (length <0)
          length = 0;

        return length * cx.unit;
      },

      languageData: {
        indentOnInput: /^\s*\}$/
      }
    };

    var sieve$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        sieve: sieve
    });

    var specialChars = /[+\-\/\\*~<>=@%|&?!.,:;^]/;
    var keywords$c = /true|false|nil|self|super|thisContext/;

    var Context$5 = function(tokenizer, parent) {
      this.next = tokenizer;
      this.parent = parent;
    };

    var Token = function(name, context, eos) {
      this.name = name;
      this.context = context;
      this.eos = eos;
    };

    var State = function() {
      this.context = new Context$5(next, null);
      this.expectVariable = true;
      this.indentation = 0;
      this.userIndentationDelta = 0;
    };

    State.prototype.userIndent = function(indentation, indentUnit) {
      this.userIndentationDelta = indentation > 0 ? (indentation / indentUnit - this.indentation) : 0;
    };

    var next = function(stream, context, state) {
      var token = new Token(null, context, false);
      var aChar = stream.next();

      if (aChar === '"') {
        token = nextComment(stream, new Context$5(nextComment, context));

      } else if (aChar === '\'') {
        token = nextString(stream, new Context$5(nextString, context));

      } else if (aChar === '#') {
        if (stream.peek() === '\'') {
          stream.next();
          token = nextSymbol(stream, new Context$5(nextSymbol, context));
        } else {
          if (stream.eatWhile(/[^\s.{}\[\]()]/))
            token.name = 'string.special';
          else
            token.name = 'meta';
        }

      } else if (aChar === '$') {
        if (stream.next() === '<') {
          stream.eatWhile(/[^\s>]/);
          stream.next();
        }
        token.name = 'string.special';

      } else if (aChar === '|' && state.expectVariable) {
        token.context = new Context$5(nextTemporaries, context);

      } else if (/[\[\]{}()]/.test(aChar)) {
        token.name = 'bracket';
        token.eos = /[\[{(]/.test(aChar);

        if (aChar === '[') {
          state.indentation++;
        } else if (aChar === ']') {
          state.indentation = Math.max(0, state.indentation - 1);
        }

      } else if (specialChars.test(aChar)) {
        stream.eatWhile(specialChars);
        token.name = 'operator';
        token.eos = aChar !== ';'; // ; cascaded message expression

      } else if (/\d/.test(aChar)) {
        stream.eatWhile(/[\w\d]/);
        token.name = 'number';

      } else if (/[\w_]/.test(aChar)) {
        stream.eatWhile(/[\w\d_]/);
        token.name = state.expectVariable ? (keywords$c.test(stream.current()) ? 'keyword' : 'variable') : null;

      } else {
        token.eos = state.expectVariable;
      }

      return token;
    };

    var nextComment = function(stream, context) {
      stream.eatWhile(/[^"]/);
      return new Token('comment', stream.eat('"') ? context.parent : context, true);
    };

    var nextString = function(stream, context) {
      stream.eatWhile(/[^']/);
      return new Token('string', stream.eat('\'') ? context.parent : context, false);
    };

    var nextSymbol = function(stream, context) {
      stream.eatWhile(/[^']/);
      return new Token('string.special', stream.eat('\'') ? context.parent : context, false);
    };

    var nextTemporaries = function(stream, context) {
      var token = new Token(null, context, false);
      var aChar = stream.next();

      if (aChar === '|') {
        token.context = context.parent;
        token.eos = true;

      } else {
        stream.eatWhile(/[^|]/);
        token.name = 'variable';
      }

      return token;
    };

    const smalltalk = {
      startState: function() {
        return new State;
      },

      token: function(stream, state) {
        state.userIndent(stream.indentation(), stream.indentUnit);

        if (stream.eatSpace()) {
          return null;
        }

        var token = state.context.next(stream, state.context, state);
        state.context = token.context;
        state.expectVariable = token.eos;

        return token.name;
      },

      blankLine: function(state, indentUnit) {
        state.userIndent(0, indentUnit);
      },

      indent: function(state, textAfter, cx) {
        var i = state.context.next === next && textAfter && textAfter.charAt(0) === ']' ? -1 : state.userIndentationDelta;
        return (state.indentation + i) * cx.unit;
      },

      languageData: {
        indentOnInput: /^\s*\]$/
      }
    };

    var smalltalk$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        smalltalk: smalltalk
    });

    var isStringChar = /[^\s\|\!\+\-\*\?\~\^\&\:\(\)\[\]\{\}\"\\]/;
    var isOperatorChar$5 = /[\|\!\+\-\*\?\~\^\&]/;
    var isOperatorString = /^(OR|AND|NOT|TO)$/i;

    function isNumber(word) {
      return parseFloat(word).toString() === word;
    }

    function tokenString$9(quote) {
      return function(stream, state) {
        var escaped = false, next;
        while ((next = stream.next()) != null) {
          if (next == quote && !escaped) break;
          escaped = !escaped && next == "\\";
        }

        if (!escaped) state.tokenize = tokenBase$e;
        return "string";
      };
    }

    function tokenOperator(operator) {
      return function(stream, state) {
        if (operator == "|")
          stream.eat(/\|/);
        else if (operator == "&")
          stream.eat(/\&/);

        state.tokenize = tokenBase$e;
        return "operator";
      };
    }

    function tokenWord(ch) {
      return function(stream, state) {
        var word = ch;
        while ((ch = stream.peek()) && ch.match(isStringChar) != null) {
          word += stream.next();
        }

        state.tokenize = tokenBase$e;
        if (isOperatorString.test(word))
          return "operator";
        else if (isNumber(word))
          return "number";
        else if (stream.peek() == ":")
          return "propertyName";
        else
          return "string";
      };
    }

    function tokenBase$e(stream, state) {
      var ch = stream.next();
      if (ch == '"')
        state.tokenize = tokenString$9(ch);
      else if (isOperatorChar$5.test(ch))
        state.tokenize = tokenOperator(ch);
      else if (isStringChar.test(ch))
        state.tokenize = tokenWord(ch);

      return (state.tokenize != tokenBase$e) ? state.tokenize(stream, state) : null;
    }

    const solr = {
      startState: function() {
        return {
          tokenize: tokenBase$e
        };
      },

      token: function(stream, state) {
        if (stream.eatSpace()) return null;
        return state.tokenize(stream, state);
      }
    };

    var solr$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        solr: solr
    });

    var curPunc$4;

    function wordRegexp$5(words) {
      return new RegExp("^(?:" + words.join("|") + ")$", "i");
    }
    var ops = wordRegexp$5(["str", "lang", "langmatches", "datatype", "bound", "sameterm", "isiri", "isuri",
                          "iri", "uri", "bnode", "count", "sum", "min", "max", "avg", "sample",
                          "group_concat", "rand", "abs", "ceil", "floor", "round", "concat", "substr", "strlen",
                          "replace", "ucase", "lcase", "encode_for_uri", "contains", "strstarts", "strends",
                          "strbefore", "strafter", "year", "month", "day", "hours", "minutes", "seconds",
                          "timezone", "tz", "now", "uuid", "struuid", "md5", "sha1", "sha256", "sha384",
                          "sha512", "coalesce", "if", "strlang", "strdt", "isnumeric", "regex", "exists",
                          "isblank", "isliteral", "a", "bind"]);
    var keywords$b = wordRegexp$5(["base", "prefix", "select", "distinct", "reduced", "construct", "describe",
                               "ask", "from", "named", "where", "order", "limit", "offset", "filter", "optional",
                               "graph", "by", "asc", "desc", "as", "having", "undef", "values", "group",
                               "minus", "in", "not", "service", "silent", "using", "insert", "delete", "union",
                               "true", "false", "with",
                               "data", "copy", "to", "move", "add", "create", "drop", "clear", "load"]);
    var operatorChars$1 = /[*+\-<>=&|\^\/!\?]/;

    function tokenBase$d(stream, state) {
      var ch = stream.next();
      curPunc$4 = null;
      if (ch == "$" || ch == "?") {
        if(ch == "?" && stream.match(/\s/, false)){
          return "operator";
        }
        stream.match(/^[A-Za-z0-9_\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][A-Za-z0-9_\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]*/);
        return "variableName.local";
      }
      else if (ch == "<" && !stream.match(/^[\s\u00a0=]/, false)) {
        stream.match(/^[^\s\u00a0>]*>?/);
        return "atom";
      }
      else if (ch == "\"" || ch == "'") {
        state.tokenize = tokenLiteral$1(ch);
        return state.tokenize(stream, state);
      }
      else if (/[{}\(\),\.;\[\]]/.test(ch)) {
        curPunc$4 = ch;
        return "bracket";
      }
      else if (ch == "#") {
        stream.skipToEnd();
        return "comment";
      }
      else if (ch === "^") {
        ch = stream.peek();
        if (ch === "^") stream.eat("^");
        else stream.eatWhile(operatorChars$1);
        return "operator";
      }
      else if (operatorChars$1.test(ch)) {
        stream.eatWhile(operatorChars$1);
        return "operator";
      }
      else if (ch == ":") {
        eatPnLocal(stream);
        return "atom";
      }
      else if (ch == "@") {
        stream.eatWhile(/[a-z\d\-]/i);
        return "meta";
      }
      else {
        stream.eatWhile(/[_\w\d]/);
        if (stream.eat(":")) {
          eatPnLocal(stream);
          return "atom";
        }
        var word = stream.current();
        if (ops.test(word))
          return "builtin";
        else if (keywords$b.test(word))
          return "keyword";
        else
          return "variable";
      }
    }

    function eatPnLocal(stream) {
      stream.match(/(\.(?=[\w_\-\\%])|[:\w_-]|\\[-\\_~.!$&'()*+,;=/?#@%]|%[a-f\d][a-f\d])+/i);
    }

    function tokenLiteral$1(quote) {
      return function(stream, state) {
        var escaped = false, ch;
        while ((ch = stream.next()) != null) {
          if (ch == quote && !escaped) {
            state.tokenize = tokenBase$d;
            break;
          }
          escaped = !escaped && ch == "\\";
        }
        return "string";
      };
    }

    function pushContext$7(state, type, col) {
      state.context = {prev: state.context, indent: state.indent, col: col, type: type};
    }
    function popContext$7(state) {
      state.indent = state.context.indent;
      state.context = state.context.prev;
    }

    const sparql = {
      startState: function() {
        return {tokenize: tokenBase$d,
                context: null,
                indent: 0,
                col: 0};
      },

      token: function(stream, state) {
        if (stream.sol()) {
          if (state.context && state.context.align == null) state.context.align = false;
          state.indent = stream.indentation();
        }
        if (stream.eatSpace()) return null;
        var style = state.tokenize(stream, state);

        if (style != "comment" && state.context && state.context.align == null && state.context.type != "pattern") {
          state.context.align = true;
        }

        if (curPunc$4 == "(") pushContext$7(state, ")", stream.column());
        else if (curPunc$4 == "[") pushContext$7(state, "]", stream.column());
        else if (curPunc$4 == "{") pushContext$7(state, "}", stream.column());
        else if (/[\]\}\)]/.test(curPunc$4)) {
          while (state.context && state.context.type == "pattern") popContext$7(state);
          if (state.context && curPunc$4 == state.context.type) {
            popContext$7(state);
            if (curPunc$4 == "}" && state.context && state.context.type == "pattern")
              popContext$7(state);
          }
        }
        else if (curPunc$4 == "." && state.context && state.context.type == "pattern") popContext$7(state);
        else if (/atom|string|variable/.test(style) && state.context) {
          if (/[\}\]]/.test(state.context.type))
            pushContext$7(state, "pattern", stream.column());
          else if (state.context.type == "pattern" && !state.context.align) {
            state.context.align = true;
            state.context.col = stream.column();
          }
        }

        return style;
      },

      indent: function(state, textAfter, cx) {
        var firstChar = textAfter && textAfter.charAt(0);
        var context = state.context;
        if (/[\]\}]/.test(firstChar))
          while (context && context.type == "pattern") context = context.prev;

        var closing = context && firstChar == context.type;
        if (!context)
          return 0;
        else if (context.type == "pattern")
          return context.col;
        else if (context.align)
          return context.col + (closing ? 0 : 1);
        else
          return context.indent + (closing ? 0 : cx.unit);
      },

      languageData: {
        commentTokens: {line: "#"}
      }
    };

    var sparql$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        sparql: sparql
    });

    const spreadsheet = {
      startState: function () {
        return {
          stringType: null,
          stack: []
        };
      },
      token: function (stream, state) {
        if (!stream) return;

        //check for state changes
        if (state.stack.length === 0) {
          //strings
          if ((stream.peek() == '"') || (stream.peek() == "'")) {
            state.stringType = stream.peek();
            stream.next(); // Skip quote
            state.stack.unshift("string");
          }
        }

        //return state
        //stack has
        switch (state.stack[0]) {
        case "string":
          while (state.stack[0] === "string" && !stream.eol()) {
            if (stream.peek() === state.stringType) {
              stream.next(); // Skip quote
              state.stack.shift(); // Clear flag
            } else if (stream.peek() === "\\") {
              stream.next();
              stream.next();
            } else {
              stream.match(/^.[^\\\"\']*/);
            }
          }
          return "string";

        case "characterClass":
          while (state.stack[0] === "characterClass" && !stream.eol()) {
            if (!(stream.match(/^[^\]\\]+/) || stream.match(/^\\./)))
              state.stack.shift();
          }
          return "operator";
        }

        var peek = stream.peek();

        //no stack
        switch (peek) {
        case "[":
          stream.next();
          state.stack.unshift("characterClass");
          return "bracket";
        case ":":
          stream.next();
          return "operator";
        case "\\":
          if (stream.match(/\\[a-z]+/)) return "string.special";
          else {
            stream.next();
            return "atom";
          }
        case ".":
        case ",":
        case ";":
        case "*":
        case "-":
        case "+":
        case "^":
        case "<":
        case "/":
        case "=":
          stream.next();
          return "atom";
        case "$":
          stream.next();
          return "builtin";
        }

        if (stream.match(/\d+/)) {
          if (stream.match(/^\w+/)) return "error";
          return "number";
        } else if (stream.match(/^[a-zA-Z_]\w*/)) {
          if (stream.match(/(?=[\(.])/, false)) return "keyword";
          return "variable";
        } else if (["[", "]", "(", ")", "{", "}"].indexOf(peek) != -1) {
          stream.next();
          return "bracket";
        } else if (!stream.eatSpace()) {
          stream.next();
        }
        return null;
      }
    };

    var spreadsheet$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        spreadsheet: spreadsheet
    });

    // developer.mozilla.org/en-US/docs/Web/HTML/Element
    var tagKeywords_ = ["a","abbr","address","area","article","aside","audio", "b", "base","bdi", "bdo","bgsound","blockquote","body","br","button","canvas","caption","cite", "code","col","colgroup","data","datalist","dd","del","details","dfn","div", "dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1", "h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe", "img","input","ins","kbd","keygen","label","legend","li","link","main","map", "mark","marquee","menu","menuitem","meta","meter","nav","nobr","noframes", "noscript","object","ol","optgroup","option","output","p","param","pre", "progress","q","rp","rt","ruby","s","samp","script","section","select", "small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","tr","track", "u","ul","var","video"];

    // github.com/codemirror/CodeMirror/blob/master/mode/css/css.js
    // Note, "url-prefix" should precede "url" in order to match correctly in documentTypesRegexp
    var documentTypes_ = ["domain", "regexp", "url-prefix", "url"];
    var mediaTypes_ = ["all","aural","braille","handheld","print","projection","screen","tty","tv","embossed"];
    var mediaFeatures_ = ["width","min-width","max-width","height","min-height","max-height","device-width","min-device-width","max-device-width","device-height","min-device-height","max-device-height","aspect-ratio","min-aspect-ratio","max-aspect-ratio","device-aspect-ratio","min-device-aspect-ratio","max-device-aspect-ratio","color","min-color","max-color","color-index","min-color-index","max-color-index","monochrome","min-monochrome","max-monochrome","resolution","min-resolution","max-resolution","scan","grid"];
    var propertyKeywords_ = ["align-content","align-items","align-self","alignment-adjust","alignment-baseline","anchor-point","animation","animation-delay","animation-direction","animation-duration","animation-fill-mode","animation-iteration-count","animation-name","animation-play-state","animation-timing-function","appearance","azimuth","backface-visibility","background","background-attachment","background-clip","background-color","background-image","background-origin","background-position","background-repeat","background-size","baseline-shift","binding","bleed","bookmark-label","bookmark-level","bookmark-state","bookmark-target","border","border-bottom","border-bottom-color","border-bottom-left-radius","border-bottom-right-radius","border-bottom-style","border-bottom-width","border-collapse","border-color","border-image","border-image-outset","border-image-repeat","border-image-slice","border-image-source","border-image-width","border-left","border-left-color","border-left-style","border-left-width","border-radius","border-right","border-right-color","border-right-style","border-right-width","border-spacing","border-style","border-top","border-top-color","border-top-left-radius","border-top-right-radius","border-top-style","border-top-width","border-width","bottom","box-decoration-break","box-shadow","box-sizing","break-after","break-before","break-inside","caption-side","clear","clip","color","color-profile","column-count","column-fill","column-gap","column-rule","column-rule-color","column-rule-style","column-rule-width","column-span","column-width","columns","content","counter-increment","counter-reset","crop","cue","cue-after","cue-before","cursor","direction","display","dominant-baseline","drop-initial-after-adjust","drop-initial-after-align","drop-initial-before-adjust","drop-initial-before-align","drop-initial-size","drop-initial-value","elevation","empty-cells","fit","fit-position","flex","flex-basis","flex-direction","flex-flow","flex-grow","flex-shrink","flex-wrap","float","float-offset","flow-from","flow-into","font","font-feature-settings","font-family","font-kerning","font-language-override","font-size","font-size-adjust","font-stretch","font-style","font-synthesis","font-variant","font-variant-alternates","font-variant-caps","font-variant-east-asian","font-variant-ligatures","font-variant-numeric","font-variant-position","font-weight","grid","grid-area","grid-auto-columns","grid-auto-flow","grid-auto-position","grid-auto-rows","grid-column","grid-column-end","grid-column-start","grid-row","grid-row-end","grid-row-start","grid-template","grid-template-areas","grid-template-columns","grid-template-rows","hanging-punctuation","height","hyphens","icon","image-orientation","image-rendering","image-resolution","inline-box-align","justify-content","left","letter-spacing","line-break","line-height","line-stacking","line-stacking-ruby","line-stacking-shift","line-stacking-strategy","list-style","list-style-image","list-style-position","list-style-type","margin","margin-bottom","margin-left","margin-right","margin-top","marker-offset","marks","marquee-direction","marquee-loop","marquee-play-count","marquee-speed","marquee-style","max-height","max-width","min-height","min-width","move-to","nav-down","nav-index","nav-left","nav-right","nav-up","object-fit","object-position","opacity","order","orphans","outline","outline-color","outline-offset","outline-style","outline-width","overflow","overflow-style","overflow-wrap","overflow-x","overflow-y","padding","padding-bottom","padding-left","padding-right","padding-top","page","page-break-after","page-break-before","page-break-inside","page-policy","pause","pause-after","pause-before","perspective","perspective-origin","pitch","pitch-range","play-during","position","presentation-level","punctuation-trim","quotes","region-break-after","region-break-before","region-break-inside","region-fragment","rendering-intent","resize","rest","rest-after","rest-before","richness","right","rotation","rotation-point","ruby-align","ruby-overhang","ruby-position","ruby-span","shape-image-threshold","shape-inside","shape-margin","shape-outside","size","speak","speak-as","speak-header","speak-numeral","speak-punctuation","speech-rate","stress","string-set","tab-size","table-layout","target","target-name","target-new","target-position","text-align","text-align-last","text-decoration","text-decoration-color","text-decoration-line","text-decoration-skip","text-decoration-style","text-emphasis","text-emphasis-color","text-emphasis-position","text-emphasis-style","text-height","text-indent","text-justify","text-outline","text-overflow","text-shadow","text-size-adjust","text-space-collapse","text-transform","text-underline-position","text-wrap","top","transform","transform-origin","transform-style","transition","transition-delay","transition-duration","transition-property","transition-timing-function","unicode-bidi","vertical-align","visibility","voice-balance","voice-duration","voice-family","voice-pitch","voice-range","voice-rate","voice-stress","voice-volume","volume","white-space","widows","width","will-change","word-break","word-spacing","word-wrap","z-index","clip-path","clip-rule","mask","enable-background","filter","flood-color","flood-opacity","lighting-color","stop-color","stop-opacity","pointer-events","color-interpolation","color-interpolation-filters","color-rendering","fill","fill-opacity","fill-rule","image-rendering","marker","marker-end","marker-mid","marker-start","shape-rendering","stroke","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","text-rendering","baseline-shift","dominant-baseline","glyph-orientation-horizontal","glyph-orientation-vertical","text-anchor","writing-mode","font-smoothing","osx-font-smoothing"];
    var nonStandardPropertyKeywords_ = ["scrollbar-arrow-color","scrollbar-base-color","scrollbar-dark-shadow-color","scrollbar-face-color","scrollbar-highlight-color","scrollbar-shadow-color","scrollbar-3d-light-color","scrollbar-track-color","shape-inside","searchfield-cancel-button","searchfield-decoration","searchfield-results-button","searchfield-results-decoration","zoom"];
    var fontProperties_ = ["font-family","src","unicode-range","font-variant","font-feature-settings","font-stretch","font-weight","font-style"];
    var colorKeywords_ = ["aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen"];
    var valueKeywords_ = ["above","absolute","activeborder","additive","activecaption","afar","after-white-space","ahead","alias","all","all-scroll","alphabetic","alternate","always","amharic","amharic-abegede","antialiased","appworkspace","arabic-indic","armenian","asterisks","attr","auto","avoid","avoid-column","avoid-page","avoid-region","background","backwards","baseline","below","bidi-override","binary","bengali","blink","block","block-axis","bold","bolder","border","border-box","both","bottom","break","break-all","break-word","bullets","button","button-bevel","buttonface","buttonhighlight","buttonshadow","buttontext","calc","cambodian","capitalize","caps-lock-indicator","caption","captiontext","caret","cell","center","checkbox","circle","cjk-decimal","cjk-earthly-branch","cjk-heavenly-stem","cjk-ideographic","clear","clip","close-quote","col-resize","collapse","column","compact","condensed","contain","content","contents","content-box","context-menu","continuous","copy","counter","counters","cover","crop","cross","crosshair","currentcolor","cursive","cyclic","dashed","decimal","decimal-leading-zero","default","default-button","destination-atop","destination-in","destination-out","destination-over","devanagari","disc","discard","disclosure-closed","disclosure-open","document","dot-dash","dot-dot-dash","dotted","double","down","e-resize","ease","ease-in","ease-in-out","ease-out","element","ellipse","ellipsis","embed","end","ethiopic","ethiopic-abegede","ethiopic-abegede-am-et","ethiopic-abegede-gez","ethiopic-abegede-ti-er","ethiopic-abegede-ti-et","ethiopic-halehame-aa-er","ethiopic-halehame-aa-et","ethiopic-halehame-am-et","ethiopic-halehame-gez","ethiopic-halehame-om-et","ethiopic-halehame-sid-et","ethiopic-halehame-so-et","ethiopic-halehame-ti-er","ethiopic-halehame-ti-et","ethiopic-halehame-tig","ethiopic-numeric","ew-resize","expanded","extends","extra-condensed","extra-expanded","fantasy","fast","fill","fixed","flat","flex","footnotes","forwards","from","geometricPrecision","georgian","graytext","groove","gujarati","gurmukhi","hand","hangul","hangul-consonant","hebrew","help","hidden","hide","higher","highlight","highlighttext","hiragana","hiragana-iroha","horizontal","hsl","hsla","icon","ignore","inactiveborder","inactivecaption","inactivecaptiontext","infinite","infobackground","infotext","inherit","initial","inline","inline-axis","inline-block","inline-flex","inline-table","inset","inside","intrinsic","invert","italic","japanese-formal","japanese-informal","justify","kannada","katakana","katakana-iroha","keep-all","khmer","korean-hangul-formal","korean-hanja-formal","korean-hanja-informal","landscape","lao","large","larger","left","level","lighter","line-through","linear","linear-gradient","lines","list-item","listbox","listitem","local","logical","loud","lower","lower-alpha","lower-armenian","lower-greek","lower-hexadecimal","lower-latin","lower-norwegian","lower-roman","lowercase","ltr","malayalam","match","matrix","matrix3d","media-controls-background","media-current-time-display","media-fullscreen-button","media-mute-button","media-play-button","media-return-to-realtime-button","media-rewind-button","media-seek-back-button","media-seek-forward-button","media-slider","media-sliderthumb","media-time-remaining-display","media-volume-slider","media-volume-slider-container","media-volume-sliderthumb","medium","menu","menulist","menulist-button","menulist-text","menulist-textfield","menutext","message-box","middle","min-intrinsic","mix","mongolian","monospace","move","multiple","myanmar","n-resize","narrower","ne-resize","nesw-resize","no-close-quote","no-drop","no-open-quote","no-repeat","none","normal","not-allowed","nowrap","ns-resize","numbers","numeric","nw-resize","nwse-resize","oblique","octal","open-quote","optimizeLegibility","optimizeSpeed","oriya","oromo","outset","outside","outside-shape","overlay","overline","padding","padding-box","painted","page","paused","persian","perspective","plus-darker","plus-lighter","pointer","polygon","portrait","pre","pre-line","pre-wrap","preserve-3d","progress","push-button","radial-gradient","radio","read-only","read-write","read-write-plaintext-only","rectangle","region","relative","repeat","repeating-linear-gradient","repeating-radial-gradient","repeat-x","repeat-y","reset","reverse","rgb","rgba","ridge","right","rotate","rotate3d","rotateX","rotateY","rotateZ","round","row-resize","rtl","run-in","running","s-resize","sans-serif","scale","scale3d","scaleX","scaleY","scaleZ","scroll","scrollbar","scroll-position","se-resize","searchfield","searchfield-cancel-button","searchfield-decoration","searchfield-results-button","searchfield-results-decoration","semi-condensed","semi-expanded","separate","serif","show","sidama","simp-chinese-formal","simp-chinese-informal","single","skew","skewX","skewY","skip-white-space","slide","slider-horizontal","slider-vertical","sliderthumb-horizontal","sliderthumb-vertical","slow","small","small-caps","small-caption","smaller","solid","somali","source-atop","source-in","source-out","source-over","space","spell-out","square","square-button","start","static","status-bar","stretch","stroke","sub","subpixel-antialiased","super","sw-resize","symbolic","symbols","table","table-caption","table-cell","table-column","table-column-group","table-footer-group","table-header-group","table-row","table-row-group","tamil","telugu","text","text-bottom","text-top","textarea","textfield","thai","thick","thin","threeddarkshadow","threedface","threedhighlight","threedlightshadow","threedshadow","tibetan","tigre","tigrinya-er","tigrinya-er-abegede","tigrinya-et","tigrinya-et-abegede","to","top","trad-chinese-formal","trad-chinese-informal","translate","translate3d","translateX","translateY","translateZ","transparent","ultra-condensed","ultra-expanded","underline","up","upper-alpha","upper-armenian","upper-greek","upper-hexadecimal","upper-latin","upper-norwegian","upper-roman","uppercase","urdu","url","var","vertical","vertical-text","visible","visibleFill","visiblePainted","visibleStroke","visual","w-resize","wait","wave","wider","window","windowframe","windowtext","words","x-large","x-small","xor","xx-large","xx-small","bicubic","optimizespeed","grayscale","row","row-reverse","wrap","wrap-reverse","column-reverse","flex-start","flex-end","space-between","space-around", "unset"];

    var wordOperatorKeywords_ = ["in","and","or","not","is not","is a","is","isnt","defined","if unless"],
        blockKeywords_ = ["for","if","else","unless", "from", "to"],
        commonAtoms_ = ["null","true","false","href","title","type","not-allowed","readonly","disabled"],
        commonDef_ = ["@font-face", "@keyframes", "@media", "@viewport", "@page", "@host", "@supports", "@block", "@css"];

    var hintWords = tagKeywords_.concat(documentTypes_,mediaTypes_,mediaFeatures_,
                                        propertyKeywords_,nonStandardPropertyKeywords_,
                                        colorKeywords_,valueKeywords_,fontProperties_,
                                        wordOperatorKeywords_,blockKeywords_,
                                        commonAtoms_,commonDef_);

    function wordRegexp$4(words) {
      words = words.sort(function(a,b){return b > a;});
      return new RegExp("^((" + words.join(")|(") + "))\\b");
    }

    function keySet(array) {
      var keys = {};
      for (var i = 0; i < array.length; ++i) keys[array[i]] = true;
      return keys;
    }

    function escapeRegExp(text) {
      return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
    }

    var tagKeywords = keySet(tagKeywords_),
        tagVariablesRegexp = /^(a|b|i|s|col|em)$/i,
        propertyKeywords = keySet(propertyKeywords_),
        nonStandardPropertyKeywords = keySet(nonStandardPropertyKeywords_),
        valueKeywords = keySet(valueKeywords_),
        colorKeywords = keySet(colorKeywords_),
        documentTypes = keySet(documentTypes_),
        documentTypesRegexp = wordRegexp$4(documentTypes_),
        mediaFeatures = keySet(mediaFeatures_),
        mediaTypes = keySet(mediaTypes_),
        fontProperties = keySet(fontProperties_),
        operatorsRegexp = /^\s*([.]{2,3}|&&|\|\||\*\*|[?!=:]?=|[-+*\/%<>]=?|\?:|\~)/,
        wordOperatorKeywordsRegexp = wordRegexp$4(wordOperatorKeywords_),
        blockKeywords$1 = keySet(blockKeywords_),
        vendorPrefixesRegexp = new RegExp(/^\-(moz|ms|o|webkit)-/i),
        commonAtoms = keySet(commonAtoms_),
        firstWordMatch = "",
        states = {},
        ch,
        style,
        type$1,
        override;

    /**
     * Tokenizers
     */
    function tokenBase$c(stream, state) {
      firstWordMatch = stream.string.match(/(^[\w-]+\s*=\s*$)|(^\s*[\w-]+\s*=\s*[\w-])|(^\s*(\.|#|@|\$|\&|\[|\d|\+|::?|\{|\>|~|\/)?\s*[\w-]*([a-z0-9-]|\*|\/\*)(\(|,)?)/);
      state.context.line.firstWord = firstWordMatch ? firstWordMatch[0].replace(/^\s*/, "") : "";
      state.context.line.indent = stream.indentation();
      ch = stream.peek();

      // Line comment
      if (stream.match("//")) {
        stream.skipToEnd();
        return ["comment", "comment"];
      }
      // Block comment
      if (stream.match("/*")) {
        state.tokenize = tokenCComment;
        return tokenCComment(stream, state);
      }
      // String
      if (ch == "\"" || ch == "'") {
        stream.next();
        state.tokenize = tokenString$8(ch);
        return state.tokenize(stream, state);
      }
      // Def
      if (ch == "@") {
        stream.next();
        stream.eatWhile(/[\w\\-]/);
        return ["def", stream.current()];
      }
      // ID selector or Hex color
      if (ch == "#") {
        stream.next();
        // Hex color
        if (stream.match(/^[0-9a-f]{3}([0-9a-f]([0-9a-f]{2}){0,2})?\b(?!-)/i)) {
          return ["atom", "atom"];
        }
        // ID selector
        if (stream.match(/^[a-z][\w-]*/i)) {
          return ["builtin", "hash"];
        }
      }
      // Vendor prefixes
      if (stream.match(vendorPrefixesRegexp)) {
        return ["meta", "vendor-prefixes"];
      }
      // Numbers
      if (stream.match(/^-?[0-9]?\.?[0-9]/)) {
        stream.eatWhile(/[a-z%]/i);
        return ["number", "unit"];
      }
      // !important|optional
      if (ch == "!") {
        stream.next();
        return [stream.match(/^(important|optional)/i) ? "keyword": "operator", "important"];
      }
      // Class
      if (ch == "." && stream.match(/^\.[a-z][\w-]*/i)) {
        return ["qualifier", "qualifier"];
      }
      // url url-prefix domain regexp
      if (stream.match(documentTypesRegexp)) {
        if (stream.peek() == "(") state.tokenize = tokenParenthesized;
        return ["property", "word"];
      }
      // Mixins / Functions
      if (stream.match(/^[a-z][\w-]*\(/i)) {
        stream.backUp(1);
        return ["keyword", "mixin"];
      }
      // Block mixins
      if (stream.match(/^(\+|-)[a-z][\w-]*\(/i)) {
        stream.backUp(1);
        return ["keyword", "block-mixin"];
      }
      // Parent Reference BEM naming
      if (stream.string.match(/^\s*&/) && stream.match(/^[-_]+[a-z][\w-]*/)) {
        return ["qualifier", "qualifier"];
      }
      // / Root Reference & Parent Reference
      if (stream.match(/^(\/|&)(-|_|:|\.|#|[a-z])/)) {
        stream.backUp(1);
        return ["variableName.special", "reference"];
      }
      if (stream.match(/^&{1}\s*$/)) {
        return ["variableName.special", "reference"];
      }
      // Word operator
      if (stream.match(wordOperatorKeywordsRegexp)) {
        return ["operator", "operator"];
      }
      // Word
      if (stream.match(/^\$?[-_]*[a-z0-9]+[\w-]*/i)) {
        // Variable
        if (stream.match(/^(\.|\[)[\w-\'\"\]]+/i, false)) {
          if (!wordIsTag(stream.current())) {
            stream.match('.');
            return ["variable", "variable-name"];
          }
        }
        return ["variable", "word"];
      }
      // Operators
      if (stream.match(operatorsRegexp)) {
        return ["operator", stream.current()];
      }
      // Delimiters
      if (/[:;,{}\[\]\(\)]/.test(ch)) {
        stream.next();
        return [null, ch];
      }
      // Non-detected items
      stream.next();
      return [null, null];
    }

    /**
     * Token comment
     */
    function tokenCComment(stream, state) {
      var maybeEnd = false, ch;
      while ((ch = stream.next()) != null) {
        if (maybeEnd && ch == "/") {
          state.tokenize = null;
          break;
        }
        maybeEnd = (ch == "*");
      }
      return ["comment", "comment"];
    }

    /**
     * Token string
     */
    function tokenString$8(quote) {
      return function(stream, state) {
        var escaped = false, ch;
        while ((ch = stream.next()) != null) {
          if (ch == quote && !escaped) {
            if (quote == ")") stream.backUp(1);
            break;
          }
          escaped = !escaped && ch == "\\";
        }
        if (ch == quote || !escaped && quote != ")") state.tokenize = null;
        return ["string", "string"];
      };
    }

    /**
     * Token parenthesized
     */
    function tokenParenthesized(stream, state) {
      stream.next(); // Must be "("
      if (!stream.match(/\s*[\"\')]/, false))
        state.tokenize = tokenString$8(")");
      else
        state.tokenize = null;
      return [null, "("];
    }

    /**
     * Context management
     */
    function Context$4(type, indent, prev, line) {
      this.type = type;
      this.indent = indent;
      this.prev = prev;
      this.line = line || {firstWord: "", indent: 0};
    }

    function pushContext$6(state, stream, type, indent) {
      indent = indent >= 0 ? indent : stream.indentUnit;
      state.context = new Context$4(type, stream.indentation() + indent, state.context);
      return type;
    }

    function popContext$6(state, stream, currentIndent) {
      var contextIndent = state.context.indent - stream.indentUnit;
      currentIndent = currentIndent || false;
      state.context = state.context.prev;
      if (currentIndent) state.context.indent = contextIndent;
      return state.context.type;
    }

    function pass$1(type, stream, state) {
      return states[state.context.type](type, stream, state);
    }

    function popAndPass(type, stream, state, n) {
      for (var i = n || 1; i > 0; i--)
        state.context = state.context.prev;
      return pass$1(type, stream, state);
    }


    /**
     * Parser
     */
    function wordIsTag(word) {
      return word.toLowerCase() in tagKeywords;
    }

    function wordIsProperty(word) {
      word = word.toLowerCase();
      return word in propertyKeywords || word in fontProperties;
    }

    function wordIsBlock(word) {
      return word.toLowerCase() in blockKeywords$1;
    }

    function wordIsVendorPrefix(word) {
      return word.toLowerCase().match(vendorPrefixesRegexp);
    }

    function wordAsValue(word) {
      var wordLC = word.toLowerCase();
      var override = "variable";
      if (wordIsTag(word)) override = "tag";
      else if (wordIsBlock(word)) override = "block-keyword";
      else if (wordIsProperty(word)) override = "property";
      else if (wordLC in valueKeywords || wordLC in commonAtoms) override = "atom";
      else if (wordLC == "return" || wordLC in colorKeywords) override = "keyword";

      // Font family
      else if (word.match(/^[A-Z]/)) override = "string";
      return override;
    }

    function typeIsBlock(type, stream) {
      return ((endOfLine(stream) && (type == "{" || type == "]" || type == "hash" || type == "qualifier")) || type == "block-mixin");
    }

    function typeIsInterpolation(type, stream) {
      return type == "{" && stream.match(/^\s*\$?[\w-]+/i, false);
    }

    function typeIsPseudo(type, stream) {
      return type == ":" && stream.match(/^[a-z-]+/, false);
    }

    function startOfLine(stream) {
      return stream.sol() || stream.string.match(new RegExp("^\\s*" + escapeRegExp(stream.current())));
    }

    function endOfLine(stream) {
      return stream.eol() || stream.match(/^\s*$/, false);
    }

    function firstWordOfLine(line) {
      var re = /^\s*[-_]*[a-z0-9]+[\w-]*/i;
      var result = typeof line == "string" ? line.match(re) : line.string.match(re);
      return result ? result[0].replace(/^\s*/, "") : "";
    }


    /**
     * Block
     */
    states.block = function(type, stream, state) {
      if ((type == "comment" && startOfLine(stream)) ||
          (type == "," && endOfLine(stream)) ||
          type == "mixin") {
        return pushContext$6(state, stream, "block", 0);
      }
      if (typeIsInterpolation(type, stream)) {
        return pushContext$6(state, stream, "interpolation");
      }
      if (endOfLine(stream) && type == "]") {
        if (!/^\s*(\.|#|:|\[|\*|&)/.test(stream.string) && !wordIsTag(firstWordOfLine(stream))) {
          return pushContext$6(state, stream, "block", 0);
        }
      }
      if (typeIsBlock(type, stream)) {
        return pushContext$6(state, stream, "block");
      }
      if (type == "}" && endOfLine(stream)) {
        return pushContext$6(state, stream, "block", 0);
      }
      if (type == "variable-name") {
        if (stream.string.match(/^\s?\$[\w-\.\[\]\'\"]+$/) || wordIsBlock(firstWordOfLine(stream))) {
          return pushContext$6(state, stream, "variableName");
        }
        else {
          return pushContext$6(state, stream, "variableName", 0);
        }
      }
      if (type == "=") {
        if (!endOfLine(stream) && !wordIsBlock(firstWordOfLine(stream))) {
          return pushContext$6(state, stream, "block", 0);
        }
        return pushContext$6(state, stream, "block");
      }
      if (type == "*") {
        if (endOfLine(stream) || stream.match(/\s*(,|\.|#|\[|:|{)/,false)) {
          override = "tag";
          return pushContext$6(state, stream, "block");
        }
      }
      if (typeIsPseudo(type, stream)) {
        return pushContext$6(state, stream, "pseudo");
      }
      if (/@(font-face|media|supports|(-moz-)?document)/.test(type)) {
        return pushContext$6(state, stream, endOfLine(stream) ? "block" : "atBlock");
      }
      if (/@(-(moz|ms|o|webkit)-)?keyframes$/.test(type)) {
        return pushContext$6(state, stream, "keyframes");
      }
      if (/@extends?/.test(type)) {
        return pushContext$6(state, stream, "extend", 0);
      }
      if (type && type.charAt(0) == "@") {

        // Property Lookup
        if (stream.indentation() > 0 && wordIsProperty(stream.current().slice(1))) {
          override = "variable";
          return "block";
        }
        if (/(@import|@require|@charset)/.test(type)) {
          return pushContext$6(state, stream, "block", 0);
        }
        return pushContext$6(state, stream, "block");
      }
      if (type == "reference" && endOfLine(stream)) {
        return pushContext$6(state, stream, "block");
      }
      if (type == "(") {
        return pushContext$6(state, stream, "parens");
      }

      if (type == "vendor-prefixes") {
        return pushContext$6(state, stream, "vendorPrefixes");
      }
      if (type == "word") {
        var word = stream.current();
        override = wordAsValue(word);

        if (override == "property") {
          if (startOfLine(stream)) {
            return pushContext$6(state, stream, "block", 0);
          } else {
            override = "atom";
            return "block";
          }
        }

        if (override == "tag") {

          // tag is a css value
          if (/embed|menu|pre|progress|sub|table/.test(word)) {
            if (wordIsProperty(firstWordOfLine(stream))) {
              override = "atom";
              return "block";
            }
          }

          // tag is an attribute
          if (stream.string.match(new RegExp("\\[\\s*" + word + "|" + word +"\\s*\\]"))) {
            override = "atom";
            return "block";
          }

          // tag is a variable
          if (tagVariablesRegexp.test(word)) {
            if ((startOfLine(stream) && stream.string.match(/=/)) ||
                (!startOfLine(stream) &&
                 !stream.string.match(/^(\s*\.|#|\&|\[|\/|>|\*)/) &&
                 !wordIsTag(firstWordOfLine(stream)))) {
              override = "variable";
              if (wordIsBlock(firstWordOfLine(stream)))  return "block";
              return pushContext$6(state, stream, "block", 0);
            }
          }

          if (endOfLine(stream)) return pushContext$6(state, stream, "block");
        }
        if (override == "block-keyword") {
          override = "keyword";

          // Postfix conditionals
          if (stream.current(/(if|unless)/) && !startOfLine(stream)) {
            return "block";
          }
          return pushContext$6(state, stream, "block");
        }
        if (word == "return") return pushContext$6(state, stream, "block", 0);

        // Placeholder selector
        if (override == "variable" && stream.string.match(/^\s?\$[\w-\.\[\]\'\"]+$/)) {
          return pushContext$6(state, stream, "block");
        }
      }
      return state.context.type;
    };


    /**
     * Parens
     */
    states.parens = function(type, stream, state) {
      if (type == "(") return pushContext$6(state, stream, "parens");
      if (type == ")") {
        if (state.context.prev.type == "parens") {
          return popContext$6(state, stream);
        }
        if ((stream.string.match(/^[a-z][\w-]*\(/i) && endOfLine(stream)) ||
            wordIsBlock(firstWordOfLine(stream)) ||
            /(\.|#|:|\[|\*|&|>|~|\+|\/)/.test(firstWordOfLine(stream)) ||
            (!stream.string.match(/^-?[a-z][\w-\.\[\]\'\"]*\s*=/) &&
             wordIsTag(firstWordOfLine(stream)))) {
          return pushContext$6(state, stream, "block");
        }
        if (stream.string.match(/^[\$-]?[a-z][\w-\.\[\]\'\"]*\s*=/) ||
            stream.string.match(/^\s*(\(|\)|[0-9])/) ||
            stream.string.match(/^\s+[a-z][\w-]*\(/i) ||
            stream.string.match(/^\s+[\$-]?[a-z]/i)) {
          return pushContext$6(state, stream, "block", 0);
        }
        if (endOfLine(stream)) return pushContext$6(state, stream, "block");
        else return pushContext$6(state, stream, "block", 0);
      }
      if (type && type.charAt(0) == "@" && wordIsProperty(stream.current().slice(1))) {
        override = "variable";
      }
      if (type == "word") {
        var word = stream.current();
        override = wordAsValue(word);
        if (override == "tag" && tagVariablesRegexp.test(word)) {
          override = "variable";
        }
        if (override == "property" || word == "to") override = "atom";
      }
      if (type == "variable-name") {
        return pushContext$6(state, stream, "variableName");
      }
      if (typeIsPseudo(type, stream)) {
        return pushContext$6(state, stream, "pseudo");
      }
      return state.context.type;
    };


    /**
     * Vendor prefixes
     */
    states.vendorPrefixes = function(type, stream, state) {
      if (type == "word") {
        override = "property";
        return pushContext$6(state, stream, "block", 0);
      }
      return popContext$6(state, stream);
    };


    /**
     * Pseudo
     */
    states.pseudo = function(type, stream, state) {
      if (!wordIsProperty(firstWordOfLine(stream.string))) {
        stream.match(/^[a-z-]+/);
        override = "variableName.special";
        if (endOfLine(stream)) return pushContext$6(state, stream, "block");
        return popContext$6(state, stream);
      }
      return popAndPass(type, stream, state);
    };


    /**
     * atBlock
     */
    states.atBlock = function(type, stream, state) {
      if (type == "(") return pushContext$6(state, stream, "atBlock_parens");
      if (typeIsBlock(type, stream)) {
        return pushContext$6(state, stream, "block");
      }
      if (typeIsInterpolation(type, stream)) {
        return pushContext$6(state, stream, "interpolation");
      }
      if (type == "word") {
        var word = stream.current().toLowerCase();
        if (/^(only|not|and|or)$/.test(word))
          override = "keyword";
        else if (documentTypes.hasOwnProperty(word))
          override = "tag";
        else if (mediaTypes.hasOwnProperty(word))
          override = "attribute";
        else if (mediaFeatures.hasOwnProperty(word))
          override = "property";
        else if (nonStandardPropertyKeywords.hasOwnProperty(word))
          override = "string.special";
        else override = wordAsValue(stream.current());
        if (override == "tag" && endOfLine(stream)) {
          return pushContext$6(state, stream, "block");
        }
      }
      if (type == "operator" && /^(not|and|or)$/.test(stream.current())) {
        override = "keyword";
      }
      return state.context.type;
    };

    states.atBlock_parens = function(type, stream, state) {
      if (type == "{" || type == "}") return state.context.type;
      if (type == ")") {
        if (endOfLine(stream)) return pushContext$6(state, stream, "block");
        else return pushContext$6(state, stream, "atBlock");
      }
      if (type == "word") {
        var word = stream.current().toLowerCase();
        override = wordAsValue(word);
        if (/^(max|min)/.test(word)) override = "property";
        if (override == "tag") {
          tagVariablesRegexp.test(word) ? override = "variable" : override = "atom";
        }
        return state.context.type;
      }
      return states.atBlock(type, stream, state);
    };


    /**
     * Keyframes
     */
    states.keyframes = function(type, stream, state) {
      if (stream.indentation() == "0" && ((type == "}" && startOfLine(stream)) || type == "]" || type == "hash"
                                          || type == "qualifier" || wordIsTag(stream.current()))) {
        return popAndPass(type, stream, state);
      }
      if (type == "{") return pushContext$6(state, stream, "keyframes");
      if (type == "}") {
        if (startOfLine(stream)) return popContext$6(state, stream, true);
        else return pushContext$6(state, stream, "keyframes");
      }
      if (type == "unit" && /^[0-9]+\%$/.test(stream.current())) {
        return pushContext$6(state, stream, "keyframes");
      }
      if (type == "word") {
        override = wordAsValue(stream.current());
        if (override == "block-keyword") {
          override = "keyword";
          return pushContext$6(state, stream, "keyframes");
        }
      }
      if (/@(font-face|media|supports|(-moz-)?document)/.test(type)) {
        return pushContext$6(state, stream, endOfLine(stream) ? "block" : "atBlock");
      }
      if (type == "mixin") {
        return pushContext$6(state, stream, "block", 0);
      }
      return state.context.type;
    };


    /**
     * Interpolation
     */
    states.interpolation = function(type, stream, state) {
      if (type == "{") popContext$6(state, stream) && pushContext$6(state, stream, "block");
      if (type == "}") {
        if (stream.string.match(/^\s*(\.|#|:|\[|\*|&|>|~|\+|\/)/i) ||
            (stream.string.match(/^\s*[a-z]/i) && wordIsTag(firstWordOfLine(stream)))) {
          return pushContext$6(state, stream, "block");
        }
        if (!stream.string.match(/^(\{|\s*\&)/) ||
            stream.match(/\s*[\w-]/,false)) {
          return pushContext$6(state, stream, "block", 0);
        }
        return pushContext$6(state, stream, "block");
      }
      if (type == "variable-name") {
        return pushContext$6(state, stream, "variableName", 0);
      }
      if (type == "word") {
        override = wordAsValue(stream.current());
        if (override == "tag") override = "atom";
      }
      return state.context.type;
    };


    /**
     * Extend/s
     */
    states.extend = function(type, stream, state) {
      if (type == "[" || type == "=") return "extend";
      if (type == "]") return popContext$6(state, stream);
      if (type == "word") {
        override = wordAsValue(stream.current());
        return "extend";
      }
      return popContext$6(state, stream);
    };


    /**
     * Variable name
     */
    states.variableName = function(type, stream, state) {
      if (type == "string" || type == "[" || type == "]" || stream.current().match(/^(\.|\$)/)) {
        if (stream.current().match(/^\.[\w-]+/i)) override = "variable";
        return "variableName";
      }
      return popAndPass(type, stream, state);
    };

    const stylus = {
      startState: function() {
        return {
          tokenize: null,
          state: "block",
          context: new Context$4("block", 0, null)
        };
      },
      token: function(stream, state) {
        if (!state.tokenize && stream.eatSpace()) return null;
        style = (state.tokenize || tokenBase$c)(stream, state);
        if (style && typeof style == "object") {
          type$1 = style[1];
          style = style[0];
        }
        override = style;
        state.state = states[state.state](type$1, stream, state);
        return override;
      },
      indent: function(state, textAfter, iCx) {
        var cx = state.context,
            ch = textAfter && textAfter.charAt(0),
            indent = cx.indent,
            lineFirstWord = firstWordOfLine(textAfter),
            lineIndent = iCx.lineIndent(iCx.pos),
            prevLineFirstWord = state.context.prev ? state.context.prev.line.firstWord : "",
            prevLineIndent = state.context.prev ? state.context.prev.line.indent : lineIndent;

        if (cx.prev &&
            (ch == "}" && (cx.type == "block" || cx.type == "atBlock" || cx.type == "keyframes") ||
             ch == ")" && (cx.type == "parens" || cx.type == "atBlock_parens") ||
             ch == "{" && (cx.type == "at"))) {
          indent = cx.indent - iCx.unit;
        } else if (!(/(\})/.test(ch))) {
          if (/@|\$|\d/.test(ch) ||
              /^\{/.test(textAfter) ||
    /^\s*\/(\/|\*)/.test(textAfter) ||
              /^\s*\/\*/.test(prevLineFirstWord) ||
              /^\s*[\w-\.\[\]\'\"]+\s*(\?|:|\+)?=/i.test(textAfter) ||
    /^(\+|-)?[a-z][\w-]*\(/i.test(textAfter) ||
    /^return/.test(textAfter) ||
                  wordIsBlock(lineFirstWord)) {
                indent = lineIndent;
              } else if (/(\.|#|:|\[|\*|&|>|~|\+|\/)/.test(ch) || wordIsTag(lineFirstWord)) {
            if (/\,\s*$/.test(prevLineFirstWord)) {
              indent = prevLineIndent;
            } else if (!state.sol() && (/(\.|#|:|\[|\*|&|>|~|\+|\/)/.test(prevLineFirstWord) || wordIsTag(prevLineFirstWord))) {
              indent = lineIndent <= prevLineIndent ? prevLineIndent : prevLineIndent + iCx.unit;
            } else {
              indent = lineIndent;
            }
          } else if (!/,\s*$/.test(textAfter) && (wordIsVendorPrefix(lineFirstWord) || wordIsProperty(lineFirstWord))) {
            if (wordIsBlock(prevLineFirstWord)) {
              indent = lineIndent <= prevLineIndent ? prevLineIndent : prevLineIndent + iCx.unit;
            } else if (/^\{/.test(prevLineFirstWord)) {
              indent = lineIndent <= prevLineIndent ? lineIndent : prevLineIndent + iCx.unit;
            } else if (wordIsVendorPrefix(prevLineFirstWord) || wordIsProperty(prevLineFirstWord)) {
              indent = lineIndent >= prevLineIndent ? prevLineIndent : lineIndent;
            } else if (/^(\.|#|:|\[|\*|&|@|\+|\-|>|~|\/)/.test(prevLineFirstWord) ||
                       /=\s*$/.test(prevLineFirstWord) ||
                       wordIsTag(prevLineFirstWord) ||
                       /^\$[\w-\.\[\]\'\"]/.test(prevLineFirstWord)) {
              indent = prevLineIndent + iCx.unit;
            } else {
              indent = lineIndent;
            }
          }
        }
        return indent;
      },
      languageData: {
        indentOnInput: /^\s*\}$/,
        commentTokens: {line: "//", block: {open: "/*", close: "*/"}},
        autocomplete: hintWords
      }
    };

    var stylus$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        stylus: stylus
    });

    function wordSet(words) {
      var set = {};
      for (var i = 0; i < words.length; i++) set[words[i]] = true;
      return set
    }

    var keywords$a = wordSet(["_","var","let","class","enum","extension","import","protocol","struct","func","typealias","associatedtype",
                            "open","public","internal","fileprivate","private","deinit","init","new","override","self","subscript","super",
                            "convenience","dynamic","final","indirect","lazy","required","static","unowned","unowned(safe)","unowned(unsafe)","weak","as","is",
                            "break","case","continue","default","else","fallthrough","for","guard","if","in","repeat","switch","where","while",
                            "defer","return","inout","mutating","nonmutating","catch","do","rethrows","throw","throws","try","didSet","get","set","willSet",
                            "assignment","associativity","infix","left","none","operator","postfix","precedence","precedencegroup","prefix","right",
                            "Any","AnyObject","Type","dynamicType","Self","Protocol","__COLUMN__","__FILE__","__FUNCTION__","__LINE__"]);
    var definingKeywords = wordSet(["var","let","class","enum","extension","import","protocol","struct","func","typealias","associatedtype","for"]);
    var atoms$2 = wordSet(["true","false","nil","self","super","_"]);
    var types$3 = wordSet(["Array","Bool","Character","Dictionary","Double","Float","Int","Int8","Int16","Int32","Int64","Never","Optional","Set","String",
                         "UInt8","UInt16","UInt32","UInt64","Void"]);
    var operators = "+-/*%=|&<>~^?!";
    var punc = ":;,.(){}[]";
    var binary = /^\-?0b[01][01_]*/;
    var octal = /^\-?0o[0-7][0-7_]*/;
    var hexadecimal = /^\-?0x[\dA-Fa-f][\dA-Fa-f_]*(?:(?:\.[\dA-Fa-f][\dA-Fa-f_]*)?[Pp]\-?\d[\d_]*)?/;
    var decimal = /^\-?\d[\d_]*(?:\.\d[\d_]*)?(?:[Ee]\-?\d[\d_]*)?/;
    var identifier = /^\$\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\1/;
    var property = /^\.(?:\$\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\1)/;
    var instruction = /^\#[A-Za-z]+/;
    var attribute = /^@(?:\$\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\1)/;
    //var regexp = /^\/(?!\s)(?:\/\/)?(?:\\.|[^\/])+\//

    function tokenBase$b(stream, state, prev) {
      if (stream.sol()) state.indented = stream.indentation();
      if (stream.eatSpace()) return null

      var ch = stream.peek();
      if (ch == "/") {
        if (stream.match("//")) {
          stream.skipToEnd();
          return "comment"
        }
        if (stream.match("/*")) {
          state.tokenize.push(tokenComment$5);
          return tokenComment$5(stream, state)
        }
      }
      if (stream.match(instruction)) return "builtin"
      if (stream.match(attribute)) return "attribute"
      if (stream.match(binary)) return "number"
      if (stream.match(octal)) return "number"
      if (stream.match(hexadecimal)) return "number"
      if (stream.match(decimal)) return "number"
      if (stream.match(property)) return "property"
      if (operators.indexOf(ch) > -1) {
        stream.next();
        return "operator"
      }
      if (punc.indexOf(ch) > -1) {
        stream.next();
        stream.match("..");
        return "punctuation"
      }
      var stringMatch;
      if (stringMatch = stream.match(/("""|"|')/)) {
        var tokenize = tokenString$7.bind(null, stringMatch[0]);
        state.tokenize.push(tokenize);
        return tokenize(stream, state)
      }

      if (stream.match(identifier)) {
        var ident = stream.current();
        if (types$3.hasOwnProperty(ident)) return "type"
        if (atoms$2.hasOwnProperty(ident)) return "atom"
        if (keywords$a.hasOwnProperty(ident)) {
          if (definingKeywords.hasOwnProperty(ident))
            state.prev = "define";
          return "keyword"
        }
        if (prev == "define") return "def"
        return "variable"
      }

      stream.next();
      return null
    }

    function tokenUntilClosingParen() {
      var depth = 0;
      return function(stream, state, prev) {
        var inner = tokenBase$b(stream, state, prev);
        if (inner == "punctuation") {
          if (stream.current() == "(") ++depth;
          else if (stream.current() == ")") {
            if (depth == 0) {
              stream.backUp(1);
              state.tokenize.pop();
              return state.tokenize[state.tokenize.length - 1](stream, state)
            }
            else --depth;
          }
        }
        return inner
      }
    }

    function tokenString$7(openQuote, stream, state) {
      var singleLine = openQuote.length == 1;
      var ch, escaped = false;
      while (ch = stream.peek()) {
        if (escaped) {
          stream.next();
          if (ch == "(") {
            state.tokenize.push(tokenUntilClosingParen());
            return "string"
          }
          escaped = false;
        } else if (stream.match(openQuote)) {
          state.tokenize.pop();
          return "string"
        } else {
          stream.next();
          escaped = ch == "\\";
        }
      }
      if (singleLine) {
        state.tokenize.pop();
      }
      return "string"
    }

    function tokenComment$5(stream, state) {
      var ch;
      while (true) {
        stream.match(/^[^/*]+/, true);
        ch = stream.next();
        if (!ch) break
        if (ch === "/" && stream.eat("*")) {
          state.tokenize.push(tokenComment$5);
        } else if (ch === "*" && stream.eat("/")) {
          state.tokenize.pop();
        }
      }
      return "comment"
    }

    function Context$3(prev, align, indented) {
      this.prev = prev;
      this.align = align;
      this.indented = indented;
    }

    function pushContext$5(state, stream) {
      var align = stream.match(/^\s*($|\/[\/\*])/, false) ? null : stream.column() + 1;
      state.context = new Context$3(state.context, align, state.indented);
    }

    function popContext$5(state) {
      if (state.context) {
        state.indented = state.context.indented;
        state.context = state.context.prev;
      }
    }

    const swift = {
      startState: function() {
        return {
          prev: null,
          context: null,
          indented: 0,
          tokenize: []
        }
      },

      token: function(stream, state) {
        var prev = state.prev;
        state.prev = null;
        var tokenize = state.tokenize[state.tokenize.length - 1] || tokenBase$b;
        var style = tokenize(stream, state, prev);
        if (!style || style == "comment") state.prev = prev;
        else if (!state.prev) state.prev = style;

        if (style == "punctuation") {
          var bracket = /[\(\[\{]|([\]\)\}])/.exec(stream.current());
          if (bracket) (bracket[1] ? popContext$5 : pushContext$5)(state, stream);
        }

        return style
      },

      indent: function(state, textAfter, iCx) {
        var cx = state.context;
        if (!cx) return 0
        var closing = /^[\]\}\)]/.test(textAfter);
        if (cx.align != null) return cx.align - (closing ? 1 : 0)
        return cx.indented + (closing ? 0 : iCx.unit)
      },

      languageData: {
        indentOnInput: /^\s*[\)\}\]]$/,
        commentTokens: {line: "//", block: {open: "/*", close: "*/"}},
        closeBrackets: {brackets: ["(", "[", "{", "'", '"', "`"]}
      }
    };

    var swift$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        swift: swift
    });

    function mkStex(mathMode) {
      function pushCommand(state, command) {
        state.cmdState.push(command);
      }

      function peekCommand(state) {
        if (state.cmdState.length > 0) {
          return state.cmdState[state.cmdState.length - 1];
        } else {
          return null;
        }
      }

      function popCommand(state) {
        var plug = state.cmdState.pop();
        if (plug) {
          plug.closeBracket();
        }
      }

      // returns the non-default plugin closest to the end of the list
      function getMostPowerful(state) {
        var context = state.cmdState;
        for (var i = context.length - 1; i >= 0; i--) {
          var plug = context[i];
          if (plug.name == "DEFAULT") {
            continue;
          }
          return plug;
        }
        return { styleIdentifier: function() { return null; } };
      }

      function addPluginPattern(pluginName, cmdStyle, styles) {
        return function () {
          this.name = pluginName;
          this.bracketNo = 0;
          this.style = cmdStyle;
          this.styles = styles;
          this.argument = null;   // \begin and \end have arguments that follow. These are stored in the plugin

          this.styleIdentifier = function() {
            return this.styles[this.bracketNo - 1] || null;
          };
          this.openBracket = function() {
            this.bracketNo++;
            return "bracket";
          };
          this.closeBracket = function() {};
        };
      }

      var plugins = {};

      plugins["importmodule"] = addPluginPattern("importmodule", "tag", ["string", "builtin"]);
      plugins["documentclass"] = addPluginPattern("documentclass", "tag", ["", "atom"]);
      plugins["usepackage"] = addPluginPattern("usepackage", "tag", ["atom"]);
      plugins["begin"] = addPluginPattern("begin", "tag", ["atom"]);
      plugins["end"] = addPluginPattern("end", "tag", ["atom"]);

      plugins["label"    ] = addPluginPattern("label"    , "tag", ["atom"]);
      plugins["ref"      ] = addPluginPattern("ref"      , "tag", ["atom"]);
      plugins["eqref"    ] = addPluginPattern("eqref"    , "tag", ["atom"]);
      plugins["cite"     ] = addPluginPattern("cite"     , "tag", ["atom"]);
      plugins["bibitem"  ] = addPluginPattern("bibitem"  , "tag", ["atom"]);
      plugins["Bibitem"  ] = addPluginPattern("Bibitem"  , "tag", ["atom"]);
      plugins["RBibitem" ] = addPluginPattern("RBibitem" , "tag", ["atom"]);

      plugins["DEFAULT"] = function () {
        this.name = "DEFAULT";
        this.style = "tag";

        this.styleIdentifier = this.openBracket = this.closeBracket = function() {};
      };

      function setState(state, f) {
        state.f = f;
      }

      // called when in a normal (no environment) context
      function normal(source, state) {
        var plug;
        // Do we look like '\command' ?  If so, attempt to apply the plugin 'command'
        if (source.match(/^\\[a-zA-Z@]+/)) {
          var cmdName = source.current().slice(1);
          plug = plugins.hasOwnProperty(cmdName) ? plugins[cmdName] : plugins["DEFAULT"];
          plug = new plug();
          pushCommand(state, plug);
          setState(state, beginParams);
          return plug.style;
        }

        // escape characters
        if (source.match(/^\\[$&%#{}_]/)) {
          return "tag";
        }

        // white space control characters
        if (source.match(/^\\[,;!\/\\]/)) {
          return "tag";
        }

        // find if we're starting various math modes
        if (source.match("\\[")) {
          setState(state, function(source, state){ return inMathMode(source, state, "\\]"); });
          return "keyword";
        }
        if (source.match("\\(")) {
          setState(state, function(source, state){ return inMathMode(source, state, "\\)"); });
          return "keyword";
        }
        if (source.match("$$")) {
          setState(state, function(source, state){ return inMathMode(source, state, "$$"); });
          return "keyword";
        }
        if (source.match("$")) {
          setState(state, function(source, state){ return inMathMode(source, state, "$"); });
          return "keyword";
        }

        var ch = source.next();
        if (ch == "%") {
          source.skipToEnd();
          return "comment";
        } else if (ch == '}' || ch == ']') {
          plug = peekCommand(state);
          if (plug) {
            plug.closeBracket(ch);
            setState(state, beginParams);
          } else {
            return "error";
          }
          return "bracket";
        } else if (ch == '{' || ch == '[') {
          plug = plugins["DEFAULT"];
          plug = new plug();
          pushCommand(state, plug);
          return "bracket";
        } else if (/\d/.test(ch)) {
          source.eatWhile(/[\w.%]/);
          return "atom";
        } else {
          source.eatWhile(/[\w\-_]/);
          plug = getMostPowerful(state);
          if (plug.name == 'begin') {
            plug.argument = source.current();
          }
          return plug.styleIdentifier();
        }
      }

      function inMathMode(source, state, endModeSeq) {
        if (source.eatSpace()) {
          return null;
        }
        if (endModeSeq && source.match(endModeSeq)) {
          setState(state, normal);
          return "keyword";
        }
        if (source.match(/^\\[a-zA-Z@]+/)) {
          return "tag";
        }
        if (source.match(/^[a-zA-Z]+/)) {
          return "variableName.special";
        }
        // escape characters
        if (source.match(/^\\[$&%#{}_]/)) {
          return "tag";
        }
        // white space control characters
        if (source.match(/^\\[,;!\/]/)) {
          return "tag";
        }
        // special math-mode characters
        if (source.match(/^[\^_&]/)) {
          return "tag";
        }
        // non-special characters
        if (source.match(/^[+\-<>|=,\/@!*:;'"`~#?]/)) {
          return null;
        }
        if (source.match(/^(\d+\.\d*|\d*\.\d+|\d+)/)) {
          return "number";
        }
        var ch = source.next();
        if (ch == "{" || ch == "}" || ch == "[" || ch == "]" || ch == "(" || ch == ")") {
          return "bracket";
        }

        if (ch == "%") {
          source.skipToEnd();
          return "comment";
        }
        return "error";
      }

      function beginParams(source, state) {
        var ch = source.peek(), lastPlug;
        if (ch == '{' || ch == '[') {
          lastPlug = peekCommand(state);
          lastPlug.openBracket(ch);
          source.eat(ch);
          setState(state, normal);
          return "bracket";
        }
        if (/[ \t\r]/.test(ch)) {
          source.eat(ch);
          return null;
        }
        setState(state, normal);
        popCommand(state);

        return normal(source, state);
      }

      return {
        startState: function() {
          var f = mathMode ? function(source, state){ return inMathMode(source, state); } : normal;
          return {
            cmdState: [],
            f: f
          };
        },
        copyState: function(s) {
          return {
            cmdState: s.cmdState.slice(),
            f: s.f
          };
        },
        token: function(stream, state) {
          return state.f(stream, state);
        },
        blankLine: function(state) {
          state.f = normal;
          state.cmdState.length = 0;
        },
        languageData: {
          commentTokens: {line: "%"}
        }
      };
    }
    const stex = mkStex(false);
    const stexMath = mkStex(true);

    var stex$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        stex: stex,
        stexMath: stexMath
    });

    function mkVerilog(parserConfig) {

      var statementIndentUnit = parserConfig.statementIndentUnit,
          dontAlignCalls = parserConfig.dontAlignCalls,
          noIndentKeywords = parserConfig.noIndentKeywords || [],
          multiLineStrings = parserConfig.multiLineStrings,
          hooks = parserConfig.hooks || {};

      function words(str) {
        var obj = {}, words = str.split(" ");
        for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
        return obj;
      }

      /**
       * Keywords from IEEE 1800-2012
       */
      var keywords = words(
        "accept_on alias always always_comb always_ff always_latch and assert assign assume automatic before begin bind " +
          "bins binsof bit break buf bufif0 bufif1 byte case casex casez cell chandle checker class clocking cmos config " +
          "const constraint context continue cover covergroup coverpoint cross deassign default defparam design disable " +
          "dist do edge else end endcase endchecker endclass endclocking endconfig endfunction endgenerate endgroup " +
          "endinterface endmodule endpackage endprimitive endprogram endproperty endspecify endsequence endtable endtask " +
          "enum event eventually expect export extends extern final first_match for force foreach forever fork forkjoin " +
          "function generate genvar global highz0 highz1 if iff ifnone ignore_bins illegal_bins implements implies import " +
          "incdir include initial inout input inside instance int integer interconnect interface intersect join join_any " +
          "join_none large let liblist library local localparam logic longint macromodule matches medium modport module " +
          "nand negedge nettype new nexttime nmos nor noshowcancelled not notif0 notif1 null or output package packed " +
          "parameter pmos posedge primitive priority program property protected pull0 pull1 pulldown pullup " +
          "pulsestyle_ondetect pulsestyle_onevent pure rand randc randcase randsequence rcmos real realtime ref reg " +
          "reject_on release repeat restrict return rnmos rpmos rtran rtranif0 rtranif1 s_always s_eventually s_nexttime " +
          "s_until s_until_with scalared sequence shortint shortreal showcancelled signed small soft solve specify " +
          "specparam static string strong strong0 strong1 struct super supply0 supply1 sync_accept_on sync_reject_on " +
          "table tagged task this throughout time timeprecision timeunit tran tranif0 tranif1 tri tri0 tri1 triand trior " +
          "trireg type typedef union unique unique0 unsigned until until_with untyped use uwire var vectored virtual void " +
          "wait wait_order wand weak weak0 weak1 while wildcard wire with within wor xnor xor");

      /** Operators from IEEE 1800-2012
          unary_operator ::=
          + | - | ! | ~ | & | ~& | | | ~| | ^ | ~^ | ^~
          binary_operator ::=
          + | - | * | / | % | == | != | === | !== | ==? | !=? | && | || | **
          | < | <= | > | >= | & | | | ^ | ^~ | ~^ | >> | << | >>> | <<<
          | -> | <->
          inc_or_dec_operator ::= ++ | --
          unary_module_path_operator ::=
          ! | ~ | & | ~& | | | ~| | ^ | ~^ | ^~
          binary_module_path_operator ::=
          == | != | && | || | & | | | ^ | ^~ | ~^
      */
      var isOperatorChar = /[\+\-\*\/!~&|^%=?:]/;
      var isBracketChar = /[\[\]{}()]/;

      var unsignedNumber = /\d[0-9_]*/;
      var decimalLiteral = /\d*\s*'s?d\s*\d[0-9_]*/i;
      var binaryLiteral = /\d*\s*'s?b\s*[xz01][xz01_]*/i;
      var octLiteral = /\d*\s*'s?o\s*[xz0-7][xz0-7_]*/i;
      var hexLiteral = /\d*\s*'s?h\s*[0-9a-fxz?][0-9a-fxz?_]*/i;
      var realLiteral = /(\d[\d_]*(\.\d[\d_]*)?E-?[\d_]+)|(\d[\d_]*\.\d[\d_]*)/i;

      var closingBracketOrWord = /^((\w+)|[)}\]])/;
      var closingBracket = /[)}\]]/;

      var curPunc;
      var curKeyword;

      // Block openings which are closed by a matching keyword in the form of ("end" + keyword)
      // E.g. "task" => "endtask"
      var blockKeywords = words(
        "case checker class clocking config function generate interface module package " +
          "primitive program property specify sequence table task"
      );

      // Opening/closing pairs
      var openClose = {};
      for (var keyword in blockKeywords) {
        openClose[keyword] = "end" + keyword;
      }
      openClose["begin"] = "end";
      openClose["casex"] = "endcase";
      openClose["casez"] = "endcase";
      openClose["do"   ] = "while";
      openClose["fork" ] = "join;join_any;join_none";
      openClose["covergroup"] = "endgroup";

      for (var i in noIndentKeywords) {
        var keyword = noIndentKeywords[i];
        if (openClose[keyword]) {
          openClose[keyword] = undefined;
        }
      }

      // Keywords which open statements that are ended with a semi-colon
      var statementKeywords = words("always always_comb always_ff always_latch assert assign assume else export for foreach forever if import initial repeat while");

      function tokenBase(stream, state) {
        var ch = stream.peek(), style;
        if (hooks[ch] && (style = hooks[ch](stream, state)) != false) return style;
        if (hooks.tokenBase && (style = hooks.tokenBase(stream, state)) != false)
          return style;

        if (/[,;:\.]/.test(ch)) {
          curPunc = stream.next();
          return null;
        }
        if (isBracketChar.test(ch)) {
          curPunc = stream.next();
          return "bracket";
        }
        // Macros (tick-defines)
        if (ch == '`') {
          stream.next();
          if (stream.eatWhile(/[\w\$_]/)) {
            return "def";
          } else {
            return null;
          }
        }
        // System calls
        if (ch == '$') {
          stream.next();
          if (stream.eatWhile(/[\w\$_]/)) {
            return "meta";
          } else {
            return null;
          }
        }
        // Time literals
        if (ch == '#') {
          stream.next();
          stream.eatWhile(/[\d_.]/);
          return "def";
        }
        // Strings
        if (ch == '"') {
          stream.next();
          state.tokenize = tokenString(ch);
          return state.tokenize(stream, state);
        }
        // Comments
        if (ch == "/") {
          stream.next();
          if (stream.eat("*")) {
            state.tokenize = tokenComment;
            return tokenComment(stream, state);
          }
          if (stream.eat("/")) {
            stream.skipToEnd();
            return "comment";
          }
          stream.backUp(1);
        }

        // Numeric literals
        if (stream.match(realLiteral) ||
            stream.match(decimalLiteral) ||
            stream.match(binaryLiteral) ||
            stream.match(octLiteral) ||
            stream.match(hexLiteral) ||
            stream.match(unsignedNumber) ||
            stream.match(realLiteral)) {
          return "number";
        }

        // Operators
        if (stream.eatWhile(isOperatorChar)) {
          return "meta";
        }

        // Keywords / plain variables
        if (stream.eatWhile(/[\w\$_]/)) {
          var cur = stream.current();
          if (keywords[cur]) {
            if (openClose[cur]) {
              curPunc = "newblock";
            }
            if (statementKeywords[cur]) {
              curPunc = "newstatement";
            }
            curKeyword = cur;
            return "keyword";
          }
          return "variable";
        }

        stream.next();
        return null;
      }

      function tokenString(quote) {
        return function(stream, state) {
          var escaped = false, next, end = false;
          while ((next = stream.next()) != null) {
            if (next == quote && !escaped) {end = true; break;}
            escaped = !escaped && next == "\\";
          }
          if (end || !(escaped || multiLineStrings))
            state.tokenize = tokenBase;
          return "string";
        };
      }

      function tokenComment(stream, state) {
        var maybeEnd = false, ch;
        while (ch = stream.next()) {
          if (ch == "/" && maybeEnd) {
            state.tokenize = tokenBase;
            break;
          }
          maybeEnd = (ch == "*");
        }
        return "comment";
      }

      function Context(indented, column, type, align, prev) {
        this.indented = indented;
        this.column = column;
        this.type = type;
        this.align = align;
        this.prev = prev;
      }
      function pushContext(state, col, type) {
        var indent = state.indented;
        var c = new Context(indent, col, type, null, state.context);
        return state.context = c;
      }
      function popContext(state) {
        var t = state.context.type;
        if (t == ")" || t == "]" || t == "}") {
          state.indented = state.context.indented;
        }
        return state.context = state.context.prev;
      }

      function isClosing(text, contextClosing) {
        if (text == contextClosing) {
          return true;
        } else {
          // contextClosing may be multiple keywords separated by ;
          var closingKeywords = contextClosing.split(";");
          for (var i in closingKeywords) {
            if (text == closingKeywords[i]) {
              return true;
            }
          }
          return false;
        }
      }

      function buildElectricInputRegEx() {
        // Reindentation should occur on any bracket char: {}()[]
        // or on a match of any of the block closing keywords, at
        // the end of a line
        var allClosings = [];
        for (var i in openClose) {
          if (openClose[i]) {
            var closings = openClose[i].split(";");
            for (var j in closings) {
              allClosings.push(closings[j]);
            }
          }
        }
        var re = new RegExp("[{}()\\[\\]]|(" + allClosings.join("|") + ")$");
        return re;
      }

      // Interface
      return {
        startState: function(indentUnit) {
          var state = {
            tokenize: null,
            context: new Context(-indentUnit, 0, "top", false),
            indented: 0,
            startOfLine: true
          };
          if (hooks.startState) hooks.startState(state);
          return state;
        },

        token: function(stream, state) {
          var ctx = state.context;
          if (stream.sol()) {
            if (ctx.align == null) ctx.align = false;
            state.indented = stream.indentation();
            state.startOfLine = true;
          }
          if (hooks.token) {
            // Call hook, with an optional return value of a style to override verilog styling.
            var style = hooks.token(stream, state);
            if (style !== undefined) {
              return style;
            }
          }
          if (stream.eatSpace()) return null;
          curPunc = null;
          curKeyword = null;
          var style = (state.tokenize || tokenBase)(stream, state);
          if (style == "comment" || style == "meta" || style == "variable") return style;
          if (ctx.align == null) ctx.align = true;

          if (curPunc == ctx.type) {
            popContext(state);
          } else if ((curPunc == ";" && ctx.type == "statement") ||
                     (ctx.type && isClosing(curKeyword, ctx.type))) {
            ctx = popContext(state);
            while (ctx && ctx.type == "statement") ctx = popContext(state);
          } else if (curPunc == "{") {
            pushContext(state, stream.column(), "}");
          } else if (curPunc == "[") {
            pushContext(state, stream.column(), "]");
          } else if (curPunc == "(") {
            pushContext(state, stream.column(), ")");
          } else if (ctx && ctx.type == "endcase" && curPunc == ":") {
            pushContext(state, stream.column(), "statement");
          } else if (curPunc == "newstatement") {
            pushContext(state, stream.column(), "statement");
          } else if (curPunc == "newblock") {
            if (curKeyword == "function" && ctx && (ctx.type == "statement" || ctx.type == "endgroup")) ; else if (curKeyword == "task" && ctx && ctx.type == "statement") ; else {
              var close = openClose[curKeyword];
              pushContext(state, stream.column(), close);
            }
          }

          state.startOfLine = false;
          return style;
        },

        indent: function(state, textAfter, cx) {
          if (state.tokenize != tokenBase && state.tokenize != null) return null;
          if (hooks.indent) {
            var fromHook = hooks.indent(state);
            if (fromHook >= 0) return fromHook;
          }
          var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);
          if (ctx.type == "statement" && firstChar == "}") ctx = ctx.prev;
          var closing = false;
          var possibleClosing = textAfter.match(closingBracketOrWord);
          if (possibleClosing)
            closing = isClosing(possibleClosing[0], ctx.type);
          if (ctx.type == "statement") return ctx.indented + (firstChar == "{" ? 0 : statementIndentUnit || cx.unit);
          else if (closingBracket.test(ctx.type) && ctx.align && !dontAlignCalls) return ctx.column + (closing ? 0 : 1);
          else if (ctx.type == ")" && !closing) return ctx.indented + (statementIndentUnit || cx.unit);
          else return ctx.indented + (closing ? 0 : cx.unit);
        },

        languageData: {
          indentOnInput: buildElectricInputRegEx(),
          commentTokens: {line: "//", block: {open: "/*", close: "*/"}}
        }
      };
    }
    const verilog = mkVerilog({});

    // TL-Verilog mode.
    // See tl-x.org for language spec.
    // See the mode in action at makerchip.com.
    // Contact: steve.hoover@redwoodeda.com

    // TLV Identifier prefixes.
    // Note that sign is not treated separately, so "+/-" versions of numeric identifiers
    // are included.
    var tlvIdentifierStyle = {
      "|": "link",
      ">": "property",  // Should condition this off for > TLV 1c.
      "$": "variable",
      "$$": "variable",
      "?$": "qualifier",
      "?*": "qualifier",
      "-": "contentSeparator",
      "/": "property",
      "/-": "property",
      "@": "variableName.special",
      "@-": "variableName.special",
      "@++": "variableName.special",
      "@+=": "variableName.special",
      "@+=-": "variableName.special",
      "@--": "variableName.special",
      "@-=": "variableName.special",
      "%+": "tag",
      "%-": "tag",
      "%": "tag",
      ">>": "tag",
      "<<": "tag",
      "<>": "tag",
      "#": "tag",  // Need to choose a style for this.
      "^": "attribute",
      "^^": "attribute",
      "^!": "attribute",
      "*": "variable",
      "**": "variable",
      "\\": "keyword",
      "\"": "comment"
    };

    // Lines starting with these characters define scope (result in indentation).
    var tlvScopePrefixChars = {
      "/": "beh-hier",
      ">": "beh-hier",
      "-": "phys-hier",
      "|": "pipe",
      "?": "when",
      "@": "stage",
      "\\": "keyword"
    };
    var tlvIndentUnit = 3;
    var tlvIdentMatch = /^([~!@#\$%\^&\*-\+=\?\/\\\|'"<>]+)([\d\w_]*)/;  // Matches an identifier.
    // Note that ':' is excluded, because of it's use in [:].
    var tlvLineIndentationMatch = /^[! ] */;
    var tlvCommentMatch = /^\/[\/\*]/;

    const tlv = mkVerilog({
      hooks: {
        electricInput: false,

        // Return undefined for verilog tokenizing, or style for TLV token (null not used).
        // Standard CM styles are used for most formatting, but some TL-Verilog-specific highlighting
        // can be enabled with the definition of cm-tlv-* styles, including highlighting for:
        //   - M4 tokens
        //   - TLV scope indentation
        //   - Statement delimitation (enabled by tlvTrackStatements)
        token: function(stream, state) {
          var style = undefined;
          var match;  // Return value of pattern matches.

          // Set highlighting mode based on code region (TLV or SV).
          if (stream.sol() && ! state.tlvInBlockComment) {
            // Process region.
            if (stream.peek() == '\\') {
              style = "def";
              stream.skipToEnd();
              if (stream.string.match(/\\SV/)) {
                state.tlvCodeActive = false;
              } else if (stream.string.match(/\\TLV/)){
                state.tlvCodeActive = true;
              }
            }
            // Correct indentation in the face of a line prefix char.
            if (state.tlvCodeActive && stream.pos == 0 &&
                (state.indented == 0) && (match = stream.match(tlvLineIndentationMatch, false))) {
              state.indented = match[0].length;
            }

            // Compute indentation state:
            //   o Auto indentation on next line
            //   o Indentation scope styles
            var indented = state.indented;
            var depth = indented / tlvIndentUnit;
            if (depth <= state.tlvIndentationStyle.length) {
              // not deeper than current scope

              var blankline = stream.string.length == indented;
              var chPos = depth * tlvIndentUnit;
              if (chPos < stream.string.length) {
                var bodyString = stream.string.slice(chPos);
                var ch = bodyString[0];
                if (tlvScopePrefixChars[ch] && ((match = bodyString.match(tlvIdentMatch)) &&
                                                tlvIdentifierStyle[match[1]])) {
                  // This line begins scope.
                  // Next line gets indented one level.
                  indented += tlvIndentUnit;
                  // Style the next level of indentation (except non-region keyword identifiers,
                  //   which are statements themselves)
                  if (!(ch == "\\" && chPos > 0)) {
                    state.tlvIndentationStyle[depth] = tlvScopePrefixChars[ch];
                    depth++;
                  }
                }
              }
              // Clear out deeper indentation levels unless line is blank.
              if (!blankline) {
                while (state.tlvIndentationStyle.length > depth) {
                  state.tlvIndentationStyle.pop();
                }
              }
            }
            // Set next level of indentation.
            state.tlvNextIndent = indented;
          }

          if (state.tlvCodeActive) {

            var match;
            if (style !== undefined) ; else if (state.tlvInBlockComment) {
              // In a block comment.
              if (stream.match(/^.*?\*\//)) {
                // Exit block comment.
                state.tlvInBlockComment = false;
              } else {
                stream.skipToEnd();
              }
              style = "comment";
            } else if ((match = stream.match(tlvCommentMatch)) && !state.tlvInBlockComment) {
              // Start comment.
              if (match[0] == "//") {
                // Line comment.
                stream.skipToEnd();
              } else {
                // Block comment.
                state.tlvInBlockComment = true;
              }
              style = "comment";
            } else if (match = stream.match(tlvIdentMatch)) {
              // looks like an identifier (or identifier prefix)
              var prefix = match[1];
              var mnemonic = match[2];
              if (// is identifier prefix
                tlvIdentifierStyle.hasOwnProperty(prefix) &&
                  // has mnemonic or we're at the end of the line (maybe it hasn't been typed yet)
                (mnemonic.length > 0 || stream.eol())) {
                style = tlvIdentifierStyle[prefix];
              } else {
                // Just swallow one character and try again.
                // This enables subsequent identifier match with preceding symbol character, which
                //   is legal within a statement.  (Eg, !$reset).  It also enables detection of
                //   comment start with preceding symbols.
                stream.backUp(stream.current().length - 1);
              }
            } else if (stream.match(/^\t+/)) {
              // Highlight tabs, which are illegal.
              style = "invalid";
            } else if (stream.match(/^[\[\]{}\(\);\:]+/)) {
              // [:], (), {}, ;.
              style = "meta";
            } else if (match = stream.match(/^[mM]4([\+_])?[\w\d_]*/)) {
              // m4 pre proc
              style = (match[1] == "+") ? "keyword.special" : "keyword";
            } else if (stream.match(/^ +/)){
              // Skip over spaces.
              if (stream.eol()) {
                // Trailing spaces.
                style = "error";
              }
            } else if (stream.match(/^[\w\d_]+/)) {
              // alpha-numeric token.
              style = "number";
            } else {
              // Eat the next char w/ no formatting.
              stream.next();
            }
          } else {
            if (stream.match(/^[mM]4([\w\d_]*)/)) {
              // m4 pre proc
              style = "keyword";
            }
          }
          return style;
        },

        indent: function(state) {
          return (state.tlvCodeActive == true) ? state.tlvNextIndent : -1;
        },

        startState: function(state) {
          state.tlvIndentationStyle = [];  // Styles to use for each level of indentation.
          state.tlvCodeActive = true;  // True when we're in a TLV region (and at beginning of file).
          state.tlvNextIndent = -1;    // The number of spaces to autoindent the next line if tlvCodeActive.
          state.tlvInBlockComment = false;  // True inside /**/ comment.
        }

      }
    });

    var verilog$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        verilog: verilog,
        tlv: tlv
    });

    function parseWords$1(str) {
      var obj = {}, words = str.split(" ");
      for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
      return obj;
    }
    var keywords$9 = parseWords$1("Tcl safe after append array auto_execok auto_import auto_load " +
                              "auto_mkindex auto_mkindex_old auto_qualify auto_reset bgerror " +
                              "binary break catch cd close concat continue dde eof encoding error " +
                              "eval exec exit expr fblocked fconfigure fcopy file fileevent filename " +
                              "filename flush for foreach format gets glob global history http if " +
                              "incr info interp join lappend lindex linsert list llength load lrange " +
                              "lreplace lsearch lset lsort memory msgcat namespace open package parray " +
                              "pid pkg::create pkg_mkIndex proc puts pwd re_syntax read regex regexp " +
                              "registry regsub rename resource return scan seek set socket source split " +
                              "string subst switch tcl_endOfWord tcl_findLibrary tcl_startOfNextWord " +
                              "tcl_wordBreakAfter tcl_startOfPreviousWord tcl_wordBreakBefore tcltest " +
                              "tclvars tell time trace unknown unset update uplevel upvar variable " +
                              "vwait");
    var functions$1 = parseWords$1("if elseif else and not or eq ne in ni for foreach while switch");
    var isOperatorChar$4 = /[+\-*&%=<>!?^\/\|]/;
    function chain$3(stream, state, f) {
      state.tokenize = f;
      return f(stream, state);
    }
    function tokenBase$a(stream, state) {
      var beforeParams = state.beforeParams;
      state.beforeParams = false;
      var ch = stream.next();
      if ((ch == '"' || ch == "'") && state.inParams) {
        return chain$3(stream, state, tokenString$6(ch));
      } else if (/[\[\]{}\(\),;\.]/.test(ch)) {
        if (ch == "(" && beforeParams) state.inParams = true;
        else if (ch == ")") state.inParams = false;
        return null;
      } else if (/\d/.test(ch)) {
        stream.eatWhile(/[\w\.]/);
        return "number";
      } else if (ch == "#") {
        if (stream.eat("*"))
          return chain$3(stream, state, tokenComment$4);
        if (ch == "#" && stream.match(/ *\[ *\[/))
          return chain$3(stream, state, tokenUnparsed$1);
        stream.skipToEnd();
        return "comment";
      } else if (ch == '"') {
        stream.skipTo(/"/);
        return "comment";
      } else if (ch == "$") {
        stream.eatWhile(/[$_a-z0-9A-Z\.{:]/);
        stream.eatWhile(/}/);
        state.beforeParams = true;
        return "builtin";
      } else if (isOperatorChar$4.test(ch)) {
        stream.eatWhile(isOperatorChar$4);
        return "comment";
      } else {
        stream.eatWhile(/[\w\$_{}\xa1-\uffff]/);
        var word = stream.current().toLowerCase();
        if (keywords$9 && keywords$9.propertyIsEnumerable(word))
          return "keyword";
        if (functions$1 && functions$1.propertyIsEnumerable(word)) {
          state.beforeParams = true;
          return "keyword";
        }
        return null;
      }
    }
    function tokenString$6(quote) {
      return function(stream, state) {
        var escaped = false, next, end = false;
        while ((next = stream.next()) != null) {
          if (next == quote && !escaped) {
            end = true;
            break;
          }
          escaped = !escaped && next == "\\";
        }
        if (end) state.tokenize = tokenBase$a;
        return "string";
      };
    }
    function tokenComment$4(stream, state) {
      var maybeEnd = false, ch;
      while (ch = stream.next()) {
        if (ch == "#" && maybeEnd) {
          state.tokenize = tokenBase$a;
          break;
        }
        maybeEnd = (ch == "*");
      }
      return "comment";
    }
    function tokenUnparsed$1(stream, state) {
      var maybeEnd = 0, ch;
      while (ch = stream.next()) {
        if (ch == "#" && maybeEnd == 2) {
          state.tokenize = tokenBase$a;
          break;
        }
        if (ch == "]")
          maybeEnd++;
        else if (ch != " ")
          maybeEnd = 0;
      }
      return "meta";
    }
    const tcl = {
      startState: function() {
        return {
          tokenize: tokenBase$a,
          beforeParams: false,
          inParams: false
        };
      },
      token: function(stream, state) {
        if (stream.eatSpace()) return null;
        return state.tokenize(stream, state);
      },
      languageData: {
        commentTokens: {line: "#"}
      }
    };

    var tcl$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        tcl: tcl
    });

    var TOKEN_STYLES = {
      addition: "inserted",
      attributes: "propertyName",
      bold: "strong",
      cite: "keyword",
      code: "monospace",
      definitionList: "list",
      deletion: "deleted",
      div: "punctuation",
      em: "emphasis",
      footnote: "variable",
      footCite: "qualifier",
      header: "heading",
      html: "comment",
      image: "atom",
      italic: "emphasis",
      link: "link",
      linkDefinition: "link",
      list1: "list",
      list2: "list.special",
      list3: "list",
      notextile: "string.special",
      pre: "operator",
      p: "content",
      quote: "bracket",
      span: "quote",
      specialChar: "character",
      strong: "strong",
      sub: "content.special",
      sup: "content.special",
      table: "variableName.special",
      tableHeading: "operator"
    };

    function startNewLine(stream, state) {
      state.mode = Modes.newLayout;
      state.tableHeading = false;

      if (state.layoutType === "definitionList" && state.spanningLayout &&
          stream.match(RE("definitionListEnd"), false))
        state.spanningLayout = false;
    }

    function handlePhraseModifier(stream, state, ch) {
      if (ch === "_") {
        if (stream.eat("_"))
          return togglePhraseModifier(stream, state, "italic", /__/, 2);
        else
          return togglePhraseModifier(stream, state, "em", /_/, 1);
      }

      if (ch === "*") {
        if (stream.eat("*")) {
          return togglePhraseModifier(stream, state, "bold", /\*\*/, 2);
        }
        return togglePhraseModifier(stream, state, "strong", /\*/, 1);
      }

      if (ch === "[") {
        if (stream.match(/\d+\]/)) state.footCite = true;
        return tokenStyles(state);
      }

      if (ch === "(") {
        var spec = stream.match(/^(r|tm|c)\)/);
        if (spec)
          return TOKEN_STYLES.specialChar
      }

      if (ch === "<" && stream.match(/(\w+)[^>]+>[^<]+<\/\1>/))
        return TOKEN_STYLES.html

      if (ch === "?" && stream.eat("?"))
        return togglePhraseModifier(stream, state, "cite", /\?\?/, 2);

      if (ch === "=" && stream.eat("="))
        return togglePhraseModifier(stream, state, "notextile", /==/, 2);

      if (ch === "-" && !stream.eat("-"))
        return togglePhraseModifier(stream, state, "deletion", /-/, 1);

      if (ch === "+")
        return togglePhraseModifier(stream, state, "addition", /\+/, 1);

      if (ch === "~")
        return togglePhraseModifier(stream, state, "sub", /~/, 1);

      if (ch === "^")
        return togglePhraseModifier(stream, state, "sup", /\^/, 1);

      if (ch === "%")
        return togglePhraseModifier(stream, state, "span", /%/, 1);

      if (ch === "@")
        return togglePhraseModifier(stream, state, "code", /@/, 1);

      if (ch === "!") {
        var type = togglePhraseModifier(stream, state, "image", /(?:\([^\)]+\))?!/, 1);
        stream.match(/^:\S+/); // optional Url portion
        return type;
      }
      return tokenStyles(state);
    }

    function togglePhraseModifier(stream, state, phraseModifier, closeRE, openSize) {
      var charBefore = stream.pos > openSize ? stream.string.charAt(stream.pos - openSize - 1) : null;
      var charAfter = stream.peek();
      if (state[phraseModifier]) {
        if ((!charAfter || /\W/.test(charAfter)) && charBefore && /\S/.test(charBefore)) {
          var type = tokenStyles(state);
          state[phraseModifier] = false;
          return type;
        }
      } else if ((!charBefore || /\W/.test(charBefore)) && charAfter && /\S/.test(charAfter) &&
                 stream.match(new RegExp("^.*\\S" + closeRE.source + "(?:\\W|$)"), false)) {
        state[phraseModifier] = true;
        state.mode = Modes.attributes;
      }
      return tokenStyles(state);
    }
    function tokenStyles(state) {
      var disabled = textileDisabled(state);
      if (disabled) return disabled;

      var styles = [];
      if (state.layoutType) styles.push(TOKEN_STYLES[state.layoutType]);

      styles = styles.concat(activeStyles(
        state, "addition", "bold", "cite", "code", "deletion", "em", "footCite",
        "image", "italic", "link", "span", "strong", "sub", "sup", "table", "tableHeading"));

      if (state.layoutType === "header")
        styles.push(TOKEN_STYLES.header + "-" + state.header);

      return styles.length ? styles.join(" ") : null;
    }

    function textileDisabled(state) {
      var type = state.layoutType;

      switch(type) {
      case "notextile":
      case "code":
      case "pre":
        return TOKEN_STYLES[type];
      default:
        if (state.notextile)
          return TOKEN_STYLES.notextile + (type ? (" " + TOKEN_STYLES[type]) : "");
        return null;
      }
    }

    function activeStyles(state) {
      var styles = [];
      for (var i = 1; i < arguments.length; ++i) {
        if (state[arguments[i]])
          styles.push(TOKEN_STYLES[arguments[i]]);
      }
      return styles;
    }

    function blankLine(state) {
      var spanningLayout = state.spanningLayout, type = state.layoutType;

      for (var key in state) if (state.hasOwnProperty(key))
        delete state[key];

      state.mode = Modes.newLayout;
      if (spanningLayout) {
        state.layoutType = type;
        state.spanningLayout = true;
      }
    }

    var REs = {
      cache: {},
      single: {
        bc: "bc",
        bq: "bq",
        definitionList: /- .*?:=+/,
        definitionListEnd: /.*=:\s*$/,
        div: "div",
        drawTable: /\|.*\|/,
        foot: /fn\d+/,
        header: /h[1-6]/,
        html: /\s*<(?:\/)?(\w+)(?:[^>]+)?>(?:[^<]+<\/\1>)?/,
        link: /[^"]+":\S/,
        linkDefinition: /\[[^\s\]]+\]\S+/,
        list: /(?:#+|\*+)/,
        notextile: "notextile",
        para: "p",
        pre: "pre",
        table: "table",
        tableCellAttributes: /[\/\\]\d+/,
        tableHeading: /\|_\./,
        tableText: /[^"_\*\[\(\?\+~\^%@|-]+/,
        text: /[^!"_=\*\[\(<\?\+~\^%@-]+/
      },
      attributes: {
        align: /(?:<>|<|>|=)/,
        selector: /\([^\(][^\)]+\)/,
        lang: /\[[^\[\]]+\]/,
        pad: /(?:\(+|\)+){1,2}/,
        css: /\{[^\}]+\}/
      },
      createRe: function(name) {
        switch (name) {
        case "drawTable":
          return REs.makeRe("^", REs.single.drawTable, "$");
        case "html":
          return REs.makeRe("^", REs.single.html, "(?:", REs.single.html, ")*", "$");
        case "linkDefinition":
          return REs.makeRe("^", REs.single.linkDefinition, "$");
        case "listLayout":
          return REs.makeRe("^", REs.single.list, RE("allAttributes"), "*\\s+");
        case "tableCellAttributes":
          return REs.makeRe("^", REs.choiceRe(REs.single.tableCellAttributes,
                                              RE("allAttributes")), "+\\.");
        case "type":
          return REs.makeRe("^", RE("allTypes"));
        case "typeLayout":
          return REs.makeRe("^", RE("allTypes"), RE("allAttributes"),
                            "*\\.\\.?", "(\\s+|$)");
        case "attributes":
          return REs.makeRe("^", RE("allAttributes"), "+");

        case "allTypes":
          return REs.choiceRe(REs.single.div, REs.single.foot,
                              REs.single.header, REs.single.bc, REs.single.bq,
                              REs.single.notextile, REs.single.pre, REs.single.table,
                              REs.single.para);

        case "allAttributes":
          return REs.choiceRe(REs.attributes.selector, REs.attributes.css,
                              REs.attributes.lang, REs.attributes.align, REs.attributes.pad);

        default:
          return REs.makeRe("^", REs.single[name]);
        }
      },
      makeRe: function() {
        var pattern = "";
        for (var i = 0; i < arguments.length; ++i) {
          var arg = arguments[i];
          pattern += (typeof arg === "string") ? arg : arg.source;
        }
        return new RegExp(pattern);
      },
      choiceRe: function() {
        var parts = [arguments[0]];
        for (var i = 1; i < arguments.length; ++i) {
          parts[i * 2 - 1] = "|";
          parts[i * 2] = arguments[i];
        }

        parts.unshift("(?:");
        parts.push(")");
        return REs.makeRe.apply(null, parts);
      }
    };

    function RE(name) {
      return (REs.cache[name] || (REs.cache[name] = REs.createRe(name)));
    }

    var Modes = {
      newLayout: function(stream, state) {
        if (stream.match(RE("typeLayout"), false)) {
          state.spanningLayout = false;
          return (state.mode = Modes.blockType)(stream, state);
        }
        var newMode;
        if (!textileDisabled(state)) {
          if (stream.match(RE("listLayout"), false))
            newMode = Modes.list;
          else if (stream.match(RE("drawTable"), false))
            newMode = Modes.table;
          else if (stream.match(RE("linkDefinition"), false))
            newMode = Modes.linkDefinition;
          else if (stream.match(RE("definitionList")))
            newMode = Modes.definitionList;
          else if (stream.match(RE("html"), false))
            newMode = Modes.html;
        }
        return (state.mode = (newMode || Modes.text))(stream, state);
      },

      blockType: function(stream, state) {
        var match, type;
        state.layoutType = null;

        if (match = stream.match(RE("type")))
          type = match[0];
        else
          return (state.mode = Modes.text)(stream, state);

        if (match = type.match(RE("header"))) {
          state.layoutType = "header";
          state.header = parseInt(match[0][1]);
        } else if (type.match(RE("bq"))) {
          state.layoutType = "quote";
        } else if (type.match(RE("bc"))) {
          state.layoutType = "code";
        } else if (type.match(RE("foot"))) {
          state.layoutType = "footnote";
        } else if (type.match(RE("notextile"))) {
          state.layoutType = "notextile";
        } else if (type.match(RE("pre"))) {
          state.layoutType = "pre";
        } else if (type.match(RE("div"))) {
          state.layoutType = "div";
        } else if (type.match(RE("table"))) {
          state.layoutType = "table";
        }

        state.mode = Modes.attributes;
        return tokenStyles(state);
      },

      text: function(stream, state) {
        if (stream.match(RE("text"))) return tokenStyles(state);

        var ch = stream.next();
        if (ch === '"')
          return (state.mode = Modes.link)(stream, state);
        return handlePhraseModifier(stream, state, ch);
      },

      attributes: function(stream, state) {
        state.mode = Modes.layoutLength;

        if (stream.match(RE("attributes")))
          return TOKEN_STYLES.attributes
        else
          return tokenStyles(state);
      },

      layoutLength: function(stream, state) {
        if (stream.eat(".") && stream.eat("."))
          state.spanningLayout = true;

        state.mode = Modes.text;
        return tokenStyles(state);
      },

      list: function(stream, state) {
        var match = stream.match(RE("list"));
        state.listDepth = match[0].length;
        var listMod = (state.listDepth - 1) % 3;
        if (!listMod)
          state.layoutType = "list1";
        else if (listMod === 1)
          state.layoutType = "list2";
        else
          state.layoutType = "list3";

        state.mode = Modes.attributes;
        return tokenStyles(state);
      },

      link: function(stream, state) {
        state.mode = Modes.text;
        if (stream.match(RE("link"))) {
          stream.match(/\S+/);
          return TOKEN_STYLES.link
        }
        return tokenStyles(state);
      },

      linkDefinition: function(stream) {
        stream.skipToEnd();
        return TOKEN_STYLES.linkDefinition
      },

      definitionList: function(stream, state) {
        stream.match(RE("definitionList"));

        state.layoutType = "definitionList";

        if (stream.match(/\s*$/))
          state.spanningLayout = true;
        else
          state.mode = Modes.attributes;

        return tokenStyles(state);
      },

      html: function(stream) {
        stream.skipToEnd();
        return TOKEN_STYLES.html
      },

      table: function(stream, state) {
        state.layoutType = "table";
        return (state.mode = Modes.tableCell)(stream, state);
      },

      tableCell: function(stream, state) {
        if (stream.match(RE("tableHeading")))
          state.tableHeading = true;
        else
          stream.eat("|");

        state.mode = Modes.tableCellAttributes;
        return tokenStyles(state);
      },

      tableCellAttributes: function(stream, state) {
        state.mode = Modes.tableText;

        if (stream.match(RE("tableCellAttributes")))
          return TOKEN_STYLES.attributes
        else
          return tokenStyles(state);
      },

      tableText: function(stream, state) {
        if (stream.match(RE("tableText")))
          return tokenStyles(state);

        if (stream.peek() === "|") { // end of cell
          state.mode = Modes.tableCell;
          return tokenStyles(state);
        }
        return handlePhraseModifier(stream, state, stream.next());
      }
    };

    const textile = {
      startState: function() {
        return { mode: Modes.newLayout };
      },
      token: function(stream, state) {
        if (stream.sol()) startNewLine(stream, state);
        return state.mode(stream, state);
      },
      blankLine: blankLine
    };

    var textile$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        textile: textile
    });

    // Tokenizer
    var textwords = {};

    var keywords$8 = {
      "allTags": true, "closeAll": true, "list": true,
      "newJournal": true, "newTiddler": true,
      "permaview": true, "saveChanges": true,
      "search": true, "slider": true, "tabs": true,
      "tag": true, "tagging": true, "tags": true,
      "tiddler": true, "timeline": true,
      "today": true, "version": true, "option": true,
      "with": true, "filter": true
    };

    var isSpaceName = /[\w_\-]/i,
        reHR = /^\-\-\-\-+$/,                                 // <hr>
        reWikiCommentStart = /^\/\*\*\*$/,            // /***
        reWikiCommentStop = /^\*\*\*\/$/,             // ***/
        reBlockQuote = /^<<<$/,

        reJsCodeStart = /^\/\/\{\{\{$/,                       // //{{{ js block start
        reJsCodeStop = /^\/\/\}\}\}$/,                        // //}}} js stop
        reXmlCodeStart = /^<!--\{\{\{-->$/,           // xml block start
        reXmlCodeStop = /^<!--\}\}\}-->$/,            // xml stop

        reCodeBlockStart = /^\{\{\{$/,                        // {{{ TW text div block start
        reCodeBlockStop = /^\}\}\}$/,                 // }}} TW text stop

        reUntilCodeStop = /.*?\}\}\}/;

    function chain$2(stream, state, f) {
      state.tokenize = f;
      return f(stream, state);
    }

    function tokenBase$9(stream, state) {
      var sol = stream.sol(), ch = stream.peek();

      state.block = false;        // indicates the start of a code block.

      // check start of  blocks
      if (sol && /[<\/\*{}\-]/.test(ch)) {
        if (stream.match(reCodeBlockStart)) {
          state.block = true;
          return chain$2(stream, state, twTokenCode);
        }
        if (stream.match(reBlockQuote))
          return 'quote';
        if (stream.match(reWikiCommentStart) || stream.match(reWikiCommentStop))
          return 'comment';
        if (stream.match(reJsCodeStart) || stream.match(reJsCodeStop) || stream.match(reXmlCodeStart) || stream.match(reXmlCodeStop))
          return 'comment';
        if (stream.match(reHR))
          return 'contentSeparator';
      }

      stream.next();
      if (sol && /[\/\*!#;:>|]/.test(ch)) {
        if (ch == "!") { // tw header
          stream.skipToEnd();
          return "header";
        }
        if (ch == "*") { // tw list
          stream.eatWhile('*');
          return "comment";
        }
        if (ch == "#") { // tw numbered list
          stream.eatWhile('#');
          return "comment";
        }
        if (ch == ";") { // definition list, term
          stream.eatWhile(';');
          return "comment";
        }
        if (ch == ":") { // definition list, description
          stream.eatWhile(':');
          return "comment";
        }
        if (ch == ">") { // single line quote
          stream.eatWhile(">");
          return "quote";
        }
        if (ch == '|')
          return 'header';
      }

      if (ch == '{' && stream.match('{{'))
        return chain$2(stream, state, twTokenCode);

      // rudimentary html:// file:// link matching. TW knows much more ...
      if (/[hf]/i.test(ch) &&
          /[ti]/i.test(stream.peek()) &&
          stream.match(/\b(ttps?|tp|ile):\/\/[\-A-Z0-9+&@#\/%?=~_|$!:,.;]*[A-Z0-9+&@#\/%=~_|$]/i))
        return "link";

      // just a little string indicator, don't want to have the whole string covered
      if (ch == '"')
        return 'string';

      if (ch == '~')    // _no_ CamelCase indicator should be bold
        return 'brace';

      if (/[\[\]]/.test(ch) && stream.match(ch)) // check for [[..]]
        return 'brace';

      if (ch == "@") {    // check for space link. TODO fix @@...@@ highlighting
        stream.eatWhile(isSpaceName);
        return "link";
      }

      if (/\d/.test(ch)) {        // numbers
        stream.eatWhile(/\d/);
        return "number";
      }

      if (ch == "/") { // tw invisible comment
        if (stream.eat("%")) {
          return chain$2(stream, state, twTokenComment);
        } else if (stream.eat("/")) { //
          return chain$2(stream, state, twTokenEm);
        }
      }

      if (ch == "_" && stream.eat("_")) // tw underline
        return chain$2(stream, state, twTokenUnderline);

      // strikethrough and mdash handling
      if (ch == "-" && stream.eat("-")) {
        // if strikethrough looks ugly, change CSS.
        if (stream.peek() != ' ')
          return chain$2(stream, state, twTokenStrike);
        // mdash
        if (stream.peek() == ' ')
          return 'brace';
      }

      if (ch == "'" && stream.eat("'")) // tw bold
        return chain$2(stream, state, twTokenStrong);

      if (ch == "<" && stream.eat("<")) // tw macro
        return chain$2(stream, state, twTokenMacro);

      // core macro handling
      stream.eatWhile(/[\w\$_]/);
      return textwords.propertyIsEnumerable(stream.current()) ? "keyword" : null
    }

    // tw invisible comment
    function twTokenComment(stream, state) {
      var maybeEnd = false, ch;
      while (ch = stream.next()) {
        if (ch == "/" && maybeEnd) {
          state.tokenize = tokenBase$9;
          break;
        }
        maybeEnd = (ch == "%");
      }
      return "comment";
    }

    // tw strong / bold
    function twTokenStrong(stream, state) {
      var maybeEnd = false,
          ch;
      while (ch = stream.next()) {
        if (ch == "'" && maybeEnd) {
          state.tokenize = tokenBase$9;
          break;
        }
        maybeEnd = (ch == "'");
      }
      return "strong";
    }

    // tw code
    function twTokenCode(stream, state) {
      var sb = state.block;

      if (sb && stream.current()) {
        return "comment";
      }

      if (!sb && stream.match(reUntilCodeStop)) {
        state.tokenize = tokenBase$9;
        return "comment";
      }

      if (sb && stream.sol() && stream.match(reCodeBlockStop)) {
        state.tokenize = tokenBase$9;
        return "comment";
      }

      stream.next();
      return "comment";
    }

    // tw em / italic
    function twTokenEm(stream, state) {
      var maybeEnd = false,
          ch;
      while (ch = stream.next()) {
        if (ch == "/" && maybeEnd) {
          state.tokenize = tokenBase$9;
          break;
        }
        maybeEnd = (ch == "/");
      }
      return "emphasis";
    }

    // tw underlined text
    function twTokenUnderline(stream, state) {
      var maybeEnd = false,
          ch;
      while (ch = stream.next()) {
        if (ch == "_" && maybeEnd) {
          state.tokenize = tokenBase$9;
          break;
        }
        maybeEnd = (ch == "_");
      }
      return "link";
    }

    // tw strike through text looks ugly
    // change CSS if needed
    function twTokenStrike(stream, state) {
      var maybeEnd = false, ch;

      while (ch = stream.next()) {
        if (ch == "-" && maybeEnd) {
          state.tokenize = tokenBase$9;
          break;
        }
        maybeEnd = (ch == "-");
      }
      return "deleted";
    }

    // macro
    function twTokenMacro(stream, state) {
      if (stream.current() == '<<') {
        return 'meta';
      }

      var ch = stream.next();
      if (!ch) {
        state.tokenize = tokenBase$9;
        return null;
      }
      if (ch == ">") {
        if (stream.peek() == '>') {
          stream.next();
          state.tokenize = tokenBase$9;
          return "meta";
        }
      }

      stream.eatWhile(/[\w\$_]/);
      return keywords$8.propertyIsEnumerable(stream.current()) ? "keyword" : null
    }

    // Interface
    const tiddlyWiki = {
      startState: function () {
        return {tokenize: tokenBase$9};
      },

      token: function (stream, state) {
        if (stream.eatSpace()) return null;
        var style = state.tokenize(stream, state);
        return style;
      }
    };

    var tiddlywiki = /*#__PURE__*/Object.freeze({
        __proto__: null,
        tiddlyWiki: tiddlyWiki
    });

    function inBlock(style, terminator, returnTokenizer) {
      return function(stream, state) {
        while (!stream.eol()) {
          if (stream.match(terminator)) {
            state.tokenize = inText;
            break;
          }
          stream.next();
        }

        if (returnTokenizer) state.tokenize = returnTokenizer;

        return style;
      };
    }

    function inLine(style) {
      return function(stream, state) {
        while(!stream.eol()) {
          stream.next();
        }
        state.tokenize = inText;
        return style;
      };
    }

    function inText(stream, state) {
      function chain(parser) {
        state.tokenize = parser;
        return parser(stream, state);
      }

      var sol = stream.sol();
      var ch = stream.next();

      //non start of line
      switch (ch) { //switch is generally much faster than if, so it is used here
      case "{": //plugin
        stream.eat("/");
        stream.eatSpace();
        stream.eatWhile(/[^\s\u00a0=\"\'\/?(}]/);
        state.tokenize = inPlugin;
        return "tag";
      case "_": //bold
        if (stream.eat("_"))
          return chain(inBlock("strong", "__", inText));
        break;
      case "'": //italics
        if (stream.eat("'"))
          return chain(inBlock("em", "''", inText));
        break;
      case "(":// Wiki Link
        if (stream.eat("("))
          return chain(inBlock("link", "))", inText));
        break;
      case "[":// Weblink
        return chain(inBlock("url", "]", inText));
      case "|": //table
        if (stream.eat("|"))
          return chain(inBlock("comment", "||"));
        break;
      case "-":
        if (stream.eat("=")) {//titleBar
          return chain(inBlock("header string", "=-", inText));
        } else if (stream.eat("-")) {//deleted
          return chain(inBlock("error tw-deleted", "--", inText));
        }
        break;
      case "=": //underline
        if (stream.match("=="))
          return chain(inBlock("tw-underline", "===", inText));
        break;
      case ":":
        if (stream.eat(":"))
          return chain(inBlock("comment", "::"));
        break;
      case "^": //box
        return chain(inBlock("tw-box", "^"));
      case "~": //np
        if (stream.match("np~"))
          return chain(inBlock("meta", "~/np~"));
        break;
      }

      //start of line types
      if (sol) {
        switch (ch) {
        case "!": //header at start of line
          if (stream.match('!!!!!')) {
            return chain(inLine("header string"));
          } else if (stream.match('!!!!')) {
            return chain(inLine("header string"));
          } else if (stream.match('!!!')) {
            return chain(inLine("header string"));
          } else if (stream.match('!!')) {
            return chain(inLine("header string"));
          } else {
            return chain(inLine("header string"));
          }
        case "*": //unordered list line item, or <li /> at start of line
        case "#": //ordered list line item, or <li /> at start of line
        case "+": //ordered list line item, or <li /> at start of line
          return chain(inLine("tw-listitem bracket"));
        }
      }

      //stream.eatWhile(/[&{]/); was eating up plugins, turned off to act less like html and more like tiki
      return null;
    }

    // Return variables for tokenizers
    var pluginName, type;
    function inPlugin(stream, state) {
      var ch = stream.next();
      var peek = stream.peek();

      if (ch == "}") {
        state.tokenize = inText;
        //type = ch == ")" ? "endPlugin" : "selfclosePlugin"; inPlugin
        return "tag";
      } else if (ch == "(" || ch == ")") {
        return "bracket";
      } else if (ch == "=") {
        type = "equals";

        if (peek == ">") {
          stream.next();
          peek = stream.peek();
        }

        //here we detect values directly after equal character with no quotes
        if (!/[\'\"]/.test(peek)) {
          state.tokenize = inAttributeNoQuote();
        }
        //end detect values

        return "operator";
      } else if (/[\'\"]/.test(ch)) {
        state.tokenize = inAttribute(ch);
        return state.tokenize(stream, state);
      } else {
        stream.eatWhile(/[^\s\u00a0=\"\'\/?]/);
        return "keyword";
      }
    }

    function inAttribute(quote) {
      return function(stream, state) {
        while (!stream.eol()) {
          if (stream.next() == quote) {
            state.tokenize = inPlugin;
            break;
          }
        }
        return "string";
      };
    }

    function inAttributeNoQuote() {
      return function(stream, state) {
        while (!stream.eol()) {
          var ch = stream.next();
          var peek = stream.peek();
          if (ch == " " || ch == "," || /[ )}]/.test(peek)) {
            state.tokenize = inPlugin;
            break;
          }
        }
        return "string";
      };
    }

    var curState, setStyle;
    function pass() {
      for (var i = arguments.length - 1; i >= 0; i--) curState.cc.push(arguments[i]);
    }

    function cont() {
      pass.apply(null, arguments);
      return true;
    }

    function pushContext$4(pluginName, startOfLine) {
      var noIndent = curState.context && curState.context.noIndent;
      curState.context = {
        prev: curState.context,
        pluginName: pluginName,
        indent: curState.indented,
        startOfLine: startOfLine,
        noIndent: noIndent
      };
    }

    function popContext$4() {
      if (curState.context) curState.context = curState.context.prev;
    }

    function element(type) {
      if (type == "openPlugin") {curState.pluginName = pluginName; return cont(attributes, endplugin(curState.startOfLine));}
      else if (type == "closePlugin") {
        var err = false;
        if (curState.context) {
          err = curState.context.pluginName != pluginName;
          popContext$4();
        } else {
          err = true;
        }
        if (err) setStyle = "error";
        return cont(endcloseplugin(err));
      }
      else if (type == "string") {
        if (!curState.context || curState.context.name != "!cdata") pushContext$4("!cdata");
        if (curState.tokenize == inText) popContext$4();
        return cont();
      }
      else return cont();
    }

    function endplugin(startOfLine) {
      return function(type) {
        if (
          type == "selfclosePlugin" ||
            type == "endPlugin"
        )
          return cont();
        if (type == "endPlugin") {pushContext$4(curState.pluginName, startOfLine); return cont();}
        return cont();
      };
    }

    function endcloseplugin(err) {
      return function(type) {
        if (err) setStyle = "error";
        if (type == "endPlugin") return cont();
        return pass();
      };
    }

    function attributes(type) {
      if (type == "keyword") {setStyle = "attribute"; return cont(attributes);}
      if (type == "equals") return cont(attvalue, attributes);
      return pass();
    }
    function attvalue(type) {
      if (type == "keyword") {setStyle = "string"; return cont();}
      if (type == "string") return cont(attvaluemaybe);
      return pass();
    }
    function attvaluemaybe(type) {
      if (type == "string") return cont(attvaluemaybe);
      else return pass();
    }
    const tiki = {
      startState: function() {
        return {tokenize: inText, cc: [], indented: 0, startOfLine: true, pluginName: null, context: null};
      },
      token: function(stream, state) {
        if (stream.sol()) {
          state.startOfLine = true;
          state.indented = stream.indentation();
        }
        if (stream.eatSpace()) return null;

        setStyle = type = pluginName = null;
        var style = state.tokenize(stream, state);
        if ((style || type) && style != "comment") {
          curState = state;
          while (true) {
            var comb = state.cc.pop() || element;
            if (comb(type || style)) break;
          }
        }
        state.startOfLine = false;
        return setStyle || style;
      },
      indent: function(state, textAfter, cx) {
        var context = state.context;
        if (context && context.noIndent) return 0;
        if (context && /^{\//.test(textAfter))
          context = context.prev;
        while (context && !context.startOfLine)
          context = context.prev;
        if (context) return context.indent + cx.unit;
        else return 0;
      }
    };

    var tiki$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        tiki: tiki
    });

    const toml = {
      startState: function () {
        return {
          inString: false,
          stringType: "",
          lhs: true,
          inArray: 0
        };
      },
      token: function (stream, state) {
        //check for state changes
        if (!state.inString && ((stream.peek() == '"') || (stream.peek() == "'"))) {
          state.stringType = stream.peek();
          stream.next(); // Skip quote
          state.inString = true; // Update state
        }
        if (stream.sol() && state.inArray === 0) {
          state.lhs = true;
        }
        //return state
        if (state.inString) {
          while (state.inString && !stream.eol()) {
            if (stream.peek() === state.stringType) {
              stream.next(); // Skip quote
              state.inString = false; // Clear flag
            } else if (stream.peek() === '\\') {
              stream.next();
              stream.next();
            } else {
              stream.match(/^.[^\\\"\']*/);
            }
          }
          return state.lhs ? "property" : "string"; // Token style
        } else if (state.inArray && stream.peek() === ']') {
          stream.next();
          state.inArray--;
          return 'bracket';
        } else if (state.lhs && stream.peek() === '[' && stream.skipTo(']')) {
          stream.next();//skip closing ]
          // array of objects has an extra open & close []
          if (stream.peek() === ']') stream.next();
          return "atom";
        } else if (stream.peek() === "#") {
          stream.skipToEnd();
          return "comment";
        } else if (stream.eatSpace()) {
          return null;
        } else if (state.lhs && stream.eatWhile(function (c) { return c != '=' && c != ' '; })) {
          return "property";
        } else if (state.lhs && stream.peek() === "=") {
          stream.next();
          state.lhs = false;
          return null;
        } else if (!state.lhs && stream.match(/^\d\d\d\d[\d\-\:\.T]*Z/)) {
          return 'atom'; //date
        } else if (!state.lhs && (stream.match('true') || stream.match('false'))) {
          return 'atom';
        } else if (!state.lhs && stream.peek() === '[') {
          state.inArray++;
          stream.next();
          return 'bracket';
        } else if (!state.lhs && stream.match(/^\-?\d+(?:\.\d+)?/)) {
          return 'number';
        } else if (!stream.eatSpace()) {
          stream.next();
        }
        return null;
      }
    };

    var toml$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        toml: toml
    });

    var words$4 = {};

    function tokenBase$8(stream) {
      if (stream.eatSpace()) return null;

      var sol = stream.sol();
      var ch = stream.next();

      if (ch === '\\') {
        if (stream.match('fB') || stream.match('fR') || stream.match('fI') ||
            stream.match('u')  || stream.match('d')  ||
            stream.match('%')  || stream.match('&')) {
          return 'string';
        }
        if (stream.match('m[')) {
          stream.skipTo(']');
          stream.next();
          return 'string';
        }
        if (stream.match('s+') || stream.match('s-')) {
          stream.eatWhile(/[\d-]/);
          return 'string';
        }
        if (stream.match('\(') || stream.match('*\(')) {
          stream.eatWhile(/[\w-]/);
          return 'string';
        }
        return 'string';
      }
      if (sol && (ch === '.' || ch === '\'')) {
        if (stream.eat('\\') && stream.eat('\"')) {
          stream.skipToEnd();
          return 'comment';
        }
      }
      if (sol && ch === '.') {
        if (stream.match('B ') || stream.match('I ') || stream.match('R ')) {
          return 'attribute';
        }
        if (stream.match('TH ') || stream.match('SH ') || stream.match('SS ') || stream.match('HP ')) {
          stream.skipToEnd();
          return 'quote';
        }
        if ((stream.match(/[A-Z]/) && stream.match(/[A-Z]/)) || (stream.match(/[a-z]/) && stream.match(/[a-z]/))) {
          return 'attribute';
        }
      }
      stream.eatWhile(/[\w-]/);
      var cur = stream.current();
      return words$4.hasOwnProperty(cur) ? words$4[cur] : null;
    }

    function tokenize(stream, state) {
      return (state.tokens[0] || tokenBase$8) (stream, state);
    }
    const troff = {
      startState: function() {return {tokens:[]};},
      token: function(stream, state) {
        return tokenize(stream, state);
      }
    };

    var troff$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        troff: troff
    });

    function words$3(str) {
      var obj = {}, words = str.split(" ");
      for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
      return obj;
    }

    const parserConfig$1 = {
      name: "ttcn",
      keywords: words$3("activate address alive all alt altstep and and4b any" +
                      " break case component const continue control deactivate" +
                      " display do else encode enumerated except exception" +
                      " execute extends extension external for from function" +
                      " goto group if import in infinity inout interleave" +
                      " label language length log match message mixed mod" +
                      " modifies module modulepar mtc noblock not not4b nowait" +
                      " of on optional or or4b out override param pattern port" +
                      " procedure record recursive rem repeat return runs select" +
                      " self sender set signature system template testcase to" +
                      " type union value valueof var variant while with xor xor4b"),
      builtin: words$3("bit2hex bit2int bit2oct bit2str char2int char2oct encvalue" +
                     " decomp decvalue float2int float2str hex2bit hex2int" +
                     " hex2oct hex2str int2bit int2char int2float int2hex" +
                     " int2oct int2str int2unichar isbound ischosen ispresent" +
                     " isvalue lengthof log2str oct2bit oct2char oct2hex oct2int" +
                     " oct2str regexp replace rnd sizeof str2bit str2float" +
                     " str2hex str2int str2oct substr unichar2int unichar2char" +
                     " enum2int"),
      types: words$3("anytype bitstring boolean char charstring default float" +
                   " hexstring integer objid octetstring universal verdicttype timer"),
      timerOps: words$3("read running start stop timeout"),
      portOps: words$3("call catch check clear getcall getreply halt raise receive" +
                     " reply send trigger"),
      configOps: words$3("create connect disconnect done kill killed map unmap"),
      verdictOps: words$3("getverdict setverdict"),
      sutOps: words$3("action"),
      functionOps: words$3("apply derefers refers"),

      verdictConsts: words$3("error fail inconc none pass"),
      booleanConsts: words$3("true false"),
      otherConsts: words$3("null NULL omit"),

      visibilityModifiers: words$3("private public friend"),
      templateMatch: words$3("complement ifpresent subset superset permutation"),
      multiLineStrings: true
    };

    var wordList = [];
    function add(obj) {
      if (obj) for (var prop in obj) if (obj.hasOwnProperty(prop))
        wordList.push(prop);
    }
    add(parserConfig$1.keywords);
    add(parserConfig$1.builtin);
    add(parserConfig$1.timerOps);
    add(parserConfig$1.portOps);

    var keywords$7 = parserConfig$1.keywords || {},
        builtin = parserConfig$1.builtin || {},
        timerOps = parserConfig$1.timerOps || {},
        portOps  = parserConfig$1.portOps || {},
        configOps = parserConfig$1.configOps || {},
        verdictOps = parserConfig$1.verdictOps || {},
        sutOps = parserConfig$1.sutOps || {},
        functionOps = parserConfig$1.functionOps || {},

        verdictConsts = parserConfig$1.verdictConsts || {},
        booleanConsts = parserConfig$1.booleanConsts || {},
        otherConsts   = parserConfig$1.otherConsts || {},

        types$2 = parserConfig$1.types || {},
        visibilityModifiers = parserConfig$1.visibilityModifiers || {},
        templateMatch = parserConfig$1.templateMatch || {},
        multiLineStrings$2 = parserConfig$1.multiLineStrings;
    var isOperatorChar$3 = /[+\-*&@=<>!\/]/;
    var curPunc$3;

    function tokenBase$7(stream, state) {
      var ch = stream.next();

      if (ch == '"' || ch == "'") {
        state.tokenize = tokenString$5(ch);
        return state.tokenize(stream, state);
      }
      if (/[\[\]{}\(\),;\\:\?\.]/.test(ch)) {
        curPunc$3 = ch;
        return "punctuation";
      }
      if (ch == "#"){
        stream.skipToEnd();
        return "atom";
      }
      if (ch == "%"){
        stream.eatWhile(/\b/);
        return "atom";
      }
      if (/\d/.test(ch)) {
        stream.eatWhile(/[\w\.]/);
        return "number";
      }
      if (ch == "/") {
        if (stream.eat("*")) {
          state.tokenize = tokenComment$3;
          return tokenComment$3(stream, state);
        }
        if (stream.eat("/")) {
          stream.skipToEnd();
          return "comment";
        }
      }
      if (isOperatorChar$3.test(ch)) {
        if(ch == "@"){
          if(stream.match("try") || stream.match("catch")
             || stream.match("lazy")){
            return "keyword";
          }
        }
        stream.eatWhile(isOperatorChar$3);
        return "operator";
      }
      stream.eatWhile(/[\w\$_\xa1-\uffff]/);
      var cur = stream.current();

      if (keywords$7.propertyIsEnumerable(cur)) return "keyword";
      if (builtin.propertyIsEnumerable(cur)) return "builtin";

      if (timerOps.propertyIsEnumerable(cur)) return "def";
      if (configOps.propertyIsEnumerable(cur)) return "def";
      if (verdictOps.propertyIsEnumerable(cur)) return "def";
      if (portOps.propertyIsEnumerable(cur)) return "def";
      if (sutOps.propertyIsEnumerable(cur)) return "def";
      if (functionOps.propertyIsEnumerable(cur)) return "def";

      if (verdictConsts.propertyIsEnumerable(cur)) return "string";
      if (booleanConsts.propertyIsEnumerable(cur)) return "string";
      if (otherConsts.propertyIsEnumerable(cur)) return "string";

      if (types$2.propertyIsEnumerable(cur)) return "typeName.standard";
      if (visibilityModifiers.propertyIsEnumerable(cur))
        return "modifier";
      if (templateMatch.propertyIsEnumerable(cur)) return "atom";

      return "variable";
    }

    function tokenString$5(quote) {
      return function(stream, state) {
        var escaped = false, next, end = false;
        while ((next = stream.next()) != null) {
          if (next == quote && !escaped){
            var afterQuote = stream.peek();
            //look if the character after the quote is like the B in '10100010'B
            if (afterQuote){
              afterQuote = afterQuote.toLowerCase();
              if(afterQuote == "b" || afterQuote == "h" || afterQuote == "o")
                stream.next();
            }
            end = true; break;
          }
          escaped = !escaped && next == "\\";
        }
        if (end || !(escaped || multiLineStrings$2))
          state.tokenize = null;
        return "string";
      };
    }

    function tokenComment$3(stream, state) {
      var maybeEnd = false, ch;
      while (ch = stream.next()) {
        if (ch == "/" && maybeEnd) {
          state.tokenize = null;
          break;
        }
        maybeEnd = (ch == "*");
      }
      return "comment";
    }

    function Context$2(indented, column, type, align, prev) {
      this.indented = indented;
      this.column = column;
      this.type = type;
      this.align = align;
      this.prev = prev;
    }

    function pushContext$3(state, col, type) {
      var indent = state.indented;
      if (state.context && state.context.type == "statement")
        indent = state.context.indented;
      return state.context = new Context$2(indent, col, type, null, state.context);
    }

    function popContext$3(state) {
      var t = state.context.type;
      if (t == ")" || t == "]" || t == "}")
        state.indented = state.context.indented;
      return state.context = state.context.prev;
    }

    //Interface
    const ttcn = {
      startState: function() {
        return {
          tokenize: null,
          context: new Context$2(0, 0, "top", false),
          indented: 0,
          startOfLine: true
        };
      },

      token: function(stream, state) {
        var ctx = state.context;
        if (stream.sol()) {
          if (ctx.align == null) ctx.align = false;
          state.indented = stream.indentation();
          state.startOfLine = true;
        }
        if (stream.eatSpace()) return null;
        curPunc$3 = null;
        var style = (state.tokenize || tokenBase$7)(stream, state);
        if (style == "comment") return style;
        if (ctx.align == null) ctx.align = true;

        if ((curPunc$3 == ";" || curPunc$3 == ":" || curPunc$3 == ",")
            && ctx.type == "statement"){
          popContext$3(state);
        }
        else if (curPunc$3 == "{") pushContext$3(state, stream.column(), "}");
        else if (curPunc$3 == "[") pushContext$3(state, stream.column(), "]");
        else if (curPunc$3 == "(") pushContext$3(state, stream.column(), ")");
        else if (curPunc$3 == "}") {
          while (ctx.type == "statement") ctx = popContext$3(state);
          if (ctx.type == "}") ctx = popContext$3(state);
          while (ctx.type == "statement") ctx = popContext$3(state);
        }
        else if (curPunc$3 == ctx.type) popContext$3(state);
        else if ((((ctx.type == "}" || ctx.type == "top") && curPunc$3 != ';') ||
                  (ctx.type == "statement" && curPunc$3 == "newstatement")))
          pushContext$3(state, stream.column(), "statement");

        state.startOfLine = false;

        return style;
      },

      languageData: {
        indentOnInput: /^\s*[{}]$/,
        commentTokens: {line: "//", block: {open: "/*", close: "*/"}},
        autocomplete: wordList
      }
    };

    var ttcn$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ttcn: ttcn
    });

    function words$2(str) {
      var obj = {}, words = str.split(" ");
      for (var i = 0; i < words.length; ++i)
        obj[words[i]] = true;
      return obj;
    }

    const parserConfig = {
      name: "ttcn-cfg",
      keywords: words$2("Yes No LogFile FileMask ConsoleMask AppendFile" +
                      " TimeStampFormat LogEventTypes SourceInfoFormat" +
                      " LogEntityName LogSourceInfo DiskFullAction" +
                      " LogFileNumber LogFileSize MatchingHints Detailed" +
                      " Compact SubCategories Stack Single None Seconds" +
                      " DateTime Time Stop Error Retry Delete TCPPort KillTimer" +
                      " NumHCs UnixSocketsEnabled LocalAddress"),
      fileNCtrlMaskOptions: words$2("TTCN_EXECUTOR TTCN_ERROR TTCN_WARNING" +
                                  " TTCN_PORTEVENT TTCN_TIMEROP TTCN_VERDICTOP" +
                                  " TTCN_DEFAULTOP TTCN_TESTCASE TTCN_ACTION" +
                                  " TTCN_USER TTCN_FUNCTION TTCN_STATISTICS" +
                                  " TTCN_PARALLEL TTCN_MATCHING TTCN_DEBUG" +
                                  " EXECUTOR ERROR WARNING PORTEVENT TIMEROP" +
                                  " VERDICTOP DEFAULTOP TESTCASE ACTION USER" +
                                  " FUNCTION STATISTICS PARALLEL MATCHING DEBUG" +
                                  " LOG_ALL LOG_NOTHING ACTION_UNQUALIFIED" +
                                  " DEBUG_ENCDEC DEBUG_TESTPORT" +
                                  " DEBUG_UNQUALIFIED DEFAULTOP_ACTIVATE" +
                                  " DEFAULTOP_DEACTIVATE DEFAULTOP_EXIT" +
                                  " DEFAULTOP_UNQUALIFIED ERROR_UNQUALIFIED" +
                                  " EXECUTOR_COMPONENT EXECUTOR_CONFIGDATA" +
                                  " EXECUTOR_EXTCOMMAND EXECUTOR_LOGOPTIONS" +
                                  " EXECUTOR_RUNTIME EXECUTOR_UNQUALIFIED" +
                                  " FUNCTION_RND FUNCTION_UNQUALIFIED" +
                                  " MATCHING_DONE MATCHING_MCSUCCESS" +
                                  " MATCHING_MCUNSUCC MATCHING_MMSUCCESS" +
                                  " MATCHING_MMUNSUCC MATCHING_PCSUCCESS" +
                                  " MATCHING_PCUNSUCC MATCHING_PMSUCCESS" +
                                  " MATCHING_PMUNSUCC MATCHING_PROBLEM" +
                                  " MATCHING_TIMEOUT MATCHING_UNQUALIFIED" +
                                  " PARALLEL_PORTCONN PARALLEL_PORTMAP" +
                                  " PARALLEL_PTC PARALLEL_UNQUALIFIED" +
                                  " PORTEVENT_DUALRECV PORTEVENT_DUALSEND" +
                                  " PORTEVENT_MCRECV PORTEVENT_MCSEND" +
                                  " PORTEVENT_MMRECV PORTEVENT_MMSEND" +
                                  " PORTEVENT_MQUEUE PORTEVENT_PCIN" +
                                  " PORTEVENT_PCOUT PORTEVENT_PMIN" +
                                  " PORTEVENT_PMOUT PORTEVENT_PQUEUE" +
                                  " PORTEVENT_STATE PORTEVENT_UNQUALIFIED" +
                                  " STATISTICS_UNQUALIFIED STATISTICS_VERDICT" +
                                  " TESTCASE_FINISH TESTCASE_START" +
                                  " TESTCASE_UNQUALIFIED TIMEROP_GUARD" +
                                  " TIMEROP_READ TIMEROP_START TIMEROP_STOP" +
                                  " TIMEROP_TIMEOUT TIMEROP_UNQUALIFIED" +
                                  " USER_UNQUALIFIED VERDICTOP_FINAL" +
                                  " VERDICTOP_GETVERDICT VERDICTOP_SETVERDICT" +
                                  " VERDICTOP_UNQUALIFIED WARNING_UNQUALIFIED"),
      externalCommands: words$2("BeginControlPart EndControlPart BeginTestCase" +
                              " EndTestCase"),
      multiLineStrings: true
    };

    var keywords$6 = parserConfig.keywords,
        fileNCtrlMaskOptions = parserConfig.fileNCtrlMaskOptions,
        externalCommands = parserConfig.externalCommands,
        multiLineStrings$1 = parserConfig.multiLineStrings;
    var isOperatorChar$2 = /[\|]/;
    var curPunc$2;

    function tokenBase$6(stream, state) {
      var ch = stream.next();
      if (ch == '"' || ch == "'") {
        state.tokenize = tokenString$4(ch);
        return state.tokenize(stream, state);
      }
      if (/[:=]/.test(ch)) {
        curPunc$2 = ch;
        return "punctuation";
      }
      if (ch == "#"){
        stream.skipToEnd();
        return "comment";
      }
      if (/\d/.test(ch)) {
        stream.eatWhile(/[\w\.]/);
        return "number";
      }
      if (isOperatorChar$2.test(ch)) {
        stream.eatWhile(isOperatorChar$2);
        return "operator";
      }
      if (ch == "["){
        stream.eatWhile(/[\w_\]]/);
        return "number";
      }

      stream.eatWhile(/[\w\$_]/);
      var cur = stream.current();
      if (keywords$6.propertyIsEnumerable(cur)) return "keyword";
      if (fileNCtrlMaskOptions.propertyIsEnumerable(cur))
        return "atom";
      if (externalCommands.propertyIsEnumerable(cur)) return "deleted";

      return "variable";
    }

    function tokenString$4(quote) {
      return function(stream, state) {
        var escaped = false, next, end = false;
        while ((next = stream.next()) != null) {
          if (next == quote && !escaped){
            var afterNext = stream.peek();
            //look if the character if the quote is like the B in '10100010'B
            if (afterNext){
              afterNext = afterNext.toLowerCase();
              if(afterNext == "b" || afterNext == "h" || afterNext == "o")
                stream.next();
            }
            end = true; break;
          }
          escaped = !escaped && next == "\\";
        }
        if (end || !(escaped || multiLineStrings$1))
          state.tokenize = null;
        return "string";
      };
    }

    function Context$1(indented, column, type, align, prev) {
      this.indented = indented;
      this.column = column;
      this.type = type;
      this.align = align;
      this.prev = prev;
    }
    function pushContext$2(state, col, type) {
      var indent = state.indented;
      if (state.context && state.context.type == "statement")
        indent = state.context.indented;
      return state.context = new Context$1(indent, col, type, null, state.context);
    }
    function popContext$2(state) {
      var t = state.context.type;
      if (t == ")" || t == "]" || t == "}")
        state.indented = state.context.indented;
      return state.context = state.context.prev;
    }

    //Interface
    const ttcnCfg = {
      startState: function() {
        return {
          tokenize: null,
          context: new Context$1(0, 0, "top", false),
          indented: 0,
          startOfLine: true
        };
      },

      token: function(stream, state) {
        var ctx = state.context;
        if (stream.sol()) {
          if (ctx.align == null) ctx.align = false;
          state.indented = stream.indentation();
          state.startOfLine = true;
        }
        if (stream.eatSpace()) return null;
        curPunc$2 = null;
        var style = (state.tokenize || tokenBase$6)(stream, state);
        if (style == "comment") return style;
        if (ctx.align == null) ctx.align = true;

        if ((curPunc$2 == ";" || curPunc$2 == ":" || curPunc$2 == ",")
            && ctx.type == "statement"){
          popContext$2(state);
        }
        else if (curPunc$2 == "{") pushContext$2(state, stream.column(), "}");
        else if (curPunc$2 == "[") pushContext$2(state, stream.column(), "]");
        else if (curPunc$2 == "(") pushContext$2(state, stream.column(), ")");
        else if (curPunc$2 == "}") {
          while (ctx.type == "statement") ctx = popContext$2(state);
          if (ctx.type == "}") ctx = popContext$2(state);
          while (ctx.type == "statement") ctx = popContext$2(state);
        }
        else if (curPunc$2 == ctx.type) popContext$2(state);
        else if ((((ctx.type == "}" || ctx.type == "top")
                                       && curPunc$2 != ';') || (ctx.type == "statement"
                                                              && curPunc$2 == "newstatement")))
          pushContext$2(state, stream.column(), "statement");
        state.startOfLine = false;
        return style;
      },

      languageData: {
        indentOnInput: /^\s*[{}]$/,
        commentTokens: {line: "#"}
      }
    };

    var ttcnCfg$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ttcnCfg: ttcnCfg
    });

    var curPunc$1;

    function wordRegexp$3(words) {
      return new RegExp("^(?:" + words.join("|") + ")$", "i");
    }
    wordRegexp$3([]);
    var keywords$5 = wordRegexp$3(["@prefix", "@base", "a"]);
    var operatorChars = /[*+\-<>=&|]/;

    function tokenBase$5(stream, state) {
      var ch = stream.next();
      curPunc$1 = null;
      if (ch == "<" && !stream.match(/^[\s\u00a0=]/, false)) {
        stream.match(/^[^\s\u00a0>]*>?/);
        return "atom";
      }
      else if (ch == "\"" || ch == "'") {
        state.tokenize = tokenLiteral(ch);
        return state.tokenize(stream, state);
      }
      else if (/[{}\(\),\.;\[\]]/.test(ch)) {
        curPunc$1 = ch;
        return null;
      }
      else if (ch == "#") {
        stream.skipToEnd();
        return "comment";
      }
      else if (operatorChars.test(ch)) {
        stream.eatWhile(operatorChars);
        return null;
      }
      else if (ch == ":") {
        return "operator";
      } else {
        stream.eatWhile(/[_\w\d]/);
        if(stream.peek() == ":") {
          return "variableName.special";
        } else {
          var word = stream.current();

          if(keywords$5.test(word)) {
            return "meta";
          }

          if(ch >= "A" && ch <= "Z") {
            return "comment";
          } else {
            return "keyword";
          }
        }
        var word = stream.current();
      }
    }

    function tokenLiteral(quote) {
      return function(stream, state) {
        var escaped = false, ch;
        while ((ch = stream.next()) != null) {
          if (ch == quote && !escaped) {
            state.tokenize = tokenBase$5;
            break;
          }
          escaped = !escaped && ch == "\\";
        }
        return "string";
      };
    }

    function pushContext$1(state, type, col) {
      state.context = {prev: state.context, indent: state.indent, col: col, type: type};
    }
    function popContext$1(state) {
      state.indent = state.context.indent;
      state.context = state.context.prev;
    }

    const turtle = {
      startState: function() {
        return {tokenize: tokenBase$5,
                context: null,
                indent: 0,
                col: 0};
      },

      token: function(stream, state) {
        if (stream.sol()) {
          if (state.context && state.context.align == null) state.context.align = false;
          state.indent = stream.indentation();
        }
        if (stream.eatSpace()) return null;
        var style = state.tokenize(stream, state);

        if (style != "comment" && state.context && state.context.align == null && state.context.type != "pattern") {
          state.context.align = true;
        }

        if (curPunc$1 == "(") pushContext$1(state, ")", stream.column());
        else if (curPunc$1 == "[") pushContext$1(state, "]", stream.column());
        else if (curPunc$1 == "{") pushContext$1(state, "}", stream.column());
        else if (/[\]\}\)]/.test(curPunc$1)) {
          while (state.context && state.context.type == "pattern") popContext$1(state);
          if (state.context && curPunc$1 == state.context.type) popContext$1(state);
        }
        else if (curPunc$1 == "." && state.context && state.context.type == "pattern") popContext$1(state);
        else if (/atom|string|variable/.test(style) && state.context) {
          if (/[\}\]]/.test(state.context.type))
            pushContext$1(state, "pattern", stream.column());
          else if (state.context.type == "pattern" && !state.context.align) {
            state.context.align = true;
            state.context.col = stream.column();
          }
        }

        return style;
      },

      indent: function(state, textAfter, cx) {
        var firstChar = textAfter && textAfter.charAt(0);
        var context = state.context;
        if (/[\]\}]/.test(firstChar))
          while (context && context.type == "pattern") context = context.prev;

        var closing = context && firstChar == context.type;
        if (!context)
          return 0;
        else if (context.type == "pattern")
          return context.col;
        else if (context.align)
          return context.col + (closing ? 0 : 1);
        else
          return context.indent + (closing ? 0 : cx.unit);
      },

      languageData: {
        commentTokens: {line: "#"}
      }
    };

    var turtle$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        turtle: turtle
    });

    function wordRegexp$2(words) {
      return new RegExp("^((" + words.join(")|(") + "))\\b");
    }
    var builtinArray = [
      "Clamp",
      "Constructor",
      "EnforceRange",
      "Exposed",
      "ImplicitThis",
      "Global", "PrimaryGlobal",
      "LegacyArrayClass",
      "LegacyUnenumerableNamedProperties",
      "LenientThis",
      "NamedConstructor",
      "NewObject",
      "NoInterfaceObject",
      "OverrideBuiltins",
      "PutForwards",
      "Replaceable",
      "SameObject",
      "TreatNonObjectAsNull",
      "TreatNullAs",
        "EmptyString",
      "Unforgeable",
      "Unscopeable"
    ];
    var builtins = wordRegexp$2(builtinArray);

    var typeArray = [
      "unsigned", "short", "long",                  // UnsignedIntegerType
      "unrestricted", "float", "double",            // UnrestrictedFloatType
      "boolean", "byte", "octet",                   // Rest of PrimitiveType
      "Promise",                                    // PromiseType
      "ArrayBuffer", "DataView", "Int8Array", "Int16Array", "Int32Array",
      "Uint8Array", "Uint16Array", "Uint32Array", "Uint8ClampedArray",
      "Float32Array", "Float64Array",               // BufferRelatedType
      "ByteString", "DOMString", "USVString", "sequence", "object", "RegExp",
      "Error", "DOMException", "FrozenArray",       // Rest of NonAnyType
      "any",                                        // Rest of SingleType
      "void"                                        // Rest of ReturnType
    ];
    var types$1 = wordRegexp$2(typeArray);

    var keywordArray = [
      "attribute", "callback", "const", "deleter", "dictionary", "enum", "getter",
      "implements", "inherit", "interface", "iterable", "legacycaller", "maplike",
      "partial", "required", "serializer", "setlike", "setter", "static",
      "stringifier", "typedef",                     // ArgumentNameKeyword except
                                                    // "unrestricted"
      "optional", "readonly", "or"
    ];
    var keywords$4 = wordRegexp$2(keywordArray);

    var atomArray = [
      "true", "false",                              // BooleanLiteral
      "Infinity", "NaN",                            // FloatLiteral
      "null"                                        // Rest of ConstValue
    ];
    var atoms$1 = wordRegexp$2(atomArray);

    var startDefArray = ["callback", "dictionary", "enum", "interface"];
    var startDefs = wordRegexp$2(startDefArray);

    var endDefArray = ["typedef"];
    var endDefs = wordRegexp$2(endDefArray);

    var singleOperators$1 = /^[:<=>?]/;
    var integers = /^-?([1-9][0-9]*|0[Xx][0-9A-Fa-f]+|0[0-7]*)/;
    var floats = /^-?(([0-9]+\.[0-9]*|[0-9]*\.[0-9]+)([Ee][+-]?[0-9]+)?|[0-9]+[Ee][+-]?[0-9]+)/;
    var identifiers$1 = /^_?[A-Za-z][0-9A-Z_a-z-]*/;
    var identifiersEnd = /^_?[A-Za-z][0-9A-Z_a-z-]*(?=\s*;)/;
    var strings = /^"[^"]*"/;
    var multilineComments = /^\/\*.*?\*\//;
    var multilineCommentsStart = /^\/\*.*/;
    var multilineCommentsEnd = /^.*?\*\//;

    function readToken(stream, state) {
      // whitespace
      if (stream.eatSpace()) return null;

      // comment
      if (state.inComment) {
        if (stream.match(multilineCommentsEnd)) {
          state.inComment = false;
          return "comment";
        }
        stream.skipToEnd();
        return "comment";
      }
      if (stream.match("//")) {
        stream.skipToEnd();
        return "comment";
      }
      if (stream.match(multilineComments)) return "comment";
      if (stream.match(multilineCommentsStart)) {
        state.inComment = true;
        return "comment";
      }

      // integer and float
      if (stream.match(/^-?[0-9\.]/, false)) {
        if (stream.match(integers) || stream.match(floats)) return "number";
      }

      // string
      if (stream.match(strings)) return "string";

      // identifier
      if (state.startDef && stream.match(identifiers$1)) return "def";

      if (state.endDef && stream.match(identifiersEnd)) {
        state.endDef = false;
        return "def";
      }

      if (stream.match(keywords$4)) return "keyword";

      if (stream.match(types$1)) {
        var lastToken = state.lastToken;
        var nextToken = (stream.match(/^\s*(.+?)\b/, false) || [])[1];

        if (lastToken === ":" || lastToken === "implements" ||
            nextToken === "implements" || nextToken === "=") {
          // Used as identifier
          return "builtin";
        } else {
          // Used as type
          return "type";
        }
      }

      if (stream.match(builtins)) return "builtin";
      if (stream.match(atoms$1)) return "atom";
      if (stream.match(identifiers$1)) return "variable";

      // other
      if (stream.match(singleOperators$1)) return "operator";

      // unrecognized
      stream.next();
      return null;
    }
    const webIDL = {
      startState: function() {
        return {
          // Is in multiline comment
          inComment: false,
          // Last non-whitespace, matched token
          lastToken: "",
          // Next token is a definition
          startDef: false,
          // Last token of the statement is a definition
          endDef: false
        };
      },
      token: function(stream, state) {
        var style = readToken(stream, state);

        if (style) {
          var cur = stream.current();
          state.lastToken = cur;
          if (style === "keyword") {
            state.startDef = startDefs.test(cur);
            state.endDef = state.endDef || endDefs.test(cur);
          } else {
            state.startDef = false;
          }
        }

        return style;
      },

      languageData: {
        autocomplete: builtinArray.concat(typeArray).concat(keywordArray).concat(atomArray)
      }
    };

    var webidl = /*#__PURE__*/Object.freeze({
        __proto__: null,
        webIDL: webIDL
    });

    var ERRORCLASS = 'error';

    function wordRegexp$1(words) {
      return new RegExp("^((" + words.join(")|(") + "))\\b", "i");
    }

    var singleOperators = new RegExp("^[\\+\\-\\*/%&\\\\|\\^~<>!]");
    var singleDelimiters = new RegExp('^[\\(\\)\\[\\]\\{\\}@,:`=;\\.]');
    var doubleOperators = new RegExp("^((==)|(<>)|(<=)|(>=)|(<>)|(<<)|(>>)|(//)|(\\*\\*))");
    var doubleDelimiters = new RegExp("^((\\+=)|(\\-=)|(\\*=)|(%=)|(/=)|(&=)|(\\|=)|(\\^=))");
    var tripleDelimiters = new RegExp("^((//=)|(>>=)|(<<=)|(\\*\\*=))");
    var identifiers = new RegExp("^[_A-Za-z][_A-Za-z0-9]*");

    var openingKeywords = ['class','module', 'sub','enum','select','while','if','function', 'get','set','property', 'try', 'structure', 'synclock', 'using', 'with'];
    var middleKeywords = ['else','elseif','case', 'catch', 'finally'];
    var endKeywords = ['next','loop'];

    var operatorKeywords = ['and', "andalso", 'or', 'orelse', 'xor', 'in', 'not', 'is', 'isnot', 'like'];
    var wordOperators = wordRegexp$1(operatorKeywords);

    var commonKeywords = ["#const", "#else", "#elseif", "#end", "#if", "#region", "addhandler", "addressof", "alias", "as", "byref", "byval", "cbool", "cbyte", "cchar", "cdate", "cdbl", "cdec", "cint", "clng", "cobj", "compare", "const", "continue", "csbyte", "cshort", "csng", "cstr", "cuint", "culng", "cushort", "declare", "default", "delegate", "dim", "directcast", "each", "erase", "error", "event", "exit", "explicit", "false", "for", "friend", "gettype", "goto", "handles", "implements", "imports", "infer", "inherits", "interface", "isfalse", "istrue", "lib", "me", "mod", "mustinherit", "mustoverride", "my", "mybase", "myclass", "namespace", "narrowing", "new", "nothing", "notinheritable", "notoverridable", "of", "off", "on", "operator", "option", "optional", "out", "overloads", "overridable", "overrides", "paramarray", "partial", "private", "protected", "public", "raiseevent", "readonly", "redim", "removehandler", "resume", "return", "shadows", "shared", "static", "step", "stop", "strict", "then", "throw", "to", "true", "trycast", "typeof", "until", "until", "when", "widening", "withevents", "writeonly"];

    var commontypes = ['object', 'boolean', 'char', 'string', 'byte', 'sbyte', 'short', 'ushort', 'int16', 'uint16', 'integer', 'uinteger', 'int32', 'uint32', 'long', 'ulong', 'int64', 'uint64', 'decimal', 'single', 'double', 'float', 'date', 'datetime', 'intptr', 'uintptr'];

    var keywords$3 = wordRegexp$1(commonKeywords);
    var types = wordRegexp$1(commontypes);
    var stringPrefixes = '"';

    var opening = wordRegexp$1(openingKeywords);
    var middle = wordRegexp$1(middleKeywords);
    var closing = wordRegexp$1(endKeywords);
    var doubleClosing = wordRegexp$1(['end']);
    var doOpening = wordRegexp$1(['do']);

    function indent(_stream, state) {
      state.currentIndent++;
    }

    function dedent(_stream, state) {
      state.currentIndent--;
    }
    // tokenizers
    function tokenBase$4(stream, state) {
      if (stream.eatSpace()) {
        return null;
      }

      var ch = stream.peek();

      // Handle Comments
      if (ch === "'") {
        stream.skipToEnd();
        return 'comment';
      }


      // Handle Number Literals
      if (stream.match(/^((&H)|(&O))?[0-9\.a-f]/i, false)) {
        var floatLiteral = false;
        // Floats
        if (stream.match(/^\d*\.\d+F?/i)) { floatLiteral = true; }
        else if (stream.match(/^\d+\.\d*F?/)) { floatLiteral = true; }
        else if (stream.match(/^\.\d+F?/)) { floatLiteral = true; }

        if (floatLiteral) {
          // Float literals may be "imaginary"
          stream.eat(/J/i);
          return 'number';
        }
        // Integers
        var intLiteral = false;
        // Hex
        if (stream.match(/^&H[0-9a-f]+/i)) { intLiteral = true; }
        // Octal
        else if (stream.match(/^&O[0-7]+/i)) { intLiteral = true; }
        // Decimal
        else if (stream.match(/^[1-9]\d*F?/)) {
          // Decimal literals may be "imaginary"
          stream.eat(/J/i);
          // TODO - Can you have imaginary longs?
          intLiteral = true;
        }
        // Zero by itself with no other piece of number.
        else if (stream.match(/^0(?![\dx])/i)) { intLiteral = true; }
        if (intLiteral) {
          // Integer literals may be "long"
          stream.eat(/L/i);
          return 'number';
        }
      }

      // Handle Strings
      if (stream.match(stringPrefixes)) {
        state.tokenize = tokenStringFactory(stream.current());
        return state.tokenize(stream, state);
      }

      // Handle operators and Delimiters
      if (stream.match(tripleDelimiters) || stream.match(doubleDelimiters)) {
        return null;
      }
      if (stream.match(doubleOperators)
          || stream.match(singleOperators)
          || stream.match(wordOperators)) {
        return 'operator';
      }
      if (stream.match(singleDelimiters)) {
        return null;
      }
      if (stream.match(doOpening)) {
        indent(stream,state);
        state.doInCurrentLine = true;
        return 'keyword';
      }
      if (stream.match(opening)) {
        if (! state.doInCurrentLine)
          indent(stream,state);
        else
          state.doInCurrentLine = false;
        return 'keyword';
      }
      if (stream.match(middle)) {
        return 'keyword';
      }

      if (stream.match(doubleClosing)) {
        dedent(stream,state);
        dedent(stream,state);
        return 'keyword';
      }
      if (stream.match(closing)) {
        dedent(stream,state);
        return 'keyword';
      }

      if (stream.match(types)) {
        return 'keyword';
      }

      if (stream.match(keywords$3)) {
        return 'keyword';
      }

      if (stream.match(identifiers)) {
        return 'variable';
      }

      // Handle non-detected items
      stream.next();
      return ERRORCLASS;
    }

    function tokenStringFactory(delimiter) {
      var singleline = delimiter.length == 1;
      var OUTCLASS = 'string';

      return function(stream, state) {
        while (!stream.eol()) {
          stream.eatWhile(/[^'"]/);
          if (stream.match(delimiter)) {
            state.tokenize = tokenBase$4;
            return OUTCLASS;
          } else {
            stream.eat(/['"]/);
          }
        }
        if (singleline) {
          state.tokenize = tokenBase$4;
        }
        return OUTCLASS;
      };
    }


    function tokenLexer(stream, state) {
      var style = state.tokenize(stream, state);
      var current = stream.current();

      // Handle '.' connected identifiers
      if (current === '.') {
        style = state.tokenize(stream, state);
        if (style === 'variable') {
          return 'variable';
        } else {
          return ERRORCLASS;
        }
      }


      var delimiter_index = '[({'.indexOf(current);
      if (delimiter_index !== -1) {
        indent(stream, state );
      }
      delimiter_index = '])}'.indexOf(current);
      if (delimiter_index !== -1) {
        if (dedent(stream, state)) {
          return ERRORCLASS;
        }
      }

      return style;
    }

    const vb = {
      startState: function() {
        return {
          tokenize: tokenBase$4,
          lastToken: null,
          currentIndent: 0,
          nextLineIndent: 0,
          doInCurrentLine: false


        };
      },

      token: function(stream, state) {
        if (stream.sol()) {
          state.currentIndent += state.nextLineIndent;
          state.nextLineIndent = 0;
          state.doInCurrentLine = 0;
        }
        var style = tokenLexer(stream, state);

        state.lastToken = {style:style, content: stream.current()};



        return style;
      },

      indent: function(state, textAfter, cx) {
        var trueText = textAfter.replace(/^\s+|\s+$/g, '') ;
        if (trueText.match(closing) || trueText.match(doubleClosing) || trueText.match(middle)) return cx.unit*(state.currentIndent-1);
        if(state.currentIndent < 0) return 0;
        return state.currentIndent * cx.unit;
      },

      languageData: {
        closeBrackets: {brackets: ["(", "[", "{", '"']},
        commentTokens: {line: "'"},
        autocomplete: openingKeywords.concat(middleKeywords).concat(endKeywords)
          .concat(operatorKeywords).concat(commonKeywords).concat(commontypes)
      }
    };

    var vb$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        vb: vb
    });

    function mkVBScript(parserConf) {
        var ERRORCLASS = 'error';

        function wordRegexp(words) {
            return new RegExp("^((" + words.join(")|(") + "))\\b", "i");
        }

        var singleOperators = new RegExp("^[\\+\\-\\*/&\\\\\\^<>=]");
        var doubleOperators = new RegExp("^((<>)|(<=)|(>=))");
        var singleDelimiters = new RegExp('^[\\.,]');
        var brackets = new RegExp('^[\\(\\)]');
        var identifiers = new RegExp("^[A-Za-z][_A-Za-z0-9]*");

        var openingKeywords = ['class','sub','select','while','if','function', 'property', 'with', 'for'];
        var middleKeywords = ['else','elseif','case'];
        var endKeywords = ['next','loop','wend'];

        var wordOperators = wordRegexp(['and', 'or', 'not', 'xor', 'is', 'mod', 'eqv', 'imp']);
        var commonkeywords = ['dim', 'redim', 'then',  'until', 'randomize',
                              'byval','byref','new','property', 'exit', 'in',
                              'const','private', 'public',
                              'get','set','let', 'stop', 'on error resume next', 'on error goto 0', 'option explicit', 'call', 'me'];

        //This list was from: http://msdn.microsoft.com/en-us/library/f8tbc79x(v=vs.84).aspx
        var atomWords = ['true', 'false', 'nothing', 'empty', 'null'];
        //This list was from: http://msdn.microsoft.com/en-us/library/3ca8tfek(v=vs.84).aspx
        var builtinFuncsWords = ['abs', 'array', 'asc', 'atn', 'cbool', 'cbyte', 'ccur', 'cdate', 'cdbl', 'chr', 'cint', 'clng', 'cos', 'csng', 'cstr', 'date', 'dateadd', 'datediff', 'datepart',
                            'dateserial', 'datevalue', 'day', 'escape', 'eval', 'execute', 'exp', 'filter', 'formatcurrency', 'formatdatetime', 'formatnumber', 'formatpercent', 'getlocale', 'getobject',
                            'getref', 'hex', 'hour', 'inputbox', 'instr', 'instrrev', 'int', 'fix', 'isarray', 'isdate', 'isempty', 'isnull', 'isnumeric', 'isobject', 'join', 'lbound', 'lcase', 'left',
                            'len', 'loadpicture', 'log', 'ltrim', 'rtrim', 'trim', 'maths', 'mid', 'minute', 'month', 'monthname', 'msgbox', 'now', 'oct', 'replace', 'rgb', 'right', 'rnd', 'round',
                            'scriptengine', 'scriptenginebuildversion', 'scriptenginemajorversion', 'scriptengineminorversion', 'second', 'setlocale', 'sgn', 'sin', 'space', 'split', 'sqr', 'strcomp',
                            'string', 'strreverse', 'tan', 'time', 'timer', 'timeserial', 'timevalue', 'typename', 'ubound', 'ucase', 'unescape', 'vartype', 'weekday', 'weekdayname', 'year'];

        //This list was from: http://msdn.microsoft.com/en-us/library/ydz4cfk3(v=vs.84).aspx
        var builtinConsts = ['vbBlack', 'vbRed', 'vbGreen', 'vbYellow', 'vbBlue', 'vbMagenta', 'vbCyan', 'vbWhite', 'vbBinaryCompare', 'vbTextCompare',
                             'vbSunday', 'vbMonday', 'vbTuesday', 'vbWednesday', 'vbThursday', 'vbFriday', 'vbSaturday', 'vbUseSystemDayOfWeek', 'vbFirstJan1', 'vbFirstFourDays', 'vbFirstFullWeek',
                             'vbGeneralDate', 'vbLongDate', 'vbShortDate', 'vbLongTime', 'vbShortTime', 'vbObjectError',
                             'vbOKOnly', 'vbOKCancel', 'vbAbortRetryIgnore', 'vbYesNoCancel', 'vbYesNo', 'vbRetryCancel', 'vbCritical', 'vbQuestion', 'vbExclamation', 'vbInformation', 'vbDefaultButton1', 'vbDefaultButton2',
                             'vbDefaultButton3', 'vbDefaultButton4', 'vbApplicationModal', 'vbSystemModal', 'vbOK', 'vbCancel', 'vbAbort', 'vbRetry', 'vbIgnore', 'vbYes', 'vbNo',
                             'vbCr', 'VbCrLf', 'vbFormFeed', 'vbLf', 'vbNewLine', 'vbNullChar', 'vbNullString', 'vbTab', 'vbVerticalTab', 'vbUseDefault', 'vbTrue', 'vbFalse',
                             'vbEmpty', 'vbNull', 'vbInteger', 'vbLong', 'vbSingle', 'vbDouble', 'vbCurrency', 'vbDate', 'vbString', 'vbObject', 'vbError', 'vbBoolean', 'vbVariant', 'vbDataObject', 'vbDecimal', 'vbByte', 'vbArray'];
        //This list was from: http://msdn.microsoft.com/en-us/library/hkc375ea(v=vs.84).aspx
        var builtinObjsWords = ['WScript', 'err', 'debug', 'RegExp'];
        var knownProperties = ['description', 'firstindex', 'global', 'helpcontext', 'helpfile', 'ignorecase', 'length', 'number', 'pattern', 'source', 'value', 'count'];
        var knownMethods = ['clear', 'execute', 'raise', 'replace', 'test', 'write', 'writeline', 'close', 'open', 'state', 'eof', 'update', 'addnew', 'end', 'createobject', 'quit'];

        var aspBuiltinObjsWords = ['server', 'response', 'request', 'session', 'application'];
        var aspKnownProperties = ['buffer', 'cachecontrol', 'charset', 'contenttype', 'expires', 'expiresabsolute', 'isclientconnected', 'pics', 'status', //response
                                  'clientcertificate', 'cookies', 'form', 'querystring', 'servervariables', 'totalbytes', //request
                                  'contents', 'staticobjects', //application
                                  'codepage', 'lcid', 'sessionid', 'timeout', //session
                                  'scripttimeout']; //server
        var aspKnownMethods = ['addheader', 'appendtolog', 'binarywrite', 'end', 'flush', 'redirect', //response
                               'binaryread', //request
                               'remove', 'removeall', 'lock', 'unlock', //application
                               'abandon', //session
                               'getlasterror', 'htmlencode', 'mappath', 'transfer', 'urlencode']; //server

        var knownWords = knownMethods.concat(knownProperties);

        builtinObjsWords = builtinObjsWords.concat(builtinConsts);

        if (parserConf.isASP){
            builtinObjsWords = builtinObjsWords.concat(aspBuiltinObjsWords);
            knownWords = knownWords.concat(aspKnownMethods, aspKnownProperties);
        }
        var keywords = wordRegexp(commonkeywords);
        var atoms = wordRegexp(atomWords);
        var builtinFuncs = wordRegexp(builtinFuncsWords);
        var builtinObjs = wordRegexp(builtinObjsWords);
        var known = wordRegexp(knownWords);
        var stringPrefixes = '"';

        var opening = wordRegexp(openingKeywords);
        var middle = wordRegexp(middleKeywords);
        var closing = wordRegexp(endKeywords);
        var doubleClosing = wordRegexp(['end']);
        var doOpening = wordRegexp(['do']);
        var noIndentWords = wordRegexp(['on error resume next', 'exit']);
        var comment = wordRegexp(['rem']);


        function indent(_stream, state) {
          state.currentIndent++;
        }

        function dedent(_stream, state) {
          state.currentIndent--;
        }
        // tokenizers
        function tokenBase(stream, state) {
            if (stream.eatSpace()) {
                return null
                //return null;
            }

            var ch = stream.peek();

            // Handle Comments
            if (ch === "'") {
                stream.skipToEnd();
                return 'comment';
            }
            if (stream.match(comment)){
                stream.skipToEnd();
                return 'comment';
            }


            // Handle Number Literals
            if (stream.match(/^((&H)|(&O))?[0-9\.]/i, false) && !stream.match(/^((&H)|(&O))?[0-9\.]+[a-z_]/i, false)) {
                var floatLiteral = false;
                // Floats
                if (stream.match(/^\d*\.\d+/i)) { floatLiteral = true; }
                else if (stream.match(/^\d+\.\d*/)) { floatLiteral = true; }
                else if (stream.match(/^\.\d+/)) { floatLiteral = true; }

                if (floatLiteral) {
                    // Float literals may be "imaginary"
                    stream.eat(/J/i);
                    return 'number';
                }
                // Integers
                var intLiteral = false;
                // Hex
                if (stream.match(/^&H[0-9a-f]+/i)) { intLiteral = true; }
                // Octal
                else if (stream.match(/^&O[0-7]+/i)) { intLiteral = true; }
                // Decimal
                else if (stream.match(/^[1-9]\d*F?/)) {
                    // Decimal literals may be "imaginary"
                    stream.eat(/J/i);
                    // TODO - Can you have imaginary longs?
                    intLiteral = true;
                }
                // Zero by itself with no other piece of number.
                else if (stream.match(/^0(?![\dx])/i)) { intLiteral = true; }
                if (intLiteral) {
                    // Integer literals may be "long"
                    stream.eat(/L/i);
                    return 'number';
                }
            }

            // Handle Strings
            if (stream.match(stringPrefixes)) {
                state.tokenize = tokenStringFactory(stream.current());
                return state.tokenize(stream, state);
            }

            // Handle operators and Delimiters
            if (stream.match(doubleOperators)
                || stream.match(singleOperators)
                || stream.match(wordOperators)) {
                return 'operator';
            }
            if (stream.match(singleDelimiters)) {
                return null;
            }

            if (stream.match(brackets)) {
                return "bracket";
            }

            if (stream.match(noIndentWords)) {
                state.doInCurrentLine = true;

                return 'keyword';
            }

            if (stream.match(doOpening)) {
                indent(stream,state);
                state.doInCurrentLine = true;

                return 'keyword';
            }
            if (stream.match(opening)) {
                if (! state.doInCurrentLine)
                  indent(stream,state);
                else
                  state.doInCurrentLine = false;

                return 'keyword';
            }
            if (stream.match(middle)) {
                return 'keyword';
            }


            if (stream.match(doubleClosing)) {
                dedent(stream,state);
                dedent(stream,state);

                return 'keyword';
            }
            if (stream.match(closing)) {
                if (! state.doInCurrentLine)
                  dedent(stream,state);
                else
                  state.doInCurrentLine = false;

                return 'keyword';
            }

            if (stream.match(keywords)) {
                return 'keyword';
            }

            if (stream.match(atoms)) {
                return 'atom';
            }

            if (stream.match(known)) {
                return 'variableName.special';
            }

            if (stream.match(builtinFuncs)) {
                return 'builtin';
            }

            if (stream.match(builtinObjs)){
                return 'builtin';
            }

            if (stream.match(identifiers)) {
                return 'variable';
            }

            // Handle non-detected items
            stream.next();
            return ERRORCLASS;
        }

        function tokenStringFactory(delimiter) {
            var singleline = delimiter.length == 1;
            var OUTCLASS = 'string';

            return function(stream, state) {
                while (!stream.eol()) {
                    stream.eatWhile(/[^'"]/);
                    if (stream.match(delimiter)) {
                        state.tokenize = tokenBase;
                        return OUTCLASS;
                    } else {
                        stream.eat(/['"]/);
                    }
                }
                if (singleline) {
                  state.tokenize = tokenBase;
                }
                return OUTCLASS;
            };
        }


        function tokenLexer(stream, state) {
            var style = state.tokenize(stream, state);
            var current = stream.current();

            // Handle '.' connected identifiers
            if (current === '.') {
                style = state.tokenize(stream, state);

                current = stream.current();
                if (style && (style.substr(0, 8) === 'variable' || style==='builtin' || style==='keyword')){//|| knownWords.indexOf(current.substring(1)) > -1) {
                    if (style === 'builtin' || style === 'keyword') style='variable';
                    if (knownWords.indexOf(current.substr(1)) > -1) style='keyword';

                    return style;
                } else {
                    return ERRORCLASS;
                }
            }

            return style;
        }

        return {
            startState: function() {
                return {
                  tokenize: tokenBase,
                  lastToken: null,
                  currentIndent: 0,
                  nextLineIndent: 0,
                  doInCurrentLine: false,
                  ignoreKeyword: false


              };
            },

            token: function(stream, state) {
                if (stream.sol()) {
                  state.currentIndent += state.nextLineIndent;
                  state.nextLineIndent = 0;
                  state.doInCurrentLine = 0;
                }
                var style = tokenLexer(stream, state);

                state.lastToken = {style:style, content: stream.current()};

                if (style===null) style=null;

                return style;
            },

            indent: function(state, textAfter, cx) {
                var trueText = textAfter.replace(/^\s+|\s+$/g, '') ;
                if (trueText.match(closing) || trueText.match(doubleClosing) || trueText.match(middle)) return cx.unit*(state.currentIndent-1);
                if(state.currentIndent < 0) return 0;
                return state.currentIndent * cx.unit
            }

        };
    }
    const vbScript = mkVBScript({});
    const vbScriptASP = mkVBScript({isASP: true});

    var vbscript = /*#__PURE__*/Object.freeze({
        __proto__: null,
        vbScript: vbScript,
        vbScriptASP: vbScriptASP
    });

    function parseWords(str) {
      var obj = {}, words = str.split(" ");
      for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
      return obj;
    }

    var keywords$2 = parseWords("#end #else #break #stop #[[ #]] " +
                              "#{end} #{else} #{break} #{stop}");
    var functions = parseWords("#if #elseif #foreach #set #include #parse #macro #define #evaluate " +
                               "#{if} #{elseif} #{foreach} #{set} #{include} #{parse} #{macro} #{define} #{evaluate}");
    var specials = parseWords("$foreach.count $foreach.hasNext $foreach.first $foreach.last $foreach.topmost $foreach.parent.count $foreach.parent.hasNext $foreach.parent.first $foreach.parent.last $foreach.parent $velocityCount $!bodyContent $bodyContent");
    var isOperatorChar$1 = /[+\-*&%=<>!?:\/|]/;

    function chain$1(stream, state, f) {
      state.tokenize = f;
      return f(stream, state);
    }
    function tokenBase$3(stream, state) {
      var beforeParams = state.beforeParams;
      state.beforeParams = false;
      var ch = stream.next();
      // start of unparsed string?
      if ((ch == "'") && !state.inString && state.inParams) {
        state.lastTokenWasBuiltin = false;
        return chain$1(stream, state, tokenString$3(ch));
      }
      // start of parsed string?
      else if ((ch == '"')) {
        state.lastTokenWasBuiltin = false;
        if (state.inString) {
          state.inString = false;
          return "string";
        }
        else if (state.inParams)
          return chain$1(stream, state, tokenString$3(ch));
      }
      // is it one of the special signs []{}().,;? Separator?
      else if (/[\[\]{}\(\),;\.]/.test(ch)) {
        if (ch == "(" && beforeParams)
          state.inParams = true;
        else if (ch == ")") {
          state.inParams = false;
          state.lastTokenWasBuiltin = true;
        }
        return null;
      }
      // start of a number value?
      else if (/\d/.test(ch)) {
        state.lastTokenWasBuiltin = false;
        stream.eatWhile(/[\w\.]/);
        return "number";
      }
      // multi line comment?
      else if (ch == "#" && stream.eat("*")) {
        state.lastTokenWasBuiltin = false;
        return chain$1(stream, state, tokenComment$2);
      }
      // unparsed content?
      else if (ch == "#" && stream.match(/ *\[ *\[/)) {
        state.lastTokenWasBuiltin = false;
        return chain$1(stream, state, tokenUnparsed);
      }
      // single line comment?
      else if (ch == "#" && stream.eat("#")) {
        state.lastTokenWasBuiltin = false;
        stream.skipToEnd();
        return "comment";
      }
      // variable?
      else if (ch == "$") {
        stream.eat("!");
        stream.eatWhile(/[\w\d\$_\.{}-]/);
        // is it one of the specials?
        if (specials && specials.propertyIsEnumerable(stream.current())) {
          return "keyword";
        }
        else {
          state.lastTokenWasBuiltin = true;
          state.beforeParams = true;
          return "builtin";
        }
      }
      // is it a operator?
      else if (isOperatorChar$1.test(ch)) {
        state.lastTokenWasBuiltin = false;
        stream.eatWhile(isOperatorChar$1);
        return "operator";
      }
      else {
        // get the whole word
        stream.eatWhile(/[\w\$_{}@]/);
        var word = stream.current();
        // is it one of the listed keywords?
        if (keywords$2 && keywords$2.propertyIsEnumerable(word))
          return "keyword";
        // is it one of the listed functions?
        if (functions && functions.propertyIsEnumerable(word) ||
            (stream.current().match(/^#@?[a-z0-9_]+ *$/i) && stream.peek()=="(") &&
            !(functions && functions.propertyIsEnumerable(word.toLowerCase()))) {
          state.beforeParams = true;
          state.lastTokenWasBuiltin = false;
          return "keyword";
        }
        if (state.inString) {
          state.lastTokenWasBuiltin = false;
          return "string";
        }
        if (stream.pos > word.length && stream.string.charAt(stream.pos-word.length-1)=="." && state.lastTokenWasBuiltin)
          return "builtin";
        // default: just a "word"
        state.lastTokenWasBuiltin = false;
        return null;
      }
    }

    function tokenString$3(quote) {
      return function(stream, state) {
        var escaped = false, next, end = false;
        while ((next = stream.next()) != null) {
          if ((next == quote) && !escaped) {
            end = true;
            break;
          }
          if (quote=='"' && stream.peek() == '$' && !escaped) {
            state.inString = true;
            end = true;
            break;
          }
          escaped = !escaped && next == "\\";
        }
        if (end) state.tokenize = tokenBase$3;
        return "string";
      };
    }

    function tokenComment$2(stream, state) {
      var maybeEnd = false, ch;
      while (ch = stream.next()) {
        if (ch == "#" && maybeEnd) {
          state.tokenize = tokenBase$3;
          break;
        }
        maybeEnd = (ch == "*");
      }
      return "comment";
    }

    function tokenUnparsed(stream, state) {
      var maybeEnd = 0, ch;
      while (ch = stream.next()) {
        if (ch == "#" && maybeEnd == 2) {
          state.tokenize = tokenBase$3;
          break;
        }
        if (ch == "]")
          maybeEnd++;
        else if (ch != " ")
          maybeEnd = 0;
      }
      return "meta";
    }
    // Interface

    const velocity = {
      startState: function() {
        return {
          tokenize: tokenBase$3,
          beforeParams: false,
          inParams: false,
          inString: false,
          lastTokenWasBuiltin: false
        };
      },

      token: function(stream, state) {
        if (stream.eatSpace()) return null;
        return state.tokenize(stream, state);
      },
      languageData: {
        commentTokens: {line: "##", block: {open: "#*", close: "*#"}}
      }
    };

    var velocity$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        velocity: velocity
    });

    function words$1(str) {
      var obj = {}, words = str.split(",");
      for (var i = 0; i < words.length; ++i) {
        var allCaps = words[i].toUpperCase();
        var firstCap = words[i].charAt(0).toUpperCase() + words[i].slice(1);
        obj[words[i]] = true;
        obj[allCaps] = true;
        obj[firstCap] = true;
      }
      return obj;
    }

    function metaHook(stream) {
      stream.eatWhile(/[\w\$_]/);
      return "meta";
    }

    var atoms = words$1("null"),
        hooks = {"`": metaHook, "$": metaHook},
        multiLineStrings = false;

    var keywords$1 = words$1("abs,access,after,alias,all,and,architecture,array,assert,attribute,begin,block," +
                         "body,buffer,bus,case,component,configuration,constant,disconnect,downto,else,elsif,end,end block,end case," +
                         "end component,end for,end generate,end if,end loop,end process,end record,end units,entity,exit,file,for," +
                         "function,generate,generic,generic map,group,guarded,if,impure,in,inertial,inout,is,label,library,linkage," +
                         "literal,loop,map,mod,nand,new,next,nor,null,of,on,open,or,others,out,package,package body,port,port map," +
                         "postponed,procedure,process,pure,range,record,register,reject,rem,report,return,rol,ror,select,severity,signal," +
                         "sla,sll,sra,srl,subtype,then,to,transport,type,unaffected,units,until,use,variable,wait,when,while,with,xnor,xor");

    var blockKeywords = words$1("architecture,entity,begin,case,port,else,elsif,end,for,function,if");

    var isOperatorChar = /[&|~><!\)\(*#%@+\/=?\:;}{,\.\^\-\[\]]/;
    var curPunc;

    function tokenBase$2(stream, state) {
      var ch = stream.next();
      if (hooks[ch]) {
        var result = hooks[ch](stream, state);
        if (result !== false) return result;
      }
      if (ch == '"') {
        state.tokenize = tokenString2(ch);
        return state.tokenize(stream, state);
      }
      if (ch == "'") {
        state.tokenize = tokenString$2(ch);
        return state.tokenize(stream, state);
      }
      if (/[\[\]{}\(\),;\:\.]/.test(ch)) {
        curPunc = ch;
        return null;
      }
      if (/[\d']/.test(ch)) {
        stream.eatWhile(/[\w\.']/);
        return "number";
      }
      if (ch == "-") {
        if (stream.eat("-")) {
          stream.skipToEnd();
          return "comment";
        }
      }
      if (isOperatorChar.test(ch)) {
        stream.eatWhile(isOperatorChar);
        return "operator";
      }
      stream.eatWhile(/[\w\$_]/);
      var cur = stream.current();
      if (keywords$1.propertyIsEnumerable(cur.toLowerCase())) {
        if (blockKeywords.propertyIsEnumerable(cur)) curPunc = "newstatement";
        return "keyword";
      }
      if (atoms.propertyIsEnumerable(cur)) return "atom";
      return "variable";
    }

    function tokenString$2(quote) {
      return function(stream, state) {
        var escaped = false, next, end = false;
        while ((next = stream.next()) != null) {
          if (next == quote && !escaped) {end = true; break;}
          escaped = !escaped && next == "--";
        }
        if (end || !(escaped || multiLineStrings))
          state.tokenize = tokenBase$2;
        return "string";
      };
    }
    function tokenString2(quote) {
      return function(stream, state) {
        var escaped = false, next, end = false;
        while ((next = stream.next()) != null) {
          if (next == quote && !escaped) {end = true; break;}
          escaped = !escaped && next == "--";
        }
        if (end || !(escaped || multiLineStrings))
          state.tokenize = tokenBase$2;
        return "string.special";
      };
    }

    function Context(indented, column, type, align, prev) {
      this.indented = indented;
      this.column = column;
      this.type = type;
      this.align = align;
      this.prev = prev;
    }
    function pushContext(state, col, type) {
      return state.context = new Context(state.indented, col, type, null, state.context);
    }
    function popContext(state) {
      var t = state.context.type;
      if (t == ")" || t == "]" || t == "}")
        state.indented = state.context.indented;
      return state.context = state.context.prev;
    }

    // Interface
    const vhdl = {
      startState: function(indentUnit) {
        return {
          tokenize: null,
          context: new Context(-indentUnit, 0, "top", false),
          indented: 0,
          startOfLine: true
        };
      },

      token: function(stream, state) {
        var ctx = state.context;
        if (stream.sol()) {
          if (ctx.align == null) ctx.align = false;
          state.indented = stream.indentation();
          state.startOfLine = true;
        }
        if (stream.eatSpace()) return null;
        curPunc = null;
        var style = (state.tokenize || tokenBase$2)(stream, state);
        if (style == "comment" || style == "meta") return style;
        if (ctx.align == null) ctx.align = true;

        if ((curPunc == ";" || curPunc == ":") && ctx.type == "statement") popContext(state);
        else if (curPunc == "{") pushContext(state, stream.column(), "}");
        else if (curPunc == "[") pushContext(state, stream.column(), "]");
        else if (curPunc == "(") pushContext(state, stream.column(), ")");
        else if (curPunc == "}") {
          while (ctx.type == "statement") ctx = popContext(state);
          if (ctx.type == "}") ctx = popContext(state);
          while (ctx.type == "statement") ctx = popContext(state);
        }
        else if (curPunc == ctx.type) popContext(state);
        else if (ctx.type == "}" || ctx.type == "top" || (ctx.type == "statement" && curPunc == "newstatement"))
          pushContext(state, stream.column(), "statement");
        state.startOfLine = false;
        return style;
      },

      indent: function(state, textAfter, cx) {
        if (state.tokenize != tokenBase$2 && state.tokenize != null) return 0;
        var firstChar = textAfter && textAfter.charAt(0), ctx = state.context, closing = firstChar == ctx.type;
        if (ctx.type == "statement") return ctx.indented + (firstChar == "{" ? 0 : cx.unit);
        else if (ctx.align) return ctx.column + (closing ? 0 : 1);
        else return ctx.indented + (closing ? 0 : cx.unit);
      },

      languageData: {
        indentOnInput: /^\s*[{}]$/,
        commentTokens: {line: "--"}
      }
    };

    var vhdl$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        vhdl: vhdl
    });

    // The keywords object is set to the result of this self executing
    // function. Each keyword is a property of the keywords object whose
    // value is {type: atype, style: astyle}
    var keywords = function(){
      // convenience functions used to build keywords object
      function kw(type) {return {type: type, style: "keyword"};}
      var operator = kw("operator")
      , atom = {type: "atom", style: "atom"}
      , punctuation = {type: "punctuation", style: null}
      , qualifier = {type: "axis_specifier", style: "qualifier"};

      // kwObj is what is return from this function at the end
      var kwObj = {
        ',': punctuation
      };

      // a list of 'basic' keywords. For each add a property to kwObj with the value of
      // {type: basic[i], style: "keyword"} e.g. 'after' --> {type: "after", style: "keyword"}
      var basic = ['after', 'all', 'allowing', 'ancestor', 'ancestor-or-self', 'any', 'array', 'as',
                   'ascending', 'at', 'attribute', 'base-uri', 'before', 'boundary-space', 'by', 'case', 'cast',
                   'castable', 'catch', 'child', 'collation', 'comment', 'construction', 'contains', 'content',
                   'context', 'copy', 'copy-namespaces', 'count', 'decimal-format', 'declare', 'default', 'delete',
                   'descendant', 'descendant-or-self', 'descending', 'diacritics', 'different', 'distance',
                   'document', 'document-node', 'element', 'else', 'empty', 'empty-sequence', 'encoding', 'end',
                   'entire', 'every', 'exactly', 'except', 'external', 'first', 'following', 'following-sibling',
                   'for', 'from', 'ftand', 'ftnot', 'ft-option', 'ftor', 'function', 'fuzzy', 'greatest', 'group',
                   'if', 'import', 'in', 'inherit', 'insensitive', 'insert', 'instance', 'intersect', 'into',
                   'invoke', 'is', 'item', 'language', 'last', 'lax', 'least', 'let', 'levels', 'lowercase', 'map',
                   'modify', 'module', 'most', 'namespace', 'next', 'no', 'node', 'nodes', 'no-inherit',
                   'no-preserve', 'not', 'occurs', 'of', 'only', 'option', 'order', 'ordered', 'ordering',
                   'paragraph', 'paragraphs', 'parent', 'phrase', 'preceding', 'preceding-sibling', 'preserve',
                   'previous', 'processing-instruction', 'relationship', 'rename', 'replace', 'return',
                   'revalidation', 'same', 'satisfies', 'schema', 'schema-attribute', 'schema-element', 'score',
                   'self', 'sensitive', 'sentence', 'sentences', 'sequence', 'skip', 'sliding', 'some', 'stable',
                   'start', 'stemming', 'stop', 'strict', 'strip', 'switch', 'text', 'then', 'thesaurus', 'times',
                   'to', 'transform', 'treat', 'try', 'tumbling', 'type', 'typeswitch', 'union', 'unordered',
                   'update', 'updating', 'uppercase', 'using', 'validate', 'value', 'variable', 'version',
                   'weight', 'when', 'where', 'wildcards', 'window', 'with', 'without', 'word', 'words', 'xquery'];
      for(var i=0, l=basic.length; i < l; i++) { kwObj[basic[i]] = kw(basic[i]);}
      // a list of types. For each add a property to kwObj with the value of
      // {type: "atom", style: "atom"}
      var types = ['xs:anyAtomicType', 'xs:anySimpleType', 'xs:anyType', 'xs:anyURI',
                   'xs:base64Binary', 'xs:boolean', 'xs:byte', 'xs:date', 'xs:dateTime', 'xs:dateTimeStamp',
                   'xs:dayTimeDuration', 'xs:decimal', 'xs:double', 'xs:duration', 'xs:ENTITIES', 'xs:ENTITY',
                   'xs:float', 'xs:gDay', 'xs:gMonth', 'xs:gMonthDay', 'xs:gYear', 'xs:gYearMonth', 'xs:hexBinary',
                   'xs:ID', 'xs:IDREF', 'xs:IDREFS', 'xs:int', 'xs:integer', 'xs:item', 'xs:java', 'xs:language',
                   'xs:long', 'xs:Name', 'xs:NCName', 'xs:negativeInteger', 'xs:NMTOKEN', 'xs:NMTOKENS',
                   'xs:nonNegativeInteger', 'xs:nonPositiveInteger', 'xs:normalizedString', 'xs:NOTATION',
                   'xs:numeric', 'xs:positiveInteger', 'xs:precisionDecimal', 'xs:QName', 'xs:short', 'xs:string',
                   'xs:time', 'xs:token', 'xs:unsignedByte', 'xs:unsignedInt', 'xs:unsignedLong',
                   'xs:unsignedShort', 'xs:untyped', 'xs:untypedAtomic', 'xs:yearMonthDuration'];
      for(var i=0, l=types.length; i < l; i++) { kwObj[types[i]] = atom;}
      // each operator will add a property to kwObj with value of {type: "operator", style: "keyword"}
      var operators = ['eq', 'ne', 'lt', 'le', 'gt', 'ge', ':=', '=', '>', '>=', '<', '<=', '.', '|', '?', 'and', 'or', 'div', 'idiv', 'mod', '*', '/', '+', '-'];
      for(var i=0, l=operators.length; i < l; i++) { kwObj[operators[i]] = operator;}
      // each axis_specifiers will add a property to kwObj with value of {type: "axis_specifier", style: "qualifier"}
      var axis_specifiers = ["self::", "attribute::", "child::", "descendant::", "descendant-or-self::", "parent::",
                             "ancestor::", "ancestor-or-self::", "following::", "preceding::", "following-sibling::", "preceding-sibling::"];
      for(var i=0, l=axis_specifiers.length; i < l; i++) { kwObj[axis_specifiers[i]] = qualifier; }
      return kwObj;
    }();

    function chain(stream, state, f) {
      state.tokenize = f;
      return f(stream, state);
    }

    // the primary mode tokenizer
    function tokenBase$1(stream, state) {
      var ch = stream.next(),
          mightBeFunction = false,
          isEQName = isEQNameAhead(stream);

      // an XML tag (if not in some sub, chained tokenizer)
      if (ch == "<") {
        if(stream.match("!--", true))
          return chain(stream, state, tokenXMLComment);

        if(stream.match("![CDATA", false)) {
          state.tokenize = tokenCDATA;
          return "tag";
        }

        if(stream.match("?", false)) {
          return chain(stream, state, tokenPreProcessing);
        }

        var isclose = stream.eat("/");
        stream.eatSpace();
        var tagName = "", c;
        while ((c = stream.eat(/[^\s\u00a0=<>\"\'\/?]/))) tagName += c;

        return chain(stream, state, tokenTag(tagName, isclose));
      }
      // start code block
      else if(ch == "{") {
        pushStateStack(state, { type: "codeblock"});
        return null;
      }
      // end code block
      else if(ch == "}") {
        popStateStack(state);
        return null;
      }
      // if we're in an XML block
      else if(isInXmlBlock(state)) {
        if(ch == ">")
          return "tag";
        else if(ch == "/" && stream.eat(">")) {
          popStateStack(state);
          return "tag";
        }
        else
          return "variable";
      }
      // if a number
      else if (/\d/.test(ch)) {
        stream.match(/^\d*(?:\.\d*)?(?:E[+\-]?\d+)?/);
        return "atom";
      }
      // comment start
      else if (ch === "(" && stream.eat(":")) {
        pushStateStack(state, { type: "comment"});
        return chain(stream, state, tokenComment$1);
      }
      // quoted string
      else if (!isEQName && (ch === '"' || ch === "'"))
        return chain(stream, state, tokenString$1(ch));
      // variable
      else if(ch === "$") {
        return chain(stream, state, tokenVariable);
      }
      // assignment
      else if(ch ===":" && stream.eat("=")) {
        return "keyword";
      }
      // open paren
      else if(ch === "(") {
        pushStateStack(state, { type: "paren"});
        return null;
      }
      // close paren
      else if(ch === ")") {
        popStateStack(state);
        return null;
      }
      // open paren
      else if(ch === "[") {
        pushStateStack(state, { type: "bracket"});
        return null;
      }
      // close paren
      else if(ch === "]") {
        popStateStack(state);
        return null;
      }
      else {
        var known = keywords.propertyIsEnumerable(ch) && keywords[ch];

        // if there's a EQName ahead, consume the rest of the string portion, it's likely a function
        if(isEQName && ch === '\"') while(stream.next() !== '"'){}
        if(isEQName && ch === '\'') while(stream.next() !== '\''){}

        // gobble up a word if the character is not known
        if(!known) stream.eatWhile(/[\w\$_-]/);

        // gobble a colon in the case that is a lib func type call fn:doc
        var foundColon = stream.eat(":");

        // if there's not a second colon, gobble another word. Otherwise, it's probably an axis specifier
        // which should get matched as a keyword
        if(!stream.eat(":") && foundColon) {
          stream.eatWhile(/[\w\$_-]/);
        }
        // if the next non whitespace character is an open paren, this is probably a function (if not a keyword of other sort)
        if(stream.match(/^[ \t]*\(/, false)) {
          mightBeFunction = true;
        }
        // is the word a keyword?
        var word = stream.current();
        known = keywords.propertyIsEnumerable(word) && keywords[word];

        // if we think it's a function call but not yet known,
        // set style to variable for now for lack of something better
        if(mightBeFunction && !known) known = {type: "function_call", style: "def"};

        // if the previous word was element, attribute, axis specifier, this word should be the name of that
        if(isInXmlConstructor(state)) {
          popStateStack(state);
          return "variable";
        }
        // as previously checked, if the word is element,attribute, axis specifier, call it an "xmlconstructor" and
        // push the stack so we know to look for it on the next word
        if(word == "element" || word == "attribute" || known.type == "axis_specifier") pushStateStack(state, {type: "xmlconstructor"});

        // if the word is known, return the details of that else just call this a generic 'word'
        return known ? known.style : "variable";
      }
    }

    // handle comments, including nested
    function tokenComment$1(stream, state) {
      var maybeEnd = false, maybeNested = false, nestedCount = 0, ch;
      while (ch = stream.next()) {
        if (ch == ")" && maybeEnd) {
          if(nestedCount > 0)
            nestedCount--;
          else {
            popStateStack(state);
            break;
          }
        }
        else if(ch == ":" && maybeNested) {
          nestedCount++;
        }
        maybeEnd = (ch == ":");
        maybeNested = (ch == "(");
      }

      return "comment";
    }

    // tokenizer for string literals
    // optionally pass a tokenizer function to set state.tokenize back to when finished
    function tokenString$1(quote, f) {
      return function(stream, state) {
        var ch;

        if(isInString(state) && stream.current() == quote) {
          popStateStack(state);
          if(f) state.tokenize = f;
          return "string";
        }

        pushStateStack(state, { type: "string", name: quote, tokenize: tokenString$1(quote, f) });

        // if we're in a string and in an XML block, allow an embedded code block
        if(stream.match("{", false) && isInXmlAttributeBlock(state)) {
          state.tokenize = tokenBase$1;
          return "string";
        }


        while (ch = stream.next()) {
          if (ch ==  quote) {
            popStateStack(state);
            if(f) state.tokenize = f;
            break;
          }
          else {
            // if we're in a string and in an XML block, allow an embedded code block in an attribute
            if(stream.match("{", false) && isInXmlAttributeBlock(state)) {
              state.tokenize = tokenBase$1;
              return "string";
            }

          }
        }

        return "string";
      };
    }

    // tokenizer for variables
    function tokenVariable(stream, state) {
      var isVariableChar = /[\w\$_-]/;

      // a variable may start with a quoted EQName so if the next character is quote, consume to the next quote
      if(stream.eat("\"")) {
        while(stream.next() !== '\"'){}    stream.eat(":");
      } else {
        stream.eatWhile(isVariableChar);
        if(!stream.match(":=", false)) stream.eat(":");
      }
      stream.eatWhile(isVariableChar);
      state.tokenize = tokenBase$1;
      return "variable";
    }

    // tokenizer for XML tags
    function tokenTag(name, isclose) {
      return function(stream, state) {
        stream.eatSpace();
        if(isclose && stream.eat(">")) {
          popStateStack(state);
          state.tokenize = tokenBase$1;
          return "tag";
        }
        // self closing tag without attributes?
        if(!stream.eat("/"))
          pushStateStack(state, { type: "tag", name: name, tokenize: tokenBase$1});
        if(!stream.eat(">")) {
          state.tokenize = tokenAttribute;
          return "tag";
        }
        else {
          state.tokenize = tokenBase$1;
        }
        return "tag";
      };
    }

    // tokenizer for XML attributes
    function tokenAttribute(stream, state) {
      var ch = stream.next();

      if(ch == "/" && stream.eat(">")) {
        if(isInXmlAttributeBlock(state)) popStateStack(state);
        if(isInXmlBlock(state)) popStateStack(state);
        return "tag";
      }
      if(ch == ">") {
        if(isInXmlAttributeBlock(state)) popStateStack(state);
        return "tag";
      }
      if(ch == "=")
        return null;
      // quoted string
      if (ch == '"' || ch == "'")
        return chain(stream, state, tokenString$1(ch, tokenAttribute));

      if(!isInXmlAttributeBlock(state))
        pushStateStack(state, { type: "attribute", tokenize: tokenAttribute});

      stream.eat(/[a-zA-Z_:]/);
      stream.eatWhile(/[-a-zA-Z0-9_:.]/);
      stream.eatSpace();

      // the case where the attribute has not value and the tag was closed
      if(stream.match(">", false) || stream.match("/", false)) {
        popStateStack(state);
        state.tokenize = tokenBase$1;
      }

      return "attribute";
    }

    // handle comments, including nested
    function tokenXMLComment(stream, state) {
      var ch;
      while (ch = stream.next()) {
        if (ch == "-" && stream.match("->", true)) {
          state.tokenize = tokenBase$1;
          return "comment";
        }
      }
    }


    // handle CDATA
    function tokenCDATA(stream, state) {
      var ch;
      while (ch = stream.next()) {
        if (ch == "]" && stream.match("]", true)) {
          state.tokenize = tokenBase$1;
          return "comment";
        }
      }
    }

    // handle preprocessing instructions
    function tokenPreProcessing(stream, state) {
      var ch;
      while (ch = stream.next()) {
        if (ch == "?" && stream.match(">", true)) {
          state.tokenize = tokenBase$1;
          return "processingInstruction";
        }
      }
    }


    // functions to test the current context of the state
    function isInXmlBlock(state) { return isIn(state, "tag"); }
    function isInXmlAttributeBlock(state) { return isIn(state, "attribute"); }
    function isInXmlConstructor(state) { return isIn(state, "xmlconstructor"); }
    function isInString(state) { return isIn(state, "string"); }

    function isEQNameAhead(stream) {
      // assume we've already eaten a quote (")
      if(stream.current() === '"')
        return stream.match(/^[^\"]+\"\:/, false);
      else if(stream.current() === '\'')
        return stream.match(/^[^\"]+\'\:/, false);
      else
        return false;
    }

    function isIn(state, type) {
      return (state.stack.length && state.stack[state.stack.length - 1].type == type);
    }

    function pushStateStack(state, newState) {
      state.stack.push(newState);
    }

    function popStateStack(state) {
      state.stack.pop();
      var reinstateTokenize = state.stack.length && state.stack[state.stack.length-1].tokenize;
      state.tokenize = reinstateTokenize || tokenBase$1;
    }

    // the interface for the mode API
    const xQuery = {
      startState: function() {
        return {
          tokenize: tokenBase$1,
          cc: [],
          stack: []
        };
      },

      token: function(stream, state) {
        if (stream.eatSpace()) return null;
        var style = state.tokenize(stream, state);
        return style;
      },

      languageData: {
        commentTokens: {block: {open: "(:", close: ":)"}}
      }
    };

    var xquery = /*#__PURE__*/Object.freeze({
        __proto__: null,
        xQuery: xQuery
    });

    function words(str) {
      var obj = {}, words = str.split(" ");
      for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
      return obj;
    }

    var bodiedOps = words("Assert BackQuote D Defun Deriv For ForEach FromFile " +
                          "FromString Function Integrate InverseTaylor Limit " +
                          "LocalSymbols Macro MacroRule MacroRulePattern " +
                          "NIntegrate Rule RulePattern Subst TD TExplicitSum " +
                          "TSum Taylor Taylor1 Taylor2 Taylor3 ToFile " +
                          "ToStdout ToString TraceRule Until While");

    // patterns
    var pFloatForm  = "(?:(?:\\.\\d+|\\d+\\.\\d*|\\d+)(?:[eE][+-]?\\d+)?)";
    var pIdentifier = "(?:[a-zA-Z\\$'][a-zA-Z0-9\\$']*)";

    // regular expressions
    var reFloatForm    = new RegExp(pFloatForm);
    var reIdentifier   = new RegExp(pIdentifier);
    var rePattern      = new RegExp(pIdentifier + "?_" + pIdentifier);
    var reFunctionLike = new RegExp(pIdentifier + "\\s*\\(");

    function tokenBase(stream, state) {
      var ch;

      // get next character
      ch = stream.next();

      // string
      if (ch === '"') {
        state.tokenize = tokenString;
        return state.tokenize(stream, state);
      }

      // comment
      if (ch === '/') {
        if (stream.eat('*')) {
          state.tokenize = tokenComment;
          return state.tokenize(stream, state);
        }
        if (stream.eat("/")) {
          stream.skipToEnd();
          return "comment";
        }
      }

      // go back one character
      stream.backUp(1);

      // update scope info
      var m = stream.match(/^(\w+)\s*\(/, false);
      if (m !== null && bodiedOps.hasOwnProperty(m[1]))
        state.scopes.push('bodied');

      var scope = currentScope(state);

      if (scope === 'bodied' && ch === '[')
        state.scopes.pop();

      if (ch === '[' || ch === '{' || ch === '(')
        state.scopes.push(ch);

      scope = currentScope(state);

      if (scope === '[' && ch === ']' ||
          scope === '{' && ch === '}' ||
          scope === '(' && ch === ')')
        state.scopes.pop();

      if (ch === ';') {
        while (scope === 'bodied') {
          state.scopes.pop();
          scope = currentScope(state);
        }
      }

      // look for ordered rules
      if (stream.match(/\d+ *#/, true, false)) {
        return 'qualifier';
      }

      // look for numbers
      if (stream.match(reFloatForm, true, false)) {
        return 'number';
      }

      // look for placeholders
      if (stream.match(rePattern, true, false)) {
        return 'variableName.special';
      }

      // match all braces separately
      if (stream.match(/(?:\[|\]|{|}|\(|\))/, true, false)) {
        return 'bracket';
      }

      // literals looking like function calls
      if (stream.match(reFunctionLike, true, false)) {
        stream.backUp(1);
        return 'variableName.function';
      }

      // all other identifiers
      if (stream.match(reIdentifier, true, false)) {
        return 'variable';
      }

      // operators; note that operators like @@ or /; are matched separately for each symbol.
      if (stream.match(/(?:\\|\+|\-|\*|\/|,|;|\.|:|@|~|=|>|<|&|\||_|`|'|\^|\?|!|%|#)/, true, false)) {
        return 'operator';
      }

      // everything else is an error
      return 'error';
    }

    function tokenString(stream, state) {
      var next, end = false, escaped = false;
      while ((next = stream.next()) != null) {
        if (next === '"' && !escaped) {
          end = true;
          break;
        }
        escaped = !escaped && next === '\\';
      }
      if (end && !escaped) {
        state.tokenize = tokenBase;
      }
      return 'string';
    }
    function tokenComment(stream, state) {
      var prev, next;
      while((next = stream.next()) != null) {
        if (prev === '*' && next === '/') {
          state.tokenize = tokenBase;
          break;
        }
        prev = next;
      }
      return 'comment';
    }

    function currentScope(state) {
      var scope = null;
      if (state.scopes.length > 0)
        scope = state.scopes[state.scopes.length - 1];
      return scope;
    }

    const yacas = {
      startState: function() {
        return {
          tokenize: tokenBase,
          scopes: []
        };
      },
      token: function(stream, state) {
        if (stream.eatSpace()) return null;
        return state.tokenize(stream, state);
      },
      indent: function(state, textAfter, cx) {
        if (state.tokenize !== tokenBase && state.tokenize !== null)
          return null;

        var delta = 0;
        if (textAfter === ']' || textAfter === '];' ||
            textAfter === '}' || textAfter === '};' ||
            textAfter === ');')
          delta = -1;

        return (state.scopes.length + delta) * cx.unit;
      },

      languageData: {
        electricInput: /[{}\[\]()\;]/,
        commentTokens: {line: "//", block: {open: "/*", close: "*/"}}
      }
    };

    var yacas$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        yacas: yacas
    });

    var cons = ['true', 'false', 'on', 'off', 'yes', 'no'];
    var keywordRegex = new RegExp("\\b(("+cons.join(")|(")+"))$", 'i');

    const yaml = {
      token: function(stream, state) {
        var ch = stream.peek();
        var esc = state.escaped;
        state.escaped = false;
        /* comments */
        if (ch == "#" && (stream.pos == 0 || /\s/.test(stream.string.charAt(stream.pos - 1)))) {
          stream.skipToEnd();
          return "comment";
        }

        if (stream.match(/^('([^']|\\.)*'?|"([^"]|\\.)*"?)/))
          return "string";

        if (state.literal && stream.indentation() > state.keyCol) {
          stream.skipToEnd(); return "string";
        } else if (state.literal) { state.literal = false; }
        if (stream.sol()) {
          state.keyCol = 0;
          state.pair = false;
          state.pairStart = false;
          /* document start */
          if(stream.match('---')) { return "def"; }
          /* document end */
          if (stream.match('...')) { return "def"; }
          /* array list item */
          if (stream.match(/^\s*-\s+/)) { return 'meta'; }
        }
        /* inline pairs/lists */
        if (stream.match(/^(\{|\}|\[|\])/)) {
          if (ch == '{')
            state.inlinePairs++;
          else if (ch == '}')
            state.inlinePairs--;
          else if (ch == '[')
            state.inlineList++;
          else
            state.inlineList--;
          return 'meta';
        }

        /* list separator */
        if (state.inlineList > 0 && !esc && ch == ',') {
          stream.next();
          return 'meta';
        }
        /* pairs separator */
        if (state.inlinePairs > 0 && !esc && ch == ',') {
          state.keyCol = 0;
          state.pair = false;
          state.pairStart = false;
          stream.next();
          return 'meta';
        }

        /* start of value of a pair */
        if (state.pairStart) {
          /* block literals */
          if (stream.match(/^\s*(\||\>)\s*/)) { state.literal = true; return 'meta'; }      /* references */
          if (stream.match(/^\s*(\&|\*)[a-z0-9\._-]+\b/i)) { return 'variable'; }
          /* numbers */
          if (state.inlinePairs == 0 && stream.match(/^\s*-?[0-9\.\,]+\s?$/)) { return 'number'; }
          if (state.inlinePairs > 0 && stream.match(/^\s*-?[0-9\.\,]+\s?(?=(,|}))/)) { return 'number'; }
          /* keywords */
          if (stream.match(keywordRegex)) { return 'keyword'; }
        }

        /* pairs (associative arrays) -> key */
        if (!state.pair && stream.match(/^\s*(?:[,\[\]{}&*!|>'"%@`][^\s'":]|[^,\[\]{}#&*!|>'"%@`])[^#]*?(?=\s*:($|\s))/)) {
          state.pair = true;
          state.keyCol = stream.indentation();
          return "atom";
        }
        if (state.pair && stream.match(/^:\s*/)) { state.pairStart = true; return 'meta'; }

        /* nothing found, continue */
        state.pairStart = false;
        state.escaped = (ch == '\\');
        stream.next();
        return null;
      },
      startState: function() {
        return {
          pair: false,
          pairStart: false,
          keyCol: 0,
          inlinePairs: 0,
          inlineList: 0,
          literal: false,
          escaped: false
        };
      },
      languageData: {
        commentTokens: {line: "#"}
      }
    };

    var yaml$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        yaml: yaml
    });

    function mkZ80(ez80) {
      var keywords1, keywords2;
      if (ez80) {
        keywords1 = /^(exx?|(ld|cp)([di]r?)?|[lp]ea|pop|push|ad[cd]|cpl|daa|dec|inc|neg|sbc|sub|and|bit|[cs]cf|x?or|res|set|r[lr]c?a?|r[lr]d|s[lr]a|srl|djnz|nop|[de]i|halt|im|in([di]mr?|ir?|irx|2r?)|ot(dmr?|[id]rx|imr?)|out(0?|[di]r?|[di]2r?)|tst(io)?|slp)(\.([sl]?i)?[sl])?\b/i;
        keywords2 = /^(((call|j[pr]|rst|ret[in]?)(\.([sl]?i)?[sl])?)|(rs|st)mix)\b/i;
      } else {
        keywords1 = /^(exx?|(ld|cp|in)([di]r?)?|pop|push|ad[cd]|cpl|daa|dec|inc|neg|sbc|sub|and|bit|[cs]cf|x?or|res|set|r[lr]c?a?|r[lr]d|s[lr]a|srl|djnz|nop|rst|[de]i|halt|im|ot[di]r|out[di]?)\b/i;
        keywords2 = /^(call|j[pr]|ret[in]?|b_?(call|jump))\b/i;
      }

      var variables1 = /^(af?|bc?|c|de?|e|hl?|l|i[xy]?|r|sp)\b/i;
      var variables2 = /^(n?[zc]|p[oe]?|m)\b/i;
      var errors = /^([hl][xy]|i[xy][hl]|slia|sll)\b/i;
      var numbers = /^([\da-f]+h|[0-7]+o|[01]+b|\d+d?)\b/i;

      return {
        startState: function() {
          return {
            context: 0
          };
        },
        token: function(stream, state) {
          if (!stream.column())
            state.context = 0;

          if (stream.eatSpace())
            return null;

          var w;

          if (stream.eatWhile(/\w/)) {
            if (ez80 && stream.eat('.')) {
              stream.eatWhile(/\w/);
            }
            w = stream.current();

            if (stream.indentation()) {
              if ((state.context == 1 || state.context == 4) && variables1.test(w)) {
                state.context = 4;
                return 'variable';
              }

              if (state.context == 2 && variables2.test(w)) {
                state.context = 4;
                return 'variableName.special';
              }

              if (keywords1.test(w)) {
                state.context = 1;
                return 'keyword';
              } else if (keywords2.test(w)) {
                state.context = 2;
                return 'keyword';
              } else if (state.context == 4 && numbers.test(w)) {
                return 'number';
              }

              if (errors.test(w))
                return 'error';
            } else if (stream.match(numbers)) {
              return 'number';
            } else {
              return null;
            }
          } else if (stream.eat(';')) {
            stream.skipToEnd();
            return 'comment';
          } else if (stream.eat('"')) {
            while (w = stream.next()) {
              if (w == '"')
                break;

              if (w == '\\')
                stream.next();
            }
            return 'string';
          } else if (stream.eat('\'')) {
            if (stream.match(/\\?.'/))
              return 'number';
          } else if (stream.eat('.') || stream.sol() && stream.eat('#')) {
            state.context = 5;

            if (stream.eatWhile(/\w/))
              return 'def';
          } else if (stream.eat('$')) {
            if (stream.eatWhile(/[\da-f]/i))
              return 'number';
          } else if (stream.eat('%')) {
            if (stream.eatWhile(/[01]/))
              return 'number';
          } else {
            stream.next();
          }
          return null;
        }
      };
    }
    const z80 = mkZ80(false);
    const ez80 = mkZ80(true);

    var z80$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        z80: z80,
        ez80: ez80
    });

    function mkParser(lang) {
      return {
        startState: startStateFn,
        copyState: copyStateFn,
        token: produceTokenFunction(lang),
        languageData: {
          commentTokens: {line: "#", block: {open: "/*", close: "*/"}}
        }
      }
    }

    const mscgen = mkParser({
      "keywords" : ["msc"],
      "options" : ["hscale", "width", "arcgradient", "wordwraparcs"],
      "constants" : ["true", "false", "on", "off"],
      "attributes" : ["label", "idurl", "id", "url", "linecolor", "linecolour", "textcolor", "textcolour", "textbgcolor", "textbgcolour", "arclinecolor", "arclinecolour", "arctextcolor", "arctextcolour", "arctextbgcolor", "arctextbgcolour", "arcskip"],
      "brackets" : ["\\{", "\\}"], // [ and  ] are brackets too, but these get handled in with lists
      "arcsWords" : ["note", "abox", "rbox", "box"],
      "arcsOthers" : ["\\|\\|\\|", "\\.\\.\\.", "---", "--", "<->", "==", "<<=>>", "<=>", "\\.\\.", "<<>>", "::", "<:>", "->", "=>>", "=>", ">>", ":>", "<-", "<<=", "<=", "<<", "<:", "x-", "-x"],
      "singlecomment" : ["//", "#"],
      "operators" : ["="]
    });

    const msgenny = mkParser({
      "keywords" : null,
      "options" : ["hscale", "width", "arcgradient", "wordwraparcs", "wordwrapentities", "watermark"],
      "constants" : ["true", "false", "on", "off", "auto"],
      "attributes" : null,
      "brackets" : ["\\{", "\\}"],
      "arcsWords" : ["note", "abox", "rbox", "box", "alt", "else", "opt", "break", "par", "seq", "strict", "neg", "critical", "ignore", "consider", "assert", "loop", "ref", "exc"],
      "arcsOthers" : ["\\|\\|\\|", "\\.\\.\\.", "---", "--", "<->", "==", "<<=>>", "<=>", "\\.\\.", "<<>>", "::", "<:>", "->", "=>>", "=>", ">>", ":>", "<-", "<<=", "<=", "<<", "<:", "x-", "-x"],
      "singlecomment" : ["//", "#"],
      "operators" : ["="]
    });

    const xu = mkParser({
      "keywords" : ["msc", "xu"],
      "options" : ["hscale", "width", "arcgradient", "wordwraparcs", "wordwrapentities", "watermark"],
      "constants" : ["true", "false", "on", "off", "auto"],
      "attributes" : ["label", "idurl", "id", "url", "linecolor", "linecolour", "textcolor", "textcolour", "textbgcolor", "textbgcolour", "arclinecolor", "arclinecolour", "arctextcolor", "arctextcolour", "arctextbgcolor", "arctextbgcolour", "arcskip", "title", "deactivate", "activate", "activation"],
      "brackets" : ["\\{", "\\}"],  // [ and  ] are brackets too, but these get handled in with lists
      "arcsWords" : ["note", "abox", "rbox", "box", "alt", "else", "opt", "break", "par", "seq", "strict", "neg", "critical", "ignore", "consider", "assert", "loop", "ref", "exc"],
      "arcsOthers" : ["\\|\\|\\|", "\\.\\.\\.", "---", "--", "<->", "==", "<<=>>", "<=>", "\\.\\.", "<<>>", "::", "<:>", "->", "=>>", "=>", ">>", ":>", "<-", "<<=", "<=", "<<", "<:", "x-", "-x"],
      "singlecomment" : ["//", "#"],
      "operators" : ["="]
    });

    function wordRegexpBoundary(pWords) {
      return new RegExp("^\\b(" + pWords.join("|") + ")\\b", "i");
    }

    function wordRegexp(pWords) {
      return new RegExp("^(?:" + pWords.join("|") + ")", "i");
    }

    function startStateFn() {
      return {
        inComment : false,
        inString : false,
        inAttributeList : false,
        inScript : false
      };
    }

    function copyStateFn(pState) {
      return {
        inComment : pState.inComment,
        inString : pState.inString,
        inAttributeList : pState.inAttributeList,
        inScript : pState.inScript
      };
    }

    function produceTokenFunction(pConfig) {
      return function(pStream, pState) {
        if (pStream.match(wordRegexp(pConfig.brackets), true, true)) {
          return "bracket";
        }
        /* comments */
        if (!pState.inComment) {
          if (pStream.match(/\/\*[^\*\/]*/, true, true)) {
            pState.inComment = true;
            return "comment";
          }
          if (pStream.match(wordRegexp(pConfig.singlecomment), true, true)) {
            pStream.skipToEnd();
            return "comment";
          }
        }
        if (pState.inComment) {
          if (pStream.match(/[^\*\/]*\*\//, true, true))
            pState.inComment = false;
          else
            pStream.skipToEnd();
          return "comment";
        }
        /* strings */
        if (!pState.inString && pStream.match(/\"(\\\"|[^\"])*/, true, true)) {
          pState.inString = true;
          return "string";
        }
        if (pState.inString) {
          if (pStream.match(/[^\"]*\"/, true, true))
            pState.inString = false;
          else
            pStream.skipToEnd();
          return "string";
        }
        /* keywords & operators */
        if (!!pConfig.keywords && pStream.match(wordRegexpBoundary(pConfig.keywords), true, true))
          return "keyword";

        if (pStream.match(wordRegexpBoundary(pConfig.options), true, true))
          return "keyword";

        if (pStream.match(wordRegexpBoundary(pConfig.arcsWords), true, true))
          return "keyword";

        if (pStream.match(wordRegexp(pConfig.arcsOthers), true, true))
          return "keyword";

        if (!!pConfig.operators && pStream.match(wordRegexp(pConfig.operators), true, true))
          return "operator";

        if (!!pConfig.constants && pStream.match(wordRegexp(pConfig.constants), true, true))
          return "variable";

        /* attribute lists */
        if (!pConfig.inAttributeList && !!pConfig.attributes && pStream.match('[', true, true)) {
          pConfig.inAttributeList = true;
          return "bracket";
        }
        if (pConfig.inAttributeList) {
          if (pConfig.attributes !== null && pStream.match(wordRegexpBoundary(pConfig.attributes), true, true)) {
            return "attribute";
          }
          if (pStream.match(']', true, true)) {
            pConfig.inAttributeList = false;
            return "bracket";
          }
        }

        pStream.next();
        return null
      };
    }

    var mscgen$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        mscgen: mscgen,
        msgenny: msgenny,
        xu: xu
    });

    var kKeywords = [
      "align",
      "block",
      "br(_if|_table|_on_(cast|data|func|i31|null))?",
      "call(_indirect|_ref)?",
      "current_memory",
      "\\bdata\\b",
      "catch(_all)?",
      "delegate",
      "drop",
      "elem",
      "else",
      "end",
      "export",
      "\\bextern\\b",
      "\\bfunc\\b",
      "global(\\.(get|set))?",
      "if",
      "import",
      "local(\\.(get|set|tee))?",
      "loop",
      "module",
      "mut",
      "nop",
      "offset",
      "param",
      "result",
      "rethrow",
      "return(_call(_indirect|_ref)?)?",
      "select",
      "start",
      "table(\\.(size|get|set|size|grow|fill|init|copy))?",
      "then",
      "throw",
      "try",
      "type",
      "unreachable",
      "unwind",

      // Numeric opcodes.
      "i(32|64)\\.(store(8|16)|(load(8|16)_[su]))",
      "i64\\.(load32_[su]|store32)",
      "[fi](32|64)\\.(const|load|store)",
      "f(32|64)\\.(abs|add|ceil|copysign|div|eq|floor|[gl][et]|max|min|mul|nearest|neg?|sqrt|sub|trunc)",
      "i(32|64)\\.(a[dn]d|c[lt]z|(div|rem)_[su]|eqz?|[gl][te]_[su]|mul|ne|popcnt|rot[lr]|sh(l|r_[su])|sub|x?or)",
      "i64\\.extend_[su]_i32",
      "i32\\.wrap_i64",
      "i(32|64)\\.trunc_f(32|64)_[su]",
      "f(32|64)\\.convert_i(32|64)_[su]",
      "f64\\.promote_f32",
      "f32\\.demote_f64",
      "f32\\.reinterpret_i32",
      "i32\\.reinterpret_f32",
      "f64\\.reinterpret_i64",
      "i64\\.reinterpret_f64",
      // Atomics.
      "memory(\\.((atomic\\.(notify|wait(32|64)))|grow|size))?",
      "i64\.atomic\\.(load32_u|store32|rmw32\\.(a[dn]d|sub|x?or|(cmp)?xchg)_u)",
      "i(32|64)\\.atomic\\.(load((8|16)_u)?|store(8|16)?|rmw(\\.(a[dn]d|sub|x?or|(cmp)?xchg)|(8|16)\\.(a[dn]d|sub|x?or|(cmp)?xchg)_u))",
      // SIMD.
      "v128\\.load(8x8|16x4|32x2)_[su]",
      "v128\\.load(8|16|32|64)_splat",
      "v128\\.(load|store)(8|16|32|64)_lane",
      "v128\\.load(32|64)_zero",
      "v128\.(load|store|const|not|andnot|and|or|xor|bitselect|any_true)",
      "i(8x16|16x8)\\.(extract_lane_[su]|(add|sub)_sat_[su]|avgr_u)",
      "i(8x16|16x8|32x4|64x2)\\.(neg|add|sub|abs|shl|shr_[su]|all_true|bitmask|eq|ne|[lg][te]_s)",
      "(i(8x16|16x8|32x4|64x2)|f(32x4|64x2))\.(splat|replace_lane)",
      "i(8x16|16x8|32x4)\\.(([lg][te]_u)|((min|max)_[su]))",
      "f(32x4|64x2)\\.(neg|add|sub|abs|nearest|eq|ne|[lg][te]|sqrt|mul|div|min|max|ceil|floor|trunc)",
      "[fi](32x4|64x2)\\.extract_lane",
      "i8x16\\.(shuffle|swizzle|popcnt|narrow_i16x8_[su])",
      "i16x8\\.(narrow_i32x4_[su]|mul|extadd_pairwise_i8x16_[su]|q15mulr_sat_s)",
      "i16x8\\.(extend|extmul)_(low|high)_i8x16_[su]",
      "i32x4\\.(mul|dot_i16x8_s|trunc_sat_f64x2_[su]_zero)",
      "i32x4\\.((extend|extmul)_(low|high)_i16x8_|trunc_sat_f32x4_|extadd_pairwise_i16x8_)[su]",
      "i64x2\\.(mul|(extend|extmul)_(low|high)_i32x4_[su])",
      "f32x4\\.(convert_i32x4_[su]|demote_f64x2_zero)",
      "f64x2\\.(promote_low_f32x4|convert_low_i32x4_[su])",
      // Reference types, function references, and GC.
      "\\bany\\b",
      "array\\.len",
      "(array|struct)(\\.(new_(default_)?with_rtt|get(_[su])?|set))?",
      "\\beq\\b",
      "field",
      "i31\\.(new|get_[su])",
      "\\bnull\\b",
      "ref(\\.(([ai]s_(data|func|i31))|cast|eq|func|(is_|as_non_)?null|test))?",
      "rtt(\\.(canon|sub))?",
    ];

    const wast = simpleMode({
      start: [
        {regex: new RegExp(kKeywords.join('|')), token: "keyword"},
        {regex: /\b((any|data|eq|extern|i31|func)ref|[fi](32|64)|i(8|16))\b/, token: "atom"},
        {regex: /\b(funcref|externref|[fi](32|64))\b/, token: "atom"},
        {regex: /\$([a-zA-Z0-9_`\+\-\*\/\\\^~=<>!\?@#$%&|:\.]+)/, token: "variable"},
        {regex: /"(?:[^"\\\x00-\x1f\x7f]|\\[nt\\'"]|\\[0-9a-fA-F][0-9a-fA-F])*"/, token: "string"},
        {regex: /\(;.*?/, token: "comment", next: "comment"},
        {regex: /;;.*$/, token: "comment"},
        {regex: /\(/, indent: true},
        {regex: /\)/, dedent: true},
      ],

      comment: [
        {regex: /.*?;\)/, token: "comment", next: "start"},
        {regex: /.*/, token: "comment"},
      ],

      meta: {
        dontIndentStates: ['comment'],
      },
    });

    // https://github.com/WebAssembly/design/issues/981 mentions text/webassembly,
    // which seems like a reasonable choice, although it's not standard right now.

    var wast$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        wast: wast
    });

}());
